
C:\Users\jdaily\AppData\Local\Temp\arduino\sketches\473707034BEA3019E2D4EB1FB9F192FB/CANStreamOverWiFi.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
  Serial.print("To see this page in action, open a browser to http://");
  Serial.println(ip);

}

void printMacAddress(byte mac[]) {
       0:	00 00 03 20 d1 01 00 00 d9 90 00 00 95 90 00 00     ... ............
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
      10:	95 90 00 00 95 90 00 00 95 90 00 00 95 90 00 00     ................
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
      20:	95 90 00 00 95 90 00 00 95 90 00 00 d9 90 00 00     ................
    Serial.print(mac[i], HEX);
    if (i > 0) {
      Serial.print(":");
    }
  }
  Serial.println();
      30:	d9 90 00 00 95 90 00 00 1d 8c 00 00 21 8c 00 00     ............!...
    if (mac[i] < 16) {
      40:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
    Serial.print(mac[i], HEX);
      50:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
		_dmaTX->source((uint8_t&)_transferWriteFill);   // maybe have setable value
		DMAChanneltransferCount(_dmaTX, count-1);
	}	
	if (retbuf) {
		// On T3.5 must handle SPI1/2 differently as only one DMA channel
		_dmaRX->TCD->ATTR_SRC = 0;		//Make sure set for 8 bit mode...
      60:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
	// Use a buffer (array of data) as the data destination.  Typically a
	// buffer for receiving data is used.
	void destinationBuffer(volatile signed char p[], unsigned int len) {
		destinationBuffer((volatile uint8_t *)p, len); }
	void destinationBuffer(volatile unsigned char p[], unsigned int len) {
		TCD->DADDR = p;
      70:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
      80:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
	port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_CLR_TXF | SPI_MCR_PCSIS(0x1F);

	port().SR = 0xFF0F0000;

	// Lets try to output the first byte to make sure that we are in 8 bit mode...
	port().PUSHR = dma_first_byte | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;	
      90:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
      a0:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
		_dmaTX->enable();
		_dmaRX->enable();
	}

	_dma_state = DMAState::active;
	return true;
      b0:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
		if (!initDMAChannels())
      c0:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
	if (count == 0) return;
      d0:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
		event_responder.triggerEvent();
      e0:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
      f0:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
		port().RSER =  SPI_RSER_RFDF_RE | SPI_RSER_RFDF_DIRS ;
     100:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
		  | DMA_TCD_BITER_ELINKYES_LINKCH(channel) | DMA_TCD_BITER_ELINKYES_ELINK;
     110:	d9 90 00 00 b1 97 00 00 d9 90 00 00 d9 90 00 00     ................
		ch.TCD->BITER = (ch.TCD->BITER & ~DMA_TCD_BITER_ELINKYES_LINKCH_MASK)
     120:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
		DMA_SERQ = channel;
     130:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
		_dmaRX->TCD->ATTR_SRC = 0;		//Make sure set for 8 bit mode...
     140:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
     150:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
		tcd->BITER = len & 0x7fff;
     160:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
     170:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
		TCD->ATTR_SRC = 0;
     180:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
     190:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
	tcd->CITER = tcd->BITER; 
     1a0:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
     1b0:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
     1c0:	d9 90 00 00 d9 90 00 00 d9 90 00 00 d9 90 00 00     ................

000001d0 <ResetHandler>:
     1d0:	4b5f      	ldr	r3, [pc, #380]	; (350 <ResetHandler+0x180>)
     1d2:	f24c 5220 	movw	r2, #50464	; 0xc520
     1d6:	b510      	push	{r4, lr}
		event_responder.triggerEvent();
     1d8:	81da      	strh	r2, [r3, #14]
     1da:	f64d 1228 	movw	r2, #55592	; 0xd928
     1de:	81da      	strh	r2, [r3, #14]
		return true;
     1e0:	bf00      	nop
     1e2:	bf00      	nop
     1e4:	f008 ff7c 	bl	90e0 <startup_early_hook>
     1e8:	4b5a      	ldr	r3, [pc, #360]	; (354 <ResetHandler+0x184>)
     1ea:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
     1ee:	631a      	str	r2, [r3, #48]	; 0x30
     1f0:	4a59      	ldr	r2, [pc, #356]	; (358 <ResetHandler+0x188>)
     1f2:	639a      	str	r2, [r3, #56]	; 0x38
     1f4:	4a59      	ldr	r2, [pc, #356]	; (35c <ResetHandler+0x18c>)
     1f6:	63da      	str	r2, [r3, #60]	; 0x3c
     1f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1fc:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
     200:	f8c3 2d88 	str.w	r2, [r3, #3464]	; 0xd88
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     204:	f503 23e8 	add.w	r3, r3, #475136	; 0x74000
     208:	4a55      	ldr	r2, [pc, #340]	; (360 <ResetHandler+0x190>)
     20a:	601a      	str	r2, [r3, #0]
		RTC_SR = 0;
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     20c:	4b55      	ldr	r3, [pc, #340]	; (364 <ResetHandler+0x194>)
     20e:	789a      	ldrb	r2, [r3, #2]
     210:	0711      	lsls	r1, r2, #28
     212:	d503      	bpl.n	21c <ResetHandler+0x4c>
     214:	789a      	ldrb	r2, [r3, #2]
     216:	f042 0208 	orr.w	r2, r2, #8
     21a:	709a      	strb	r2, [r3, #2]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     21c:	4b52      	ldr	r3, [pc, #328]	; (368 <ResetHandler+0x198>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     21e:	4853      	ldr	r0, [pc, #332]	; (36c <ResetHandler+0x19c>)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     220:	22aa      	movs	r2, #170	; 0xaa
     222:	701a      	strb	r2, [r3, #0]
	while (dest < &_edata) *dest++ = *src++;
     224:	4b52      	ldr	r3, [pc, #328]	; (370 <ResetHandler+0x1a0>)
     226:	1cda      	adds	r2, r3, #3
     228:	1a12      	subs	r2, r2, r0
     22a:	1ec1      	subs	r1, r0, #3
     22c:	f022 0203 	bic.w	r2, r2, #3
     230:	4299      	cmp	r1, r3
     232:	bf88      	it	hi
     234:	2200      	movhi	r2, #0
     236:	494f      	ldr	r1, [pc, #316]	; (374 <ResetHandler+0x1a4>)
     238:	f008 fe58 	bl	8eec <memcpy>
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     23c:	4b4e      	ldr	r3, [pc, #312]	; (378 <ResetHandler+0x1a8>)
     23e:	484f      	ldr	r0, [pc, #316]	; (37c <ResetHandler+0x1ac>)
     240:	1cda      	adds	r2, r3, #3
     242:	1a12      	subs	r2, r2, r0
     244:	1ec1      	subs	r1, r0, #3
     246:	f022 0203 	bic.w	r2, r2, #3
     24a:	4299      	cmp	r1, r3
     24c:	bf88      	it	hi
     24e:	2200      	movhi	r2, #0
     250:	2100      	movs	r1, #0
     252:	f00b fd41 	bl	bcd8 <memset>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     256:	494a      	ldr	r1, [pc, #296]	; (380 <ResetHandler+0x1b0>)
     258:	484a      	ldr	r0, [pc, #296]	; (384 <ResetHandler+0x1b4>)
     25a:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
     25e:	f008 fe45 	bl	8eec <memcpy>
     262:	4b49      	ldr	r3, [pc, #292]	; (388 <ResetHandler+0x1b8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     264:	4a49      	ldr	r2, [pc, #292]	; (38c <ResetHandler+0x1bc>)
     266:	2180      	movs	r1, #128	; 0x80
     268:	f803 1b01 	strb.w	r1, [r3], #1
     26c:	4293      	cmp	r3, r2
     26e:	d1fb      	bne.n	268 <ResetHandler+0x98>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     270:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     274:	4a43      	ldr	r2, [pc, #268]	; (384 <ResetHandler+0x1b4>)
     276:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27a:	4b45      	ldr	r3, [pc, #276]	; (390 <ResetHandler+0x1c0>)
     27c:	228a      	movs	r2, #138	; 0x8a
     27e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     280:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     284:	2224      	movs	r2, #36	; 0x24
     286:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     288:	22a0      	movs	r2, #160	; 0xa0
     28a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28c:	799a      	ldrb	r2, [r3, #6]
     28e:	0792      	lsls	r2, r2, #30
     290:	d5fc      	bpl.n	28c <ResetHandler+0xbc>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     292:	799a      	ldrb	r2, [r3, #6]
     294:	06d4      	lsls	r4, r2, #27
     296:	d4fc      	bmi.n	292 <ResetHandler+0xc2>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     298:	4a3e      	ldr	r2, [pc, #248]	; (394 <ResetHandler+0x1c4>)
     29a:	7993      	ldrb	r3, [r2, #6]
     29c:	f003 030c 	and.w	r3, r3, #12
     2a0:	2b08      	cmp	r3, #8
     2a2:	d1fa      	bne.n	29a <ResetHandler+0xca>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a4:	4b30      	ldr	r3, [pc, #192]	; (368 <ResetHandler+0x198>)
     2a6:	2260      	movs	r2, #96	; 0x60
     2a8:	705a      	strb	r2, [r3, #1]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2aa:	78da      	ldrb	r2, [r3, #3]
     2ac:	2a80      	cmp	r2, #128	; 0x80
     2ae:	d1fc      	bne.n	2aa <ResetHandler+0xda>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b0:	4b38      	ldr	r3, [pc, #224]	; (394 <ResetHandler+0x1c4>)
     2b2:	2201      	movs	r2, #1
     2b4:	711a      	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2b6:	225d      	movs	r2, #93	; 0x5d
     2b8:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2ba:	799a      	ldrb	r2, [r3, #6]
     2bc:	0690      	lsls	r0, r2, #26
     2be:	d5fc      	bpl.n	2ba <ResetHandler+0xea>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c0:	799a      	ldrb	r2, [r3, #6]
     2c2:	0651      	lsls	r1, r2, #25
     2c4:	d5fc      	bpl.n	2c0 <ResetHandler+0xf0>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2c6:	4a23      	ldr	r2, [pc, #140]	; (354 <ResetHandler+0x184>)
     2c8:	4933      	ldr	r1, [pc, #204]	; (398 <ResetHandler+0x1c8>)
     2ca:	6451      	str	r1, [r2, #68]	; 0x44
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2cc:	2100      	movs	r1, #0
     2ce:	6491      	str	r1, [r2, #72]	; 0x48
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d0:	2120      	movs	r1, #32
     2d2:	7019      	strb	r1, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2d4:	492f      	ldr	r1, [pc, #188]	; (394 <ResetHandler+0x1c4>)
     2d6:	798b      	ldrb	r3, [r1, #6]
     2d8:	f003 030c 	and.w	r3, r3, #12
     2dc:	2b0c      	cmp	r3, #12
     2de:	d1fa      	bne.n	2d6 <ResetHandler+0x106>
	// now we're in PEE mode
	// trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e0:	4b2e      	ldr	r3, [pc, #184]	; (39c <ResetHandler+0x1cc>)
     2e2:	6053      	str	r3, [r2, #4]
#endif

#if defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started.  For Teensy 3.6
	// we don't do this early.  See comment above about slow rising power.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     2e4:	4a2e      	ldr	r2, [pc, #184]	; (3a0 <ResetHandler+0x1d0>)
     2e6:	6913      	ldr	r3, [r2, #16]
     2e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     2ec:	d103      	bne.n	2f6 <ResetHandler+0x126>
		RTC_SR = 0;
     2ee:	6153      	str	r3, [r2, #20]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     2f0:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     2f4:	6113      	str	r3, [r2, #16]
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     2fa:	4a2a      	ldr	r2, [pc, #168]	; (3a4 <ResetHandler+0x1d4>)
     2fc:	615a      	str	r2, [r3, #20]
	SYST_CVR = 0;
     2fe:	2200      	movs	r2, #0
     300:	619a      	str	r2, [r3, #24]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     302:	2207      	movs	r2, #7
     304:	611a      	str	r2, [r3, #16]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     306:	4a28      	ldr	r2, [pc, #160]	; (3a8 <ResetHandler+0x1d8>)
     308:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20

	//init_pins();
	__enable_irq();
     30c:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     30e:	f009 f841 	bl	9394 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     312:	4b23      	ldr	r3, [pc, #140]	; (3a0 <ResetHandler+0x1d0>)
     314:	695b      	ldr	r3, [r3, #20]
     316:	07da      	lsls	r2, r3, #31
     318:	d505      	bpl.n	326 <ResetHandler+0x156>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     31a:	4824      	ldr	r0, [pc, #144]	; (3ac <ResetHandler+0x1dc>)
     31c:	f009 f82e 	bl	937c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     320:	4b23      	ldr	r3, [pc, #140]	; (3b0 <ResetHandler+0x1e0>)
     322:	4a24      	ldr	r2, [pc, #144]	; (3b4 <ResetHandler+0x1e4>)
     324:	61da      	str	r2, [r3, #28]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     326:	4b24      	ldr	r3, [pc, #144]	; (3b8 <ResetHandler+0x1e8>)
     328:	781b      	ldrb	r3, [r3, #0]
     32a:	065b      	lsls	r3, r3, #25
     32c:	d509      	bpl.n	342 <ResetHandler+0x172>
     32e:	4c20      	ldr	r4, [pc, #128]	; (3b0 <ResetHandler+0x1e0>)
     330:	4b20      	ldr	r3, [pc, #128]	; (3b4 <ResetHandler+0x1e4>)
     332:	69e2      	ldr	r2, [r4, #28]
     334:	429a      	cmp	r2, r3
     336:	d104      	bne.n	342 <ResetHandler+0x172>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     338:	481c      	ldr	r0, [pc, #112]	; (3ac <ResetHandler+0x1dc>)
     33a:	f009 f81f 	bl	937c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     33e:	2300      	movs	r3, #0
     340:	61e3      	str	r3, [r4, #28]
	}
#endif

	startup_late_hook();
     342:	f008 fed3 	bl	90ec <startup_late_hook>
	__libc_init_array();
     346:	f00b fdbd 	bl	bec4 <__libc_init_array>

	main();
     34a:	f008 fdc7 	bl	8edc <main>
	
	while (1) ;
     34e:	e7fe      	b.n	34e <ResetHandler+0x17e>
     350:	40052000 	.word	0x40052000
     354:	40048000 	.word	0x40048000
     358:	00043f82 	.word	0x00043f82
     35c:	2b000001 	.word	0x2b000001
     360:	85000003 	.word	0x85000003
     364:	4007d000 	.word	0x4007d000
     368:	4007e000 	.word	0x4007e000
     36c:	1fff0730 	.word	0x1fff0730
     370:	1fff15d0 	.word	0x1fff15d0
     374:	000126a0 	.word	0x000126a0
     378:	1fff7f24 	.word	0x1fff7f24
     37c:	1fff15d0 	.word	0x1fff15d0
     380:	00000000 	.word	0x00000000
     384:	1fff0200 	.word	0x1fff0200
     388:	e000e400 	.word	0xe000e400
     38c:	e000e464 	.word	0xe000e464
     390:	40065000 	.word	0x40065000
     394:	40064000 	.word	0x40064000
     398:	02060000 	.word	0x02060000
     39c:	000710c0 	.word	0x000710c0
     3a0:	4003d000 	.word	0x4003d000
     3a4:	0002bf1f 	.word	0x0002bf1f
     3a8:	20200000 	.word	0x20200000
     3ac:	64f700d0 	.word	0x64f700d0
     3b0:	4003e000 	.word	0x4003e000
     3b4:	5a94c3a5 	.word	0x5a94c3a5
     3b8:	4007f000 	.word	0x4007f000
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <register_tm_clones>:
     410:	4805      	ldr	r0, [pc, #20]	; (428 <register_tm_clones+0x18>)
     412:	4b06      	ldr	r3, [pc, #24]	; (42c <register_tm_clones+0x1c>)
     414:	1a1b      	subs	r3, r3, r0
     416:	0fd9      	lsrs	r1, r3, #31
     418:	eb01 01a3 	add.w	r1, r1, r3, asr #2
     41c:	1049      	asrs	r1, r1, #1
     41e:	d002      	beq.n	426 <register_tm_clones+0x16>
     420:	4b03      	ldr	r3, [pc, #12]	; (430 <register_tm_clones+0x20>)
     422:	b103      	cbz	r3, 426 <register_tm_clones+0x16>
     424:	4718      	bx	r3
     426:	4770      	bx	lr
     428:	1fff15d0 	.word	0x1fff15d0
     42c:	1fff15d0 	.word	0x1fff15d0
     430:	00000000 	.word	0x00000000

00000434 <frame_dummy>:
     434:	b508      	push	{r3, lr}
     436:	4b05      	ldr	r3, [pc, #20]	; (44c <frame_dummy+0x18>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4905      	ldr	r1, [pc, #20]	; (450 <frame_dummy+0x1c>)
     43c:	4805      	ldr	r0, [pc, #20]	; (454 <frame_dummy+0x20>)
     43e:	f3af 8000 	nop.w
     442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     446:	f7ff bfe3 	b.w	410 <register_tm_clones>
     44a:	bf00      	nop
     44c:	00000000 	.word	0x00000000
     450:	1fff15d0 	.word	0x1fff15d0
     454:	00012698 	.word	0x00012698

00000458 <CANListener::frameHandler(CAN_message_t&, int, unsigned char)>:
#define SIZE_LISTENERS 4

class CANListener {
  public:
    CANListener () { callbacksActive = 0; }
    virtual bool frameHandler (CAN_message_t &frame, int mailbox, uint8_t controller) { return false; }
     458:	2000      	movs	r0, #0
     45a:	4770      	bx	lr

0000045c <flexcan_isr_can0()>:
  if ( _CAN0 ) _CAN0->flexcan_interrupt();
}
#endif
#if defined(__MK66FX1M0__)
static void flexcan_isr_can0() {
  if ( _CAN0 ) _CAN0->flexcan_interrupt();
     45c:	4b03      	ldr	r3, [pc, #12]	; (46c <flexcan_isr_can0()+0x10>)
     45e:	6818      	ldr	r0, [r3, #0]
     460:	b110      	cbz	r0, 468 <flexcan_isr_can0()+0xc>
     462:	6803      	ldr	r3, [r0, #0]
     464:	681b      	ldr	r3, [r3, #0]
     466:	4718      	bx	r3
}
     468:	4770      	bx	lr
     46a:	bf00      	nop
     46c:	1fff6dec 	.word	0x1fff6dec

00000470 <flexcan_isr_can1()>:
static void flexcan_isr_can1() {
  if ( _CAN1 ) _CAN1->flexcan_interrupt();
     470:	4b03      	ldr	r3, [pc, #12]	; (480 <flexcan_isr_can1()+0x10>)
     472:	6818      	ldr	r0, [r3, #0]
     474:	b110      	cbz	r0, 47c <flexcan_isr_can1()+0xc>
     476:	6803      	ldr	r3, [r0, #0]
     478:	681b      	ldr	r3, [r3, #0]
     47a:	4718      	bx	r3
}
     47c:	4770      	bx	lr
     47e:	bf00      	nop
     480:	1fff6df0 	.word	0x1fff6df0

00000484 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>:
  currentBitrate = baud;
     484:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     48c:	4696      	mov	lr, r2
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     48e:	4a4a      	ldr	r2, [pc, #296]	; (5b8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
  currentBitrate = baud;
     490:	f8c0 1910 	str.w	r1, [r0, #2320]	; 0x910
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     494:	6814      	ldr	r4, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     496:	6813      	ldr	r3, [r2, #0]
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     498:	4d48      	ldr	r5, [pc, #288]	; (5bc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x138>)
     49a:	fbb5 f0f1 	udiv	r0, r5, r1
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     49e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;
     4a2:	fbb5 f5f0 	udiv	r5, r5, r0
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     4a6:	b090      	sub	sp, #64	; 0x40
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;
     4a8:	1b4d      	subs	r5, r1, r5
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     4aa:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     4ae:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     4b0:	6813      	ldr	r3, [r2, #0]
     4b2:	01de      	lsls	r6, r3, #7
     4b4:	d5fc      	bpl.n	4b0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x2c>
  while (result > 5) {
     4b6:	2805      	cmp	r0, #5
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     4b8:	f04f 0c00 	mov.w	ip, #0
  while (result > 5) {
     4bc:	d922      	bls.n	504 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x80>
      error = baud - (clockFreq / (result * (divisor + 1)));
     4be:	4e3f      	ldr	r6, [pc, #252]	; (5bc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x138>)
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     4c0:	4663      	mov	r3, ip
    divisor++;
     4c2:	1c5a      	adds	r2, r3, #1
     4c4:	3302      	adds	r3, #2
    result = clockFreq / baud / (divisor + 1);
     4c6:	fbb0 f7f3 	udiv	r7, r0, r3
    if (result <= 25) {
     4ca:	2f19      	cmp	r7, #25
      error = baud - (clockFreq / (result * (divisor + 1)));
     4cc:	fb07 f303 	mul.w	r3, r7, r3
    if (result <= 25) {
     4d0:	d80f      	bhi.n	4f2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x6e>
      error = baud - (clockFreq / (result * (divisor + 1)));
     4d2:	fbb6 f3f3 	udiv	r3, r6, r3
     4d6:	1acb      	subs	r3, r1, r3
     4d8:	2b00      	cmp	r3, #0
     4da:	bfb8      	it	lt
     4dc:	425b      	neglt	r3, r3
      if (error < bestError) {
     4de:	42ab      	cmp	r3, r5
     4e0:	da09      	bge.n	4f6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x72>
     4e2:	461d      	mov	r5, r3
        bestDivisor = divisor;
     4e4:	4694      	mov	ip, r2
      if ((error == bestError) && (result > 11) && (result < 19)) {
     4e6:	2f0b      	cmp	r7, #11
     4e8:	d906      	bls.n	4f8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x74>
     4ea:	2f12      	cmp	r7, #18
     4ec:	bf9c      	itt	ls
     4ee:	461d      	movls	r5, r3
     4f0:	4694      	movls	ip, r2
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     4f2:	4613      	mov	r3, r2
     4f4:	e7e5      	b.n	4c2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x3e>
      if ((error == bestError) && (result > 11) && (result < 19)) {
     4f6:	d0f6      	beq.n	4e6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x62>
  while (result > 5) {
     4f8:	2f05      	cmp	r7, #5
     4fa:	d8fa      	bhi.n	4f2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x6e>
  result = clockFreq / baud / (divisor + 1);
     4fc:	f10c 0301 	add.w	r3, ip, #1
     500:	fbb0 f0f3 	udiv	r0, r0, r3
  if ((result < 5) || (result > 25) || (bestError > 300)) {
     504:	3805      	subs	r0, #5
     506:	2814      	cmp	r0, #20
     508:	d848      	bhi.n	59c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x118>
     50a:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
     50e:	dc45      	bgt.n	59c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x118>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     510:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  uint8_t bitTimingTable[21][3] = {
     514:	4f2a      	ldr	r7, [pc, #168]	; (5c0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x13c>)
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     516:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 5b8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     51a:	f100 0340 	add.w	r3, r0, #64	; 0x40
     51e:	eb0d 0503 	add.w	r5, sp, r3
  uint8_t bitTimingTable[21][3] = {
     522:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     524:	466e      	mov	r6, sp
     526:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     528:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     52a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     52c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     52e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     530:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
     534:	c607      	stmia	r6!, {r0, r1, r2}
     536:	f826 3b02 	strh.w	r3, [r6], #2
     53a:	0c1b      	lsrs	r3, r3, #16
     53c:	7033      	strb	r3, [r6, #0]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     53e:	f815 3c3f 	ldrb.w	r3, [r5, #-63]
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     542:	f815 2c3e 	ldrb.w	r2, [r5, #-62]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     546:	f815 1c40 	ldrb.w	r1, [r5, #-64]
     54a:	04db      	lsls	r3, r3, #19
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     54c:	0412      	lsls	r2, r2, #16
     54e:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     552:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
     556:	4313      	orrs	r3, r2
     558:	f001 0207 	and.w	r2, r1, #7
     55c:	4313      	orrs	r3, r2
     55e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     562:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
     566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     56a:	f8c8 3004 	str.w	r3, [r8, #4]
  ( listen_only != LISTEN_ONLY ) ? FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_LOM : FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen-only mode */
     56e:	f8d8 3004 	ldr.w	r3, [r8, #4]
     572:	f1be 0f02 	cmp.w	lr, #2
     576:	bf14      	ite	ne
     578:	f023 0308 	bicne.w	r3, r3, #8
     57c:	f043 0308 	orreq.w	r3, r3, #8
     580:	f8c8 3004 	str.w	r3, [r8, #4]
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     584:	b93c      	cbnz	r4, 596 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x112>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     586:	4a0c      	ldr	r2, [pc, #48]	; (5b8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
     588:	6813      	ldr	r3, [r2, #0]
     58a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     58e:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     590:	6813      	ldr	r3, [r2, #0]
     592:	01db      	lsls	r3, r3, #7
     594:	d4fc      	bmi.n	590 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x10c>
}
     596:	b010      	add	sp, #64	; 0x40
     598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     59c:	2c00      	cmp	r4, #0
     59e:	d1fa      	bne.n	596 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x112>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     5a0:	4a05      	ldr	r2, [pc, #20]	; (5b8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
     5a2:	6813      	ldr	r3, [r2, #0]
     5a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     5a8:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     5aa:	6813      	ldr	r3, [r2, #0]
     5ac:	01d9      	lsls	r1, r3, #7
     5ae:	d4fc      	bmi.n	5aa <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x126>
}
     5b0:	b010      	add	sp, #64	; 0x40
     5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     5b6:	bf00      	nop
     5b8:	400a4000 	.word	0x400a4000
     5bc:	00f42400 	.word	0x00f42400
     5c0:	00011bf0 	.word	0x00011bf0

000005c4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>:
  currentBitrate = baud;
     5c4:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     5cc:	4696      	mov	lr, r2
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     5ce:	4a4a      	ldr	r2, [pc, #296]	; (6f8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
  currentBitrate = baud;
     5d0:	f8c0 1910 	str.w	r1, [r0, #2320]	; 0x910
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     5d4:	6814      	ldr	r4, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     5d6:	6813      	ldr	r3, [r2, #0]
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     5d8:	4d48      	ldr	r5, [pc, #288]	; (6fc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x138>)
     5da:	fbb5 f0f1 	udiv	r0, r5, r1
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     5de:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;
     5e2:	fbb5 f5f0 	udiv	r5, r5, r0
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     5e6:	b090      	sub	sp, #64	; 0x40
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;
     5e8:	1b4d      	subs	r5, r1, r5
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     5ea:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     5ee:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     5f0:	6813      	ldr	r3, [r2, #0]
     5f2:	01de      	lsls	r6, r3, #7
     5f4:	d5fc      	bpl.n	5f0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x2c>
  while (result > 5) {
     5f6:	2805      	cmp	r0, #5
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     5f8:	f04f 0c00 	mov.w	ip, #0
  while (result > 5) {
     5fc:	d922      	bls.n	644 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x80>
      error = baud - (clockFreq / (result * (divisor + 1)));
     5fe:	4e3f      	ldr	r6, [pc, #252]	; (6fc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x138>)
  uint32_t divisor = 0, bestDivisor = 0, result = clockFreq / baud / (divisor + 1);
     600:	4663      	mov	r3, ip
    divisor++;
     602:	1c5a      	adds	r2, r3, #1
     604:	3302      	adds	r3, #2
    result = clockFreq / baud / (divisor + 1);
     606:	fbb0 f7f3 	udiv	r7, r0, r3
    if (result <= 25) {
     60a:	2f19      	cmp	r7, #25
      error = baud - (clockFreq / (result * (divisor + 1)));
     60c:	fb07 f303 	mul.w	r3, r7, r3
    if (result <= 25) {
     610:	d80f      	bhi.n	632 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x6e>
      error = baud - (clockFreq / (result * (divisor + 1)));
     612:	fbb6 f3f3 	udiv	r3, r6, r3
     616:	1acb      	subs	r3, r1, r3
     618:	2b00      	cmp	r3, #0
     61a:	bfb8      	it	lt
     61c:	425b      	neglt	r3, r3
      if (error < bestError) {
     61e:	42ab      	cmp	r3, r5
     620:	da09      	bge.n	636 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x72>
     622:	461d      	mov	r5, r3
        bestDivisor = divisor;
     624:	4694      	mov	ip, r2
      if ((error == bestError) && (result > 11) && (result < 19)) {
     626:	2f0b      	cmp	r7, #11
     628:	d906      	bls.n	638 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x74>
     62a:	2f12      	cmp	r7, #18
     62c:	bf9c      	itt	ls
     62e:	461d      	movls	r5, r3
     630:	4694      	movls	ip, r2
FCTP_FUNC void FCTP_OPT::setBaudRate(uint32_t baud, FLEXCAN_RXTX listen_only) {
     632:	4613      	mov	r3, r2
     634:	e7e5      	b.n	602 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x3e>
      if ((error == bestError) && (result > 11) && (result < 19)) {
     636:	d0f6      	beq.n	626 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x62>
  while (result > 5) {
     638:	2f05      	cmp	r7, #5
     63a:	d8fa      	bhi.n	632 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x6e>
  result = clockFreq / baud / (divisor + 1);
     63c:	f10c 0301 	add.w	r3, ip, #1
     640:	fbb0 f0f3 	udiv	r0, r0, r3
  if ((result < 5) || (result > 25) || (bestError > 300)) {
     644:	3805      	subs	r0, #5
     646:	2814      	cmp	r0, #20
     648:	d848      	bhi.n	6dc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x118>
     64a:	f5b5 7f96 	cmp.w	r5, #300	; 0x12c
     64e:	dc45      	bgt.n	6dc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x118>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     650:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  uint8_t bitTimingTable[21][3] = {
     654:	4f2a      	ldr	r7, [pc, #168]	; (700 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x13c>)
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     656:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 6f8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     65a:	f100 0340 	add.w	r3, r0, #64	; 0x40
     65e:	eb0d 0503 	add.w	r5, sp, r3
  uint8_t bitTimingTable[21][3] = {
     662:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     664:	466e      	mov	r6, sp
     666:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     668:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     66a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     66c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     66e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
     670:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
     674:	c607      	stmia	r6!, {r0, r1, r2}
     676:	f826 3b02 	strh.w	r3, [r6], #2
     67a:	0c1b      	lsrs	r3, r3, #16
     67c:	7033      	strb	r3, [r6, #0]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     67e:	f815 3c3f 	ldrb.w	r3, [r5, #-63]
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     682:	f815 2c3e 	ldrb.w	r2, [r5, #-62]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     686:	f815 1c40 	ldrb.w	r1, [r5, #-64]
     68a:	04db      	lsls	r3, r3, #19
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     68c:	0412      	lsls	r2, r2, #16
     68e:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     692:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
     696:	4313      	orrs	r3, r2
     698:	f001 0207 	and.w	r2, r1, #7
     69c:	4313      	orrs	r3, r2
     69e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
     6a2:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
     6a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     6aa:	f8c8 3004 	str.w	r3, [r8, #4]
  ( listen_only != LISTEN_ONLY ) ? FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_LOM : FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen-only mode */
     6ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
     6b2:	f1be 0f02 	cmp.w	lr, #2
     6b6:	bf14      	ite	ne
     6b8:	f023 0308 	bicne.w	r3, r3, #8
     6bc:	f043 0308 	orreq.w	r3, r3, #8
     6c0:	f8c8 3004 	str.w	r3, [r8, #4]
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     6c4:	b93c      	cbnz	r4, 6d6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x112>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     6c6:	4a0c      	ldr	r2, [pc, #48]	; (6f8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
     6c8:	6813      	ldr	r3, [r2, #0]
     6ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     6ce:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     6d0:	6813      	ldr	r3, [r2, #0]
     6d2:	01db      	lsls	r3, r3, #7
     6d4:	d4fc      	bmi.n	6d0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x10c>
}
     6d6:	b010      	add	sp, #64	; 0x40
     6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     6dc:	2c00      	cmp	r4, #0
     6de:	d1fa      	bne.n	6d6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x112>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     6e0:	4a05      	ldr	r2, [pc, #20]	; (6f8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x134>)
     6e2:	6813      	ldr	r3, [r2, #0]
     6e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     6e8:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     6ea:	6813      	ldr	r3, [r2, #0]
     6ec:	01d9      	lsls	r1, r3, #7
     6ee:	d4fc      	bmi.n	6ea <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x126>
}
     6f0:	b010      	add	sp, #64	; 0x40
     6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     6f6:	bf00      	nop
     6f8:	40024000 	.word	0x40024000
     6fc:	00f42400 	.word	0x00f42400
     700:	00011bf0 	.word	0x00011bf0

00000704 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CANFD_message_t const&)>:
    bool setMBFilter(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2, uint32_t id3); /* input 3 ID's to be filtered */
    bool setMBFilter(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2, uint32_t id3, uint32_t id4); /* input 4 ID's to be filtered */
    bool setMBFilter(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2, uint32_t id3, uint32_t id4, uint32_t id5); /* input 5 ID's to be filtered */
    bool setMBFilterRange(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2); /* filter a range of ids */
    int write(const CAN_message_t &msg); /* use any available mailbox for transmitting */
    int write(const CANFD_message_t &msg) { return 0; } /* to satisfy base class for external pointers */
     704:	2000      	movs	r0, #0
     706:	4770      	bx	lr

00000708 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::isFD()>:
    bool isFD() { return 0; }
     708:	2000      	movs	r0, #0
     70a:	4770      	bx	lr

0000070c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBoxSize()>:
#endif
    void enhanceFilter(FLEXCAN_MAILBOX mb_num);
    void distribute(bool state = 1) { distribution = state; }
    void enableDMA(bool state = 1);
    void disableDMA() { enableDMA(0); }
    uint8_t getFirstTxBoxSize(){ return 8; }
     70c:	2008      	movs	r0, #8
     70e:	4770      	bx	lr

00000710 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CANFD_message_t const&)>:
    int write(const CANFD_message_t &msg) { return 0; } /* to satisfy base class for external pointers */
     710:	2000      	movs	r0, #0
     712:	4770      	bx	lr

00000714 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::isFD()>:
    bool isFD() { return 0; }
     714:	2000      	movs	r0, #0
     716:	4770      	bx	lr

00000718 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBoxSize()>:
    uint8_t getFirstTxBoxSize(){ return 8; }
     718:	2008      	movs	r0, #8
     71a:	4770      	bx	lr

0000071c <getTeensy3Time()>:
time_t getTeensy3Time(){
     71c:	b500      	push	{lr}
     71e:	b083      	sub	sp, #12
	elapsedMicros(void) { us = micros(); }
	elapsedMicros(unsigned long val) { us = micros() - val; }
	elapsedMicros(const elapsedMicros &orig) { us = orig.us; }
	operator unsigned long () const { return micros() - us; }
	elapsedMicros & operator = (const elapsedMicros &rhs) { us = rhs.us; return *this; }
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
     720:	f008 ff1a 	bl	9558 <micros>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     724:	4b06      	ldr	r3, [pc, #24]	; (740 <getTeensy3Time()+0x24>)
  return millis()/1000;
     726:	4a07      	ldr	r2, [pc, #28]	; (744 <getTeensy3Time()+0x28>)
     728:	681b      	ldr	r3, [r3, #0]
     72a:	9301      	str	r3, [sp, #4]
	return ret;
     72c:	9b01      	ldr	r3, [sp, #4]
     72e:	4906      	ldr	r1, [pc, #24]	; (748 <getTeensy3Time()+0x2c>)
     730:	fba2 2303 	umull	r2, r3, r2, r3
     734:	6008      	str	r0, [r1, #0]
}
     736:	0998      	lsrs	r0, r3, #6
     738:	2100      	movs	r1, #0
     73a:	b003      	add	sp, #12
     73c:	f85d fb04 	ldr.w	pc, [sp], #4
     740:	1fff7ae4 	.word	0x1fff7ae4
     744:	10624dd3 	.word	0x10624dd3
     748:	1fff7014 	.word	0x1fff7014

0000074c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>:
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     74c:	4910      	ldr	r1, [pc, #64]	; (790 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x44>)
     74e:	680b      	ldr	r3, [r1, #0]
     750:	6b48      	ldr	r0, [r1, #52]	; 0x34
  if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
     752:	680a      	ldr	r2, [r1, #0]
     754:	6b49      	ldr	r1, [r1, #52]	; 0x34
     756:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     75a:	f3c1 6103 	ubfx	r1, r1, #24, #4
     75e:	3201      	adds	r2, #1
     760:	3104      	adds	r1, #4
     762:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
     766:	d310      	bcc.n	78a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x3e>
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     76c:	f3c0 6003 	ubfx	r0, r0, #24, #4
     770:	3b05      	subs	r3, #5
     772:	3001      	adds	r0, #1
     774:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
  return (FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes); /* otherwise return offset MB position after FIFO area */
     778:	b2db      	uxtb	r3, r3
     77a:	4a05      	ldr	r2, [pc, #20]	; (790 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x44>)
     77c:	6810      	ldr	r0, [r2, #0]
     77e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
     782:	3001      	adds	r0, #1
     784:	1ac0      	subs	r0, r0, r3
}
     786:	b2c0      	uxtb	r0, r0
     788:	4770      	bx	lr
     78a:	2300      	movs	r3, #0
     78c:	e7f5      	b.n	77a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x2e>
     78e:	bf00      	nop
     790:	400a4000 	.word	0x400a4000

00000794 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>:
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     794:	4910      	ldr	r1, [pc, #64]	; (7d8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x44>)
     796:	680b      	ldr	r3, [r1, #0]
     798:	6b48      	ldr	r0, [r1, #52]	; 0x34
  if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
     79a:	680a      	ldr	r2, [r1, #0]
     79c:	6b49      	ldr	r1, [r1, #52]	; 0x34
     79e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     7a2:	f3c1 6103 	ubfx	r1, r1, #24, #4
     7a6:	3201      	adds	r2, #1
     7a8:	3104      	adds	r1, #4
     7aa:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
     7ae:	d310      	bcc.n	7d2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x3e>
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     7b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     7b4:	f3c0 6003 	ubfx	r0, r0, #24, #4
     7b8:	3b05      	subs	r3, #5
     7ba:	3001      	adds	r0, #1
     7bc:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
  return (FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes); /* otherwise return offset MB position after FIFO area */
     7c0:	b2db      	uxtb	r3, r3
     7c2:	4a05      	ldr	r2, [pc, #20]	; (7d8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x44>)
     7c4:	6810      	ldr	r0, [r2, #0]
     7c6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
     7ca:	3001      	adds	r0, #1
     7cc:	1ac0      	subs	r0, r0, r3
}
     7ce:	b2c0      	uxtb	r0, r0
     7d0:	4770      	bx	lr
     7d2:	2300      	movs	r3, #0
     7d4:	e7f5      	b.n	7c2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]+0x2e>
     7d6:	bf00      	nop
     7d8:	40024000 	.word	0x40024000

000007dc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>:
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     7dc:	4a62      	ldr	r2, [pc, #392]	; (968 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
FCTP_FUNC void FCTP_OPT::enableFIFO(bool status) {
     7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     7e2:	6814      	ldr	r4, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     7e4:	6813      	ldr	r3, [r2, #0]
     7e6:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     7ea:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     7ee:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     7f0:	6813      	ldr	r3, [r2, #0]
     7f2:	01dd      	lsls	r5, r3, #7
     7f4:	d5fc      	bpl.n	7f0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x14>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     7f6:	6811      	ldr	r1, [r2, #0]
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     7f8:	f8df c174 	ldr.w	ip, [pc, #372]	; 970 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     7fc:	4f5b      	ldr	r7, [pc, #364]	; (96c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     7fe:	4e5a      	ldr	r6, [pc, #360]	; (968 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
  FLEXCANb_IMASK1(_bus) = value;
     800:	2300      	movs	r3, #0
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     802:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
     806:	6011      	str	r1, [r2, #0]
  FLEXCANb_IMASK1(_bus) = value;
     808:	6293      	str	r3, [r2, #40]	; 0x28
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     80a:	6812      	ldr	r2, [r2, #0]
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     80c:	4619      	mov	r1, r3
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     80e:	eb03 020c 	add.w	r2, r3, ip
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     812:	19dd      	adds	r5, r3, r7
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     814:	0112      	lsls	r2, r2, #4
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     816:	00ad      	lsls	r5, r5, #2
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     818:	60d1      	str	r1, [r2, #12]
     81a:	6091      	str	r1, [r2, #8]
     81c:	6051      	str	r1, [r2, #4]
     81e:	6011      	str	r1, [r2, #0]
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     820:	6029      	str	r1, [r5, #0]
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     822:	6832      	ldr	r2, [r6, #0]
     824:	3301      	adds	r3, #1
     826:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     82a:	b2db      	uxtb	r3, r3
     82c:	3201      	adds	r2, #1
     82e:	4293      	cmp	r3, r2
     830:	d3ed      	bcc.n	80e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x32>
  FLEXCANb_RXMGMASK(_bus) = FLEXCANb_RXFGMASK(_bus) = 0;
     832:	64b1      	str	r1, [r6, #72]	; 0x48
     834:	6131      	str	r1, [r6, #16]
  return FLEXCANb_IFLAG1(_bus);
     836:	6b33      	ldr	r3, [r6, #48]	; 0x30
  FLEXCANb_IFLAG1(_bus) = value;
     838:	6333      	str	r3, [r6, #48]	; 0x30
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
     83a:	6833      	ldr	r3, [r6, #0]
  if ( status ) {
     83c:	2800      	cmp	r0, #0
     83e:	d14b      	bne.n	8d8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xfc>
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     840:	f8df 812c 	ldr.w	r8, [pc, #300]	; 970 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     844:	4e48      	ldr	r6, [pc, #288]	; (968 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     846:	4f49      	ldr	r7, [pc, #292]	; (96c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     848:	4605      	mov	r5, r0
     84a:	e019      	b.n	880 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xa4>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((i < (FLEXCANb_MAXMB_SIZE(_bus) / 4)) ? 0 : FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_SRR);
     84c:	6833      	ldr	r3, [r6, #0]
     84e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     852:	3301      	adds	r3, #1
     854:	ebb0 0f93 	cmp.w	r0, r3, lsr #2
     858:	bf34      	ite	cc
     85a:	f04f 6380 	movcc.w	r3, #67108864	; 0x4000000
     85e:	f04f 638c 	movcs.w	r3, #73400320	; 0x4600000
     862:	6013      	str	r3, [r2, #0]
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     864:	6b73      	ldr	r3, [r6, #52]	; 0x34
     866:	f3c3 4300 	ubfx	r3, r3, #16, #1
     86a:	079b      	lsls	r3, r3, #30
     86c:	600b      	str	r3, [r1, #0]
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     86e:	6833      	ldr	r3, [r6, #0]
     870:	3501      	adds	r5, #1
     872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     876:	b2ed      	uxtb	r5, r5
     878:	3301      	adds	r3, #1
     87a:	429d      	cmp	r5, r3
     87c:	4628      	mov	r0, r5
     87e:	d220      	bcs.n	8c2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     880:	6833      	ldr	r3, [r6, #0]
     882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     886:	3301      	adds	r3, #1
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     888:	19e9      	adds	r1, r5, r7
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     88a:	eb05 0208 	add.w	r2, r5, r8
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     88e:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     892:	ea4f 0181 	mov.w	r1, r1, lsl #2
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     896:	ea4f 1202 	mov.w	r2, r2, lsl #4
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     89a:	d3d7      	bcc.n	84c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x70>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     89c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     8a0:	6013      	str	r3, [r2, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     8a2:	6833      	ldr	r3, [r6, #0]
     8a4:	009a      	lsls	r2, r3, #2
     8a6:	d503      	bpl.n	8b0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xd4>
     8a8:	f7ff ff74 	bl	794 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  if ( mb_num < mailboxOffset() ) return; /* mailbox not available */
     8ac:	42a8      	cmp	r0, r5
     8ae:	d8de      	bhi.n	86e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     8b0:	2301      	movs	r3, #1
     8b2:	2d1f      	cmp	r5, #31
     8b4:	fa03 f305 	lsl.w	r3, r3, r5
     8b8:	d84c      	bhi.n	954 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x178>
     8ba:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     8bc:	4313      	orrs	r3, r2
     8be:	62b3      	str	r3, [r6, #40]	; 0x28
     8c0:	e7d5      	b.n	86e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     8c2:	b93c      	cbnz	r4, 8d4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xf8>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     8c4:	4a28      	ldr	r2, [pc, #160]	; (968 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
     8c6:	6813      	ldr	r3, [r2, #0]
     8c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     8cc:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     8ce:	6813      	ldr	r3, [r2, #0]
     8d0:	01db      	lsls	r3, r3, #7
     8d2:	d4fc      	bmi.n	8ce <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xf2>
}
     8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
     8d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     8dc:	6033      	str	r3, [r6, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     8de:	6835      	ldr	r5, [r6, #0]
     8e0:	f015 5500 	ands.w	r5, r5, #536870912	; 0x20000000
     8e4:	d03e      	beq.n	964 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x188>
     8e6:	f7ff ff55 	bl	794 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     8ea:	6833      	ldr	r3, [r6, #0]
     8ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     8f0:	3301      	adds	r3, #1
     8f2:	4283      	cmp	r3, r0
     8f4:	4605      	mov	r5, r0
     8f6:	d9e4      	bls.n	8c2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     8f8:	4f1d      	ldr	r7, [pc, #116]	; (970 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>)
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     8fa:	f8df 806c 	ldr.w	r8, [pc, #108]	; 968 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     8fe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
     902:	e00d      	b.n	920 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x144>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     904:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
     908:	4313      	orrs	r3, r2
     90a:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     90e:	f8d8 3000 	ldr.w	r3, [r8]
     912:	3501      	adds	r5, #1
     914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     918:	b2ed      	uxtb	r5, r5
     91a:	3301      	adds	r3, #1
     91c:	429d      	cmp	r5, r3
     91e:	d2d0      	bcs.n	8c2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     920:	19eb      	adds	r3, r5, r7
     922:	011b      	lsls	r3, r3, #4
     924:	601e      	str	r6, [r3, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     926:	f8d8 3000 	ldr.w	r3, [r8]
     92a:	0099      	lsls	r1, r3, #2
     92c:	d503      	bpl.n	936 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x15a>
     92e:	f7ff ff31 	bl	794 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  if ( mb_num < mailboxOffset() ) return; /* mailbox not available */
     932:	4285      	cmp	r5, r0
     934:	d3eb      	bcc.n	90e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x132>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     936:	2301      	movs	r3, #1
     938:	2d1f      	cmp	r5, #31
     93a:	fa03 f305 	lsl.w	r3, r3, r5
     93e:	d9e1      	bls.n	904 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x128>
  else (( set ) ? FLEXCANb_IMASK2(_bus) |= (1UL << (mb_num - 32)) : FLEXCANb_IMASK2(_bus) &= ~(1UL << (mb_num - 32)));
     940:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
     944:	2301      	movs	r3, #1
     946:	f1a5 0120 	sub.w	r1, r5, #32
     94a:	408b      	lsls	r3, r1
     94c:	4313      	orrs	r3, r2
     94e:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
     952:	e7dc      	b.n	90e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x132>
     954:	6a72      	ldr	r2, [r6, #36]	; 0x24
     956:	f1a5 0120 	sub.w	r1, r5, #32
     95a:	2301      	movs	r3, #1
     95c:	408b      	lsls	r3, r1
     95e:	4313      	orrs	r3, r2
     960:	6273      	str	r3, [r6, #36]	; 0x24
     962:	e784      	b.n	86e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     964:	6833      	ldr	r3, [r6, #0]
     966:	e7c7      	b.n	8f8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x11c>
     968:	40024000 	.word	0x40024000
     96c:	10009220 	.word	0x10009220
     970:	04002408 	.word	0x04002408

00000974 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>:
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     974:	4a62      	ldr	r2, [pc, #392]	; (b00 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
FCTP_FUNC void FCTP_OPT::enableFIFO(bool status) {
     976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     97a:	6814      	ldr	r4, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     97c:	6813      	ldr	r3, [r2, #0]
     97e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     982:	f004 7480 	and.w	r4, r4, #16777216	; 0x1000000
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     986:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     988:	6813      	ldr	r3, [r2, #0]
     98a:	01dd      	lsls	r5, r3, #7
     98c:	d5fc      	bpl.n	988 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x14>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     98e:	6811      	ldr	r1, [r2, #0]
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     990:	f8df c174 	ldr.w	ip, [pc, #372]	; b08 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     994:	4f5b      	ldr	r7, [pc, #364]	; (b04 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     996:	4e5a      	ldr	r6, [pc, #360]	; (b00 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
  FLEXCANb_IMASK1(_bus) = value;
     998:	2300      	movs	r3, #0
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     99a:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
     99e:	6011      	str	r1, [r2, #0]
  FLEXCANb_IMASK1(_bus) = value;
     9a0:	6293      	str	r3, [r2, #40]	; 0x28
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     9a2:	6812      	ldr	r2, [r2, #0]
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     9a4:	4619      	mov	r1, r3
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     9a6:	eb03 020c 	add.w	r2, r3, ip
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     9aa:	19dd      	adds	r5, r3, r7
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     9ac:	0112      	lsls	r2, r2, #4
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     9ae:	00ad      	lsls	r5, r5, #2
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     9b0:	60d1      	str	r1, [r2, #12]
     9b2:	6091      	str	r1, [r2, #8]
     9b4:	6051      	str	r1, [r2, #4]
     9b6:	6011      	str	r1, [r2, #0]
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     9b8:	6029      	str	r1, [r5, #0]
  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     9ba:	6832      	ldr	r2, [r6, #0]
     9bc:	3301      	adds	r3, #1
     9be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     9c2:	b2db      	uxtb	r3, r3
     9c4:	3201      	adds	r2, #1
     9c6:	4293      	cmp	r3, r2
     9c8:	d3ed      	bcc.n	9a6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x32>
  FLEXCANb_RXMGMASK(_bus) = FLEXCANb_RXFGMASK(_bus) = 0;
     9ca:	64b1      	str	r1, [r6, #72]	; 0x48
     9cc:	6131      	str	r1, [r6, #16]
  return FLEXCANb_IFLAG1(_bus);
     9ce:	6b33      	ldr	r3, [r6, #48]	; 0x30
  FLEXCANb_IFLAG1(_bus) = value;
     9d0:	6333      	str	r3, [r6, #48]	; 0x30
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
     9d2:	6833      	ldr	r3, [r6, #0]
  if ( status ) {
     9d4:	2800      	cmp	r0, #0
     9d6:	d14b      	bne.n	a70 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xfc>
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     9d8:	f8df 812c 	ldr.w	r8, [pc, #300]	; b08 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     9dc:	4e48      	ldr	r6, [pc, #288]	; (b00 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     9de:	4f49      	ldr	r7, [pc, #292]	; (b04 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x190>)
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     9e0:	4605      	mov	r5, r0
     9e2:	e019      	b.n	a18 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xa4>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((i < (FLEXCANb_MAXMB_SIZE(_bus) / 4)) ? 0 : FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_SRR);
     9e4:	6833      	ldr	r3, [r6, #0]
     9e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     9ea:	3301      	adds	r3, #1
     9ec:	ebb0 0f93 	cmp.w	r0, r3, lsr #2
     9f0:	bf34      	ite	cc
     9f2:	f04f 6380 	movcc.w	r3, #67108864	; 0x4000000
     9f6:	f04f 638c 	movcs.w	r3, #73400320	; 0x4600000
     9fa:	6013      	str	r3, [r2, #0]
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     9fc:	6b73      	ldr	r3, [r6, #52]	; 0x34
     9fe:	f3c3 4300 	ubfx	r3, r3, #16, #1
     a02:	079b      	lsls	r3, r3, #30
     a04:	600b      	str	r3, [r1, #0]
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     a06:	6833      	ldr	r3, [r6, #0]
     a08:	3501      	adds	r5, #1
     a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     a0e:	b2ed      	uxtb	r5, r5
     a10:	3301      	adds	r3, #1
     a12:	429d      	cmp	r5, r3
     a14:	4628      	mov	r0, r5
     a16:	d220      	bcs.n	a5a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     a18:	6833      	ldr	r3, [r6, #0]
     a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     a1e:	3301      	adds	r3, #1
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     a20:	19e9      	adds	r1, r5, r7
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     a22:	eb05 0208 	add.w	r2, r5, r8
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     a26:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
     a2a:	ea4f 0181 	mov.w	r1, r1, lsl #2
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     a2e:	ea4f 1202 	mov.w	r2, r2, lsl #4
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
     a32:	d3d7      	bcc.n	9e4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x70>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     a34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     a38:	6013      	str	r3, [r2, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     a3a:	6833      	ldr	r3, [r6, #0]
     a3c:	009a      	lsls	r2, r3, #2
     a3e:	d503      	bpl.n	a48 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xd4>
     a40:	f7ff fe84 	bl	74c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  if ( mb_num < mailboxOffset() ) return; /* mailbox not available */
     a44:	42a8      	cmp	r0, r5
     a46:	d8de      	bhi.n	a06 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     a48:	2301      	movs	r3, #1
     a4a:	2d1f      	cmp	r5, #31
     a4c:	fa03 f305 	lsl.w	r3, r3, r5
     a50:	d84c      	bhi.n	aec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x178>
     a52:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     a54:	4313      	orrs	r3, r2
     a56:	62b3      	str	r3, [r6, #40]	; 0x28
     a58:	e7d5      	b.n	a06 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     a5a:	b93c      	cbnz	r4, a6c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xf8>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     a5c:	4a28      	ldr	r2, [pc, #160]	; (b00 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>)
     a5e:	6813      	ldr	r3, [r2, #0]
     a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     a64:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     a66:	6813      	ldr	r3, [r2, #0]
     a68:	01db      	lsls	r3, r3, #7
     a6a:	d4fc      	bmi.n	a66 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xf2>
}
     a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
     a70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
     a74:	6033      	str	r3, [r6, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     a76:	6835      	ldr	r5, [r6, #0]
     a78:	f015 5500 	ands.w	r5, r5, #536870912	; 0x20000000
     a7c:	d03e      	beq.n	afc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x188>
     a7e:	f7ff fe65 	bl	74c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     a82:	6833      	ldr	r3, [r6, #0]
     a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     a88:	3301      	adds	r3, #1
     a8a:	4283      	cmp	r3, r0
     a8c:	4605      	mov	r5, r0
     a8e:	d9e4      	bls.n	a5a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     a90:	4f1d      	ldr	r7, [pc, #116]	; (b08 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x194>)
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     a92:	f8df 806c 	ldr.w	r8, [pc, #108]	; b00 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x18c>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     a96:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
     a9a:	e00d      	b.n	ab8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x144>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     a9c:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
     aa0:	4313      	orrs	r3, r2
     aa2:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     aa6:	f8d8 3000 	ldr.w	r3, [r8]
     aaa:	3501      	adds	r5, #1
     aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     ab0:	b2ed      	uxtb	r5, r5
     ab2:	3301      	adds	r3, #1
     ab4:	429d      	cmp	r5, r3
     ab6:	d2d0      	bcs.n	a5a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0xe6>
      FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
     ab8:	19eb      	adds	r3, r5, r7
     aba:	011b      	lsls	r3, r3, #4
     abc:	601e      	str	r6, [r3, #0]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     abe:	f8d8 3000 	ldr.w	r3, [r8]
     ac2:	0099      	lsls	r1, r3, #2
     ac4:	d503      	bpl.n	ace <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x15a>
     ac6:	f7ff fe41 	bl	74c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  if ( mb_num < mailboxOffset() ) return; /* mailbox not available */
     aca:	4285      	cmp	r5, r0
     acc:	d3eb      	bcc.n	aa6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x132>
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
     ace:	2301      	movs	r3, #1
     ad0:	2d1f      	cmp	r5, #31
     ad2:	fa03 f305 	lsl.w	r3, r3, r5
     ad6:	d9e1      	bls.n	a9c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x128>
  else (( set ) ? FLEXCANb_IMASK2(_bus) |= (1UL << (mb_num - 32)) : FLEXCANb_IMASK2(_bus) &= ~(1UL << (mb_num - 32)));
     ad8:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
     adc:	2301      	movs	r3, #1
     ade:	f1a5 0120 	sub.w	r1, r5, #32
     ae2:	408b      	lsls	r3, r1
     ae4:	4313      	orrs	r3, r2
     ae6:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
     aea:	e7dc      	b.n	aa6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x132>
     aec:	6a72      	ldr	r2, [r6, #36]	; 0x24
     aee:	f1a5 0120 	sub.w	r1, r5, #32
     af2:	2301      	movs	r3, #1
     af4:	408b      	lsls	r3, r1
     af6:	4313      	orrs	r3, r2
     af8:	6273      	str	r3, [r6, #36]	; 0x24
     afa:	e784      	b.n	a06 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x92>
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     afc:	6833      	ldr	r3, [r6, #0]
     afe:	e7c7      	b.n	a90 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]+0x11c>
     b00:	400a4000 	.word	0x400a4000
     b04:	10029220 	.word	0x10029220
     b08:	0400a408 	.word	0x0400a408

00000b0c <printWiFiStatus()>:
void printWiFiStatus() {
     b0c:	b510      	push	{r4, lr}
     b0e:	4822      	ldr	r0, [pc, #136]	; (b98 <printWiFiStatus()+0x8c>)
     b10:	b082      	sub	sp, #8
     b12:	2106      	movs	r1, #6
     b14:	f009 fb26 	bl	a164 <usb_serial_write>
  Serial.println(WiFi.SSID());
     b18:	4820      	ldr	r0, [pc, #128]	; (b9c <printWiFiStatus()+0x90>)
     b1a:	f004 fe7b 	bl	5814 <WiFiClass::SSID()>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     b1e:	b130      	cbz	r0, b2e <printWiFiStatus()+0x22>
							  return write((const uint8_t *)str, strlen(str)); }
     b20:	4604      	mov	r4, r0
     b22:	f00b fa6d 	bl	c000 <strlen>
     b26:	4601      	mov	r1, r0
     b28:	4620      	mov	r0, r4
     b2a:	f009 fb1b 	bl	a164 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     b2e:	481c      	ldr	r0, [pc, #112]	; (ba0 <printWiFiStatus()+0x94>)
     b30:	f008 f93a 	bl	8da8 <Print::println()>
  IPAddress ip = WiFi.localIP();
     b34:	4819      	ldr	r0, [pc, #100]	; (b9c <printWiFiStatus()+0x90>)
     b36:	f004 fe6b 	bl	5810 <WiFiClass::localIP()>
		_address.bytes[0] = b1;
		_address.bytes[1] = b2;
		_address.bytes[2] = b3;
		_address.bytes[3] = b4;
	}
	IPAddress(uint32_t address) {
     b3a:	4a1a      	ldr	r2, [pc, #104]	; (ba4 <printWiFiStatus()+0x98>)
     b3c:	4603      	mov	r3, r0
     b3e:	210c      	movs	r1, #12
     b40:	4819      	ldr	r0, [pc, #100]	; (ba8 <printWiFiStatus()+0x9c>)
		_address.dword = address;
     b42:	e9cd 2300 	strd	r2, r3, [sp]
     b46:	f009 fb0d 	bl	a164 <usb_serial_write>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
	size_t println(const Printable &obj)		{ return obj.printTo(*this) + println(); }
     b4a:	4915      	ldr	r1, [pc, #84]	; (ba0 <printWiFiStatus()+0x94>)
     b4c:	4668      	mov	r0, sp
     b4e:	f008 f86f 	bl	8c30 <IPAddress::printTo(Print&) const>
     b52:	4813      	ldr	r0, [pc, #76]	; (ba0 <printWiFiStatus()+0x94>)
     b54:	f008 f928 	bl	8da8 <Print::println()>
  long rssi = WiFi.RSSI();
     b58:	4810      	ldr	r0, [pc, #64]	; (b9c <printWiFiStatus()+0x90>)
     b5a:	f004 fe67 	bl	582c <WiFiClass::RSSI()>
     b5e:	2117      	movs	r1, #23
     b60:	4604      	mov	r4, r0
     b62:	4812      	ldr	r0, [pc, #72]	; (bac <printWiFiStatus()+0xa0>)
     b64:	f009 fafe 	bl	a164 <usb_serial_write>
  Serial.print(rssi);
     b68:	4621      	mov	r1, r4
     b6a:	480d      	ldr	r0, [pc, #52]	; (ba0 <printWiFiStatus()+0x94>)
     b6c:	f008 f914 	bl	8d98 <Print::print(long)>
     b70:	2104      	movs	r1, #4
     b72:	480f      	ldr	r0, [pc, #60]	; (bb0 <printWiFiStatus()+0xa4>)
     b74:	f009 faf6 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     b78:	4809      	ldr	r0, [pc, #36]	; (ba0 <printWiFiStatus()+0x94>)
     b7a:	f008 f915 	bl	8da8 <Print::println()>
     b7e:	2135      	movs	r1, #53	; 0x35
     b80:	480c      	ldr	r0, [pc, #48]	; (bb4 <printWiFiStatus()+0xa8>)
     b82:	f009 faef 	bl	a164 <usb_serial_write>
	size_t println(const Printable &obj)		{ return obj.printTo(*this) + println(); }
     b86:	4906      	ldr	r1, [pc, #24]	; (ba0 <printWiFiStatus()+0x94>)
     b88:	4668      	mov	r0, sp
     b8a:	f008 f851 	bl	8c30 <IPAddress::printTo(Print&) const>
     b8e:	4804      	ldr	r0, [pc, #16]	; (ba0 <printWiFiStatus()+0x94>)
     b90:	f008 f90a 	bl	8da8 <Print::println()>
}
     b94:	b002      	add	sp, #8
     b96:	bd10      	pop	{r4, pc}
     b98:	000116b4 	.word	0x000116b4
     b9c:	1fff76cc 	.word	0x1fff76cc
     ba0:	1fff0e64 	.word	0x1fff0e64
     ba4:	00011fec 	.word	0x00011fec
     ba8:	000116bc 	.word	0x000116bc
     bac:	000116cc 	.word	0x000116cc
     bb0:	000116e4 	.word	0x000116e4
     bb4:	000116ec 	.word	0x000116ec

00000bb8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>:
FCTP_FUNC void FCTP_OPT::begin() {
     bb8:	b538      	push	{r3, r4, r5, lr}
  for (uint8_t i = 0; i < SIZE_LISTENERS; i++) listener[i] = nullptr;
     bba:	2300      	movs	r3, #0
    nvicIrq = IRQ_CAN1_MESSAGE;
     bbc:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
  for (uint8_t i = 0; i < SIZE_LISTENERS; i++) listener[i] = nullptr;
     bc0:	6043      	str	r3, [r0, #4]
     bc2:	6083      	str	r3, [r0, #8]
     bc4:	60c3      	str	r3, [r0, #12]
     bc6:	6103      	str	r3, [r0, #16]
  OSC0_CR |= OSC_ERCLKEN;
     bc8:	4a41      	ldr	r2, [pc, #260]	; (cd0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x118>)
    nvicIrq = IRQ_CAN1_MESSAGE;
     bca:	215e      	movs	r1, #94	; 0x5e
    busNumber = 1;
     bcc:	2301      	movs	r3, #1
    nvicIrq = IRQ_CAN1_MESSAGE;
     bce:	f8c5 190c 	str.w	r1, [r5, #2316]	; 0x90c
    busNumber = 1;
     bd2:	f885 3915 	strb.w	r3, [r5, #2325]	; 0x915
  OSC0_CR |= OSC_ERCLKEN;
     bd6:	7813      	ldrb	r3, [r2, #0]
  else if ( _bus == CAN1 ) SIM_SCGC3 |= SIM_SCGC3_FLEXCAN1;
     bd8:	493e      	ldr	r1, [pc, #248]	; (cd4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x11c>)
  OSC0_CR |= OSC_ERCLKEN;
     bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     bde:	7013      	strb	r3, [r2, #0]
  else if ( _bus == CAN1 ) SIM_SCGC3 |= SIM_SCGC3_FLEXCAN1;
     be0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     be2:	4b3d      	ldr	r3, [pc, #244]	; (cd8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x120>)
  else if ( _bus == CAN1 ) SIM_SCGC3 |= SIM_SCGC3_FLEXCAN1;
     be4:	f042 0210 	orr.w	r2, r2, #16
     be8:	630a      	str	r2, [r1, #48]	; 0x30
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     bea:	685a      	ldr	r2, [r3, #4]
    CORE_PIN33_CONFIG = PORT_PCR_MUX(2);
     bec:	f501 41a0 	add.w	r1, r1, #20480	; 0x5000
     bf0:	f44f 7000 	mov.w	r0, #512	; 0x200
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     bf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
     bf8:	605a      	str	r2, [r3, #4]
    CORE_PIN33_CONFIG = PORT_PCR_MUX(2);
     bfa:	6608      	str	r0, [r1, #96]	; 0x60
    CORE_PIN34_CONFIG = PORT_PCR_MUX(2);
     bfc:	6648      	str	r0, [r1, #100]	; 0x64
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
     bfe:	681a      	ldr	r2, [r3, #0]
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can1;
     c00:	4936      	ldr	r1, [pc, #216]	; (cdc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x124>)
     c02:	4837      	ldr	r0, [pc, #220]	; (ce0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x128>)
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
     c04:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
     c08:	601a      	str	r2, [r3, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     c0a:	681a      	ldr	r2, [r3, #0]
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can1;
     c0c:	f8c1 01b8 	str.w	r0, [r1, #440]	; 0x1b8
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     c10:	f042 42a0 	orr.w	r2, r2, #1342177280	; 0x50000000
     c14:	601a      	str	r2, [r3, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     c16:	681a      	ldr	r2, [r3, #0]
     c18:	01d2      	lsls	r2, r2, #7
     c1a:	d5fc      	bpl.n	c16 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x5e>
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
     c1c:	6859      	ldr	r1, [r3, #4]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
     c1e:	4a2e      	ldr	r2, [pc, #184]	; (cd8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x120>)
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
     c20:	f041 0108 	orr.w	r1, r1, #8
     c24:	6059      	str	r1, [r3, #4]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ; /* enable freeze bit */
     c26:	6819      	ldr	r1, [r3, #0]
     c28:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
     c2c:	6019      	str	r1, [r3, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
     c2e:	6813      	ldr	r3, [r2, #0]
     c30:	02dc      	lsls	r4, r3, #11
     c32:	d4fc      	bmi.n	c2e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x76>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
     c34:	6813      	ldr	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
     c36:	4928      	ldr	r1, [pc, #160]	; (cd8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x120>)
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
     c38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     c3c:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
     c3e:	680b      	ldr	r3, [r1, #0]
     c40:	0198      	lsls	r0, r3, #6
     c42:	d4fc      	bmi.n	c3e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x86>
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     c44:	4c24      	ldr	r4, [pc, #144]	; (cd8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x120>)
     c46:	6823      	ldr	r3, [r4, #0]
     c48:	01da      	lsls	r2, r3, #7
     c4a:	d5fc      	bpl.n	c46 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x8e>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SRX_DIS; /* Disable self-reception */
     c4c:	6823      	ldr	r3, [r4, #0]
     c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     c52:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_IRMQ; // individual mailbox masking
     c54:	6823      	ldr	r3, [r4, #0]
     c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     c5a:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_AEN; // TX ABORT FEATURE
     c5c:	6823      	ldr	r3, [r4, #0]
     c5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     c62:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_LPRIO_EN; // TX PRIORITY FEATURE
     c64:	6823      	ldr	r3, [r4, #0]
     c66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     c6a:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SLF_WAK; // SELF-WAKE UP FEATURE	
     c6c:	6823      	ldr	r3, [r4, #0]
     c6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
     c72:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_SRC; // WAKE-UP LOW-PASS FILTER
     c74:	6823      	ldr	r3, [r4, #0]
     c76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
     c7a:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) &= ~0x8800; // disable DMA and FD (valid bits are reserved in legacy controllers)
     c7c:	6823      	ldr	r3, [r4, #0]
     c7e:	f423 4308 	bic.w	r3, r3, #34816	; 0x8800
     c82:	6023      	str	r3, [r4, #0]
  FLEXCANb_CTRL2(_bus) |= FLEXCAN_CTRL2_RRS | // store remote frames
     c84:	6b63      	ldr	r3, [r4, #52]	; 0x34
     c86:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
     c8a:	6363      	str	r3, [r4, #52]	; 0x34
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WRN_EN;
     c8c:	6823      	ldr	r3, [r4, #0]
     c8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
     c92:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_MSK;
     c94:	6823      	ldr	r3, [r4, #0]
     c96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     c9a:	6023      	str	r3, [r4, #0]
    void disableFIFO() { enableFIFO(0); }
     c9c:	2000      	movs	r0, #0
     c9e:	f7ff fe69 	bl	974 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     ca2:	6823      	ldr	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     ca4:	4a0c      	ldr	r2, [pc, #48]	; (cd8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x120>)
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     caa:	6023      	str	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     cac:	6813      	ldr	r3, [r2, #0]
     cae:	01db      	lsls	r3, r3, #7
     cb0:	d4fc      	bmi.n	cac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0xf4>
  NVIC_ENABLE_IRQ(nvicIrq);
     cb2:	f8d5 290c 	ldr.w	r2, [r5, #2316]	; 0x90c
     cb6:	0953      	lsrs	r3, r2, #5
     cb8:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
     cbc:	3340      	adds	r3, #64	; 0x40
     cbe:	2101      	movs	r1, #1
     cc0:	009b      	lsls	r3, r3, #2
     cc2:	f002 021f 	and.w	r2, r2, #31
     cc6:	fa01 f202 	lsl.w	r2, r1, r2
     cca:	601a      	str	r2, [r3, #0]
}
     ccc:	bd38      	pop	{r3, r4, r5, pc}
     cce:	bf00      	nop
     cd0:	40065000 	.word	0x40065000
     cd4:	40048000 	.word	0x40048000
     cd8:	400a4000 	.word	0x400a4000
     cdc:	1fff0200 	.word	0x1fff0200
     ce0:	00000471 	.word	0x00000471

00000ce4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>:
FCTP_FUNC void FCTP_OPT::begin() {
     ce4:	b538      	push	{r3, r4, r5, lr}
    nvicIrq = IRQ_CAN0_MESSAGE;
     ce6:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
  for (uint8_t i = 0; i < SIZE_LISTENERS; i++) listener[i] = nullptr;
     cea:	2300      	movs	r3, #0
  OSC0_CR |= OSC_ERCLKEN;
     cec:	4961      	ldr	r1, [pc, #388]	; (e74 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x190>)
  for (uint8_t i = 0; i < SIZE_LISTENERS; i++) listener[i] = nullptr;
     cee:	6043      	str	r3, [r0, #4]
    nvicIrq = IRQ_CAN0_MESSAGE;
     cf0:	224b      	movs	r2, #75	; 0x4b
  for (uint8_t i = 0; i < SIZE_LISTENERS; i++) listener[i] = nullptr;
     cf2:	6083      	str	r3, [r0, #8]
     cf4:	60c3      	str	r3, [r0, #12]
     cf6:	6103      	str	r3, [r0, #16]
    nvicIrq = IRQ_CAN0_MESSAGE;
     cf8:	f8c5 290c 	str.w	r2, [r5, #2316]	; 0x90c
    busNumber = 0;
     cfc:	f885 3915 	strb.w	r3, [r5, #2325]	; 0x915
  OSC0_CR |= OSC_ERCLKEN;
     d00:	780a      	ldrb	r2, [r1, #0]
  if ( _bus == CAN0 ) SIM_SCGC6 |= SIM_SCGC6_FLEXCAN0;
     d02:	485d      	ldr	r0, [pc, #372]	; (e78 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x194>)
  OSC0_CR |= OSC_ERCLKEN;
     d04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     d08:	700a      	strb	r2, [r1, #0]
  if ( _bus == CAN0 ) SIM_SCGC6 |= SIM_SCGC6_FLEXCAN0;
     d0a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     d0c:	f5a1 2182 	sub.w	r1, r1, #266240	; 0x41000
  if ( _bus == CAN0 ) SIM_SCGC6 |= SIM_SCGC6_FLEXCAN0;
     d10:	f042 0210 	orr.w	r2, r2, #16
     d14:	63c2      	str	r2, [r0, #60]	; 0x3c
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     d16:	684a      	ldr	r2, [r1, #4]
    if ( init_pins ) {
     d18:	4858      	ldr	r0, [pc, #352]	; (e7c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x198>)
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
     d1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
     d1e:	604a      	str	r2, [r1, #4]
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can0;
     d20:	4a57      	ldr	r2, [pc, #348]	; (e80 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x19c>)
     d22:	4958      	ldr	r1, [pc, #352]	; (e84 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a0>)
     d24:	f8c2 116c 	str.w	r1, [r2, #364]	; 0x16c
    if ( init_pins ) {
     d28:	7802      	ldrb	r2, [r0, #0]
     d2a:	2a00      	cmp	r2, #0
     d2c:	f040 8084 	bne.w	e38 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x154>
      if ( CORE_PIN29_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN29_CONFIG = 0;
     d30:	4b55      	ldr	r3, [pc, #340]	; (e88 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a4>)
     d32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
     d34:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
     d38:	bf04      	itt	eq
     d3a:	2200      	moveq	r2, #0
     d3c:	649a      	streq	r2, [r3, #72]	; 0x48
      CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
     d3e:	4b53      	ldr	r3, [pc, #332]	; (e8c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a8>)
     d40:	f44f 7200 	mov.w	r2, #512	; 0x200
     d44:	631a      	str	r2, [r3, #48]	; 0x30
    if ( init_pins ) {
     d46:	4b52      	ldr	r3, [pc, #328]	; (e90 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1ac>)
     d48:	781a      	ldrb	r2, [r3, #0]
     d4a:	2a00      	cmp	r2, #0
     d4c:	f000 8085 	beq.w	e5a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x176>
      pin = ( !CORE_PIN4_CONFIG ) ? DEF : ALT; 
     d50:	4a4e      	ldr	r2, [pc, #312]	; (e8c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a8>)
     d52:	6b51      	ldr	r1, [r2, #52]	; 0x34
     d54:	2900      	cmp	r1, #0
     d56:	d07f      	beq.n	e58 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x174>
      init_pins = 0;
     d58:	2100      	movs	r1, #0
     d5a:	7019      	strb	r1, [r3, #0]
      if ( CORE_PIN4_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN4_CONFIG = 0;
     d5c:	6b53      	ldr	r3, [r2, #52]	; 0x34
     d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
      CORE_PIN30_CONFIG = PORT_PCR_MUX(2);
     d62:	4b49      	ldr	r3, [pc, #292]	; (e88 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a4>)
      if ( CORE_PIN4_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN4_CONFIG = 0;
     d64:	bf08      	it	eq
     d66:	6351      	streq	r1, [r2, #52]	; 0x34
      CORE_PIN30_CONFIG = PORT_PCR_MUX(2);
     d68:	f44f 7200 	mov.w	r2, #512	; 0x200
     d6c:	64da      	str	r2, [r3, #76]	; 0x4c
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
     d6e:	4a49      	ldr	r2, [pc, #292]	; (e94 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1b0>)
     d70:	6813      	ldr	r3, [r2, #0]
     d72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
     d76:	6013      	str	r3, [r2, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     d78:	6813      	ldr	r3, [r2, #0]
     d7a:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
     d7e:	6013      	str	r3, [r2, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     d80:	6813      	ldr	r3, [r2, #0]
     d82:	01dc      	lsls	r4, r3, #7
     d84:	d5fc      	bpl.n	d80 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x9c>
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
     d86:	6853      	ldr	r3, [r2, #4]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
     d88:	4942      	ldr	r1, [pc, #264]	; (e94 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1b0>)
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
     d8a:	f043 0308 	orr.w	r3, r3, #8
     d8e:	6053      	str	r3, [r2, #4]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ; /* enable freeze bit */
     d90:	6813      	ldr	r3, [r2, #0]
     d92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     d96:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
     d98:	680b      	ldr	r3, [r1, #0]
     d9a:	02d8      	lsls	r0, r3, #11
     d9c:	d4fc      	bmi.n	d98 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0xb4>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
     d9e:	680b      	ldr	r3, [r1, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
     da0:	4a3c      	ldr	r2, [pc, #240]	; (e94 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1b0>)
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
     da2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
     da6:	600b      	str	r3, [r1, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
     da8:	6813      	ldr	r3, [r2, #0]
     daa:	0199      	lsls	r1, r3, #6
     dac:	d4fc      	bmi.n	da8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0xc4>
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     dae:	4c39      	ldr	r4, [pc, #228]	; (e94 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1b0>)
     db0:	6823      	ldr	r3, [r4, #0]
     db2:	01da      	lsls	r2, r3, #7
     db4:	d5fc      	bpl.n	db0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0xcc>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SRX_DIS; /* Disable self-reception */
     db6:	6823      	ldr	r3, [r4, #0]
     db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     dbc:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_IRMQ; // individual mailbox masking
     dbe:	6823      	ldr	r3, [r4, #0]
     dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     dc4:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_AEN; // TX ABORT FEATURE
     dc6:	6823      	ldr	r3, [r4, #0]
     dc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     dcc:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_LPRIO_EN; // TX PRIORITY FEATURE
     dce:	6823      	ldr	r3, [r4, #0]
     dd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     dd4:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SLF_WAK; // SELF-WAKE UP FEATURE	
     dd6:	6823      	ldr	r3, [r4, #0]
     dd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
     ddc:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_SRC; // WAKE-UP LOW-PASS FILTER
     dde:	6823      	ldr	r3, [r4, #0]
     de0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
     de4:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) &= ~0x8800; // disable DMA and FD (valid bits are reserved in legacy controllers)
     de6:	6823      	ldr	r3, [r4, #0]
     de8:	f423 4308 	bic.w	r3, r3, #34816	; 0x8800
     dec:	6023      	str	r3, [r4, #0]
  FLEXCANb_CTRL2(_bus) |= FLEXCAN_CTRL2_RRS | // store remote frames
     dee:	6b63      	ldr	r3, [r4, #52]	; 0x34
     df0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
     df4:	6363      	str	r3, [r4, #52]	; 0x34
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WRN_EN;
     df6:	6823      	ldr	r3, [r4, #0]
     df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
     dfc:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_MSK;
     dfe:	6823      	ldr	r3, [r4, #0]
     e00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     e04:	6023      	str	r3, [r4, #0]
     e06:	2000      	movs	r0, #0
     e08:	f7ff fce8 	bl	7dc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     e0c:	6823      	ldr	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     e0e:	4a21      	ldr	r2, [pc, #132]	; (e94 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1b0>)
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
     e14:	6023      	str	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     e16:	6813      	ldr	r3, [r2, #0]
     e18:	01db      	lsls	r3, r3, #7
     e1a:	d4fc      	bmi.n	e16 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x132>
  NVIC_ENABLE_IRQ(nvicIrq);
     e1c:	f8d5 290c 	ldr.w	r2, [r5, #2316]	; 0x90c
     e20:	0953      	lsrs	r3, r2, #5
     e22:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
     e26:	3340      	adds	r3, #64	; 0x40
     e28:	2101      	movs	r1, #1
     e2a:	009b      	lsls	r3, r3, #2
     e2c:	f002 021f 	and.w	r2, r2, #31
     e30:	fa01 f202 	lsl.w	r2, r1, r2
     e34:	601a      	str	r2, [r3, #0]
}
     e36:	bd38      	pop	{r3, r4, r5, pc}
      pin = ( !CORE_PIN3_CONFIG ) ? DEF : ALT; 
     e38:	4a14      	ldr	r2, [pc, #80]	; (e8c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a8>)
     e3a:	6b11      	ldr	r1, [r2, #48]	; 0x30
     e3c:	b909      	cbnz	r1, e42 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x15e>
      init_pins = 0;
     e3e:	7001      	strb	r1, [r0, #0]
     e40:	e776      	b.n	d30 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x4c>
      if ( CORE_PIN3_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN3_CONFIG = 0;
     e42:	6b11      	ldr	r1, [r2, #48]	; 0x30
      init_pins = 0;
     e44:	7003      	strb	r3, [r0, #0]
      if ( CORE_PIN3_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN3_CONFIG = 0;
     e46:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     e4a:	bf08      	it	eq
     e4c:	6313      	streq	r3, [r2, #48]	; 0x30
      CORE_PIN29_CONFIG = PORT_PCR_MUX(2);
     e4e:	4b0e      	ldr	r3, [pc, #56]	; (e88 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a4>)
     e50:	f44f 7200 	mov.w	r2, #512	; 0x200
     e54:	649a      	str	r2, [r3, #72]	; 0x48
     e56:	e776      	b.n	d46 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x62>
      init_pins = 0;
     e58:	7019      	strb	r1, [r3, #0]
      if ( CORE_PIN30_CONFIG == PORT_PCR_MUX(2) ) CORE_PIN30_CONFIG = 0;
     e5a:	4b0b      	ldr	r3, [pc, #44]	; (e88 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a4>)
     e5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
     e5e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
     e62:	bf04      	itt	eq
     e64:	2200      	moveq	r2, #0
     e66:	64da      	streq	r2, [r3, #76]	; 0x4c
      CORE_PIN4_CONFIG = PORT_PCR_MUX(2);
     e68:	4b08      	ldr	r3, [pc, #32]	; (e8c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x1a8>)
     e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
     e6e:	635a      	str	r2, [r3, #52]	; 0x34
}
     e70:	e77d      	b.n	d6e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x8a>
     e72:	bf00      	nop
     e74:	40065000 	.word	0x40065000
     e78:	40048000 	.word	0x40048000
     e7c:	1fff0839 	.word	0x1fff0839
     e80:	1fff0200 	.word	0x1fff0200
     e84:	0000045d 	.word	0x0000045d
     e88:	4004a000 	.word	0x4004a000
     e8c:	40049000 	.word	0x40049000
     e90:	1fff0838 	.word	0x1fff0838
     e94:	40024000 	.word	0x40024000

00000e98 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)>:
        T readBytes(T *buffer, uint16_t length);
        void flush() { clear(); }
        void clear() { head = tail = _available = 0; }
        void print(const char *p);
        void println(const char *p);
        uint16_t size() { return _available; }
     e98:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
     e9c:	f8bc 3cd4 	ldrh.w	r3, [ip, #3284]	; 0xcd4
     ea0:	b29b      	uxth	r3, r3

  asm volatile ("dsb");	
}

FCTP_FUNC bool FCTP_OPT::error(CAN_error_t &error, bool printDetails) {
  if ( !busESR1.size() ) return 0;
     ea2:	b90b      	cbnz	r3, ea8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x10>
     ea4:	4618      	mov	r0, r3
  error.TX_ERR_COUNTER = (uint8_t)error.ECR;

  if ( printDetails ) printErrors(error);
  NVIC_ENABLE_IRQ(nvicIrq);
  return 1;
}
     ea6:	4770      	bx	lr
FCTP_FUNC bool FCTP_OPT::error(CAN_error_t &error, bool printDetails) {
     ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  NVIC_DISABLE_IRQ(nvicIrq);
     eac:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
     eb0:	4616      	mov	r6, r2
     eb2:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
     eb6:	0953      	lsrs	r3, r2, #5
     eb8:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
     ebc:	3360      	adds	r3, #96	; 0x60
     ebe:	009b      	lsls	r3, r3, #2
     ec0:	460c      	mov	r4, r1
     ec2:	f002 021f 	and.w	r2, r2, #31
     ec6:	2101      	movs	r1, #1
     ec8:	fa01 f202 	lsl.w	r2, r1, r2
     ecc:	601a      	str	r2, [r3, #0]
  if ( multi ) {
    head = ((head + 1)&(2*_size-1));
    if ( _available ) _available--;
    return 0;
  }
  if ( _available ) _available--;
     ece:	f8bc 3cd4 	ldrh.w	r3, [ip, #3284]	; 0xcd4
     ed2:	b29b      	uxth	r3, r3
     ed4:	b12b      	cbz	r3, ee2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x4a>
     ed6:	f8bc 3cd4 	ldrh.w	r3, [ip, #3284]	; 0xcd4
     eda:	3b01      	subs	r3, #1
     edc:	b29b      	uxth	r3, r3
     ede:	f8ac 3cd4 	strh.w	r3, [ip, #3284]	; 0xcd4
  T value = _cbuf[((head)&(_size-1))];
     ee2:	f8bc 3cd0 	ldrh.w	r3, [ip, #3280]	; 0xcd0
     ee6:	f003 030f 	and.w	r3, r3, #15
     eea:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
     eee:	f8d3 5cd8 	ldr.w	r5, [r3, #3288]	; 0xcd8
  head = ((head + 1)&(2*_size-1));
     ef2:	f8bc 3cd0 	ldrh.w	r3, [ip, #3280]	; 0xcd0
     ef6:	3301      	adds	r3, #1
     ef8:	f003 031f 	and.w	r3, r3, #31
     efc:	f8ac 3cd0 	strh.w	r3, [ip, #3280]	; 0xcd0
  if ( _available ) _available--;
     f00:	f8bc 3d9c 	ldrh.w	r3, [ip, #3484]	; 0xd9c
  error.ESR1 = busESR1.read();
     f04:	63a5      	str	r5, [r4, #56]	; 0x38
     f06:	b29b      	uxth	r3, r3
     f08:	b12b      	cbz	r3, f16 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x7e>
     f0a:	f8bc 3d9c 	ldrh.w	r3, [ip, #3484]	; 0xd9c
     f0e:	3b01      	subs	r3, #1
     f10:	b29b      	uxth	r3, r3
     f12:	f8ac 3d9c 	strh.w	r3, [ip, #3484]	; 0xd9c
  T value = _cbuf[((head)&(_size-1))];
     f16:	f8bc 3d98 	ldrh.w	r3, [ip, #3480]	; 0xd98
     f1a:	f003 030f 	and.w	r3, r3, #15
     f1e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
     f22:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
     f26:	f641 519e 	movw	r1, #7582	; 0x1d9e
     f2a:	f8b3 2d9e 	ldrh.w	r2, [r3, #3486]	; 0xd9e
  head = ((head + 1)&(2*_size-1));
     f2e:	f8bc 3d98 	ldrh.w	r3, [ip, #3480]	; 0xd98
     f32:	f830 8001 	ldrh.w	r8, [r0, r1]
     f36:	3301      	adds	r3, #1
     f38:	f003 031f 	and.w	r3, r3, #31
     f3c:	f8ac 3d98 	strh.w	r3, [ip, #3480]	; 0xd98
  if ( (error.ESR1 & 0x400C8) == 0x40080 ) strncpy((char*)error.state, "Idle", (sizeof(error.state) - 1));
     f40:	4b61      	ldr	r3, [pc, #388]	; (10c8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x230>)
  error.ECR = busECR.read();
     f42:	87a2      	strh	r2, [r4, #60]	; 0x3c
  if ( (error.ESR1 & 0x400C8) == 0x40080 ) strncpy((char*)error.state, "Idle", (sizeof(error.state) - 1));
     f44:	4a61      	ldr	r2, [pc, #388]	; (10cc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x234>)
     f46:	402b      	ands	r3, r5
     f48:	4293      	cmp	r3, r2
     f4a:	fa98 f898 	rev16.w	r8, r8
     f4e:	d07c      	beq.n	104a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1b2>
  else if ( (error.ESR1 & 0x400C8) == 0x0 ) strncpy((char*)error.state, "Not synchronized to CAN bus", (sizeof(error.state) - 1));
     f50:	2b00      	cmp	r3, #0
     f52:	d074      	beq.n	103e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1a6>
  else if ( (error.ESR1 & 0x400C8) == 0x40040 ) strncpy((char*)error.state, "Transmitting", (sizeof(error.state) - 1));
     f54:	4a5e      	ldr	r2, [pc, #376]	; (10d0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x238>)
     f56:	4293      	cmp	r3, r2
     f58:	f000 80a9 	beq.w	10ae <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x216>
  else if ( (error.ESR1 & 0x400C8) == 0x40008 ) strncpy((char*)error.state, "Receiving", (sizeof(error.state) - 1));
     f5c:	4a5d      	ldr	r2, [pc, #372]	; (10d4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x23c>)
     f5e:	4293      	cmp	r3, r2
     f60:	f000 80ab 	beq.w	10ba <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x222>
  error.BIT1_ERR = (error.ESR1 & (1UL << 15)) ? 1 : 0;
     f64:	f3c5 33c0 	ubfx	r3, r5, #15, #1
     f68:	77a3      	strb	r3, [r4, #30]
  error.BIT0_ERR = (error.ESR1 & (1UL << 14)) ? 1 : 0;
     f6a:	f3c5 3380 	ubfx	r3, r5, #14, #1
     f6e:	77e3      	strb	r3, [r4, #31]
  error.ACK_ERR = (error.ESR1 & (1UL << 13)) ? 1 : 0;
     f70:	f3c5 3340 	ubfx	r3, r5, #13, #1
     f74:	f884 3020 	strb.w	r3, [r4, #32]
  error.CRC_ERR = (error.ESR1 & (1UL << 12)) ? 1 : 0;
     f78:	f3c5 3300 	ubfx	r3, r5, #12, #1
     f7c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  error.FRM_ERR = (error.ESR1 & (1UL << 11)) ? 1 : 0;
     f80:	f3c5 23c0 	ubfx	r3, r5, #11, #1
     f84:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  error.STF_ERR = (error.ESR1 & (1UL << 10)) ? 1 : 0;
     f88:	f3c5 2380 	ubfx	r3, r5, #10, #1
     f8c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
  error.TX_WRN = (error.ESR1 & (1UL << 9)) ? 1 : 0;
     f90:	f3c5 2340 	ubfx	r3, r5, #9, #1
     f94:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if ( (error.ESR1 & 0x30) == 0x0 ) strncpy((char*)error.FLT_CONF, "Error Active", (sizeof(error.FLT_CONF) - 1));
     f98:	f015 0f30 	tst.w	r5, #48	; 0x30
  error.RX_WRN = (error.ESR1 & (1UL << 8)) ? 1 : 0;
     f9c:	f3c5 2300 	ubfx	r3, r5, #8, #1
     fa0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  if ( (error.ESR1 & 0x30) == 0x0 ) strncpy((char*)error.FLT_CONF, "Error Active", (sizeof(error.FLT_CONF) - 1));
     fa4:	f104 0526 	add.w	r5, r4, #38	; 0x26
     fa8:	d116      	bne.n	fd8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x140>
     faa:	494b      	ldr	r1, [pc, #300]	; (10d8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x240>)
     fac:	220d      	movs	r2, #13
     fae:	4628      	mov	r0, r5
     fb0:	f007 ff9c 	bl	8eec <memcpy>
  error.RX_ERR_COUNTER = (uint8_t)(error.ECR >> 8);
     fb4:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if ( printDetails ) printErrors(error);
     fb8:	b9be      	cbnz	r6, fea <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x152>
  NVIC_ENABLE_IRQ(nvicIrq);
     fba:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
     fbe:	0953      	lsrs	r3, r2, #5
     fc0:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
     fc4:	3340      	adds	r3, #64	; 0x40
     fc6:	2001      	movs	r0, #1
     fc8:	009b      	lsls	r3, r3, #2
     fca:	f002 021f 	and.w	r2, r2, #31
     fce:	fa00 f202 	lsl.w	r2, r0, r2
     fd2:	601a      	str	r2, [r3, #0]
}
     fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else strncpy((char*)error.FLT_CONF, "Bus off", (sizeof(error.FLT_CONF) - 1));
     fd8:	4940      	ldr	r1, [pc, #256]	; (10dc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x244>)
     fda:	220d      	movs	r2, #13
     fdc:	4628      	mov	r0, r5
     fde:	f00a fecd 	bl	bd7c <strncpy>
  error.RX_ERR_COUNTER = (uint8_t)(error.ECR >> 8);
     fe2:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if ( printDetails ) printErrors(error);
     fe6:	2e00      	cmp	r6, #0
     fe8:	d0e7      	beq.n	fba <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x122>
     fea:	210f      	movs	r1, #15
     fec:	483c      	ldr	r0, [pc, #240]	; (10e0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x248>)
     fee:	f009 f8b9 	bl	a164 <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
     ff2:	4620      	mov	r0, r4
     ff4:	f00b f804 	bl	c000 <strlen>
     ff8:	4601      	mov	r1, r0
     ffa:	4620      	mov	r0, r4
     ffc:	f009 f8b2 	bl	a164 <usb_serial_write>

FCTP_FUNC void FCTP_OPT::printErrors(const CAN_error_t &error) {
  Serial.print("FlexCAN State: "); Serial.print((char*)error.state);
  if ( error.BIT1_ERR ) Serial.print(", BIT1_ERR");
    1000:	7fa3      	ldrb	r3, [r4, #30]
    1002:	2b00      	cmp	r3, #0
    1004:	d14e      	bne.n	10a4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x20c>
  if ( error.BIT0_ERR ) Serial.print(", BIT0_ERR");
    1006:	7fe3      	ldrb	r3, [r4, #31]
    1008:	2b00      	cmp	r3, #0
    100a:	d146      	bne.n	109a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x202>
  if ( error.ACK_ERR ) Serial.print(", ACK_ERR");
    100c:	f894 3020 	ldrb.w	r3, [r4, #32]
    1010:	2b00      	cmp	r3, #0
    1012:	d13d      	bne.n	1090 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1f8>
  if ( error.CRC_ERR ) Serial.print(", CRC_ERR");
    1014:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    1018:	bbab      	cbnz	r3, 1086 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1ee>
  if ( error.FRM_ERR ) Serial.print(", FRM_ERR");
    101a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    101e:	bb6b      	cbnz	r3, 107c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1e4>
  if ( error.STF_ERR ) Serial.print(", STF_ERR");
    1020:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    1024:	bb2b      	cbnz	r3, 1072 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1da>
  if ( error.RX_WRN ) Serial.printf(", RX_WRN: %d", error.RX_ERR_COUNTER);
    1026:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    102a:	b9db      	cbnz	r3, 1064 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1cc>
  if ( error.TX_WRN ) Serial.printf(", TX_WRN: %d", error.TX_ERR_COUNTER);
    102c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    1030:	b98b      	cbnz	r3, 1056 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1be>
  Serial.printf(", FLT_CONF: %s\n", (char*)error.FLT_CONF);
    1032:	492c      	ldr	r1, [pc, #176]	; (10e4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x24c>)
    1034:	482c      	ldr	r0, [pc, #176]	; (10e8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x250>)
    1036:	462a      	mov	r2, r5
    1038:	f007 fece 	bl	8dd8 <Print::printf(char const*, ...)>
}
    103c:	e7bd      	b.n	fba <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x122>
  else if ( (error.ESR1 & 0x400C8) == 0x0 ) strncpy((char*)error.state, "Not synchronized to CAN bus", (sizeof(error.state) - 1));
    103e:	492b      	ldr	r1, [pc, #172]	; (10ec <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x254>)
    1040:	221d      	movs	r2, #29
    1042:	4620      	mov	r0, r4
    1044:	f00a fe9a 	bl	bd7c <strncpy>
    1048:	e78c      	b.n	f64 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0xcc>
  if ( (error.ESR1 & 0x400C8) == 0x40080 ) strncpy((char*)error.state, "Idle", (sizeof(error.state) - 1));
    104a:	4929      	ldr	r1, [pc, #164]	; (10f0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x258>)
    104c:	221d      	movs	r2, #29
    104e:	4620      	mov	r0, r4
    1050:	f00a fe94 	bl	bd7c <strncpy>
    1054:	e786      	b.n	f64 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0xcc>
  if ( error.TX_WRN ) Serial.printf(", TX_WRN: %d", error.TX_ERR_COUNTER);
    1056:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
    105a:	4926      	ldr	r1, [pc, #152]	; (10f4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x25c>)
    105c:	4822      	ldr	r0, [pc, #136]	; (10e8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x250>)
    105e:	f007 febb 	bl	8dd8 <Print::printf(char const*, ...)>
    1062:	e7e6      	b.n	1032 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x19a>
  if ( error.RX_WRN ) Serial.printf(", RX_WRN: %d", error.RX_ERR_COUNTER);
    1064:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    1068:	4923      	ldr	r1, [pc, #140]	; (10f8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x260>)
    106a:	481f      	ldr	r0, [pc, #124]	; (10e8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x250>)
    106c:	f007 feb4 	bl	8dd8 <Print::printf(char const*, ...)>
    1070:	e7dc      	b.n	102c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x194>
    1072:	2109      	movs	r1, #9
    1074:	4821      	ldr	r0, [pc, #132]	; (10fc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x264>)
    1076:	f009 f875 	bl	a164 <usb_serial_write>
    107a:	e7d4      	b.n	1026 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x18e>
    107c:	2109      	movs	r1, #9
    107e:	4820      	ldr	r0, [pc, #128]	; (1100 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x268>)
    1080:	f009 f870 	bl	a164 <usb_serial_write>
    1084:	e7cc      	b.n	1020 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x188>
    1086:	2109      	movs	r1, #9
    1088:	481e      	ldr	r0, [pc, #120]	; (1104 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x26c>)
    108a:	f009 f86b 	bl	a164 <usb_serial_write>
    108e:	e7c4      	b.n	101a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x182>
    1090:	2109      	movs	r1, #9
    1092:	481d      	ldr	r0, [pc, #116]	; (1108 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x270>)
    1094:	f009 f866 	bl	a164 <usb_serial_write>
    1098:	e7bc      	b.n	1014 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x17c>
    109a:	210a      	movs	r1, #10
    109c:	481b      	ldr	r0, [pc, #108]	; (110c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x274>)
    109e:	f009 f861 	bl	a164 <usb_serial_write>
    10a2:	e7b3      	b.n	100c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x174>
    10a4:	210a      	movs	r1, #10
    10a6:	481a      	ldr	r0, [pc, #104]	; (1110 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x278>)
    10a8:	f009 f85c 	bl	a164 <usb_serial_write>
    10ac:	e7ab      	b.n	1006 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x16e>
  else if ( (error.ESR1 & 0x400C8) == 0x40040 ) strncpy((char*)error.state, "Transmitting", (sizeof(error.state) - 1));
    10ae:	4919      	ldr	r1, [pc, #100]	; (1114 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x27c>)
    10b0:	221d      	movs	r2, #29
    10b2:	4620      	mov	r0, r4
    10b4:	f00a fe62 	bl	bd7c <strncpy>
    10b8:	e754      	b.n	f64 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0xcc>
  else if ( (error.ESR1 & 0x400C8) == 0x40008 ) strncpy((char*)error.state, "Receiving", (sizeof(error.state) - 1));
    10ba:	4917      	ldr	r1, [pc, #92]	; (1118 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x280>)
    10bc:	221d      	movs	r2, #29
    10be:	4620      	mov	r0, r4
    10c0:	f00a fe5c 	bl	bd7c <strncpy>
    10c4:	e74e      	b.n	f64 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0xcc>
    10c6:	bf00      	nop
    10c8:	000400c8 	.word	0x000400c8
    10cc:	00040080 	.word	0x00040080
    10d0:	00040040 	.word	0x00040040
    10d4:	00040008 	.word	0x00040008
    10d8:	00011764 	.word	0x00011764
    10dc:	00011774 	.word	0x00011774
    10e0:	000117f4 	.word	0x000117f4
    10e4:	000117e4 	.word	0x000117e4
    10e8:	1fff0e64 	.word	0x1fff0e64
    10ec:	0001172c 	.word	0x0001172c
    10f0:	00011724 	.word	0x00011724
    10f4:	000117d4 	.word	0x000117d4
    10f8:	000117c4 	.word	0x000117c4
    10fc:	000117b8 	.word	0x000117b8
    1100:	000117ac 	.word	0x000117ac
    1104:	000117a0 	.word	0x000117a0
    1108:	00011794 	.word	0x00011794
    110c:	00011788 	.word	0x00011788
    1110:	0001177c 	.word	0x0001177c
    1114:	00011748 	.word	0x00011748
    1118:	00011758 	.word	0x00011758

0000111c <autoBaud0()>:
void autoBaud0(){
    111c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_error_t error_message;  
    1120:	f8df e12c 	ldr.w	lr, [pc, #300]	; 1250 <autoBaud0()+0x134>
    1124:	f8df 812c 	ldr.w	r8, [pc, #300]	; 1254 <autoBaud0()+0x138>
    1128:	f8df 912c 	ldr.w	r9, [pc, #300]	; 1258 <autoBaud0()+0x13c>
    112c:	4c3f      	ldr	r4, [pc, #252]	; (122c <autoBaud0()+0x110>)
    112e:	4e40      	ldr	r6, [pc, #256]	; (1230 <autoBaud0()+0x114>)
    Can0.setBaudRate(Can0_bitrate);
    1130:	4d40      	ldr	r5, [pc, #256]	; (1234 <autoBaud0()+0x118>)
    1132:	f8df b128 	ldr.w	fp, [pc, #296]	; 125c <autoBaud0()+0x140>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1136:	f8df a110 	ldr.w	sl, [pc, #272]	; 1248 <autoBaud0()+0x12c>
      if (RXCount0 > 0) {
    113a:	4f3f      	ldr	r7, [pc, #252]	; (1238 <autoBaud0()+0x11c>)
  CAN_error_t error_message;  
    113c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
void autoBaud0(){
    1140:	b095      	sub	sp, #84	; 0x54
  CAN_error_t error_message;  
    1142:	f10d 0c10 	add.w	ip, sp, #16
    1146:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    114a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    114e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1152:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    1156:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    115a:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
    115e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    Can0_bitrate = baud_rates[i];
    1162:	f858 1b04 	ldr.w	r1, [r8], #4
    1166:	f8c9 1000 	str.w	r1, [r9]
    Can0.setBaudRate(Can0_bitrate);
    116a:	2200      	movs	r2, #0
    116c:	4628      	mov	r0, r5
    116e:	f7ff fa29 	bl	5c4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>
    1172:	2120      	movs	r1, #32
    1174:	4658      	mov	r0, fp
    1176:	f008 fff5 	bl	a164 <usb_serial_write>
    117a:	2300      	movs	r3, #0
    117c:	220a      	movs	r2, #10
    117e:	f8d9 1000 	ldr.w	r1, [r9]
    1182:	4650      	mov	r0, sl
    1184:	f007 fe36 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1188:	2105      	movs	r1, #5
    118a:	482c      	ldr	r0, [pc, #176]	; (123c <autoBaud0()+0x120>)
    118c:	f008 ffea 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1190:	4650      	mov	r0, sl
    1192:	f007 fe09 	bl	8da8 <Print::println()>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1196:	6823      	ldr	r3, [r4, #0]
    1198:	9301      	str	r3, [sp, #4]
	return ret;
    119a:	9b01      	ldr	r3, [sp, #4]
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    119c:	4619      	mov	r1, r3
    119e:	6031      	str	r1, [r6, #0]
    11a0:	e006      	b.n	11b0 <autoBaud0()+0x94>
      if (RXCount0 > 0) {
    11a2:	683b      	ldr	r3, [r7, #0]
    11a4:	bb3b      	cbnz	r3, 11f6 <autoBaud0()+0xda>
      if (Can0.error(error_message,true)){
    11a6:	f7ff fe77 	bl	e98 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)>
    11aa:	2800      	cmp	r0, #0
    11ac:	d138      	bne.n	1220 <autoBaud0()+0x104>
	operator unsigned long () const { return millis() - ms; }
    11ae:	6831      	ldr	r1, [r6, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11b0:	6823      	ldr	r3, [r4, #0]
    11b2:	9303      	str	r3, [sp, #12]
	return ret;
    11b4:	9b03      	ldr	r3, [sp, #12]
    11b6:	1a5b      	subs	r3, r3, r1
    while (routine_time < AUTOBAUD_TIMEOUT)
    11b8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
      if (Can0.error(error_message,true)){
    11bc:	f04f 0201 	mov.w	r2, #1
    11c0:	a904      	add	r1, sp, #16
    11c2:	4628      	mov	r0, r5
    while (routine_time < AUTOBAUD_TIMEOUT)
    11c4:	d3ed      	bcc.n	11a2 <autoBaud0()+0x86>
  for (uint8_t i = 0; i<NUM_BAUD_RATES;  i++ ){
    11c6:	4b1e      	ldr	r3, [pc, #120]	; (1240 <autoBaud0()+0x124>)
    11c8:	4598      	cmp	r8, r3
    11ca:	d1ca      	bne.n	1162 <autoBaud0()+0x46>
    11cc:	2121      	movs	r1, #33	; 0x21
    11ce:	481d      	ldr	r0, [pc, #116]	; (1244 <autoBaud0()+0x128>)
    11d0:	f008 ffc8 	bl	a164 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    11d4:	2300      	movs	r3, #0
    11d6:	220a      	movs	r2, #10
    11d8:	f8d9 1000 	ldr.w	r1, [r9]
    11dc:	481a      	ldr	r0, [pc, #104]	; (1248 <autoBaud0()+0x12c>)
    11de:	f007 fe09 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    11e2:	2105      	movs	r1, #5
    11e4:	4815      	ldr	r0, [pc, #84]	; (123c <autoBaud0()+0x120>)
    11e6:	f008 ffbd 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    11ea:	4817      	ldr	r0, [pc, #92]	; (1248 <autoBaud0()+0x12c>)
    11ec:	f007 fddc 	bl	8da8 <Print::println()>
}
    11f0:	b015      	add	sp, #84	; 0x54
    11f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11f6:	2126      	movs	r1, #38	; 0x26
    11f8:	4814      	ldr	r0, [pc, #80]	; (124c <autoBaud0()+0x130>)
    11fa:	f008 ffb3 	bl	a164 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    11fe:	2300      	movs	r3, #0
    1200:	220a      	movs	r2, #10
    1202:	f8d9 1000 	ldr.w	r1, [r9]
    1206:	4810      	ldr	r0, [pc, #64]	; (1248 <autoBaud0()+0x12c>)
    1208:	f007 fdf4 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    120c:	2105      	movs	r1, #5
    120e:	480b      	ldr	r0, [pc, #44]	; (123c <autoBaud0()+0x120>)
    1210:	f008 ffa8 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1214:	480c      	ldr	r0, [pc, #48]	; (1248 <autoBaud0()+0x12c>)
    1216:	f007 fdc7 	bl	8da8 <Print::println()>
    121a:	b015      	add	sp, #84	; 0x54
    121c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1220:	6823      	ldr	r3, [r4, #0]
    1222:	9302      	str	r3, [sp, #8]
	return ret;
    1224:	9902      	ldr	r1, [sp, #8]
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    1226:	f5a1 71c8 	sub.w	r1, r1, #400	; 0x190
    122a:	e7b8      	b.n	119e <autoBaud0()+0x82>
    122c:	1fff7ae4 	.word	0x1fff7ae4
    1230:	1fff7604 	.word	0x1fff7604
    1234:	1fff15f8 	.word	0x1fff15f8
    1238:	1fff6840 	.word	0x1fff6840
    123c:	00011828 	.word	0x00011828
    1240:	1fff0c54 	.word	0x1fff0c54
    1244:	00011858 	.word	0x00011858
    1248:	1fff0e64 	.word	0x1fff0e64
    124c:	00011830 	.word	0x00011830
    1250:	00011c30 	.word	0x00011c30
    1254:	1fff0c3c 	.word	0x1fff0c3c
    1258:	1fff3f10 	.word	0x1fff3f10
    125c:	00011804 	.word	0x00011804

00001260 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)>:
        uint16_t size() { return _available; }
    1260:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
    1264:	f8bc 3cd4 	ldrh.w	r3, [ip, #3284]	; 0xcd4
    1268:	b29b      	uxth	r3, r3
  if ( !busESR1.size() ) return 0;
    126a:	b90b      	cbnz	r3, 1270 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x10>
    126c:	4618      	mov	r0, r3
}
    126e:	4770      	bx	lr
FCTP_FUNC bool FCTP_OPT::error(CAN_error_t &error, bool printDetails) {
    1270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  NVIC_DISABLE_IRQ(nvicIrq);
    1274:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
    1278:	4616      	mov	r6, r2
    127a:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    127e:	0953      	lsrs	r3, r2, #5
    1280:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    1284:	3360      	adds	r3, #96	; 0x60
    1286:	009b      	lsls	r3, r3, #2
    1288:	460c      	mov	r4, r1
    128a:	f002 021f 	and.w	r2, r2, #31
    128e:	2101      	movs	r1, #1
    1290:	fa01 f202 	lsl.w	r2, r1, r2
    1294:	601a      	str	r2, [r3, #0]
  if ( _available ) _available--;
    1296:	f8bc 3cd4 	ldrh.w	r3, [ip, #3284]	; 0xcd4
    129a:	b29b      	uxth	r3, r3
    129c:	b12b      	cbz	r3, 12aa <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x4a>
    129e:	f8bc 3cd4 	ldrh.w	r3, [ip, #3284]	; 0xcd4
    12a2:	3b01      	subs	r3, #1
    12a4:	b29b      	uxth	r3, r3
    12a6:	f8ac 3cd4 	strh.w	r3, [ip, #3284]	; 0xcd4
  T value = _cbuf[((head)&(_size-1))];
    12aa:	f8bc 3cd0 	ldrh.w	r3, [ip, #3280]	; 0xcd0
    12ae:	f003 030f 	and.w	r3, r3, #15
    12b2:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
    12b6:	f8d3 5cd8 	ldr.w	r5, [r3, #3288]	; 0xcd8
  head = ((head + 1)&(2*_size-1));
    12ba:	f8bc 3cd0 	ldrh.w	r3, [ip, #3280]	; 0xcd0
    12be:	3301      	adds	r3, #1
    12c0:	f003 031f 	and.w	r3, r3, #31
    12c4:	f8ac 3cd0 	strh.w	r3, [ip, #3280]	; 0xcd0
  if ( _available ) _available--;
    12c8:	f8bc 3d9c 	ldrh.w	r3, [ip, #3484]	; 0xd9c
  error.ESR1 = busESR1.read();
    12cc:	63a5      	str	r5, [r4, #56]	; 0x38
    12ce:	b29b      	uxth	r3, r3
    12d0:	b12b      	cbz	r3, 12de <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x7e>
    12d2:	f8bc 3d9c 	ldrh.w	r3, [ip, #3484]	; 0xd9c
    12d6:	3b01      	subs	r3, #1
    12d8:	b29b      	uxth	r3, r3
    12da:	f8ac 3d9c 	strh.w	r3, [ip, #3484]	; 0xd9c
  T value = _cbuf[((head)&(_size-1))];
    12de:	f8bc 3d98 	ldrh.w	r3, [ip, #3480]	; 0xd98
    12e2:	f003 030f 	and.w	r3, r3, #15
    12e6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    12ea:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
    12ee:	f641 519e 	movw	r1, #7582	; 0x1d9e
    12f2:	f8b3 2d9e 	ldrh.w	r2, [r3, #3486]	; 0xd9e
  head = ((head + 1)&(2*_size-1));
    12f6:	f8bc 3d98 	ldrh.w	r3, [ip, #3480]	; 0xd98
    12fa:	f830 8001 	ldrh.w	r8, [r0, r1]
    12fe:	3301      	adds	r3, #1
    1300:	f003 031f 	and.w	r3, r3, #31
    1304:	f8ac 3d98 	strh.w	r3, [ip, #3480]	; 0xd98
  if ( (error.ESR1 & 0x400C8) == 0x40080 ) strncpy((char*)error.state, "Idle", (sizeof(error.state) - 1));
    1308:	4b61      	ldr	r3, [pc, #388]	; (1490 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x230>)
  error.ECR = busECR.read();
    130a:	87a2      	strh	r2, [r4, #60]	; 0x3c
  if ( (error.ESR1 & 0x400C8) == 0x40080 ) strncpy((char*)error.state, "Idle", (sizeof(error.state) - 1));
    130c:	4a61      	ldr	r2, [pc, #388]	; (1494 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x234>)
    130e:	402b      	ands	r3, r5
    1310:	4293      	cmp	r3, r2
    1312:	fa98 f898 	rev16.w	r8, r8
    1316:	d07c      	beq.n	1412 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1b2>
  else if ( (error.ESR1 & 0x400C8) == 0x0 ) strncpy((char*)error.state, "Not synchronized to CAN bus", (sizeof(error.state) - 1));
    1318:	2b00      	cmp	r3, #0
    131a:	d074      	beq.n	1406 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1a6>
  else if ( (error.ESR1 & 0x400C8) == 0x40040 ) strncpy((char*)error.state, "Transmitting", (sizeof(error.state) - 1));
    131c:	4a5e      	ldr	r2, [pc, #376]	; (1498 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x238>)
    131e:	4293      	cmp	r3, r2
    1320:	f000 80a9 	beq.w	1476 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x216>
  else if ( (error.ESR1 & 0x400C8) == 0x40008 ) strncpy((char*)error.state, "Receiving", (sizeof(error.state) - 1));
    1324:	4a5d      	ldr	r2, [pc, #372]	; (149c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x23c>)
    1326:	4293      	cmp	r3, r2
    1328:	f000 80ab 	beq.w	1482 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x222>
  error.BIT1_ERR = (error.ESR1 & (1UL << 15)) ? 1 : 0;
    132c:	f3c5 33c0 	ubfx	r3, r5, #15, #1
    1330:	77a3      	strb	r3, [r4, #30]
  error.BIT0_ERR = (error.ESR1 & (1UL << 14)) ? 1 : 0;
    1332:	f3c5 3380 	ubfx	r3, r5, #14, #1
    1336:	77e3      	strb	r3, [r4, #31]
  error.ACK_ERR = (error.ESR1 & (1UL << 13)) ? 1 : 0;
    1338:	f3c5 3340 	ubfx	r3, r5, #13, #1
    133c:	f884 3020 	strb.w	r3, [r4, #32]
  error.CRC_ERR = (error.ESR1 & (1UL << 12)) ? 1 : 0;
    1340:	f3c5 3300 	ubfx	r3, r5, #12, #1
    1344:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  error.FRM_ERR = (error.ESR1 & (1UL << 11)) ? 1 : 0;
    1348:	f3c5 23c0 	ubfx	r3, r5, #11, #1
    134c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  error.STF_ERR = (error.ESR1 & (1UL << 10)) ? 1 : 0;
    1350:	f3c5 2380 	ubfx	r3, r5, #10, #1
    1354:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
  error.TX_WRN = (error.ESR1 & (1UL << 9)) ? 1 : 0;
    1358:	f3c5 2340 	ubfx	r3, r5, #9, #1
    135c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if ( (error.ESR1 & 0x30) == 0x0 ) strncpy((char*)error.FLT_CONF, "Error Active", (sizeof(error.FLT_CONF) - 1));
    1360:	f015 0f30 	tst.w	r5, #48	; 0x30
  error.RX_WRN = (error.ESR1 & (1UL << 8)) ? 1 : 0;
    1364:	f3c5 2300 	ubfx	r3, r5, #8, #1
    1368:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  if ( (error.ESR1 & 0x30) == 0x0 ) strncpy((char*)error.FLT_CONF, "Error Active", (sizeof(error.FLT_CONF) - 1));
    136c:	f104 0526 	add.w	r5, r4, #38	; 0x26
    1370:	d116      	bne.n	13a0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x140>
    1372:	494b      	ldr	r1, [pc, #300]	; (14a0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x240>)
    1374:	220d      	movs	r2, #13
    1376:	4628      	mov	r0, r5
    1378:	f007 fdb8 	bl	8eec <memcpy>
  error.RX_ERR_COUNTER = (uint8_t)(error.ECR >> 8);
    137c:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if ( printDetails ) printErrors(error);
    1380:	b9be      	cbnz	r6, 13b2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x152>
  NVIC_ENABLE_IRQ(nvicIrq);
    1382:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    1386:	0953      	lsrs	r3, r2, #5
    1388:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    138c:	3340      	adds	r3, #64	; 0x40
    138e:	2001      	movs	r0, #1
    1390:	009b      	lsls	r3, r3, #2
    1392:	f002 021f 	and.w	r2, r2, #31
    1396:	fa00 f202 	lsl.w	r2, r0, r2
    139a:	601a      	str	r2, [r3, #0]
}
    139c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else strncpy((char*)error.FLT_CONF, "Bus off", (sizeof(error.FLT_CONF) - 1));
    13a0:	4940      	ldr	r1, [pc, #256]	; (14a4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x244>)
    13a2:	220d      	movs	r2, #13
    13a4:	4628      	mov	r0, r5
    13a6:	f00a fce9 	bl	bd7c <strncpy>
  error.RX_ERR_COUNTER = (uint8_t)(error.ECR >> 8);
    13aa:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if ( printDetails ) printErrors(error);
    13ae:	2e00      	cmp	r6, #0
    13b0:	d0e7      	beq.n	1382 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x122>
    13b2:	210f      	movs	r1, #15
    13b4:	483c      	ldr	r0, [pc, #240]	; (14a8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x248>)
    13b6:	f008 fed5 	bl	a164 <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    13ba:	4620      	mov	r0, r4
    13bc:	f00a fe20 	bl	c000 <strlen>
    13c0:	4601      	mov	r1, r0
    13c2:	4620      	mov	r0, r4
    13c4:	f008 fece 	bl	a164 <usb_serial_write>
  if ( error.BIT1_ERR ) Serial.print(", BIT1_ERR");
    13c8:	7fa3      	ldrb	r3, [r4, #30]
    13ca:	2b00      	cmp	r3, #0
    13cc:	d14e      	bne.n	146c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x20c>
  if ( error.BIT0_ERR ) Serial.print(", BIT0_ERR");
    13ce:	7fe3      	ldrb	r3, [r4, #31]
    13d0:	2b00      	cmp	r3, #0
    13d2:	d146      	bne.n	1462 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x202>
  if ( error.ACK_ERR ) Serial.print(", ACK_ERR");
    13d4:	f894 3020 	ldrb.w	r3, [r4, #32]
    13d8:	2b00      	cmp	r3, #0
    13da:	d13d      	bne.n	1458 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1f8>
  if ( error.CRC_ERR ) Serial.print(", CRC_ERR");
    13dc:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    13e0:	bbab      	cbnz	r3, 144e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1ee>
  if ( error.FRM_ERR ) Serial.print(", FRM_ERR");
    13e2:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    13e6:	bb6b      	cbnz	r3, 1444 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1e4>
  if ( error.STF_ERR ) Serial.print(", STF_ERR");
    13e8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    13ec:	bb2b      	cbnz	r3, 143a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1da>
  if ( error.RX_WRN ) Serial.printf(", RX_WRN: %d", error.RX_ERR_COUNTER);
    13ee:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    13f2:	b9db      	cbnz	r3, 142c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1cc>
  if ( error.TX_WRN ) Serial.printf(", TX_WRN: %d", error.TX_ERR_COUNTER);
    13f4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    13f8:	b98b      	cbnz	r3, 141e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x1be>
  Serial.printf(", FLT_CONF: %s\n", (char*)error.FLT_CONF);
    13fa:	492c      	ldr	r1, [pc, #176]	; (14ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x24c>)
    13fc:	482c      	ldr	r0, [pc, #176]	; (14b0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x250>)
    13fe:	462a      	mov	r2, r5
    1400:	f007 fcea 	bl	8dd8 <Print::printf(char const*, ...)>
}
    1404:	e7bd      	b.n	1382 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x122>
  else if ( (error.ESR1 & 0x400C8) == 0x0 ) strncpy((char*)error.state, "Not synchronized to CAN bus", (sizeof(error.state) - 1));
    1406:	492b      	ldr	r1, [pc, #172]	; (14b4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x254>)
    1408:	221d      	movs	r2, #29
    140a:	4620      	mov	r0, r4
    140c:	f00a fcb6 	bl	bd7c <strncpy>
    1410:	e78c      	b.n	132c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0xcc>
  if ( (error.ESR1 & 0x400C8) == 0x40080 ) strncpy((char*)error.state, "Idle", (sizeof(error.state) - 1));
    1412:	4929      	ldr	r1, [pc, #164]	; (14b8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x258>)
    1414:	221d      	movs	r2, #29
    1416:	4620      	mov	r0, r4
    1418:	f00a fcb0 	bl	bd7c <strncpy>
    141c:	e786      	b.n	132c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0xcc>
  if ( error.TX_WRN ) Serial.printf(", TX_WRN: %d", error.TX_ERR_COUNTER);
    141e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
    1422:	4926      	ldr	r1, [pc, #152]	; (14bc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x25c>)
    1424:	4822      	ldr	r0, [pc, #136]	; (14b0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x250>)
    1426:	f007 fcd7 	bl	8dd8 <Print::printf(char const*, ...)>
    142a:	e7e6      	b.n	13fa <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x19a>
  if ( error.RX_WRN ) Serial.printf(", RX_WRN: %d", error.RX_ERR_COUNTER);
    142c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    1430:	4923      	ldr	r1, [pc, #140]	; (14c0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x260>)
    1432:	481f      	ldr	r0, [pc, #124]	; (14b0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x250>)
    1434:	f007 fcd0 	bl	8dd8 <Print::printf(char const*, ...)>
    1438:	e7dc      	b.n	13f4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x194>
    143a:	2109      	movs	r1, #9
    143c:	4821      	ldr	r0, [pc, #132]	; (14c4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x264>)
    143e:	f008 fe91 	bl	a164 <usb_serial_write>
    1442:	e7d4      	b.n	13ee <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x18e>
    1444:	2109      	movs	r1, #9
    1446:	4820      	ldr	r0, [pc, #128]	; (14c8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x268>)
    1448:	f008 fe8c 	bl	a164 <usb_serial_write>
    144c:	e7cc      	b.n	13e8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x188>
    144e:	2109      	movs	r1, #9
    1450:	481e      	ldr	r0, [pc, #120]	; (14cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x26c>)
    1452:	f008 fe87 	bl	a164 <usb_serial_write>
    1456:	e7c4      	b.n	13e2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x182>
    1458:	2109      	movs	r1, #9
    145a:	481d      	ldr	r0, [pc, #116]	; (14d0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x270>)
    145c:	f008 fe82 	bl	a164 <usb_serial_write>
    1460:	e7bc      	b.n	13dc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x17c>
    1462:	210a      	movs	r1, #10
    1464:	481b      	ldr	r0, [pc, #108]	; (14d4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x274>)
    1466:	f008 fe7d 	bl	a164 <usb_serial_write>
    146a:	e7b3      	b.n	13d4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x174>
    146c:	210a      	movs	r1, #10
    146e:	481a      	ldr	r0, [pc, #104]	; (14d8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x278>)
    1470:	f008 fe78 	bl	a164 <usb_serial_write>
    1474:	e7ab      	b.n	13ce <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x16e>
  else if ( (error.ESR1 & 0x400C8) == 0x40040 ) strncpy((char*)error.state, "Transmitting", (sizeof(error.state) - 1));
    1476:	4919      	ldr	r1, [pc, #100]	; (14dc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x27c>)
    1478:	221d      	movs	r2, #29
    147a:	4620      	mov	r0, r4
    147c:	f00a fc7e 	bl	bd7c <strncpy>
    1480:	e754      	b.n	132c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0xcc>
  else if ( (error.ESR1 & 0x400C8) == 0x40008 ) strncpy((char*)error.state, "Receiving", (sizeof(error.state) - 1));
    1482:	4917      	ldr	r1, [pc, #92]	; (14e0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0x280>)
    1484:	221d      	movs	r2, #29
    1486:	4620      	mov	r0, r4
    1488:	f00a fc78 	bl	bd7c <strncpy>
    148c:	e74e      	b.n	132c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)+0xcc>
    148e:	bf00      	nop
    1490:	000400c8 	.word	0x000400c8
    1494:	00040080 	.word	0x00040080
    1498:	00040040 	.word	0x00040040
    149c:	00040008 	.word	0x00040008
    14a0:	00011764 	.word	0x00011764
    14a4:	00011774 	.word	0x00011774
    14a8:	000117f4 	.word	0x000117f4
    14ac:	000117e4 	.word	0x000117e4
    14b0:	1fff0e64 	.word	0x1fff0e64
    14b4:	0001172c 	.word	0x0001172c
    14b8:	00011724 	.word	0x00011724
    14bc:	000117d4 	.word	0x000117d4
    14c0:	000117c4 	.word	0x000117c4
    14c4:	000117b8 	.word	0x000117b8
    14c8:	000117ac 	.word	0x000117ac
    14cc:	000117a0 	.word	0x000117a0
    14d0:	00011794 	.word	0x00011794
    14d4:	00011788 	.word	0x00011788
    14d8:	0001177c 	.word	0x0001177c
    14dc:	00011748 	.word	0x00011748
    14e0:	00011758 	.word	0x00011758

000014e4 <autoBaud1()>:
void autoBaud1(){
    14e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_error_t error_message;
    14e8:	f8df e12c 	ldr.w	lr, [pc, #300]	; 1618 <autoBaud1()+0x134>
    14ec:	f8df 812c 	ldr.w	r8, [pc, #300]	; 161c <autoBaud1()+0x138>
    14f0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 1620 <autoBaud1()+0x13c>
    14f4:	4c3f      	ldr	r4, [pc, #252]	; (15f4 <autoBaud1()+0x110>)
    14f6:	4e40      	ldr	r6, [pc, #256]	; (15f8 <autoBaud1()+0x114>)
    Can1.setBaudRate(Can1_bitrate);
    14f8:	4d40      	ldr	r5, [pc, #256]	; (15fc <autoBaud1()+0x118>)
    14fa:	f8df b128 	ldr.w	fp, [pc, #296]	; 1624 <autoBaud1()+0x140>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    14fe:	f8df a110 	ldr.w	sl, [pc, #272]	; 1610 <autoBaud1()+0x12c>
      if (RXCount1 > 0) {
    1502:	4f3f      	ldr	r7, [pc, #252]	; (1600 <autoBaud1()+0x11c>)
  CAN_error_t error_message;
    1504:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
void autoBaud1(){
    1508:	b095      	sub	sp, #84	; 0x54
  CAN_error_t error_message;
    150a:	f10d 0c10 	add.w	ip, sp, #16
    150e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1512:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    1516:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    151a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    151e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1522:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
    1526:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    Can1_bitrate = baud_rates[i];
    152a:	f858 1b04 	ldr.w	r1, [r8], #4
    152e:	f8c9 1000 	str.w	r1, [r9]
    Can1.setBaudRate(Can1_bitrate);
    1532:	2200      	movs	r2, #0
    1534:	4628      	mov	r0, r5
    1536:	f7fe ffa5 	bl	484 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>
    153a:	2120      	movs	r1, #32
    153c:	4658      	mov	r0, fp
    153e:	f008 fe11 	bl	a164 <usb_serial_write>
    1542:	2300      	movs	r3, #0
    1544:	220a      	movs	r2, #10
    1546:	f8d9 1000 	ldr.w	r1, [r9]
    154a:	4650      	mov	r0, sl
    154c:	f007 fc52 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1550:	2105      	movs	r1, #5
    1552:	482c      	ldr	r0, [pc, #176]	; (1604 <autoBaud1()+0x120>)
    1554:	f008 fe06 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1558:	4650      	mov	r0, sl
    155a:	f007 fc25 	bl	8da8 <Print::println()>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    155e:	6823      	ldr	r3, [r4, #0]
    1560:	9301      	str	r3, [sp, #4]
	return ret;
    1562:	9b01      	ldr	r3, [sp, #4]
    1564:	4619      	mov	r1, r3
    1566:	6031      	str	r1, [r6, #0]
    1568:	e006      	b.n	1578 <autoBaud1()+0x94>
      if (RXCount1 > 0) {
    156a:	683b      	ldr	r3, [r7, #0]
    156c:	bb3b      	cbnz	r3, 15be <autoBaud1()+0xda>
      if (Can1.error(error_message,true)){
    156e:	f7ff fe77 	bl	1260 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::error(CAN_error_t&, bool)>
    1572:	2800      	cmp	r0, #0
    1574:	d138      	bne.n	15e8 <autoBaud1()+0x104>
	operator unsigned long () const { return millis() - ms; }
    1576:	6831      	ldr	r1, [r6, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1578:	6823      	ldr	r3, [r4, #0]
    157a:	9303      	str	r3, [sp, #12]
	return ret;
    157c:	9b03      	ldr	r3, [sp, #12]
    157e:	1a5b      	subs	r3, r3, r1
    while (routine_time < AUTOBAUD_TIMEOUT)
    1580:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
      if (Can1.error(error_message,true)){
    1584:	f04f 0201 	mov.w	r2, #1
    1588:	a904      	add	r1, sp, #16
    158a:	4628      	mov	r0, r5
    while (routine_time < AUTOBAUD_TIMEOUT)
    158c:	d3ed      	bcc.n	156a <autoBaud1()+0x86>
  for (uint8_t i = 0; i<NUM_BAUD_RATES;  i++ ){
    158e:	4b1e      	ldr	r3, [pc, #120]	; (1608 <autoBaud1()+0x124>)
    1590:	4598      	cmp	r8, r3
    1592:	d1ca      	bne.n	152a <autoBaud1()+0x46>
    1594:	2121      	movs	r1, #33	; 0x21
    1596:	481d      	ldr	r0, [pc, #116]	; (160c <autoBaud1()+0x128>)
    1598:	f008 fde4 	bl	a164 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    159c:	2300      	movs	r3, #0
    159e:	220a      	movs	r2, #10
    15a0:	f8d9 1000 	ldr.w	r1, [r9]
    15a4:	481a      	ldr	r0, [pc, #104]	; (1610 <autoBaud1()+0x12c>)
    15a6:	f007 fc25 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    15aa:	2105      	movs	r1, #5
    15ac:	4815      	ldr	r0, [pc, #84]	; (1604 <autoBaud1()+0x120>)
    15ae:	f008 fdd9 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    15b2:	4817      	ldr	r0, [pc, #92]	; (1610 <autoBaud1()+0x12c>)
    15b4:	f007 fbf8 	bl	8da8 <Print::println()>
}
    15b8:	b015      	add	sp, #84	; 0x54
    15ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15be:	2126      	movs	r1, #38	; 0x26
    15c0:	4814      	ldr	r0, [pc, #80]	; (1614 <autoBaud1()+0x130>)
    15c2:	f008 fdcf 	bl	a164 <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    15c6:	2300      	movs	r3, #0
    15c8:	220a      	movs	r2, #10
    15ca:	f8d9 1000 	ldr.w	r1, [r9]
    15ce:	4810      	ldr	r0, [pc, #64]	; (1610 <autoBaud1()+0x12c>)
    15d0:	f007 fc10 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    15d4:	2105      	movs	r1, #5
    15d6:	480b      	ldr	r0, [pc, #44]	; (1604 <autoBaud1()+0x120>)
    15d8:	f008 fdc4 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    15dc:	480c      	ldr	r0, [pc, #48]	; (1610 <autoBaud1()+0x12c>)
    15de:	f007 fbe3 	bl	8da8 <Print::println()>
    15e2:	b015      	add	sp, #84	; 0x54
    15e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15e8:	6823      	ldr	r3, [r4, #0]
    15ea:	9302      	str	r3, [sp, #8]
	return ret;
    15ec:	9902      	ldr	r1, [sp, #8]
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    15ee:	f5a1 71c8 	sub.w	r1, r1, #400	; 0x190
    15f2:	e7b8      	b.n	1566 <autoBaud1()+0x82>
    15f4:	1fff7ae4 	.word	0x1fff7ae4
    15f8:	1fff7604 	.word	0x1fff7604
    15fc:	1fff3f14 	.word	0x1fff3f14
    1600:	1fff6844 	.word	0x1fff6844
    1604:	00011828 	.word	0x00011828
    1608:	1fff0c54 	.word	0x1fff0c54
    160c:	000118c8 	.word	0x000118c8
    1610:	1fff0e64 	.word	0x1fff0e64
    1614:	000118a0 	.word	0x000118a0
    1618:	00011c30 	.word	0x00011c30
    161c:	1fff0c3c 	.word	0x1fff0c3c
    1620:	1fff682c 	.word	0x1fff682c
    1624:	0001187c 	.word	0x0001187c

00001628 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>:
FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
    1628:	b510      	push	{r4, lr}
  if ( mb_num == FIFO ) {
    162a:	780b      	ldrb	r3, [r1, #0]
    162c:	2b63      	cmp	r3, #99	; 0x63
FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
    162e:	4604      	mov	r4, r0
    1630:	b082      	sub	sp, #8
    1632:	4610      	mov	r0, r2
  if ( mb_num == FIFO ) {
    1634:	d013      	beq.n	165e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x36>
  if ( _mbHandlers[mb_num] ) _mbHandlers[mb_num](msg);
    1636:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
    163a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    163e:	685b      	ldr	r3, [r3, #4]
    1640:	b113      	cbz	r3, 1648 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x20>
    1642:	9201      	str	r2, [sp, #4]
    1644:	4798      	blx	r3
    1646:	9801      	ldr	r0, [sp, #4]
  if ( _mainHandler ) _mainHandler(msg);
    1648:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    164c:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
    1650:	b11b      	cbz	r3, 165a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x32>
}
    1652:	b002      	add	sp, #8
    1654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if ( _mainHandler ) _mainHandler(msg);
    1658:	4718      	bx	r3
}
    165a:	b002      	add	sp, #8
    165c:	bd10      	pop	{r4, pc}
    if ( _mbHandlers[0] ) _mbHandlers[0](msg);
    165e:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    1662:	f8d4 3704 	ldr.w	r3, [r4, #1796]	; 0x704
    1666:	2b00      	cmp	r3, #0
    1668:	d0f0      	beq.n	164c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x24>
    166a:	9201      	str	r2, [sp, #4]
    166c:	4798      	blx	r3
    166e:	9801      	ldr	r0, [sp, #4]
    1670:	e7ec      	b.n	164c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x24>
    1672:	bf00      	nop

00001674 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>:
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    1674:	291f      	cmp	r1, #31
FCTP_FUNC void FCTP_OPT::writeTxMailbox(uint8_t mb_num, const CAN_message_t &msg) {
    1676:	b410      	push	{r4}
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    1678:	481b      	ldr	r0, [pc, #108]	; (16e8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x74>)
    167a:	d823      	bhi.n	16c4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x50>
    167c:	6b04      	ldr	r4, [r0, #48]	; 0x30
    167e:	2301      	movs	r3, #1
    1680:	408b      	lsls	r3, r1
    1682:	4323      	orrs	r3, r4
    1684:	6303      	str	r3, [r0, #48]	; 0x30
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    1686:	4b19      	ldr	r3, [pc, #100]	; (16ec <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x78>)
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1688:	79d0      	ldrb	r0, [r2, #7]
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    168a:	440b      	add	r3, r1
    168c:	011b      	lsls	r3, r3, #4
  mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    168e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    1692:	6019      	str	r1, [r3, #0]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1694:	b1f8      	cbz	r0, 16d6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x62>
    1696:	6810      	ldr	r0, [r2, #0]
  if ( msg.flags.remote ) code |= (1UL << 20);
    1698:	7a11      	ldrb	r1, [r2, #8]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    169a:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
  if ( msg.flags.remote ) code |= (1UL << 20);
    169e:	0509      	lsls	r1, r1, #20
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    16a0:	6058      	str	r0, [r3, #4]
  if ( msg.flags.extended ) code |= (3UL << 21);
    16a2:	f441 01c0 	orr.w	r1, r1, #6291456	; 0x600000
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    16a6:	68d0      	ldr	r0, [r2, #12]
}
    16a8:	f85d 4b04 	ldr.w	r4, [sp], #4
    16ac:	ba00      	rev	r0, r0
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    16ae:	6098      	str	r0, [r3, #8]
    16b0:	6910      	ldr	r0, [r2, #16]
    16b2:	ba00      	rev	r0, r0
    16b4:	60d8      	str	r0, [r3, #12]
  code |= msg.len << 16;
    16b6:	7ad2      	ldrb	r2, [r2, #11]
    16b8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  mbxAddr[0] = code | FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE);
    16bc:	f042 6240 	orr.w	r2, r2, #201326592	; 0xc000000
    16c0:	601a      	str	r2, [r3, #0]
}
    16c2:	4770      	bx	lr
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    16c4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    16c6:	f1a1 0c20 	sub.w	ip, r1, #32
    16ca:	2301      	movs	r3, #1
    16cc:	fa03 f30c 	lsl.w	r3, r3, ip
    16d0:	4323      	orrs	r3, r4
    16d2:	62c3      	str	r3, [r0, #44]	; 0x2c
}
    16d4:	e7d7      	b.n	1686 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x12>
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    16d6:	6814      	ldr	r4, [r2, #0]
    16d8:	4805      	ldr	r0, [pc, #20]	; (16f0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x7c>)
  if ( msg.flags.remote ) code |= (1UL << 20);
    16da:	7a11      	ldrb	r1, [r2, #8]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    16dc:	ea00 4084 	and.w	r0, r0, r4, lsl #18
    16e0:	6058      	str	r0, [r3, #4]
  if ( msg.flags.remote ) code |= (1UL << 20);
    16e2:	0509      	lsls	r1, r1, #20
    16e4:	e7df      	b.n	16a6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x32>
    16e6:	bf00      	nop
    16e8:	40024000 	.word	0x40024000
    16ec:	04002408 	.word	0x04002408
    16f0:	1ffc0000 	.word	0x1ffc0000

000016f4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>:
FCTP_FUNC uint64_t FCTP_OPT::events() {
    16f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ( !isEventsUsed ) isEventsUsed = 1;
    16f8:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
FCTP_FUNC uint64_t FCTP_OPT::events() {
    16fc:	b08f      	sub	sp, #60	; 0x3c
  if ( !isEventsUsed ) isEventsUsed = 1;
    16fe:	f897 3700 	ldrb.w	r3, [r7, #1792]	; 0x700
FCTP_FUNC uint64_t FCTP_OPT::events() {
    1702:	4604      	mov	r4, r0
  if ( !isEventsUsed ) isEventsUsed = 1;
    1704:	b913      	cbnz	r3, 170c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x18>
    1706:	2301      	movs	r3, #1
    1708:	f887 3700 	strb.w	r3, [r7, #1792]	; 0x700
        uint16_t size() { return _available; }
    170c:	8b23      	ldrh	r3, [r4, #24]
    170e:	b29b      	uxth	r3, r3
  if ( rxBuffer.size() ) {
    1710:	2b00      	cmp	r3, #0
    1712:	d14f      	bne.n	17b4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xc0>
  NVIC_DISABLE_IRQ(nvicIrq);
    1714:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    1718:	0953      	lsrs	r3, r2, #5
    171a:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    171e:	3360      	adds	r3, #96	; 0x60
    1720:	009b      	lsls	r3, r3, #2
    1722:	f002 021f 	and.w	r2, r2, #31
    1726:	2101      	movs	r1, #1
    1728:	fa01 f202 	lsl.w	r2, r1, r2
    172c:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
    1730:	601a      	str	r2, [r3, #0]
    1732:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    1736:	b29b      	uxth	r3, r3
  if ( txBuffer.size() ) {
    1738:	b323      	cbz	r3, 1784 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>


template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::peek_front(T *buffer, uint16_t length, uint32_t entry) {
  if ( multi ) {
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    173a:	f8b6 1b1a 	ldrh.w	r1, [r6, #2842]	; 0xb1a
    173e:	231a      	movs	r3, #26
    1740:	f001 010f 	and.w	r1, r1, #15
    1744:	fb03 4101 	mla	r1, r3, r1, r4
    1748:	f501 51d9 	add.w	r1, r1, #6944	; 0x1b20
    174c:	3112      	adds	r1, #18
    174e:	2218      	movs	r2, #24
    1750:	a808      	add	r0, sp, #32
    memmove(&frame, buf, sizeof(frame));
    1752:	ad08      	add	r5, sp, #32
    1754:	f007 fbca 	bl	8eec <memcpy>
    1758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    175a:	f10d 0c08 	add.w	ip, sp, #8
    175e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1762:	e895 0003 	ldmia.w	r5, {r0, r1}
    1766:	e88c 0003 	stmia.w	ip, {r0, r1}
    if ( frame.mb == -1 ) {
    176a:	f99d 101c 	ldrsb.w	r1, [sp, #28]
    176e:	1c4b      	adds	r3, r1, #1
    1770:	d04a      	beq.n	1808 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x114>
    else if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, frame.mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    1772:	4b53      	ldr	r3, [pc, #332]	; (18c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1cc>)
    1774:	440b      	add	r3, r1
    1776:	011b      	lsls	r3, r3, #4
    1778:	681b      	ldr	r3, [r3, #0]
    177a:	f3c3 6303 	ubfx	r3, r3, #24, #4
    177e:	2b08      	cmp	r3, #8
    1780:	f000 8081 	beq.w	1886 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x192>
  NVIC_ENABLE_IRQ(nvicIrq);
    1784:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    1788:	0953      	lsrs	r3, r2, #5
    178a:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    178e:	3340      	adds	r3, #64	; 0x40
    1790:	009b      	lsls	r3, r3, #2
    1792:	2101      	movs	r1, #1
    1794:	f002 021f 	and.w	r2, r2, #31
    1798:	fa01 f202 	lsl.w	r2, r1, r2
    179c:	601a      	str	r2, [r3, #0]
        uint16_t size() { return _available; }
    179e:	8b23      	ldrh	r3, [r4, #24]
    17a0:	f8b6 0b1e 	ldrh.w	r0, [r6, #2846]	; 0xb1e
    17a4:	b29b      	uxth	r3, r3
    17a6:	b280      	uxth	r0, r0
  return (uint64_t)(rxBuffer.size() << 12) | txBuffer.size();
    17a8:	2100      	movs	r1, #0
    17aa:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
}
    17ae:	b00f      	add	sp, #60	; 0x3c
    17b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::readBytes(T *buffer, uint16_t length) {
  if ( multi ) {
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    17b4:	8aa1      	ldrh	r1, [r4, #20]
    17b6:	231a      	movs	r3, #26
    17b8:	b2c9      	uxtb	r1, r1
    17ba:	fb03 4101 	mla	r1, r3, r1, r4
    17be:	2218      	movs	r2, #24
    17c0:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    17c4:	a808      	add	r0, sp, #32
    17c6:	f007 fb91 	bl	8eec <memcpy>
    head = ((head + 1)&(2*_size-1));
    17ca:	8aa3      	ldrh	r3, [r4, #20]
    17cc:	3301      	adds	r3, #1
    17ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
    17d2:	82a3      	strh	r3, [r4, #20]
    if ( _available ) _available--;
    17d4:	8b23      	ldrh	r3, [r4, #24]
    17d6:	b29b      	uxth	r3, r3
    17d8:	b11b      	cbz	r3, 17e2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xee>
    17da:	8b23      	ldrh	r3, [r4, #24]
    17dc:	3b01      	subs	r3, #1
    17de:	b29b      	uxth	r3, r3
    17e0:	8323      	strh	r3, [r4, #24]
    memmove(&frame, buf, sizeof(frame));
    17e2:	ad08      	add	r5, sp, #32
    17e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    17e6:	ae02      	add	r6, sp, #8
    17e8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    17ea:	e895 0003 	ldmia.w	r5, {r0, r1}
    17ee:	e886 0003 	stmia.w	r6, {r0, r1}
    mbCallbacks((FLEXCAN_MAILBOX)frame.mb, frame);
    17f2:	aa02      	add	r2, sp, #8
    17f4:	f89d 301c 	ldrb.w	r3, [sp, #28]
    17f8:	f88d 3007 	strb.w	r3, [sp, #7]
    17fc:	f10d 0107 	add.w	r1, sp, #7
    1800:	4620      	mov	r0, r4
    1802:	f7ff ff11 	bl	1628 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    1806:	e785      	b.n	1714 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x20>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    1808:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 18c4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1d0>
    180c:	f8d8 5000 	ldr.w	r5, [r8]
    1810:	f015 5500 	ands.w	r5, r5, #536870912	; 0x20000000
    1814:	d050      	beq.n	18b8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1c4>
    1816:	f7fe ffbd 	bl	794 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    181a:	f8d8 3000 	ldr.w	r3, [r8]
    181e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1822:	3301      	adds	r3, #1
    1824:	4283      	cmp	r3, r0
    1826:	4605      	mov	r5, r0
    1828:	d9ac      	bls.n	1784 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
        if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    182a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 18c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1cc>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    182e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 18c4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1d0>
    1832:	e008      	b.n	1846 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x152>
    1834:	f8d8 3000 	ldr.w	r3, [r8]
    1838:	3501      	adds	r5, #1
    183a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    183e:	b2ed      	uxtb	r5, r5
    1840:	3301      	adds	r3, #1
    1842:	429d      	cmp	r5, r3
    1844:	d29e      	bcs.n	1784 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
        if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    1846:	eb05 0309 	add.w	r3, r5, r9
    184a:	011b      	lsls	r3, r3, #4
    184c:	681b      	ldr	r3, [r3, #0]
    184e:	f3c3 6303 	ubfx	r3, r3, #24, #4
    1852:	2b08      	cmp	r3, #8
    1854:	d1ee      	bne.n	1834 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
          writeTxMailbox(i, frame);
    1856:	aa02      	add	r2, sp, #8
    1858:	4629      	mov	r1, r5
    185a:	4620      	mov	r0, r4
    185c:	f7ff ff0a 	bl	1674 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    1860:	f8b6 3b1a 	ldrh.w	r3, [r6, #2842]	; 0xb1a
    1864:	3301      	adds	r3, #1
    1866:	f003 031f 	and.w	r3, r3, #31
    186a:	f8a6 3b1a 	strh.w	r3, [r6, #2842]	; 0xb1a
    if ( _available ) _available--;
    186e:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    1872:	b29b      	uxth	r3, r3
    1874:	2b00      	cmp	r3, #0
    1876:	d0dd      	beq.n	1834 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
    1878:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    187c:	3b01      	subs	r3, #1
    187e:	b29b      	uxth	r3, r3
    1880:	f8a6 3b1e 	strh.w	r3, [r6, #2846]	; 0xb1e
    1884:	e7d6      	b.n	1834 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
      writeTxMailbox(frame.mb, frame);
    1886:	aa02      	add	r2, sp, #8
    1888:	b2c9      	uxtb	r1, r1
    188a:	4620      	mov	r0, r4
    188c:	f7ff fef2 	bl	1674 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    1890:	f8b6 3b1a 	ldrh.w	r3, [r6, #2842]	; 0xb1a
    1894:	3301      	adds	r3, #1
    1896:	f003 031f 	and.w	r3, r3, #31
    189a:	f8a6 3b1a 	strh.w	r3, [r6, #2842]	; 0xb1a
    if ( _available ) _available--;
    189e:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    18a2:	b29b      	uxth	r3, r3
    18a4:	2b00      	cmp	r3, #0
    18a6:	f43f af6d 	beq.w	1784 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
    18aa:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    18ae:	3b01      	subs	r3, #1
    18b0:	b29b      	uxth	r3, r3
    18b2:	f8a6 3b1e 	strh.w	r3, [r6, #2846]	; 0xb1e
    18b6:	e765      	b.n	1784 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    18b8:	f8d8 3000 	ldr.w	r3, [r8]
    18bc:	e7b5      	b.n	182a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x136>
    18be:	bf00      	nop
    18c0:	04002408 	.word	0x04002408
    18c4:	40024000 	.word	0x40024000

000018c8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>:
FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
    18c8:	b510      	push	{r4, lr}
  if ( mb_num == FIFO ) {
    18ca:	780b      	ldrb	r3, [r1, #0]
    18cc:	2b63      	cmp	r3, #99	; 0x63
FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
    18ce:	4604      	mov	r4, r0
    18d0:	b082      	sub	sp, #8
    18d2:	4610      	mov	r0, r2
  if ( mb_num == FIFO ) {
    18d4:	d013      	beq.n	18fe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x36>
  if ( _mbHandlers[mb_num] ) _mbHandlers[mb_num](msg);
    18d6:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
    18da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    18de:	685b      	ldr	r3, [r3, #4]
    18e0:	b113      	cbz	r3, 18e8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x20>
    18e2:	9201      	str	r2, [sp, #4]
    18e4:	4798      	blx	r3
    18e6:	9801      	ldr	r0, [sp, #4]
  if ( _mainHandler ) _mainHandler(msg);
    18e8:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    18ec:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
    18f0:	b11b      	cbz	r3, 18fa <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x32>
}
    18f2:	b002      	add	sp, #8
    18f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if ( _mainHandler ) _mainHandler(msg);
    18f8:	4718      	bx	r3
}
    18fa:	b002      	add	sp, #8
    18fc:	bd10      	pop	{r4, pc}
    if ( _mbHandlers[0] ) _mbHandlers[0](msg);
    18fe:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
    1902:	f8d4 3704 	ldr.w	r3, [r4, #1796]	; 0x704
    1906:	2b00      	cmp	r3, #0
    1908:	d0f0      	beq.n	18ec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x24>
    190a:	9201      	str	r2, [sp, #4]
    190c:	4798      	blx	r3
    190e:	9801      	ldr	r0, [sp, #4]
    1910:	e7ec      	b.n	18ec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)+0x24>
    1912:	bf00      	nop

00001914 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>:
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    1914:	291f      	cmp	r1, #31
FCTP_FUNC void FCTP_OPT::writeTxMailbox(uint8_t mb_num, const CAN_message_t &msg) {
    1916:	b410      	push	{r4}
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    1918:	481b      	ldr	r0, [pc, #108]	; (1988 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x74>)
    191a:	d823      	bhi.n	1964 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x50>
    191c:	6b04      	ldr	r4, [r0, #48]	; 0x30
    191e:	2301      	movs	r3, #1
    1920:	408b      	lsls	r3, r1
    1922:	4323      	orrs	r3, r4
    1924:	6303      	str	r3, [r0, #48]	; 0x30
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    1926:	4b19      	ldr	r3, [pc, #100]	; (198c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x78>)
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1928:	79d0      	ldrb	r0, [r2, #7]
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    192a:	440b      	add	r3, r1
    192c:	011b      	lsls	r3, r3, #4
  mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    192e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    1932:	6019      	str	r1, [r3, #0]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1934:	b1f8      	cbz	r0, 1976 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x62>
    1936:	6810      	ldr	r0, [r2, #0]
  if ( msg.flags.remote ) code |= (1UL << 20);
    1938:	7a11      	ldrb	r1, [r2, #8]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    193a:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
  if ( msg.flags.remote ) code |= (1UL << 20);
    193e:	0509      	lsls	r1, r1, #20
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1940:	6058      	str	r0, [r3, #4]
  if ( msg.flags.extended ) code |= (3UL << 21);
    1942:	f441 01c0 	orr.w	r1, r1, #6291456	; 0x600000
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    1946:	68d0      	ldr	r0, [r2, #12]
}
    1948:	f85d 4b04 	ldr.w	r4, [sp], #4
    194c:	ba00      	rev	r0, r0
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    194e:	6098      	str	r0, [r3, #8]
    1950:	6910      	ldr	r0, [r2, #16]
    1952:	ba00      	rev	r0, r0
    1954:	60d8      	str	r0, [r3, #12]
  code |= msg.len << 16;
    1956:	7ad2      	ldrb	r2, [r2, #11]
    1958:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  mbxAddr[0] = code | FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE);
    195c:	f042 6240 	orr.w	r2, r2, #201326592	; 0xc000000
    1960:	601a      	str	r2, [r3, #0]
}
    1962:	4770      	bx	lr
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    1964:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    1966:	f1a1 0c20 	sub.w	ip, r1, #32
    196a:	2301      	movs	r3, #1
    196c:	fa03 f30c 	lsl.w	r3, r3, ip
    1970:	4323      	orrs	r3, r4
    1972:	62c3      	str	r3, [r0, #44]	; 0x2c
}
    1974:	e7d7      	b.n	1926 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x12>
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1976:	6814      	ldr	r4, [r2, #0]
    1978:	4805      	ldr	r0, [pc, #20]	; (1990 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x7c>)
  if ( msg.flags.remote ) code |= (1UL << 20);
    197a:	7a11      	ldrb	r1, [r2, #8]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    197c:	ea00 4084 	and.w	r0, r0, r4, lsl #18
    1980:	6058      	str	r0, [r3, #4]
  if ( msg.flags.remote ) code |= (1UL << 20);
    1982:	0509      	lsls	r1, r1, #20
    1984:	e7df      	b.n	1946 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x32>
    1986:	bf00      	nop
    1988:	400a4000 	.word	0x400a4000
    198c:	0400a408 	.word	0x0400a408
    1990:	1ffc0000 	.word	0x1ffc0000

00001994 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>:
FCTP_FUNC uint64_t FCTP_OPT::events() {
    1994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ( !isEventsUsed ) isEventsUsed = 1;
    1998:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
FCTP_FUNC uint64_t FCTP_OPT::events() {
    199c:	b08f      	sub	sp, #60	; 0x3c
  if ( !isEventsUsed ) isEventsUsed = 1;
    199e:	f897 3700 	ldrb.w	r3, [r7, #1792]	; 0x700
FCTP_FUNC uint64_t FCTP_OPT::events() {
    19a2:	4604      	mov	r4, r0
  if ( !isEventsUsed ) isEventsUsed = 1;
    19a4:	b913      	cbnz	r3, 19ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x18>
    19a6:	2301      	movs	r3, #1
    19a8:	f887 3700 	strb.w	r3, [r7, #1792]	; 0x700
        uint16_t size() { return _available; }
    19ac:	8b23      	ldrh	r3, [r4, #24]
    19ae:	b29b      	uxth	r3, r3
  if ( rxBuffer.size() ) {
    19b0:	2b00      	cmp	r3, #0
    19b2:	d14f      	bne.n	1a54 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xc0>
  NVIC_DISABLE_IRQ(nvicIrq);
    19b4:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    19b8:	0953      	lsrs	r3, r2, #5
    19ba:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    19be:	3360      	adds	r3, #96	; 0x60
    19c0:	009b      	lsls	r3, r3, #2
    19c2:	f002 021f 	and.w	r2, r2, #31
    19c6:	2101      	movs	r1, #1
    19c8:	fa01 f202 	lsl.w	r2, r1, r2
    19cc:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
    19d0:	601a      	str	r2, [r3, #0]
    19d2:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    19d6:	b29b      	uxth	r3, r3
  if ( txBuffer.size() ) {
    19d8:	b323      	cbz	r3, 1a24 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    19da:	f8b6 1b1a 	ldrh.w	r1, [r6, #2842]	; 0xb1a
    19de:	231a      	movs	r3, #26
    19e0:	f001 010f 	and.w	r1, r1, #15
    19e4:	fb03 4101 	mla	r1, r3, r1, r4
    19e8:	f501 51d9 	add.w	r1, r1, #6944	; 0x1b20
    19ec:	3112      	adds	r1, #18
    19ee:	2218      	movs	r2, #24
    19f0:	a808      	add	r0, sp, #32
    memmove(&frame, buf, sizeof(frame));
    19f2:	ad08      	add	r5, sp, #32
    19f4:	f007 fa7a 	bl	8eec <memcpy>
    19f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    19fa:	f10d 0c08 	add.w	ip, sp, #8
    19fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1a02:	e895 0003 	ldmia.w	r5, {r0, r1}
    1a06:	e88c 0003 	stmia.w	ip, {r0, r1}
    if ( frame.mb == -1 ) {
    1a0a:	f99d 101c 	ldrsb.w	r1, [sp, #28]
    1a0e:	1c4b      	adds	r3, r1, #1
    1a10:	d04a      	beq.n	1aa8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x114>
    else if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, frame.mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    1a12:	4b53      	ldr	r3, [pc, #332]	; (1b60 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1cc>)
    1a14:	440b      	add	r3, r1
    1a16:	011b      	lsls	r3, r3, #4
    1a18:	681b      	ldr	r3, [r3, #0]
    1a1a:	f3c3 6303 	ubfx	r3, r3, #24, #4
    1a1e:	2b08      	cmp	r3, #8
    1a20:	f000 8081 	beq.w	1b26 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x192>
  NVIC_ENABLE_IRQ(nvicIrq);
    1a24:	f8d7 290c 	ldr.w	r2, [r7, #2316]	; 0x90c
    1a28:	0953      	lsrs	r3, r2, #5
    1a2a:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    1a2e:	3340      	adds	r3, #64	; 0x40
    1a30:	009b      	lsls	r3, r3, #2
    1a32:	2101      	movs	r1, #1
    1a34:	f002 021f 	and.w	r2, r2, #31
    1a38:	fa01 f202 	lsl.w	r2, r1, r2
    1a3c:	601a      	str	r2, [r3, #0]
        uint16_t size() { return _available; }
    1a3e:	8b23      	ldrh	r3, [r4, #24]
    1a40:	f8b6 0b1e 	ldrh.w	r0, [r6, #2846]	; 0xb1e
    1a44:	b29b      	uxth	r3, r3
    1a46:	b280      	uxth	r0, r0
  return (uint64_t)(rxBuffer.size() << 12) | txBuffer.size();
    1a48:	2100      	movs	r1, #0
    1a4a:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
}
    1a4e:	b00f      	add	sp, #60	; 0x3c
    1a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    1a54:	8aa1      	ldrh	r1, [r4, #20]
    1a56:	231a      	movs	r3, #26
    1a58:	b2c9      	uxtb	r1, r1
    1a5a:	fb03 4101 	mla	r1, r3, r1, r4
    1a5e:	2218      	movs	r2, #24
    1a60:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    1a64:	a808      	add	r0, sp, #32
    1a66:	f007 fa41 	bl	8eec <memcpy>
    head = ((head + 1)&(2*_size-1));
    1a6a:	8aa3      	ldrh	r3, [r4, #20]
    1a6c:	3301      	adds	r3, #1
    1a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1a72:	82a3      	strh	r3, [r4, #20]
    if ( _available ) _available--;
    1a74:	8b23      	ldrh	r3, [r4, #24]
    1a76:	b29b      	uxth	r3, r3
    1a78:	b11b      	cbz	r3, 1a82 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xee>
    1a7a:	8b23      	ldrh	r3, [r4, #24]
    1a7c:	3b01      	subs	r3, #1
    1a7e:	b29b      	uxth	r3, r3
    1a80:	8323      	strh	r3, [r4, #24]
    memmove(&frame, buf, sizeof(frame));
    1a82:	ad08      	add	r5, sp, #32
    1a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1a86:	ae02      	add	r6, sp, #8
    1a88:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    1a8a:	e895 0003 	ldmia.w	r5, {r0, r1}
    1a8e:	e886 0003 	stmia.w	r6, {r0, r1}
    mbCallbacks((FLEXCAN_MAILBOX)frame.mb, frame);
    1a92:	aa02      	add	r2, sp, #8
    1a94:	f89d 301c 	ldrb.w	r3, [sp, #28]
    1a98:	f88d 3007 	strb.w	r3, [sp, #7]
    1a9c:	f10d 0107 	add.w	r1, sp, #7
    1aa0:	4620      	mov	r0, r4
    1aa2:	f7ff ff11 	bl	18c8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
    1aa6:	e785      	b.n	19b4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x20>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    1aa8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1b64 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1d0>
    1aac:	f8d8 5000 	ldr.w	r5, [r8]
    1ab0:	f015 5500 	ands.w	r5, r5, #536870912	; 0x20000000
    1ab4:	d050      	beq.n	1b58 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1c4>
    1ab6:	f7fe fe49 	bl	74c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    1aba:	f8d8 3000 	ldr.w	r3, [r8]
    1abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1ac2:	3301      	adds	r3, #1
    1ac4:	4283      	cmp	r3, r0
    1ac6:	4605      	mov	r5, r0
    1ac8:	d9ac      	bls.n	1a24 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
        if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    1aca:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1b60 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1cc>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    1ace:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1b64 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1d0>
    1ad2:	e008      	b.n	1ae6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x152>
    1ad4:	f8d8 3000 	ldr.w	r3, [r8]
    1ad8:	3501      	adds	r5, #1
    1ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1ade:	b2ed      	uxtb	r5, r5
    1ae0:	3301      	adds	r3, #1
    1ae2:	429d      	cmp	r5, r3
    1ae4:	d29e      	bcs.n	1a24 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
        if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    1ae6:	eb05 0309 	add.w	r3, r5, r9
    1aea:	011b      	lsls	r3, r3, #4
    1aec:	681b      	ldr	r3, [r3, #0]
    1aee:	f3c3 6303 	ubfx	r3, r3, #24, #4
    1af2:	2b08      	cmp	r3, #8
    1af4:	d1ee      	bne.n	1ad4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
          writeTxMailbox(i, frame);
    1af6:	aa02      	add	r2, sp, #8
    1af8:	4629      	mov	r1, r5
    1afa:	4620      	mov	r0, r4
    1afc:	f7ff ff0a 	bl	1914 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    1b00:	f8b6 3b1a 	ldrh.w	r3, [r6, #2842]	; 0xb1a
    1b04:	3301      	adds	r3, #1
    1b06:	f003 031f 	and.w	r3, r3, #31
    1b0a:	f8a6 3b1a 	strh.w	r3, [r6, #2842]	; 0xb1a
    if ( _available ) _available--;
    1b0e:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    1b12:	b29b      	uxth	r3, r3
    1b14:	2b00      	cmp	r3, #0
    1b16:	d0dd      	beq.n	1ad4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
    1b18:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    1b1c:	3b01      	subs	r3, #1
    1b1e:	b29b      	uxth	r3, r3
    1b20:	f8a6 3b1e 	strh.w	r3, [r6, #2846]	; 0xb1e
    1b24:	e7d6      	b.n	1ad4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x140>
      writeTxMailbox(frame.mb, frame);
    1b26:	aa02      	add	r2, sp, #8
    1b28:	b2c9      	uxtb	r1, r1
    1b2a:	4620      	mov	r0, r4
    1b2c:	f7ff fef2 	bl	1914 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    1b30:	f8b6 3b1a 	ldrh.w	r3, [r6, #2842]	; 0xb1a
    1b34:	3301      	adds	r3, #1
    1b36:	f003 031f 	and.w	r3, r3, #31
    1b3a:	f8a6 3b1a 	strh.w	r3, [r6, #2842]	; 0xb1a
    if ( _available ) _available--;
    1b3e:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    1b42:	b29b      	uxth	r3, r3
    1b44:	2b00      	cmp	r3, #0
    1b46:	f43f af6d 	beq.w	1a24 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
    1b4a:	f8b6 3b1e 	ldrh.w	r3, [r6, #2846]	; 0xb1e
    1b4e:	3b01      	subs	r3, #1
    1b50:	b29b      	uxth	r3, r3
    1b52:	f8a6 3b1e 	strh.w	r3, [r6, #2846]	; 0xb1e
    1b56:	e765      	b.n	1a24 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x90>
      for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    1b58:	f8d8 3000 	ldr.w	r3, [r8]
    1b5c:	e7b5      	b.n	1aca <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x136>
    1b5e:	bf00      	nop
    1b60:	0400a408 	.word	0x0400a408
    1b64:	400a4000 	.word	0x400a4000

00001b68 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)>:
  if ( mb_num == FIFO ) fifo_filter_table[0][0] |= (1UL << 28); /* enable fifo enhancement */
  else mb_filter_table[mb_num][0] |= (1UL << 28); /* enable mb enhancement */
}

FCTP_FUNC volatile bool FCTP_OPT::fifo_filter_match(uint32_t id) {
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    1b68:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    1b6c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
    1b70:	00db      	lsls	r3, r3, #3
    1b72:	d56b      	bpl.n	1c4c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xe4>
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    1b74:	4b38      	ldr	r3, [pc, #224]	; (1c58 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xf0>)
FCTP_FUNC volatile bool FCTP_OPT::fifo_filter_match(uint32_t id) {
    1b76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    1b7a:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    1b7c:	f3c7 6703 	ubfx	r7, r7, #24, #4
    1b80:	00ff      	lsls	r7, r7, #3
    1b82:	2200      	movs	r2, #0
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    }
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    1b84:	f641 6b14 	movw	fp, #7700	; 0x1e14
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    1b88:	3708      	adds	r7, #8
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    1b8a:	f641 6904 	movw	r9, #7684	; 0x1e04
    1b8e:	f641 6a08 	movw	sl, #7688	; 0x1e08
    1b92:	e007      	b.n	1ba4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x3c>
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
    1b94:	681d      	ldr	r5, [r3, #0]
    1b96:	0f6d      	lsrs	r5, r5, #29
    1b98:	2d05      	cmp	r5, #5
    1b9a:	d034      	beq.n	1c06 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x9e>
  for (uint8_t mb_num = 0; mb_num < max_fifo_filters; mb_num++) { /* check fifo filters */
    1b9c:	3201      	adds	r2, #1
    1b9e:	b2d3      	uxtb	r3, r2
    1ba0:	429f      	cmp	r7, r3
    1ba2:	d955      	bls.n	1c50 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xe8>
    if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    1ba4:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
    1ba8:	eb00 04ce 	add.w	r4, r0, lr, lsl #3
    1bac:	f504 53f0 	add.w	r3, r4, #7680	; 0x1e00
    1bb0:	681d      	ldr	r5, [r3, #0]
    1bb2:	0f6d      	lsrs	r5, r5, #29
    1bb4:	2d01      	cmp	r5, #1
    1bb6:	d00e      	beq.n	1bd6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x6e>
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    1bb8:	681d      	ldr	r5, [r3, #0]
    1bba:	0f6d      	lsrs	r5, r5, #29
    1bbc:	2d02      	cmp	r5, #2
    1bbe:	d1e9      	bne.n	1b94 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x2c>
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    1bc0:	f854 3009 	ldr.w	r3, [r4, r9]
    1bc4:	428b      	cmp	r3, r1
    1bc6:	d8e9      	bhi.n	1b9c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    1bc8:	f854 300a 	ldr.w	r3, [r4, sl]
    1bcc:	428b      	cmp	r3, r1
    1bce:	d3e5      	bcc.n	1b9c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    1bd0:	2001      	movs	r0, #1
      }
    }
  }
  return 0;
}
    1bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for ( uint8_t i = 0; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == fifo_filter_table[mb_num][i+1] ) return 1;
    1bd6:	681c      	ldr	r4, [r3, #0]
    1bd8:	f414 7f60 	tst.w	r4, #896	; 0x380
    1bdc:	d0de      	beq.n	1b9c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    1bde:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    1be2:	2400      	movs	r4, #0
    1be4:	e004      	b.n	1bf0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x88>
    1be6:	681d      	ldr	r5, [r3, #0]
    1be8:	f3c5 15c2 	ubfx	r5, r5, #7, #3
    1bec:	42ac      	cmp	r4, r5
    1bee:	d2d5      	bcs.n	1b9c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    1bf0:	3401      	adds	r4, #1
    1bf2:	eb0e 0504 	add.w	r5, lr, r4
    1bf6:	f505 65f0 	add.w	r5, r5, #1920	; 0x780
    1bfa:	b2e4      	uxtb	r4, r4
    1bfc:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    1c00:	428d      	cmp	r5, r1
    1c02:	d1f0      	bne.n	1be6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x7e>
    1c04:	e7e4      	b.n	1bd0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x68>
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1c06:	681d      	ldr	r5, [r3, #0]
    1c08:	f415 7f60 	tst.w	r5, #896	; 0x380
    1c0c:	d0c6      	beq.n	1b9c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    1c0e:	445c      	add	r4, fp
    1c10:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1c14:	f04f 0c01 	mov.w	ip, #1
    1c18:	e005      	b.n	1c26 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xbe>
    1c1a:	681d      	ldr	r5, [r3, #0]
    1c1c:	f3c5 15c2 	ubfx	r5, r5, #7, #3
    1c20:	3501      	adds	r5, #1
    1c22:	45ac      	cmp	ip, r5
    1c24:	d2ba      	bcs.n	1b9c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    1c26:	eb0e 050c 	add.w	r5, lr, ip
    1c2a:	f505 65f0 	add.w	r5, r5, #1920	; 0x780
    1c2e:	6826      	ldr	r6, [r4, #0]
    1c30:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    1c34:	f8d4 8000 	ldr.w	r8, [r4]
    1c38:	400e      	ands	r6, r1
    1c3a:	ea05 0508 	and.w	r5, r5, r8
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1c3e:	f10c 0c01 	add.w	ip, ip, #1
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    1c42:	42ae      	cmp	r6, r5
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1c44:	fa5f fc8c 	uxtb.w	ip, ip
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    1c48:	d1e7      	bne.n	1c1a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xb2>
    1c4a:	e7c1      	b.n	1bd0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x68>
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    1c4c:	2001      	movs	r0, #1
}
    1c4e:	4770      	bx	lr
  return 0;
    1c50:	2000      	movs	r0, #0
}
    1c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c56:	bf00      	nop
    1c58:	40024000 	.word	0x40024000

00001c5c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>:

FCTP_FUNC volatile bool FCTP_OPT::filter_match(FLEXCAN_MAILBOX mb_num, uint32_t id) {
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    1c5c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
FCTP_FUNC volatile bool FCTP_OPT::filter_match(FLEXCAN_MAILBOX mb_num, uint32_t id) {
    1c60:	b570      	push	{r4, r5, r6, lr}
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    1c62:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
    1c66:	f505 5e04 	add.w	lr, r5, #8448	; 0x2100
    1c6a:	f8de 3000 	ldr.w	r3, [lr]
    1c6e:	00db      	lsls	r3, r3, #3
    1c70:	d528      	bpl.n	1cc4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x68>
  if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    1c72:	f8de 3000 	ldr.w	r3, [lr]
    1c76:	0f5b      	lsrs	r3, r3, #29
    1c78:	2b01      	cmp	r3, #1
    1c7a:	d00b      	beq.n	1c94 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x38>
    for ( uint8_t i = 0; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == mb_filter_table[mb_num][i+1] ) return 1;
  }
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    1c7c:	f8de 3000 	ldr.w	r3, [lr]
    1c80:	0f5b      	lsrs	r3, r3, #29
    1c82:	2b02      	cmp	r3, #2
    1c84:	d042      	beq.n	1d0c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0xb0>
    if ( id >= mb_filter_table[mb_num][1] && id <= mb_filter_table[mb_num][2] ) return 1;
  }
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
    1c86:	f8de 3000 	ldr.w	r3, [lr]
    1c8a:	0f5b      	lsrs	r3, r3, #29
    1c8c:	2b05      	cmp	r3, #5
    1c8e:	d01b      	beq.n	1cc8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x6c>
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    }
  }
  return 0;
    1c90:	2000      	movs	r0, #0
}
    1c92:	bd70      	pop	{r4, r5, r6, pc}
    for ( uint8_t i = 0; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == mb_filter_table[mb_num][i+1] ) return 1;
    1c94:	f8de 4000 	ldr.w	r4, [lr]
    1c98:	f414 7f60 	tst.w	r4, #896	; 0x380
    1c9c:	d0f8      	beq.n	1c90 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    1c9e:	2300      	movs	r3, #0
    1ca0:	004d      	lsls	r5, r1, #1
    1ca2:	e005      	b.n	1cb0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x54>
    1ca4:	f8de 1000 	ldr.w	r1, [lr]
    1ca8:	f3c1 1cc2 	ubfx	ip, r1, #7, #3
    1cac:	4563      	cmp	r3, ip
    1cae:	d2ef      	bcs.n	1c90 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    1cb0:	3301      	adds	r3, #1
    1cb2:	eb05 0c03 	add.w	ip, r5, r3
    1cb6:	f50c 6c04 	add.w	ip, ip, #2112	; 0x840
    1cba:	b2db      	uxtb	r3, r3
    1cbc:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    1cc0:	4294      	cmp	r4, r2
    1cc2:	d1ef      	bne.n	1ca4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x48>
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    1cc4:	2001      	movs	r0, #1
}
    1cc6:	bd70      	pop	{r4, r5, r6, pc}
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1cc8:	f8de 4000 	ldr.w	r4, [lr]
    1ccc:	f414 7f60 	tst.w	r4, #896	; 0x380
    1cd0:	d0de      	beq.n	1c90 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    1cd2:	f505 5504 	add.w	r5, r5, #8448	; 0x2100
    1cd6:	3514      	adds	r5, #20
    1cd8:	0049      	lsls	r1, r1, #1
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1cda:	2301      	movs	r3, #1
    1cdc:	e007      	b.n	1cee <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x92>
    1cde:	f8de 4000 	ldr.w	r4, [lr]
    1ce2:	f3c4 1cc2 	ubfx	ip, r4, #7, #3
    1ce6:	f10c 0c01 	add.w	ip, ip, #1
    1cea:	4563      	cmp	r3, ip
    1cec:	d2d0      	bcs.n	1c90 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    1cee:	682c      	ldr	r4, [r5, #0]
    1cf0:	ea04 0c02 	and.w	ip, r4, r2
    1cf4:	18cc      	adds	r4, r1, r3
    1cf6:	f504 6404 	add.w	r4, r4, #2112	; 0x840
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1cfa:	3301      	adds	r3, #1
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    1cfc:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    1d00:	682e      	ldr	r6, [r5, #0]
    1d02:	4034      	ands	r4, r6
    1d04:	45a4      	cmp	ip, r4
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1d06:	b2db      	uxtb	r3, r3
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    1d08:	d1e9      	bne.n	1cde <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x82>
    1d0a:	e7db      	b.n	1cc4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x68>
    if ( id >= mb_filter_table[mb_num][1] && id <= mb_filter_table[mb_num][2] ) return 1;
    1d0c:	f242 1304 	movw	r3, #8452	; 0x2104
    1d10:	58eb      	ldr	r3, [r5, r3]
    1d12:	4293      	cmp	r3, r2
    1d14:	d8bc      	bhi.n	1c90 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    1d16:	f242 1308 	movw	r3, #8456	; 0x2108
    1d1a:	58e8      	ldr	r0, [r5, r3]
    1d1c:	4290      	cmp	r0, r2
    1d1e:	bf34      	ite	cc
    1d20:	2000      	movcc	r0, #0
    1d22:	2001      	movcs	r0, #1
}
    1d24:	bd70      	pop	{r4, r5, r6, pc}
    1d26:	bf00      	nop

00001d28 <Circular_Buffer<unsigned long, (unsigned short)16, (unsigned short)0>::write(unsigned long)>:
  if ( _available < _size ) _available++;
    1d28:	8883      	ldrh	r3, [r0, #4]
    1d2a:	b29b      	uxth	r3, r3
    1d2c:	2b0f      	cmp	r3, #15
    1d2e:	d803      	bhi.n	1d38 <Circular_Buffer<unsigned long, (unsigned short)16, (unsigned short)0>::write(unsigned long)+0x10>
    1d30:	8883      	ldrh	r3, [r0, #4]
    1d32:	3301      	adds	r3, #1
    1d34:	b29b      	uxth	r3, r3
    1d36:	8083      	strh	r3, [r0, #4]
  _cbuf[((tail)&(_size-1))] = value;
    1d38:	8842      	ldrh	r2, [r0, #2]
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    1d3a:	f8b0 c002 	ldrh.w	ip, [r0, #2]
    1d3e:	8803      	ldrh	r3, [r0, #0]
  _cbuf[((tail)&(_size-1))] = value;
    1d40:	f002 020f 	and.w	r2, r2, #15
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    1d44:	b29b      	uxth	r3, r3
  _cbuf[((tail)&(_size-1))] = value;
    1d46:	3202      	adds	r2, #2
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    1d48:	fa1f fc8c 	uxth.w	ip, ip
    1d4c:	f083 0310 	eor.w	r3, r3, #16
    1d50:	459c      	cmp	ip, r3
  _cbuf[((tail)&(_size-1))] = value;
    1d52:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    1d56:	d104      	bne.n	1d62 <Circular_Buffer<unsigned long, (unsigned short)16, (unsigned short)0>::write(unsigned long)+0x3a>
    1d58:	8803      	ldrh	r3, [r0, #0]
    1d5a:	3301      	adds	r3, #1
    1d5c:	f003 031f 	and.w	r3, r3, #31
    1d60:	8003      	strh	r3, [r0, #0]
  tail = ((tail + 1)&(2*_size-1));
    1d62:	8843      	ldrh	r3, [r0, #2]
    1d64:	3301      	adds	r3, #1
    1d66:	f003 031f 	and.w	r3, r3, #31
    1d6a:	8043      	strh	r3, [r0, #2]
}
    1d6c:	4770      	bx	lr
    1d6e:	bf00      	nop

00001d70 <Circular_Buffer<unsigned short, (unsigned short)16, (unsigned short)0>::write(unsigned short)>:
  if ( _available < _size ) _available++;
    1d70:	8883      	ldrh	r3, [r0, #4]
    1d72:	b29b      	uxth	r3, r3
    1d74:	2b0f      	cmp	r3, #15
    1d76:	d803      	bhi.n	1d80 <Circular_Buffer<unsigned short, (unsigned short)16, (unsigned short)0>::write(unsigned short)+0x10>
    1d78:	8883      	ldrh	r3, [r0, #4]
    1d7a:	3301      	adds	r3, #1
    1d7c:	b29b      	uxth	r3, r3
    1d7e:	8083      	strh	r3, [r0, #4]
  _cbuf[((tail)&(_size-1))] = value;
    1d80:	8842      	ldrh	r2, [r0, #2]
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    1d82:	f8b0 c002 	ldrh.w	ip, [r0, #2]
    1d86:	8803      	ldrh	r3, [r0, #0]
  _cbuf[((tail)&(_size-1))] = value;
    1d88:	f002 020f 	and.w	r2, r2, #15
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    1d8c:	b29b      	uxth	r3, r3
  _cbuf[((tail)&(_size-1))] = value;
    1d8e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    1d92:	fa1f fc8c 	uxth.w	ip, ip
    1d96:	f083 0310 	eor.w	r3, r3, #16
    1d9a:	459c      	cmp	ip, r3
  _cbuf[((tail)&(_size-1))] = value;
    1d9c:	80d1      	strh	r1, [r2, #6]
  if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    1d9e:	d104      	bne.n	1daa <Circular_Buffer<unsigned short, (unsigned short)16, (unsigned short)0>::write(unsigned short)+0x3a>
    1da0:	8803      	ldrh	r3, [r0, #0]
    1da2:	3301      	adds	r3, #1
    1da4:	f003 031f 	and.w	r3, r3, #31
    1da8:	8003      	strh	r3, [r0, #0]
  tail = ((tail + 1)&(2*_size-1));
    1daa:	8843      	ldrh	r3, [r0, #2]
    1dac:	3301      	adds	r3, #1
    1dae:	f003 031f 	and.w	r3, r3, #31
    1db2:	8043      	strh	r3, [r0, #2]
}
    1db4:	4770      	bx	lr
    1db6:	bf00      	nop

00001db8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)>:
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    1db8:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    1dbc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
    1dc0:	00db      	lsls	r3, r3, #3
    1dc2:	d56b      	bpl.n	1e9c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xe4>
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    1dc4:	4b38      	ldr	r3, [pc, #224]	; (1ea8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xf0>)
FCTP_FUNC volatile bool FCTP_OPT::fifo_filter_match(uint32_t id) {
    1dc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    1dca:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    1dcc:	f3c7 6703 	ubfx	r7, r7, #24, #4
    1dd0:	00ff      	lsls	r7, r7, #3
    1dd2:	2200      	movs	r2, #0
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    1dd4:	f641 6b14 	movw	fp, #7700	; 0x1e14
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    1dd8:	3708      	adds	r7, #8
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    1dda:	f641 6904 	movw	r9, #7684	; 0x1e04
    1dde:	f641 6a08 	movw	sl, #7688	; 0x1e08
    1de2:	e007      	b.n	1df4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x3c>
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
    1de4:	681d      	ldr	r5, [r3, #0]
    1de6:	0f6d      	lsrs	r5, r5, #29
    1de8:	2d05      	cmp	r5, #5
    1dea:	d034      	beq.n	1e56 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x9e>
  for (uint8_t mb_num = 0; mb_num < max_fifo_filters; mb_num++) { /* check fifo filters */
    1dec:	3201      	adds	r2, #1
    1dee:	b2d3      	uxtb	r3, r2
    1df0:	429f      	cmp	r7, r3
    1df2:	d955      	bls.n	1ea0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xe8>
    if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    1df4:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
    1df8:	eb00 04ce 	add.w	r4, r0, lr, lsl #3
    1dfc:	f504 53f0 	add.w	r3, r4, #7680	; 0x1e00
    1e00:	681d      	ldr	r5, [r3, #0]
    1e02:	0f6d      	lsrs	r5, r5, #29
    1e04:	2d01      	cmp	r5, #1
    1e06:	d00e      	beq.n	1e26 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x6e>
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    1e08:	681d      	ldr	r5, [r3, #0]
    1e0a:	0f6d      	lsrs	r5, r5, #29
    1e0c:	2d02      	cmp	r5, #2
    1e0e:	d1e9      	bne.n	1de4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x2c>
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    1e10:	f854 3009 	ldr.w	r3, [r4, r9]
    1e14:	428b      	cmp	r3, r1
    1e16:	d8e9      	bhi.n	1dec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    1e18:	f854 300a 	ldr.w	r3, [r4, sl]
    1e1c:	428b      	cmp	r3, r1
    1e1e:	d3e5      	bcc.n	1dec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    1e20:	2001      	movs	r0, #1
}
    1e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for ( uint8_t i = 0; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == fifo_filter_table[mb_num][i+1] ) return 1;
    1e26:	681c      	ldr	r4, [r3, #0]
    1e28:	f414 7f60 	tst.w	r4, #896	; 0x380
    1e2c:	d0de      	beq.n	1dec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    1e2e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    1e32:	2400      	movs	r4, #0
    1e34:	e004      	b.n	1e40 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x88>
    1e36:	681d      	ldr	r5, [r3, #0]
    1e38:	f3c5 15c2 	ubfx	r5, r5, #7, #3
    1e3c:	42ac      	cmp	r4, r5
    1e3e:	d2d5      	bcs.n	1dec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
    1e40:	3401      	adds	r4, #1
    1e42:	eb0e 0504 	add.w	r5, lr, r4
    1e46:	f505 65f0 	add.w	r5, r5, #1920	; 0x780
    1e4a:	b2e4      	uxtb	r4, r4
    1e4c:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    1e50:	428d      	cmp	r5, r1
    1e52:	d1f0      	bne.n	1e36 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x7e>
    1e54:	e7e4      	b.n	1e20 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x68>
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1e56:	681d      	ldr	r5, [r3, #0]
    1e58:	f415 7f60 	tst.w	r5, #896	; 0x380
    1e5c:	d0c6      	beq.n	1dec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    1e5e:	445c      	add	r4, fp
    1e60:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1e64:	f04f 0c01 	mov.w	ip, #1
    1e68:	e005      	b.n	1e76 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xbe>
    1e6a:	681d      	ldr	r5, [r3, #0]
    1e6c:	f3c5 15c2 	ubfx	r5, r5, #7, #3
    1e70:	3501      	adds	r5, #1
    1e72:	45ac      	cmp	ip, r5
    1e74:	d2ba      	bcs.n	1dec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x34>
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    1e76:	eb0e 050c 	add.w	r5, lr, ip
    1e7a:	f505 65f0 	add.w	r5, r5, #1920	; 0x780
    1e7e:	6826      	ldr	r6, [r4, #0]
    1e80:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
    1e84:	f8d4 8000 	ldr.w	r8, [r4]
    1e88:	400e      	ands	r6, r1
    1e8a:	ea05 0508 	and.w	r5, r5, r8
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1e8e:	f10c 0c01 	add.w	ip, ip, #1
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    1e92:	42ae      	cmp	r6, r5
      for ( uint8_t i = 1; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1e94:	fa5f fc8c 	uxtb.w	ip, ip
        if ( (id & fifo_filter_table[mb_num][5]) == (fifo_filter_table[mb_num][i] & fifo_filter_table[mb_num][5]) ) return 1;
    1e98:	d1e7      	bne.n	1e6a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0xb2>
    1e9a:	e7c1      	b.n	1e20 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)+0x68>
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    1e9c:	2001      	movs	r0, #1
}
    1e9e:	4770      	bx	lr
  return 0;
    1ea0:	2000      	movs	r0, #0
}
    1ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ea6:	bf00      	nop
    1ea8:	400a4000 	.word	0x400a4000

00001eac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>:
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    1eac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
FCTP_FUNC volatile bool FCTP_OPT::filter_match(FLEXCAN_MAILBOX mb_num, uint32_t id) {
    1eb0:	b570      	push	{r4, r5, r6, lr}
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    1eb2:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
    1eb6:	f505 5e04 	add.w	lr, r5, #8448	; 0x2100
    1eba:	f8de 3000 	ldr.w	r3, [lr]
    1ebe:	00db      	lsls	r3, r3, #3
    1ec0:	d528      	bpl.n	1f14 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x68>
  if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    1ec2:	f8de 3000 	ldr.w	r3, [lr]
    1ec6:	0f5b      	lsrs	r3, r3, #29
    1ec8:	2b01      	cmp	r3, #1
    1eca:	d00b      	beq.n	1ee4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x38>
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    1ecc:	f8de 3000 	ldr.w	r3, [lr]
    1ed0:	0f5b      	lsrs	r3, r3, #29
    1ed2:	2b02      	cmp	r3, #2
    1ed4:	d042      	beq.n	1f5c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0xb0>
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_USERMASK ) {
    1ed6:	f8de 3000 	ldr.w	r3, [lr]
    1eda:	0f5b      	lsrs	r3, r3, #29
    1edc:	2b05      	cmp	r3, #5
    1ede:	d01b      	beq.n	1f18 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x6c>
  return 0;
    1ee0:	2000      	movs	r0, #0
}
    1ee2:	bd70      	pop	{r4, r5, r6, pc}
    for ( uint8_t i = 0; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == mb_filter_table[mb_num][i+1] ) return 1;
    1ee4:	f8de 4000 	ldr.w	r4, [lr]
    1ee8:	f414 7f60 	tst.w	r4, #896	; 0x380
    1eec:	d0f8      	beq.n	1ee0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    1eee:	2300      	movs	r3, #0
    1ef0:	004d      	lsls	r5, r1, #1
    1ef2:	e005      	b.n	1f00 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x54>
    1ef4:	f8de 1000 	ldr.w	r1, [lr]
    1ef8:	f3c1 1cc2 	ubfx	ip, r1, #7, #3
    1efc:	4563      	cmp	r3, ip
    1efe:	d2ef      	bcs.n	1ee0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    1f00:	3301      	adds	r3, #1
    1f02:	eb05 0c03 	add.w	ip, r5, r3
    1f06:	f50c 6c04 	add.w	ip, ip, #2112	; 0x840
    1f0a:	b2db      	uxtb	r3, r3
    1f0c:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
    1f10:	4294      	cmp	r4, r2
    1f12:	d1ef      	bne.n	1ef4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x48>
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    1f14:	2001      	movs	r0, #1
}
    1f16:	bd70      	pop	{r4, r5, r6, pc}
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1f18:	f8de 4000 	ldr.w	r4, [lr]
    1f1c:	f414 7f60 	tst.w	r4, #896	; 0x380
    1f20:	d0de      	beq.n	1ee0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    1f22:	f505 5504 	add.w	r5, r5, #8448	; 0x2100
    1f26:	3514      	adds	r5, #20
    1f28:	0049      	lsls	r1, r1, #1
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1f2a:	2301      	movs	r3, #1
    1f2c:	e007      	b.n	1f3e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x92>
    1f2e:	f8de 4000 	ldr.w	r4, [lr]
    1f32:	f3c4 1cc2 	ubfx	ip, r4, #7, #3
    1f36:	f10c 0c01 	add.w	ip, ip, #1
    1f3a:	4563      	cmp	r3, ip
    1f3c:	d2d0      	bcs.n	1ee0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    1f3e:	682c      	ldr	r4, [r5, #0]
    1f40:	ea04 0c02 	and.w	ip, r4, r2
    1f44:	18cc      	adds	r4, r1, r3
    1f46:	f504 6404 	add.w	r4, r4, #2112	; 0x840
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1f4a:	3301      	adds	r3, #1
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    1f4c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    1f50:	682e      	ldr	r6, [r5, #0]
    1f52:	4034      	ands	r4, r6
    1f54:	45a4      	cmp	ip, r4
    for ( uint8_t i = 1; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7) + 1; i++) {
    1f56:	b2db      	uxtb	r3, r3
      if ( (id & mb_filter_table[mb_num][5]) == (mb_filter_table[mb_num][i] & mb_filter_table[mb_num][5]) ) return 1;
    1f58:	d1e9      	bne.n	1f2e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x82>
    1f5a:	e7db      	b.n	1f14 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x68>
    if ( id >= mb_filter_table[mb_num][1] && id <= mb_filter_table[mb_num][2] ) return 1;
    1f5c:	f242 1304 	movw	r3, #8452	; 0x2104
    1f60:	58eb      	ldr	r3, [r5, r3]
    1f62:	4293      	cmp	r3, r2
    1f64:	d8bc      	bhi.n	1ee0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)+0x34>
    1f66:	f242 1308 	movw	r3, #8456	; 0x2108
    1f6a:	58e8      	ldr	r0, [r5, r3]
    1f6c:	4290      	cmp	r0, r2
    1f6e:	bf34      	ite	cc
    1f70:	2000      	movcc	r0, #0
    1f72:	2001      	movcs	r0, #1
}
    1f74:	bd70      	pop	{r4, r5, r6, pc}
    1f76:	bf00      	nop

00001f78 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>:
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    1f78:	8843      	ldrh	r3, [r0, #2]
    1f7a:	f04f 0c1a 	mov.w	ip, #26
    1f7e:	b2db      	uxtb	r3, r3
    1f80:	fb0c 0303 	mla	r3, ip, r3, r0
void Circular_Buffer<T,_size,multi>::write(const T *buffer, uint16_t length) {
    1f84:	b510      	push	{r4, lr}
    1f86:	4604      	mov	r4, r0
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    1f88:	2000      	movs	r0, #0
    1f8a:	f883 0106 	strb.w	r0, [r3, #262]	; 0x106
    _cabuf[((tail)&(_size-1))][1] = length & 0xFF;
    1f8e:	8863      	ldrh	r3, [r4, #2]
    1f90:	b2db      	uxtb	r3, r3
    1f92:	fb0c 4303 	mla	r3, ip, r3, r4
    1f96:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    memmove(_cabuf[((tail)&(_size-1))]+2,buffer,length*sizeof(T));
    1f9a:	8860      	ldrh	r0, [r4, #2]
    1f9c:	b2c0      	uxtb	r0, r0
    1f9e:	fb0c 4000 	mla	r0, ip, r0, r4
    1fa2:	f500 7084 	add.w	r0, r0, #264	; 0x108
    1fa6:	f009 fe1b 	bl	bbe0 <memmove>
    if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    1faa:	8862      	ldrh	r2, [r4, #2]
    1fac:	8823      	ldrh	r3, [r4, #0]
    1fae:	b29b      	uxth	r3, r3
    1fb0:	b292      	uxth	r2, r2
    1fb2:	f483 7380 	eor.w	r3, r3, #256	; 0x100
    1fb6:	429a      	cmp	r2, r3
    1fb8:	d104      	bne.n	1fc4 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)+0x4c>
    1fba:	8823      	ldrh	r3, [r4, #0]
    1fbc:	3301      	adds	r3, #1
    1fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1fc2:	8023      	strh	r3, [r4, #0]
    tail = ((tail + 1)&(2*_size-1));
    1fc4:	8863      	ldrh	r3, [r4, #2]
    1fc6:	3301      	adds	r3, #1
    1fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1fcc:	8063      	strh	r3, [r4, #2]
    if ( _available < _size ) _available++;
    1fce:	88a3      	ldrh	r3, [r4, #4]
    1fd0:	b29b      	uxth	r3, r3
    1fd2:	2bff      	cmp	r3, #255	; 0xff
    1fd4:	d803      	bhi.n	1fde <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)+0x66>
    1fd6:	88a3      	ldrh	r3, [r4, #4]
    1fd8:	3301      	adds	r3, #1
    1fda:	b29b      	uxth	r3, r3
    1fdc:	80a3      	strh	r3, [r4, #4]
}
    1fde:	bd10      	pop	{r4, pc}

00001fe0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>:
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    1fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t cl = msg;
    1fe4:	468c      	mov	ip, r1
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    1fe6:	460f      	mov	r7, r1
    1fe8:	4606      	mov	r6, r0
    1fea:	4605      	mov	r5, r0
    1fec:	f100 0810 	add.w	r8, r0, #16
  CAN_message_t cl = msg;
    1ff0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    1ff4:	b08d      	sub	sp, #52	; 0x34
  CAN_message_t cl = msg;
    1ff6:	466c      	mov	r4, sp
    1ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1ffa:	e89c 0003 	ldmia.w	ip, {r0, r1}
    1ffe:	e884 0003 	stmia.w	r4, {r0, r1}
  for (uint8_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    2002:	f8df a094 	ldr.w	sl, [pc, #148]	; 2098 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0xb8>
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    2006:	f04f 0901 	mov.w	r9, #1
    thisListener = listener[listenerPos];
    200a:	f855 4f04 	ldr.w	r4, [r5, #4]!
    if (thisListener != nullptr) {
    200e:	b15c      	cbz	r4, 2028 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    2010:	f99d 2014 	ldrsb.w	r2, [sp, #20]
    2014:	68a3      	ldr	r3, [r4, #8]
    2016:	fa09 f102 	lsl.w	r1, r9, r2
    201a:	4219      	tst	r1, r3
    201c:	d020      	beq.n	2060 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x80>
    201e:	6823      	ldr	r3, [r4, #0]
    2020:	f8d3 b000 	ldr.w	fp, [r3]
    2024:	45d3      	cmp	fp, sl
    2026:	d116      	bne.n	2056 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x76>
  for (uint8_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    2028:	4545      	cmp	r5, r8
    202a:	d1ee      	bne.n	200a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x2a>
  if ( !isEventsUsed ) {
    202c:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
    2030:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
    2034:	b323      	cbz	r3, 2080 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0xa0>
  memmove(buf, &msg, sizeof(msg));
    2036:	2218      	movs	r2, #24
    2038:	4639      	mov	r1, r7
    203a:	eb0d 0002 	add.w	r0, sp, r2
    203e:	f006 ff55 	bl	8eec <memcpy>
        void push_back(const T *buffer, uint16_t length) { write(buffer, length); }
    2042:	2218      	movs	r2, #24
    2044:	eb0d 0102 	add.w	r1, sp, r2
    2048:	f106 0014 	add.w	r0, r6, #20
    204c:	f7ff ff94 	bl	1f78 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
}
    2050:	b00d      	add	sp, #52	; 0x34
    2052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    2056:	f89d 3015 	ldrb.w	r3, [sp, #21]
    205a:	4669      	mov	r1, sp
    205c:	4620      	mov	r0, r4
    205e:	47d8      	blx	fp
      if (thisListener->generalCallbackActive) thisListener->frameHandler (cl, -1, cl.bus);
    2060:	7c23      	ldrb	r3, [r4, #16]
    2062:	2b00      	cmp	r3, #0
    2064:	d0e0      	beq.n	2028 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    2066:	6823      	ldr	r3, [r4, #0]
    2068:	f8d3 b000 	ldr.w	fp, [r3]
    206c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    2070:	45d3      	cmp	fp, sl
    2072:	d0d9      	beq.n	2028 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    2074:	4620      	mov	r0, r4
    2076:	f04f 32ff 	mov.w	r2, #4294967295
    207a:	4669      	mov	r1, sp
    207c:	47d8      	blx	fp
    207e:	e7d3      	b.n	2028 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    mbCallbacks((FLEXCAN_MAILBOX)msg.mb, msg);	
    2080:	7d3b      	ldrb	r3, [r7, #20]
    2082:	f88d 3018 	strb.w	r3, [sp, #24]
    2086:	463a      	mov	r2, r7
    2088:	a906      	add	r1, sp, #24
    208a:	4630      	mov	r0, r6
    208c:	f7ff facc 	bl	1628 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
}
    2090:	b00d      	add	sp, #52	; 0x34
    2092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2096:	bf00      	nop
    2098:	00000459 	.word	0x00000459

0000209c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>:
  mb_filter_table[mb_num][4] = id4; // id4
  mb_filter_table[mb_num][5] = id5; // id5
}

FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
  if ( !distribution ) return; /* distribution not enabled */
    209c:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
    20a0:	f893 3701 	ldrb.w	r3, [r3, #1793]	; 0x701
    20a4:	2b00      	cmp	r3, #0
    20a6:	f000 80db 	beq.w	2260 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1c4>
FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
    20aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t frame = msg;
    20ae:	460f      	mov	r7, r1
    20b0:	4605      	mov	r5, r0
    20b2:	460e      	mov	r6, r1
    20b4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
    20b6:	b089      	sub	sp, #36	; 0x24
  CAN_message_t frame = msg;
    20b8:	ac02      	add	r4, sp, #8
    20ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    20bc:	e897 0003 	ldmia.w	r7, {r0, r1}
    20c0:	e884 0003 	stmia.w	r4, {r0, r1}

  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    20c4:	f8df c250 	ldr.w	ip, [pc, #592]	; 2318 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>
    20c8:	f8dc 3000 	ldr.w	r3, [ip]
    20cc:	009b      	lsls	r3, r3, #2
    20ce:	d552      	bpl.n	2176 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
    uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    20d0:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
    20d4:	f3c3 6a03 	ubfx	sl, r3, #24, #4
    20d8:	2400      	movs	r4, #0
    20da:	ea4f 0aca 	mov.w	sl, sl, lsl #3
    20de:	f10a 0a08 	add.w	sl, sl, #8
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    20e2:	4622      	mov	r2, r4
        }
      }
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
            frame.mb = FIFO;
    20e4:	f04f 0963 	mov.w	r9, #99	; 0x63
    20e8:	e00c      	b.n	2104 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x68>
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    20ea:	0f5b      	lsrs	r3, r3, #29
    20ec:	2b02      	cmp	r3, #2
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    20ee:	683b      	ldr	r3, [r7, #0]
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    20f0:	f000 809a 	beq.w	2228 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x18c>
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
    20f4:	0f5b      	lsrs	r3, r3, #29
    20f6:	2b05      	cmp	r3, #5
    20f8:	f000 80dd 	beq.w	22b6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x21a>
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    20fc:	3401      	adds	r4, #1
    20fe:	b2e2      	uxtb	r2, r4
    2100:	4592      	cmp	sl, r2
    2102:	d938      	bls.n	2176 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
      if ( msg.mb == FIFO ) break; // don't distribute to fifo if fifo was the source
    2104:	f996 3014 	ldrsb.w	r3, [r6, #20]
    2108:	2b63      	cmp	r3, #99	; 0x63
    210a:	d034      	beq.n	2176 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
      if ( !(fifo_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    210c:	eb04 0844 	add.w	r8, r4, r4, lsl #1
    2110:	eb05 0bc8 	add.w	fp, r5, r8, lsl #3
    2114:	f50b 57f0 	add.w	r7, fp, #7680	; 0x1e00
    2118:	683b      	ldr	r3, [r7, #0]
    211a:	f013 4f60 	tst.w	r3, #3758096384	; 0xe0000000
    211e:	d0ed      	beq.n	20fc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    2120:	683b      	ldr	r3, [r7, #0]
    2122:	0f5b      	lsrs	r3, r3, #29
    2124:	2b01      	cmp	r3, #1
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    2126:	683b      	ldr	r3, [r7, #0]
      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    2128:	d1df      	bne.n	20ea <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x4e>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    212a:	79f2      	ldrb	r2, [r6, #7]
    212c:	f3c3 4300 	ubfx	r3, r3, #16, #1
    2130:	429a      	cmp	r2, r3
    2132:	d1e3      	bne.n	20fc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    2134:	683b      	ldr	r3, [r7, #0]
    2136:	f413 7f60 	tst.w	r3, #896	; 0x380
    213a:	d0df      	beq.n	20fc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    213c:	ea4f 0b48 	mov.w	fp, r8, lsl #1
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    2140:	2300      	movs	r3, #0
    2142:	e006      	b.n	2152 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xb6>
    2144:	683a      	ldr	r2, [r7, #0]
    2146:	fa5f f388 	uxtb.w	r3, r8
    214a:	f3c2 12c2 	ubfx	r2, r2, #7, #3
    214e:	4293      	cmp	r3, r2
    2150:	d2d4      	bcs.n	20fc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    2152:	f103 0801 	add.w	r8, r3, #1
    2156:	eb0b 0308 	add.w	r3, fp, r8
    215a:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
    215e:	9a02      	ldr	r2, [sp, #8]
    2160:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    2164:	429a      	cmp	r2, r3
    2166:	d1ed      	bne.n	2144 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xa8>
            struct2queueRx(frame);
    2168:	a902      	add	r1, sp, #8
    216a:	4628      	mov	r0, r5
            frame.mb = FIFO;
    216c:	f88d 901c 	strb.w	r9, [sp, #28]
            struct2queueRx(frame);
    2170:	f7ff ff36 	bl	1fe0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2174:	e7e6      	b.n	2144 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xa8>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2176:	4f68      	ldr	r7, [pc, #416]	; (2318 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>)
        }
      }
    } /* end of fifo scan */
  } /* end of fifo checking */

  frame.idhit = 0;
    2178:	2300      	movs	r3, #0
    217a:	f88d 300e 	strb.w	r3, [sp, #14]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    217e:	683c      	ldr	r4, [r7, #0]
    2180:	f014 5400 	ands.w	r4, r4, #536870912	; 0x20000000
    2184:	d03f      	beq.n	2206 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x16a>
    2186:	f7fe fb05 	bl	794 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>

  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    218a:	683b      	ldr	r3, [r7, #0]
    218c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2190:	3301      	adds	r3, #1
    2192:	4283      	cmp	r3, r0
    2194:	4604      	mov	r4, r0
    2196:	d933      	bls.n	2200 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x164>
    2198:	f8df 917c 	ldr.w	r9, [pc, #380]	; 2318 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>
          struct2queueRx(frame);
        }
      }
    }
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
    219c:	f242 1704 	movw	r7, #8452	; 0x2104
    21a0:	f242 1808 	movw	r8, #8456	; 0x2108
    if ( msg.mb == i ) continue; // don't distribute to same mailbox
    21a4:	f996 3014 	ldrsb.w	r3, [r6, #20]
    21a8:	42a3      	cmp	r3, r4
    21aa:	d020      	beq.n	21ee <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( !(mb_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    21ac:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    21b0:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
    21b4:	f502 5a04 	add.w	sl, r2, #8448	; 0x2100
    21b8:	f8da 3000 	ldr.w	r3, [sl]
    21bc:	f013 4f60 	tst.w	r3, #3758096384	; 0xe0000000
    21c0:	d015      	beq.n	21ee <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( (bool)(mb_filter_table[i][0] & (1UL << 27)) != msg.flags.extended ) continue; /* extended flag check */
    21c2:	f8da 3000 	ldr.w	r3, [sl]
    21c6:	79f0      	ldrb	r0, [r6, #7]
    21c8:	f3c3 63c0 	ubfx	r3, r3, #27, #1
    21cc:	4298      	cmp	r0, r3
    21ce:	d10e      	bne.n	21ee <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    21d0:	f8da 3000 	ldr.w	r3, [sl]
    21d4:	0f5b      	lsrs	r3, r3, #29
    21d6:	2b01      	cmp	r3, #1
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    21d8:	f8da 3000 	ldr.w	r3, [sl]
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    21dc:	d041      	beq.n	2262 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1c6>
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    21de:	0f5b      	lsrs	r3, r3, #29
    21e0:	2b02      	cmp	r3, #2
    21e2:	d012      	beq.n	220a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x16e>
        frame.mb = i;
        struct2queueRx(frame);
      }
    }
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
    21e4:	f8da 3000 	ldr.w	r3, [sl]
    21e8:	0f5b      	lsrs	r3, r3, #29
    21ea:	2b05      	cmp	r3, #5
    21ec:	d05b      	beq.n	22a6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x20a>
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    21ee:	f8d9 3000 	ldr.w	r3, [r9]
    21f2:	3401      	adds	r4, #1
    21f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    21f8:	b2e4      	uxtb	r4, r4
    21fa:	3301      	adds	r3, #1
    21fc:	429c      	cmp	r4, r3
    21fe:	d3d1      	bcc.n	21a4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x108>
        frame.mb = i;
        struct2queueRx(frame);
      }
    }
  } /* end of mb scan */
}
    2200:	b009      	add	sp, #36	; 0x24
    2202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    2206:	683b      	ldr	r3, [r7, #0]
    2208:	e7c6      	b.n	2198 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xfc>
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
    220a:	59d1      	ldr	r1, [r2, r7]
    220c:	9b02      	ldr	r3, [sp, #8]
    220e:	428b      	cmp	r3, r1
    2210:	d3ed      	bcc.n	21ee <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    2212:	f852 2008 	ldr.w	r2, [r2, r8]
    2216:	4293      	cmp	r3, r2
    2218:	d8e9      	bhi.n	21ee <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        struct2queueRx(frame);
    221a:	a902      	add	r1, sp, #8
    221c:	4628      	mov	r0, r5
        frame.mb = i;
    221e:	f88d 401c 	strb.w	r4, [sp, #28]
        struct2queueRx(frame);
    2222:	f7ff fedd 	bl	1fe0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2226:	e7e2      	b.n	21ee <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    2228:	79f2      	ldrb	r2, [r6, #7]
    222a:	f3c3 4300 	ubfx	r3, r3, #16, #1
    222e:	429a      	cmp	r2, r3
    2230:	f47f af64 	bne.w	20fc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
        if ( frame.id >= fifo_filter_table[i][1] && frame.id <= fifo_filter_table[i][2] ) {
    2234:	f641 6304 	movw	r3, #7684	; 0x1e04
    2238:	f85b 2003 	ldr.w	r2, [fp, r3]
    223c:	9b02      	ldr	r3, [sp, #8]
    223e:	4293      	cmp	r3, r2
    2240:	f4ff af5c 	bcc.w	20fc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
    2244:	f641 6208 	movw	r2, #7688	; 0x1e08
    2248:	f85b 2002 	ldr.w	r2, [fp, r2]
    224c:	4293      	cmp	r3, r2
    224e:	f63f af55 	bhi.w	20fc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          struct2queueRx(frame);
    2252:	a902      	add	r1, sp, #8
    2254:	4628      	mov	r0, r5
          frame.mb = FIFO;
    2256:	f88d 901c 	strb.w	r9, [sp, #28]
          struct2queueRx(frame);
    225a:	f7ff fec1 	bl	1fe0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    225e:	e74d      	b.n	20fc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
    2260:	4770      	bx	lr
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    2262:	f413 7f60 	tst.w	r3, #896	; 0x380
    2266:	d0c2      	beq.n	21ee <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( frame.id == mb_filter_table[i][p+1] ) {
    2268:	004a      	lsls	r2, r1, #1
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    226a:	2300      	movs	r3, #0
    226c:	e007      	b.n	227e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1e2>
    226e:	f8da 1000 	ldr.w	r1, [sl]
    2272:	fa5f f38b 	uxtb.w	r3, fp
    2276:	f3c1 11c2 	ubfx	r1, r1, #7, #3
    227a:	428b      	cmp	r3, r1
    227c:	d2b7      	bcs.n	21ee <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( frame.id == mb_filter_table[i][p+1] ) {
    227e:	f103 0b01 	add.w	fp, r3, #1
    2282:	eb02 030b 	add.w	r3, r2, fp
    2286:	f503 6304 	add.w	r3, r3, #2112	; 0x840
    228a:	9902      	ldr	r1, [sp, #8]
    228c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    2290:	4299      	cmp	r1, r3
    2292:	d1ec      	bne.n	226e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1d2>
          struct2queueRx(frame);
    2294:	a902      	add	r1, sp, #8
    2296:	4628      	mov	r0, r5
    2298:	9200      	str	r2, [sp, #0]
          frame.mb = i;
    229a:	f88d 401c 	strb.w	r4, [sp, #28]
          struct2queueRx(frame);
    229e:	f7ff fe9f 	bl	1fe0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    22a2:	9a00      	ldr	r2, [sp, #0]
    22a4:	e7e3      	b.n	226e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1d2>
      if ( filter_match((FLEXCAN_MAILBOX)i, frame.id) ) {
    22a6:	9a02      	ldr	r2, [sp, #8]
    22a8:	4621      	mov	r1, r4
    22aa:	4628      	mov	r0, r5
    22ac:	f7ff fcd6 	bl	1c5c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    22b0:	2800      	cmp	r0, #0
    22b2:	d09c      	beq.n	21ee <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    22b4:	e7b1      	b.n	221a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17e>
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    22b6:	683b      	ldr	r3, [r7, #0]
    22b8:	f413 7f60 	tst.w	r3, #896	; 0x380
    22bc:	f43f af1e 	beq.w	20fc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    22c0:	f50b 53f0 	add.w	r3, fp, #7680	; 0x1e00
    22c4:	3314      	adds	r3, #20
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    22c6:	2701      	movs	r7, #1
    22c8:	e00a      	b.n	22e0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x244>
    22ca:	f50b 51f0 	add.w	r1, fp, #7680	; 0x1e00
    22ce:	3701      	adds	r7, #1
    22d0:	6809      	ldr	r1, [r1, #0]
    22d2:	f3c1 11c2 	ubfx	r1, r1, #7, #3
    22d6:	b2ff      	uxtb	r7, r7
    22d8:	3101      	adds	r1, #1
    22da:	428f      	cmp	r7, r1
    22dc:	f4bf af0e 	bcs.w	20fc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    22e0:	eb07 0148 	add.w	r1, r7, r8, lsl #1
    22e4:	f501 61f0 	add.w	r1, r1, #1920	; 0x780
    22e8:	6818      	ldr	r0, [r3, #0]
    22ea:	f855 e021 	ldr.w	lr, [r5, r1, lsl #2]
    22ee:	9902      	ldr	r1, [sp, #8]
    22f0:	f8d3 c000 	ldr.w	ip, [r3]
    22f4:	4008      	ands	r0, r1
    22f6:	ea0e 010c 	and.w	r1, lr, ip
    22fa:	4288      	cmp	r0, r1
    22fc:	d1e5      	bne.n	22ca <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x22e>
            struct2queueRx(frame);
    22fe:	a902      	add	r1, sp, #8
    2300:	4628      	mov	r0, r5
    2302:	9301      	str	r3, [sp, #4]
            frame.idhit = i;
    2304:	f88d 200e 	strb.w	r2, [sp, #14]
    2308:	9200      	str	r2, [sp, #0]
            frame.mb = FIFO;
    230a:	f88d 901c 	strb.w	r9, [sp, #28]
            struct2queueRx(frame);
    230e:	f7ff fe67 	bl	1fe0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2312:	e9dd 2300 	ldrd	r2, r3, [sp]
    2316:	e7d8      	b.n	22ca <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x22e>
    2318:	40024000 	.word	0x40024000

0000231c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()>:
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    231c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t msg; // setup a temporary storage buffer
    2320:	4db9      	ldr	r5, [pc, #740]	; (2608 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2ec>)
  return FLEXCANb_IMASK1(_bus);
    2322:	4fba      	ldr	r7, [pc, #744]	; (260c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    2324:	4681      	mov	r9, r0
  CAN_message_t msg; // setup a temporary storage buffer
    2326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    2328:	b097      	sub	sp, #92	; 0x5c
  CAN_message_t msg; // setup a temporary storage buffer
    232a:	ac04      	add	r4, sp, #16
    232c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    232e:	e895 0003 	ldmia.w	r5, {r0, r1}
    2332:	e884 0003 	stmia.w	r4, {r0, r1}
  return FLEXCANb_IMASK1(_bus);
    2336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  return FLEXCANb_IFLAG1(_bus);
    2338:	6b38      	ldr	r0, [r7, #48]	; 0x30
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    233a:	683b      	ldr	r3, [r7, #0]
  return FLEXCANb_IFLAG1(_bus);
    233c:	9001      	str	r0, [sp, #4]
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    233e:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
  return FLEXCANb_IMASK1(_bus);
    2342:	f04f 0600 	mov.w	r6, #0
    2346:	468b      	mov	fp, r1
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    2348:	d103      	bne.n	2352 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    234a:	683a      	ldr	r2, [r7, #0]
    234c:	0094      	lsls	r4, r2, #2
    234e:	f100 80eb 	bmi.w	2528 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x20c>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2352:	4dae      	ldr	r5, [pc, #696]	; (260c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    2354:	9b01      	ldr	r3, [sp, #4]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2356:	682c      	ldr	r4, [r5, #0]
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    2358:	f043 0301 	orr.w	r3, r3, #1
    235c:	fab3 f383 	clz	r3, r3
    2360:	f1c3 0320 	rsb	r3, r3, #32
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2364:	f014 5400 	ands.w	r4, r4, #536870912	; 0x20000000
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    2368:	fa5f fa83 	uxtb.w	sl, r3
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    236c:	f000 824f 	beq.w	280e <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4f2>
    2370:	f7fe fa10 	bl	794 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    2374:	682b      	ldr	r3, [r5, #0]
    2376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    237a:	3301      	adds	r3, #1
    237c:	4283      	cmp	r3, r0
    237e:	4604      	mov	r4, r0
    2380:	f240 809e 	bls.w	24c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    2384:	4582      	cmp	sl, r0
    2386:	f240 809b 	bls.w	24c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    238a:	1c67      	adds	r7, r4, #1
      (void)FLEXCANb_TIMER(_bus);
    238c:	f8df 827c 	ldr.w	r8, [pc, #636]	; 260c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>
    2390:	b2fd      	uxtb	r5, r7
    2392:	e016      	b.n	23c2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xa6>
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
    2394:	2906      	cmp	r1, #6
    2396:	f000 80ad 	beq.w	24f4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1d8>
    else if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_EMPTY ) {
    239a:	2904      	cmp	r1, #4
    239c:	f000 813e 	beq.w	261c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x300>
    else if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    23a0:	2908      	cmp	r1, #8
    23a2:	f000 81d7 	beq.w	2754 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x438>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    23a6:	f8d8 3000 	ldr.w	r3, [r8]
    23aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    23ae:	3301      	adds	r3, #1
    23b0:	42ab      	cmp	r3, r5
    23b2:	b2fc      	uxtb	r4, r7
    23b4:	f240 8084 	bls.w	24c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    23b8:	45a2      	cmp	sl, r4
    23ba:	f105 0501 	add.w	r5, r5, #1
    23be:	d97f      	bls.n	24c0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    23c0:	1c67      	adds	r7, r4, #1
    if (!(imask & (1ULL << mb_num))) continue; /* don't read non-interrupt mailboxes */
    23c2:	f1c4 0220 	rsb	r2, r4, #32
    23c6:	f1a4 0320 	sub.w	r3, r4, #32
    23ca:	fa06 f202 	lsl.w	r2, r6, r2
    23ce:	fa2b f104 	lsr.w	r1, fp, r4
    23d2:	fa26 f303 	lsr.w	r3, r6, r3
    23d6:	4311      	orrs	r1, r2
    23d8:	4319      	orrs	r1, r3
    23da:	07c9      	lsls	r1, r1, #31
    23dc:	d5e3      	bpl.n	23a6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    if (!(iflag & (1ULL << mb_num))) continue; /* don't read unflagged mailboxes */
    23de:	9901      	ldr	r1, [sp, #4]
    23e0:	40e1      	lsrs	r1, r4
    23e2:	4311      	orrs	r1, r2
    23e4:	4319      	orrs	r1, r3
    23e6:	07c9      	lsls	r1, r1, #31
    23e8:	d5dd      	bpl.n	23a6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    23ea:	4b89      	ldr	r3, [pc, #548]	; (2610 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f4>)
    23ec:	18e3      	adds	r3, r4, r3
    23ee:	011b      	lsls	r3, r3, #4
    uint32_t code = mbxAddr[0];
    23f0:	681a      	ldr	r2, [r3, #0]
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
    23f2:	f3c2 6103 	ubfx	r1, r2, #24, #4
    23f6:	2902      	cmp	r1, #2
    23f8:	d1cc      	bne.n	2394 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x78>
      msg.flags.extended = (bool)(code & (1UL << 21));
    23fa:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    23fe:	6858      	ldr	r0, [r3, #4]
      msg.flags.extended = (bool)(code & (1UL << 21));
    2400:	2900      	cmp	r1, #0
    2402:	bf14      	ite	ne
    2404:	f04f 0c01 	movne.w	ip, #1
    2408:	f04f 0c00 	moveq.w	ip, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    240c:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
      msg.flags.extended = (bool)(code & (1UL << 21));
    2410:	f88d c017 	strb.w	ip, [sp, #23]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2414:	d17f      	bne.n	2516 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1fa>
    2416:	0c80      	lsrs	r0, r0, #18
    2418:	9004      	str	r0, [sp, #16]
      msg.timestamp = code & 0xFFFF;
    241a:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    241e:	f3c2 4203 	ubfx	r2, r2, #16, #4
    2422:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    2426:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.mb = mb_num;
    242a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    242e:	f892 2915 	ldrb.w	r2, [r2, #2325]	; 0x915
    2432:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2436:	689a      	ldr	r2, [r3, #8]
    2438:	f88d 201f 	strb.w	r2, [sp, #31]
    243c:	689a      	ldr	r2, [r3, #8]
    243e:	0a12      	lsrs	r2, r2, #8
    2440:	f88d 201e 	strb.w	r2, [sp, #30]
    2444:	689a      	ldr	r2, [r3, #8]
    2446:	0c12      	lsrs	r2, r2, #16
    2448:	f88d 201d 	strb.w	r2, [sp, #29]
    244c:	689a      	ldr	r2, [r3, #8]
    244e:	0e12      	lsrs	r2, r2, #24
    2450:	f88d 201c 	strb.w	r2, [sp, #28]
    2454:	68da      	ldr	r2, [r3, #12]
    2456:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    245a:	68da      	ldr	r2, [r3, #12]
    245c:	0a12      	lsrs	r2, r2, #8
    245e:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    2462:	68da      	ldr	r2, [r3, #12]
    2464:	0c12      	lsrs	r2, r2, #16
    2466:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    246a:	68da      	ldr	r2, [r3, #12]
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    246c:	2900      	cmp	r1, #0
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    246e:	ea4f 6212 	mov.w	r2, r2, lsr #24
    2472:	f88d 2020 	strb.w	r2, [sp, #32]
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    2476:	bf14      	ite	ne
    2478:	f04f 628c 	movne.w	r2, #73400320	; 0x4600000
    247c:	f04f 6280 	moveq.w	r2, #67108864	; 0x4000000
    2480:	601a      	str	r2, [r3, #0]
      (void)FLEXCANb_TIMER(_bus);
    2482:	f8d8 3008 	ldr.w	r3, [r8, #8]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    2486:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    248a:	2301      	movs	r3, #1
    248c:	40a3      	lsls	r3, r4
    248e:	4313      	orrs	r3, r2
    2490:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    2494:	9a04      	ldr	r2, [sp, #16]
    2496:	4621      	mov	r1, r4
    2498:	4648      	mov	r0, r9
    249a:	f7ff fbdf 	bl	1c5c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    249e:	2800      	cmp	r0, #0
    24a0:	f040 8153 	bne.w	274a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x42e>
      frame_distribution(msg);
    24a4:	a904      	add	r1, sp, #16
    24a6:	4648      	mov	r0, r9
    24a8:	f7ff fdf8 	bl	209c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    24ac:	a804      	add	r0, sp, #16
    24ae:	f3af 8000 	nop.w
      ext_output2(msg);
    24b2:	a804      	add	r0, sp, #16
    24b4:	f3af 8000 	nop.w
      ext_output3(msg);
    24b8:	a804      	add	r0, sp, #16
    24ba:	f3af 8000 	nop.w
    }
    24be:	e772      	b.n	23a6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
  uint32_t esr1 = FLEXCANb_ESR1(_bus);
    24c0:	4e52      	ldr	r6, [pc, #328]	; (260c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
  if ( (last_esr1 & 0x7FFBF) != (esr1 & 0x7FFBF) ) {
    24c2:	4d54      	ldr	r5, [pc, #336]	; (2614 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f8>)
  uint32_t esr1 = FLEXCANb_ESR1(_bus);
    24c4:	6a34      	ldr	r4, [r6, #32]
  if ( (last_esr1 & 0x7FFBF) != (esr1 & 0x7FFBF) ) {
    24c6:	682b      	ldr	r3, [r5, #0]
    24c8:	ea84 0203 	eor.w	r2, r4, r3
    24cc:	4b52      	ldr	r3, [pc, #328]	; (2618 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2fc>)
    24ce:	4013      	ands	r3, r2
    24d0:	b13b      	cbz	r3, 24e2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1c6>
        uint16_t size() { return _available; }
    24d2:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
    24d6:	f8b3 3cd4 	ldrh.w	r3, [r3, #3284]	; 0xcd4
    24da:	b29b      	uxth	r3, r3
    if ( busESR1.size() < busESR1.capacity() ) {
    24dc:	2b0f      	cmp	r3, #15
    24de:	f240 8198 	bls.w	2812 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4f6>
  FLEXCANb_ESR1(_bus) |= esr1;
    24e2:	4a4a      	ldr	r2, [pc, #296]	; (260c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    24e4:	6a13      	ldr	r3, [r2, #32]
    24e6:	4323      	orrs	r3, r4
    24e8:	6213      	str	r3, [r2, #32]
  asm volatile ("dsb");	
    24ea:	f3bf 8f4f 	dsb	sy
}
    24ee:	b017      	add	sp, #92	; 0x5c
    24f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      msg.flags.extended = (bool)(code & (1UL << 21));
    24f4:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    24f8:	6858      	ldr	r0, [r3, #4]
      msg.flags.extended = (bool)(code & (1UL << 21));
    24fa:	2900      	cmp	r1, #0
    24fc:	bf14      	ite	ne
    24fe:	f04f 0c01 	movne.w	ip, #1
    2502:	f04f 0c00 	moveq.w	ip, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2506:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
      msg.flags.extended = (bool)(code & (1UL << 21));
    250a:	f88d c017 	strb.w	ip, [sp, #23]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    250e:	d105      	bne.n	251c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x200>
    2510:	0c80      	lsrs	r0, r0, #18
    2512:	9004      	str	r0, [sp, #16]
    2514:	e004      	b.n	2520 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x204>
    2516:	9004      	str	r0, [sp, #16]
      msg.flags.extended = (bool)(code & (1UL << 21));
    2518:	2101      	movs	r1, #1
    251a:	e77e      	b.n	241a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xfe>
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    251c:	9004      	str	r0, [sp, #16]
      msg.flags.extended = (bool)(code & (1UL << 21));
    251e:	2101      	movs	r1, #1
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
    2520:	2001      	movs	r0, #1
    2522:	f88d 0019 	strb.w	r0, [sp, #25]
    2526:	e778      	b.n	241a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xfe>
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    2528:	068a      	lsls	r2, r1, #26
    252a:	f57f af12 	bpl.w	2352 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    252e:	0685      	lsls	r5, r0, #26
    2530:	f57f af0f 	bpl.w	2352 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
      uint32_t code = mbxAddr[0];
    2534:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
      msg.timestamp = code & 0xFFFF;
    2538:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    253c:	f3c2 4103 	ubfx	r1, r2, #16, #4
    2540:	f88d 101b 	strb.w	r1, [sp, #27]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2544:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2548:	4c30      	ldr	r4, [pc, #192]	; (260c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
      msg.flags.extended = (bool)(code & (1UL << 21));
    254a:	f402 1000 	and.w	r0, r2, #2097152	; 0x200000
    254e:	42b0      	cmp	r0, r6
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2550:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
      msg.flags.remote = (bool)(code & (1UL << 20));
    2554:	f3c2 5000 	ubfx	r0, r2, #20, #1
    2558:	f88d 0018 	strb.w	r0, [sp, #24]
      msg.idhit = code >> 23;
    255c:	ea4f 52d2 	mov.w	r2, r2, lsr #23
      msg.flags.extended = (bool)(code & (1UL << 21));
    2560:	bf12      	itee	ne
    2562:	2001      	movne	r0, #1
    2564:	4630      	moveq	r0, r6
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2566:	0c89      	lsreq	r1, r1, #18
      msg.flags.extended = (bool)(code & (1UL << 21));
    2568:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.idhit = code >> 23;
    256c:	f88d 2016 	strb.w	r2, [sp, #22]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2570:	9104      	str	r1, [sp, #16]
    2572:	a808      	add	r0, sp, #32
      msg.idhit = code >> 23;
    2574:	2200      	movs	r2, #0
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2576:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    257a:	40d1      	lsrs	r1, r2
    257c:	3208      	adds	r2, #8
    257e:	2a20      	cmp	r2, #32
    2580:	f800 1d01 	strb.w	r1, [r0, #-1]!
    2584:	d1f7      	bne.n	2576 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x25a>
    2586:	4821      	ldr	r0, [pc, #132]	; (260c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    2588:	a909      	add	r1, sp, #36	; 0x24
    258a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    258e:	40da      	lsrs	r2, r3
    2590:	3308      	adds	r3, #8
    2592:	2b20      	cmp	r3, #32
    2594:	f801 2d01 	strb.w	r2, [r1, #-1]!
    2598:	d1f7      	bne.n	258a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x26e>
      msg.bus = busNumber;
    259a:	f509 5300 	add.w	r3, r9, #8192	; 0x2000
    259e:	f893 3915 	ldrb.w	r3, [r3, #2325]	; 0x915
    25a2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
      msg.mb = FIFO; /* store the mailbox the message came from (for callback reference) */
    25a6:	2363      	movs	r3, #99	; 0x63
    25a8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
      (void)FLEXCANb_TIMER(_bus);
    25ac:	6883      	ldr	r3, [r0, #8]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    25ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
    25b0:	f043 0320 	orr.w	r3, r3, #32
    25b4:	6303      	str	r3, [r0, #48]	; 0x30
      if ( iflag & FLEXCAN_IFLAG1_BUF6I ) writeIFLAGBit(6); /* clear FIFO bit only! */
    25b6:	9b01      	ldr	r3, [sp, #4]
    25b8:	065c      	lsls	r4, r3, #25
    25ba:	d503      	bpl.n	25c4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2a8>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    25bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    25be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    25c2:	6303      	str	r3, [r0, #48]	; 0x30
      if ( iflag & FLEXCAN_IFLAG1_BUF7I ) writeIFLAGBit(7); /* clear FIFO bit only! */
    25c4:	9b01      	ldr	r3, [sp, #4]
    25c6:	0618      	lsls	r0, r3, #24
    25c8:	d504      	bpl.n	25d4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2b8>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    25ca:	4a10      	ldr	r2, [pc, #64]	; (260c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    25cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
    25ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    25d2:	6313      	str	r3, [r2, #48]	; 0x30
      frame_distribution(msg);
    25d4:	a904      	add	r1, sp, #16
    25d6:	4648      	mov	r0, r9
    25d8:	f7ff fd60 	bl	209c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    25dc:	a804      	add	r0, sp, #16
    25de:	f3af 8000 	nop.w
      ext_output2(msg);
    25e2:	a804      	add	r0, sp, #16
    25e4:	f3af 8000 	nop.w
      ext_output3(msg);
    25e8:	a804      	add	r0, sp, #16
    25ea:	f3af 8000 	nop.w
      if (fifo_filter_match(msg.id)) struct2queueRx(msg);
    25ee:	9904      	ldr	r1, [sp, #16]
    25f0:	4648      	mov	r0, r9
    25f2:	f7ff fab9 	bl	1b68 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)>
    25f6:	2800      	cmp	r0, #0
    25f8:	f43f aeab 	beq.w	2352 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    25fc:	a904      	add	r1, sp, #16
    25fe:	4648      	mov	r0, r9
    2600:	f7ff fcee 	bl	1fe0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2604:	e6a5      	b.n	2352 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    2606:	bf00      	nop
    2608:	00011c70 	.word	0x00011c70
    260c:	40024000 	.word	0x40024000
    2610:	04002408 	.word	0x04002408
    2614:	1fff15ec 	.word	0x1fff15ec
    2618:	0007ffbf 	.word	0x0007ffbf
      msg.flags.extended = (bool)(code & (1UL << 21));
    261c:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
    2620:	2900      	cmp	r1, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2622:	6859      	ldr	r1, [r3, #4]
      msg.timestamp = code & 0xFFFF;
    2624:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    2628:	f3c2 4203 	ubfx	r2, r2, #16, #4
    262c:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    2630:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.flags.extended = (bool)(code & (1UL << 21));
    2634:	bf14      	ite	ne
    2636:	2001      	movne	r0, #1
    2638:	2000      	moveq	r0, #0
    263a:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.bus = busNumber;
    263e:	f892 0915 	ldrb.w	r0, [r2, #2325]	; 0x915
      msg.mb = mb_num;
    2642:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    2646:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    264a:	6898      	ldr	r0, [r3, #8]
    264c:	f88d 001f 	strb.w	r0, [sp, #31]
    2650:	6898      	ldr	r0, [r3, #8]
    2652:	ea4f 2010 	mov.w	r0, r0, lsr #8
    2656:	f88d 001e 	strb.w	r0, [sp, #30]
    265a:	6898      	ldr	r0, [r3, #8]
    265c:	ea4f 4010 	mov.w	r0, r0, lsr #16
    2660:	f88d 001d 	strb.w	r0, [sp, #29]
    2664:	6898      	ldr	r0, [r3, #8]
    2666:	ea4f 6010 	mov.w	r0, r0, lsr #24
    266a:	f88d 001c 	strb.w	r0, [sp, #28]
    266e:	68d8      	ldr	r0, [r3, #12]
    2670:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    2674:	68d8      	ldr	r0, [r3, #12]
    2676:	ea4f 2010 	mov.w	r0, r0, lsr #8
    267a:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    267e:	68d8      	ldr	r0, [r3, #12]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2680:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
    2684:	bf08      	it	eq
    2686:	0c89      	lsreq	r1, r1, #18
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2688:	0c00      	lsrs	r0, r0, #16
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    268a:	9104      	str	r1, [sp, #16]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    268c:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    2690:	f604 2102 	addw	r1, r4, #2562	; 0xa02
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2694:	68d8      	ldr	r0, [r3, #12]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    2696:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    269a:	0e00      	lsrs	r0, r0, #24
    269c:	f88d 0020 	strb.w	r0, [sp, #32]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    26a0:	b129      	cbz	r1, 26ae <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x392>
    26a2:	a804      	add	r0, sp, #16
    26a4:	9203      	str	r2, [sp, #12]
    26a6:	9302      	str	r3, [sp, #8]
    26a8:	4788      	blx	r1
    26aa:	9a03      	ldr	r2, [sp, #12]
    26ac:	9b02      	ldr	r3, [sp, #8]
        if ( _mainTxHandler ) _mainTxHandler(msg);
    26ae:	f8d2 2908 	ldr.w	r2, [r2, #2312]	; 0x908
    26b2:	b11a      	cbz	r2, 26bc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3a0>
    26b4:	a804      	add	r0, sp, #16
    26b6:	9302      	str	r3, [sp, #8]
    26b8:	4790      	blx	r2
    26ba:	9b02      	ldr	r3, [sp, #8]
    26bc:	f509 5280 	add.w	r2, r9, #4096	; 0x1000
    26c0:	9202      	str	r2, [sp, #8]
    26c2:	f8b2 2b1e 	ldrh.w	r2, [r2, #2846]	; 0xb1e
    26c6:	b292      	uxth	r2, r2
      if ( txBuffer.size() ) {
    26c8:	2a00      	cmp	r2, #0
    26ca:	f000 80b1 	beq.w	2830 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x514>
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    26ce:	9b02      	ldr	r3, [sp, #8]
    26d0:	f8b3 1b1a 	ldrh.w	r1, [r3, #2842]	; 0xb1a
    26d4:	231a      	movs	r3, #26
    26d6:	f001 010f 	and.w	r1, r1, #15
    26da:	fb03 9101 	mla	r1, r3, r1, r9
    26de:	f501 51d9 	add.w	r1, r1, #6944	; 0x1b20
    26e2:	3112      	adds	r1, #18
    26e4:	2218      	movs	r2, #24
    26e6:	a810      	add	r0, sp, #64	; 0x40
    26e8:	f006 fc00 	bl	8eec <memcpy>
        memmove(&frame, buf, sizeof(frame));
    26ec:	ab0a      	add	r3, sp, #40	; 0x28
    26ee:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
    26f2:	469e      	mov	lr, r3
    26f4:	9303      	str	r3, [sp, #12]
    26f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    26fa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    26fe:	e89c 0003 	ldmia.w	ip, {r0, r1}
    2702:	e88e 0003 	stmia.w	lr, {r0, r1}
        if ( frame.mb == -1 ) {
    2706:	f99d 303c 	ldrsb.w	r3, [sp, #60]	; 0x3c
    270a:	1c5a      	adds	r2, r3, #1
    270c:	f000 809b 	beq.w	2846 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x52a>
        else if ( frame.mb == mb_num ) {
    2710:	429c      	cmp	r4, r3
    2712:	f47f ae48 	bne.w	23a6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
          writeTxMailbox(frame.mb, frame);
    2716:	9a03      	ldr	r2, [sp, #12]
    2718:	b2e1      	uxtb	r1, r4
    271a:	4648      	mov	r0, r9
    271c:	f7fe ffaa 	bl	1674 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    2720:	9a02      	ldr	r2, [sp, #8]
    2722:	f8b2 3b1a 	ldrh.w	r3, [r2, #2842]	; 0xb1a
    2726:	3301      	adds	r3, #1
    2728:	f003 031f 	and.w	r3, r3, #31
    272c:	f8a2 3b1a 	strh.w	r3, [r2, #2842]	; 0xb1a
    if ( _available ) _available--;
    2730:	f8b2 3b1e 	ldrh.w	r3, [r2, #2846]	; 0xb1e
    2734:	b29b      	uxth	r3, r3
    2736:	2b00      	cmp	r3, #0
    2738:	f43f ae35 	beq.w	23a6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    273c:	f8b2 3b1e 	ldrh.w	r3, [r2, #2846]	; 0xb1e
    2740:	3b01      	subs	r3, #1
    2742:	b29b      	uxth	r3, r3
    2744:	f8a2 3b1e 	strh.w	r3, [r2, #2846]	; 0xb1e
    2748:	e62d      	b.n	23a6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    274a:	a904      	add	r1, sp, #16
    274c:	4648      	mov	r0, r9
    274e:	f7ff fc47 	bl	1fe0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2752:	e6a7      	b.n	24a4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x188>
      msg.flags.extended = (bool)(code & (1UL << 21));
    2754:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
    2758:	2900      	cmp	r1, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    275a:	6859      	ldr	r1, [r3, #4]
      msg.timestamp = code & 0xFFFF;
    275c:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    2760:	f3c2 4203 	ubfx	r2, r2, #16, #4
    2764:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    2768:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.flags.extended = (bool)(code & (1UL << 21));
    276c:	bf14      	ite	ne
    276e:	2001      	movne	r0, #1
    2770:	2000      	moveq	r0, #0
    2772:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.bus = busNumber;
    2776:	f892 0915 	ldrb.w	r0, [r2, #2325]	; 0x915
      msg.mb = mb_num;
    277a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    277e:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2782:	6898      	ldr	r0, [r3, #8]
    2784:	f88d 001f 	strb.w	r0, [sp, #31]
    2788:	6898      	ldr	r0, [r3, #8]
    278a:	ea4f 2010 	mov.w	r0, r0, lsr #8
    278e:	f88d 001e 	strb.w	r0, [sp, #30]
    2792:	6898      	ldr	r0, [r3, #8]
    2794:	ea4f 4010 	mov.w	r0, r0, lsr #16
    2798:	f88d 001d 	strb.w	r0, [sp, #29]
    279c:	6898      	ldr	r0, [r3, #8]
    279e:	ea4f 6010 	mov.w	r0, r0, lsr #24
    27a2:	f88d 001c 	strb.w	r0, [sp, #28]
    27a6:	68d8      	ldr	r0, [r3, #12]
    27a8:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    27ac:	68d8      	ldr	r0, [r3, #12]
    27ae:	ea4f 2010 	mov.w	r0, r0, lsr #8
    27b2:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    27b6:	68d8      	ldr	r0, [r3, #12]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    27b8:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
    27bc:	bf08      	it	eq
    27be:	0c89      	lsreq	r1, r1, #18
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    27c0:	0c00      	lsrs	r0, r0, #16
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    27c2:	9104      	str	r1, [sp, #16]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    27c4:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    27c8:	f604 2102 	addw	r1, r4, #2562	; 0xa02
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    27cc:	68db      	ldr	r3, [r3, #12]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    27ce:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    27d2:	0e1b      	lsrs	r3, r3, #24
    27d4:	f88d 3020 	strb.w	r3, [sp, #32]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    27d8:	b119      	cbz	r1, 27e2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4c6>
    27da:	a804      	add	r0, sp, #16
    27dc:	9202      	str	r2, [sp, #8]
    27de:	4788      	blx	r1
    27e0:	9a02      	ldr	r2, [sp, #8]
        if ( _mainTxHandler ) _mainTxHandler(msg);
    27e2:	f8d2 3908 	ldr.w	r3, [r2, #2312]	; 0x908
    27e6:	b10b      	cbz	r3, 27ec <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4d0>
    27e8:	a804      	add	r0, sp, #16
    27ea:	4798      	blx	r3
        uint16_t size() { return _available; }
    27ec:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
    27f0:	9302      	str	r3, [sp, #8]
    27f2:	f8b3 3b1e 	ldrh.w	r3, [r3, #2846]	; 0xb1e
    27f6:	b29b      	uxth	r3, r3
      if ( txBuffer.size() ) {
    27f8:	2b00      	cmp	r3, #0
    27fa:	f47f af68 	bne.w	26ce <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3b2>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    27fe:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    2802:	2301      	movs	r3, #1
    2804:	40a3      	lsls	r3, r4
    2806:	4313      	orrs	r3, r2
    2808:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
    280c:	e5cb      	b.n	23a6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    280e:	682b      	ldr	r3, [r5, #0]
    2810:	e5bb      	b.n	238a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x6e>
      busESR1.write(esr1);
    2812:	f509 50e6 	add.w	r0, r9, #7360	; 0x1cc0
    2816:	4621      	mov	r1, r4
    2818:	3010      	adds	r0, #16
    281a:	f7ff fa85 	bl	1d28 <Circular_Buffer<unsigned long, (unsigned short)16, (unsigned short)0>::write(unsigned long)>
      busECR.write(FLEXCANb_ECR(_bus));
    281e:	69f1      	ldr	r1, [r6, #28]
    2820:	f509 50ec 	add.w	r0, r9, #7552	; 0x1d80
    2824:	b289      	uxth	r1, r1
    2826:	3018      	adds	r0, #24
    2828:	f7ff faa2 	bl	1d70 <Circular_Buffer<unsigned short, (unsigned short)16, (unsigned short)0>::write(unsigned short)>
      last_esr1 = esr1;
    282c:	602c      	str	r4, [r5, #0]
    282e:	e658      	b.n	24e2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1c6>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    2830:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
    2834:	2201      	movs	r2, #1
    2836:	40a2      	lsls	r2, r4
    2838:	430a      	orrs	r2, r1
    283a:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE); /* set it back to a TX mailbox */
    283e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    2842:	601a      	str	r2, [r3, #0]
    2844:	e5af      	b.n	23a6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
          writeTxMailbox(mb_num, frame);
    2846:	9a03      	ldr	r2, [sp, #12]
    2848:	4621      	mov	r1, r4
    284a:	e766      	b.n	271a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3fe>

0000284c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>:
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    284c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t cl = msg;
    2850:	468c      	mov	ip, r1
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    2852:	460f      	mov	r7, r1
    2854:	4606      	mov	r6, r0
    2856:	4605      	mov	r5, r0
    2858:	f100 0810 	add.w	r8, r0, #16
  CAN_message_t cl = msg;
    285c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    2860:	b08d      	sub	sp, #52	; 0x34
  CAN_message_t cl = msg;
    2862:	466c      	mov	r4, sp
    2864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2866:	e89c 0003 	ldmia.w	ip, {r0, r1}
    286a:	e884 0003 	stmia.w	r4, {r0, r1}
  for (uint8_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    286e:	f8df a094 	ldr.w	sl, [pc, #148]	; 2904 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0xb8>
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    2872:	f04f 0901 	mov.w	r9, #1
    thisListener = listener[listenerPos];
    2876:	f855 4f04 	ldr.w	r4, [r5, #4]!
    if (thisListener != nullptr) {
    287a:	b15c      	cbz	r4, 2894 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    287c:	f99d 2014 	ldrsb.w	r2, [sp, #20]
    2880:	68a3      	ldr	r3, [r4, #8]
    2882:	fa09 f102 	lsl.w	r1, r9, r2
    2886:	4219      	tst	r1, r3
    2888:	d020      	beq.n	28cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x80>
    288a:	6823      	ldr	r3, [r4, #0]
    288c:	f8d3 b000 	ldr.w	fp, [r3]
    2890:	45d3      	cmp	fp, sl
    2892:	d116      	bne.n	28c2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x76>
  for (uint8_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    2894:	4545      	cmp	r5, r8
    2896:	d1ee      	bne.n	2876 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x2a>
  if ( !isEventsUsed ) {
    2898:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
    289c:	f893 3700 	ldrb.w	r3, [r3, #1792]	; 0x700
    28a0:	b323      	cbz	r3, 28ec <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0xa0>
  memmove(buf, &msg, sizeof(msg));
    28a2:	2218      	movs	r2, #24
    28a4:	4639      	mov	r1, r7
    28a6:	eb0d 0002 	add.w	r0, sp, r2
    28aa:	f006 fb1f 	bl	8eec <memcpy>
        void push_back(const T *buffer, uint16_t length) { write(buffer, length); }
    28ae:	2218      	movs	r2, #24
    28b0:	eb0d 0102 	add.w	r1, sp, r2
    28b4:	f106 0014 	add.w	r0, r6, #20
    28b8:	f7ff fb5e 	bl	1f78 <Circular_Buffer<unsigned char, (unsigned short)256, (unsigned short)24>::write(unsigned char const*, unsigned short)>
}
    28bc:	b00d      	add	sp, #52	; 0x34
    28be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (thisListener->callbacksActive & (1UL << cl.mb)) thisListener->frameHandler (cl, cl.mb, cl.bus);
    28c2:	f89d 3015 	ldrb.w	r3, [sp, #21]
    28c6:	4669      	mov	r1, sp
    28c8:	4620      	mov	r0, r4
    28ca:	47d8      	blx	fp
      if (thisListener->generalCallbackActive) thisListener->frameHandler (cl, -1, cl.bus);
    28cc:	7c23      	ldrb	r3, [r4, #16]
    28ce:	2b00      	cmp	r3, #0
    28d0:	d0e0      	beq.n	2894 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    28d2:	6823      	ldr	r3, [r4, #0]
    28d4:	f8d3 b000 	ldr.w	fp, [r3]
    28d8:	f89d 3015 	ldrb.w	r3, [sp, #21]
    28dc:	45d3      	cmp	fp, sl
    28de:	d0d9      	beq.n	2894 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    28e0:	4620      	mov	r0, r4
    28e2:	f04f 32ff 	mov.w	r2, #4294967295
    28e6:	4669      	mov	r1, sp
    28e8:	47d8      	blx	fp
    28ea:	e7d3      	b.n	2894 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x48>
    mbCallbacks((FLEXCAN_MAILBOX)msg.mb, msg);	
    28ec:	7d3b      	ldrb	r3, [r7, #20]
    28ee:	f88d 3018 	strb.w	r3, [sp, #24]
    28f2:	463a      	mov	r2, r7
    28f4:	a906      	add	r1, sp, #24
    28f6:	4630      	mov	r0, r6
    28f8:	f7fe ffe6 	bl	18c8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mbCallbacks(FLEXCAN_MAILBOX const&, CAN_message_t const&)>
}
    28fc:	b00d      	add	sp, #52	; 0x34
    28fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2902:	bf00      	nop
    2904:	00000459 	.word	0x00000459

00002908 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>:
  if ( !distribution ) return; /* distribution not enabled */
    2908:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
    290c:	f893 3701 	ldrb.w	r3, [r3, #1793]	; 0x701
    2910:	2b00      	cmp	r3, #0
    2912:	f000 80db 	beq.w	2acc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1c4>
FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
    2916:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t frame = msg;
    291a:	460f      	mov	r7, r1
    291c:	4605      	mov	r5, r0
    291e:	460e      	mov	r6, r1
    2920:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
    2922:	b089      	sub	sp, #36	; 0x24
  CAN_message_t frame = msg;
    2924:	ac02      	add	r4, sp, #8
    2926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2928:	e897 0003 	ldmia.w	r7, {r0, r1}
    292c:	e884 0003 	stmia.w	r4, {r0, r1}
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    2930:	f8df c250 	ldr.w	ip, [pc, #592]	; 2b84 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>
    2934:	f8dc 3000 	ldr.w	r3, [ip]
    2938:	009b      	lsls	r3, r3, #2
    293a:	d552      	bpl.n	29e2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
    uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    293c:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
    2940:	f3c3 6a03 	ubfx	sl, r3, #24, #4
    2944:	2400      	movs	r4, #0
    2946:	ea4f 0aca 	mov.w	sl, sl, lsl #3
    294a:	f10a 0a08 	add.w	sl, sl, #8
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    294e:	4622      	mov	r2, r4
            frame.mb = FIFO;
    2950:	f04f 0963 	mov.w	r9, #99	; 0x63
    2954:	e00c      	b.n	2970 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x68>
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    2956:	0f5b      	lsrs	r3, r3, #29
    2958:	2b02      	cmp	r3, #2
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    295a:	683b      	ldr	r3, [r7, #0]
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    295c:	f000 809a 	beq.w	2a94 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x18c>
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
    2960:	0f5b      	lsrs	r3, r3, #29
    2962:	2b05      	cmp	r3, #5
    2964:	f000 80dd 	beq.w	2b22 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x21a>
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    2968:	3401      	adds	r4, #1
    296a:	b2e2      	uxtb	r2, r4
    296c:	4592      	cmp	sl, r2
    296e:	d938      	bls.n	29e2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
      if ( msg.mb == FIFO ) break; // don't distribute to fifo if fifo was the source
    2970:	f996 3014 	ldrsb.w	r3, [r6, #20]
    2974:	2b63      	cmp	r3, #99	; 0x63
    2976:	d034      	beq.n	29e2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xda>
      if ( !(fifo_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    2978:	eb04 0844 	add.w	r8, r4, r4, lsl #1
    297c:	eb05 0bc8 	add.w	fp, r5, r8, lsl #3
    2980:	f50b 57f0 	add.w	r7, fp, #7680	; 0x1e00
    2984:	683b      	ldr	r3, [r7, #0]
    2986:	f013 4f60 	tst.w	r3, #3758096384	; 0xe0000000
    298a:	d0ed      	beq.n	2968 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    298c:	683b      	ldr	r3, [r7, #0]
    298e:	0f5b      	lsrs	r3, r3, #29
    2990:	2b01      	cmp	r3, #1
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    2992:	683b      	ldr	r3, [r7, #0]
      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    2994:	d1df      	bne.n	2956 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x4e>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    2996:	79f2      	ldrb	r2, [r6, #7]
    2998:	f3c3 4300 	ubfx	r3, r3, #16, #1
    299c:	429a      	cmp	r2, r3
    299e:	d1e3      	bne.n	2968 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    29a0:	683b      	ldr	r3, [r7, #0]
    29a2:	f413 7f60 	tst.w	r3, #896	; 0x380
    29a6:	d0df      	beq.n	2968 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    29a8:	ea4f 0b48 	mov.w	fp, r8, lsl #1
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    29ac:	2300      	movs	r3, #0
    29ae:	e006      	b.n	29be <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xb6>
    29b0:	683a      	ldr	r2, [r7, #0]
    29b2:	fa5f f388 	uxtb.w	r3, r8
    29b6:	f3c2 12c2 	ubfx	r2, r2, #7, #3
    29ba:	4293      	cmp	r3, r2
    29bc:	d2d4      	bcs.n	2968 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    29be:	f103 0801 	add.w	r8, r3, #1
    29c2:	eb0b 0308 	add.w	r3, fp, r8
    29c6:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
    29ca:	9a02      	ldr	r2, [sp, #8]
    29cc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    29d0:	429a      	cmp	r2, r3
    29d2:	d1ed      	bne.n	29b0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xa8>
            struct2queueRx(frame);
    29d4:	a902      	add	r1, sp, #8
    29d6:	4628      	mov	r0, r5
            frame.mb = FIFO;
    29d8:	f88d 901c 	strb.w	r9, [sp, #28]
            struct2queueRx(frame);
    29dc:	f7ff ff36 	bl	284c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    29e0:	e7e6      	b.n	29b0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xa8>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    29e2:	4f68      	ldr	r7, [pc, #416]	; (2b84 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>)
  frame.idhit = 0;
    29e4:	2300      	movs	r3, #0
    29e6:	f88d 300e 	strb.w	r3, [sp, #14]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    29ea:	683c      	ldr	r4, [r7, #0]
    29ec:	f014 5400 	ands.w	r4, r4, #536870912	; 0x20000000
    29f0:	d03f      	beq.n	2a72 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x16a>
    29f2:	f7fd feab 	bl	74c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    29f6:	683b      	ldr	r3, [r7, #0]
    29f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    29fc:	3301      	adds	r3, #1
    29fe:	4283      	cmp	r3, r0
    2a00:	4604      	mov	r4, r0
    2a02:	d933      	bls.n	2a6c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x164>
    2a04:	f8df 917c 	ldr.w	r9, [pc, #380]	; 2b84 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x27c>
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
    2a08:	f242 1704 	movw	r7, #8452	; 0x2104
    2a0c:	f242 1808 	movw	r8, #8456	; 0x2108
    if ( msg.mb == i ) continue; // don't distribute to same mailbox
    2a10:	f996 3014 	ldrsb.w	r3, [r6, #20]
    2a14:	42a3      	cmp	r3, r4
    2a16:	d020      	beq.n	2a5a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( !(mb_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    2a18:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2a1c:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
    2a20:	f502 5a04 	add.w	sl, r2, #8448	; 0x2100
    2a24:	f8da 3000 	ldr.w	r3, [sl]
    2a28:	f013 4f60 	tst.w	r3, #3758096384	; 0xe0000000
    2a2c:	d015      	beq.n	2a5a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( (bool)(mb_filter_table[i][0] & (1UL << 27)) != msg.flags.extended ) continue; /* extended flag check */
    2a2e:	f8da 3000 	ldr.w	r3, [sl]
    2a32:	79f0      	ldrb	r0, [r6, #7]
    2a34:	f3c3 63c0 	ubfx	r3, r3, #27, #1
    2a38:	4298      	cmp	r0, r3
    2a3a:	d10e      	bne.n	2a5a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    2a3c:	f8da 3000 	ldr.w	r3, [sl]
    2a40:	0f5b      	lsrs	r3, r3, #29
    2a42:	2b01      	cmp	r3, #1
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    2a44:	f8da 3000 	ldr.w	r3, [sl]
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    2a48:	d041      	beq.n	2ace <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1c6>
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    2a4a:	0f5b      	lsrs	r3, r3, #29
    2a4c:	2b02      	cmp	r3, #2
    2a4e:	d012      	beq.n	2a76 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x16e>
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_USERMASK ) {
    2a50:	f8da 3000 	ldr.w	r3, [sl]
    2a54:	0f5b      	lsrs	r3, r3, #29
    2a56:	2b05      	cmp	r3, #5
    2a58:	d05b      	beq.n	2b12 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x20a>
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    2a5a:	f8d9 3000 	ldr.w	r3, [r9]
    2a5e:	3401      	adds	r4, #1
    2a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2a64:	b2e4      	uxtb	r4, r4
    2a66:	3301      	adds	r3, #1
    2a68:	429c      	cmp	r4, r3
    2a6a:	d3d1      	bcc.n	2a10 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x108>
}
    2a6c:	b009      	add	sp, #36	; 0x24
    2a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    2a72:	683b      	ldr	r3, [r7, #0]
    2a74:	e7c6      	b.n	2a04 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xfc>
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
    2a76:	59d1      	ldr	r1, [r2, r7]
    2a78:	9b02      	ldr	r3, [sp, #8]
    2a7a:	428b      	cmp	r3, r1
    2a7c:	d3ed      	bcc.n	2a5a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    2a7e:	f852 2008 	ldr.w	r2, [r2, r8]
    2a82:	4293      	cmp	r3, r2
    2a84:	d8e9      	bhi.n	2a5a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        struct2queueRx(frame);
    2a86:	a902      	add	r1, sp, #8
    2a88:	4628      	mov	r0, r5
        frame.mb = i;
    2a8a:	f88d 401c 	strb.w	r4, [sp, #28]
        struct2queueRx(frame);
    2a8e:	f7ff fedd 	bl	284c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2a92:	e7e2      	b.n	2a5a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    2a94:	79f2      	ldrb	r2, [r6, #7]
    2a96:	f3c3 4300 	ubfx	r3, r3, #16, #1
    2a9a:	429a      	cmp	r2, r3
    2a9c:	f47f af64 	bne.w	2968 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
        if ( frame.id >= fifo_filter_table[i][1] && frame.id <= fifo_filter_table[i][2] ) {
    2aa0:	f641 6304 	movw	r3, #7684	; 0x1e04
    2aa4:	f85b 2003 	ldr.w	r2, [fp, r3]
    2aa8:	9b02      	ldr	r3, [sp, #8]
    2aaa:	4293      	cmp	r3, r2
    2aac:	f4ff af5c 	bcc.w	2968 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
    2ab0:	f641 6208 	movw	r2, #7688	; 0x1e08
    2ab4:	f85b 2002 	ldr.w	r2, [fp, r2]
    2ab8:	4293      	cmp	r3, r2
    2aba:	f63f af55 	bhi.w	2968 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          struct2queueRx(frame);
    2abe:	a902      	add	r1, sp, #8
    2ac0:	4628      	mov	r0, r5
          frame.mb = FIFO;
    2ac2:	f88d 901c 	strb.w	r9, [sp, #28]
          struct2queueRx(frame);
    2ac6:	f7ff fec1 	bl	284c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2aca:	e74d      	b.n	2968 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
    2acc:	4770      	bx	lr
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    2ace:	f413 7f60 	tst.w	r3, #896	; 0x380
    2ad2:	d0c2      	beq.n	2a5a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( frame.id == mb_filter_table[i][p+1] ) {
    2ad4:	004a      	lsls	r2, r1, #1
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    2ad6:	2300      	movs	r3, #0
    2ad8:	e007      	b.n	2aea <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1e2>
    2ada:	f8da 1000 	ldr.w	r1, [sl]
    2ade:	fa5f f38b 	uxtb.w	r3, fp
    2ae2:	f3c1 11c2 	ubfx	r1, r1, #7, #3
    2ae6:	428b      	cmp	r3, r1
    2ae8:	d2b7      	bcs.n	2a5a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
        if ( frame.id == mb_filter_table[i][p+1] ) {
    2aea:	f103 0b01 	add.w	fp, r3, #1
    2aee:	eb02 030b 	add.w	r3, r2, fp
    2af2:	f503 6304 	add.w	r3, r3, #2112	; 0x840
    2af6:	9902      	ldr	r1, [sp, #8]
    2af8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    2afc:	4299      	cmp	r1, r3
    2afe:	d1ec      	bne.n	2ada <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1d2>
          struct2queueRx(frame);
    2b00:	a902      	add	r1, sp, #8
    2b02:	4628      	mov	r0, r5
    2b04:	9200      	str	r2, [sp, #0]
          frame.mb = i;
    2b06:	f88d 401c 	strb.w	r4, [sp, #28]
          struct2queueRx(frame);
    2b0a:	f7ff fe9f 	bl	284c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2b0e:	9a00      	ldr	r2, [sp, #0]
    2b10:	e7e3      	b.n	2ada <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1d2>
      if ( filter_match((FLEXCAN_MAILBOX)i, frame.id) ) {
    2b12:	9a02      	ldr	r2, [sp, #8]
    2b14:	4621      	mov	r1, r4
    2b16:	4628      	mov	r0, r5
    2b18:	f7ff f9c8 	bl	1eac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    2b1c:	2800      	cmp	r0, #0
    2b1e:	d09c      	beq.n	2a5a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x152>
    2b20:	e7b1      	b.n	2a86 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x17e>
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    2b22:	683b      	ldr	r3, [r7, #0]
    2b24:	f413 7f60 	tst.w	r3, #896	; 0x380
    2b28:	f43f af1e 	beq.w	2968 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    2b2c:	f50b 53f0 	add.w	r3, fp, #7680	; 0x1e00
    2b30:	3314      	adds	r3, #20
        for ( uint8_t p = 1; p < ((fifo_filter_table[i][0] & 0x380) >> 7) + 1; p++) {
    2b32:	2701      	movs	r7, #1
    2b34:	e00a      	b.n	2b4c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x244>
    2b36:	f50b 51f0 	add.w	r1, fp, #7680	; 0x1e00
    2b3a:	3701      	adds	r7, #1
    2b3c:	6809      	ldr	r1, [r1, #0]
    2b3e:	f3c1 11c2 	ubfx	r1, r1, #7, #3
    2b42:	b2ff      	uxtb	r7, r7
    2b44:	3101      	adds	r1, #1
    2b46:	428f      	cmp	r7, r1
    2b48:	f4bf af0e 	bcs.w	2968 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x60>
          if ( (frame.id & fifo_filter_table[i][5]) == (fifo_filter_table[i][p] & fifo_filter_table[i][5]) ) {
    2b4c:	eb07 0148 	add.w	r1, r7, r8, lsl #1
    2b50:	f501 61f0 	add.w	r1, r1, #1920	; 0x780
    2b54:	6818      	ldr	r0, [r3, #0]
    2b56:	f855 e021 	ldr.w	lr, [r5, r1, lsl #2]
    2b5a:	9902      	ldr	r1, [sp, #8]
    2b5c:	f8d3 c000 	ldr.w	ip, [r3]
    2b60:	4008      	ands	r0, r1
    2b62:	ea0e 010c 	and.w	r1, lr, ip
    2b66:	4288      	cmp	r0, r1
    2b68:	d1e5      	bne.n	2b36 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x22e>
            struct2queueRx(frame);
    2b6a:	a902      	add	r1, sp, #8
    2b6c:	4628      	mov	r0, r5
    2b6e:	9301      	str	r3, [sp, #4]
            frame.idhit = i;
    2b70:	f88d 200e 	strb.w	r2, [sp, #14]
    2b74:	9200      	str	r2, [sp, #0]
            frame.mb = FIFO;
    2b76:	f88d 901c 	strb.w	r9, [sp, #28]
            struct2queueRx(frame);
    2b7a:	f7ff fe67 	bl	284c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2b7e:	e9dd 2300 	ldrd	r2, r3, [sp]
    2b82:	e7d8      	b.n	2b36 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x22e>
    2b84:	400a4000 	.word	0x400a4000

00002b88 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()>:
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    2b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t msg; // setup a temporary storage buffer
    2b8c:	4db9      	ldr	r5, [pc, #740]	; (2e74 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2ec>)
  return FLEXCANb_IMASK1(_bus);
    2b8e:	4fba      	ldr	r7, [pc, #744]	; (2e78 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    2b90:	4681      	mov	r9, r0
  CAN_message_t msg; // setup a temporary storage buffer
    2b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    2b94:	b097      	sub	sp, #92	; 0x5c
  CAN_message_t msg; // setup a temporary storage buffer
    2b96:	ac04      	add	r4, sp, #16
    2b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2b9a:	e895 0003 	ldmia.w	r5, {r0, r1}
    2b9e:	e884 0003 	stmia.w	r4, {r0, r1}
  return FLEXCANb_IMASK1(_bus);
    2ba2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
  return FLEXCANb_IFLAG1(_bus);
    2ba4:	6b38      	ldr	r0, [r7, #48]	; 0x30
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    2ba6:	683b      	ldr	r3, [r7, #0]
  return FLEXCANb_IFLAG1(_bus);
    2ba8:	9001      	str	r0, [sp, #4]
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    2baa:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
  return FLEXCANb_IMASK1(_bus);
    2bae:	f04f 0600 	mov.w	r6, #0
    2bb2:	468b      	mov	fp, r1
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    2bb4:	d103      	bne.n	2bbe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    2bb6:	683a      	ldr	r2, [r7, #0]
    2bb8:	0094      	lsls	r4, r2, #2
    2bba:	f100 80eb 	bmi.w	2d94 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x20c>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2bbe:	4dae      	ldr	r5, [pc, #696]	; (2e78 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    2bc0:	9b01      	ldr	r3, [sp, #4]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2bc2:	682c      	ldr	r4, [r5, #0]
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    2bc4:	f043 0301 	orr.w	r3, r3, #1
    2bc8:	fab3 f383 	clz	r3, r3
    2bcc:	f1c3 0320 	rsb	r3, r3, #32
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2bd0:	f014 5400 	ands.w	r4, r4, #536870912	; 0x20000000
  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    2bd4:	fa5f fa83 	uxtb.w	sl, r3
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2bd8:	f000 824f 	beq.w	307a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4f2>
    2bdc:	f7fd fdb6 	bl	74c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    2be0:	682b      	ldr	r3, [r5, #0]
    2be2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2be6:	3301      	adds	r3, #1
    2be8:	4283      	cmp	r3, r0
    2bea:	4604      	mov	r4, r0
    2bec:	f240 809e 	bls.w	2d2c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    2bf0:	4582      	cmp	sl, r0
    2bf2:	f240 809b 	bls.w	2d2c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    2bf6:	1c67      	adds	r7, r4, #1
      (void)FLEXCANb_TIMER(_bus);
    2bf8:	f8df 827c 	ldr.w	r8, [pc, #636]	; 2e78 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>
    2bfc:	b2fd      	uxtb	r5, r7
    2bfe:	e016      	b.n	2c2e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xa6>
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
    2c00:	2906      	cmp	r1, #6
    2c02:	f000 80ad 	beq.w	2d60 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1d8>
    else if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_EMPTY ) {
    2c06:	2904      	cmp	r1, #4
    2c08:	f000 813e 	beq.w	2e88 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x300>
    else if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2c0c:	2908      	cmp	r1, #8
    2c0e:	f000 81d7 	beq.w	2fc0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x438>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    2c12:	f8d8 3000 	ldr.w	r3, [r8]
    2c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2c1a:	3301      	adds	r3, #1
    2c1c:	42ab      	cmp	r3, r5
    2c1e:	b2fc      	uxtb	r4, r7
    2c20:	f240 8084 	bls.w	2d2c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    2c24:	45a2      	cmp	sl, r4
    2c26:	f105 0501 	add.w	r5, r5, #1
    2c2a:	d97f      	bls.n	2d2c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1a4>
    2c2c:	1c67      	adds	r7, r4, #1
    if (!(imask & (1ULL << mb_num))) continue; /* don't read non-interrupt mailboxes */
    2c2e:	f1c4 0220 	rsb	r2, r4, #32
    2c32:	f1a4 0320 	sub.w	r3, r4, #32
    2c36:	fa06 f202 	lsl.w	r2, r6, r2
    2c3a:	fa2b f104 	lsr.w	r1, fp, r4
    2c3e:	fa26 f303 	lsr.w	r3, r6, r3
    2c42:	4311      	orrs	r1, r2
    2c44:	4319      	orrs	r1, r3
    2c46:	07c9      	lsls	r1, r1, #31
    2c48:	d5e3      	bpl.n	2c12 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    if (!(iflag & (1ULL << mb_num))) continue; /* don't read unflagged mailboxes */
    2c4a:	9901      	ldr	r1, [sp, #4]
    2c4c:	40e1      	lsrs	r1, r4
    2c4e:	4311      	orrs	r1, r2
    2c50:	4319      	orrs	r1, r3
    2c52:	07c9      	lsls	r1, r1, #31
    2c54:	d5dd      	bpl.n	2c12 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    2c56:	4b89      	ldr	r3, [pc, #548]	; (2e7c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f4>)
    2c58:	18e3      	adds	r3, r4, r3
    2c5a:	011b      	lsls	r3, r3, #4
    uint32_t code = mbxAddr[0];
    2c5c:	681a      	ldr	r2, [r3, #0]
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
    2c5e:	f3c2 6103 	ubfx	r1, r2, #24, #4
    2c62:	2902      	cmp	r1, #2
    2c64:	d1cc      	bne.n	2c00 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x78>
      msg.flags.extended = (bool)(code & (1UL << 21));
    2c66:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2c6a:	6858      	ldr	r0, [r3, #4]
      msg.flags.extended = (bool)(code & (1UL << 21));
    2c6c:	2900      	cmp	r1, #0
    2c6e:	bf14      	ite	ne
    2c70:	f04f 0c01 	movne.w	ip, #1
    2c74:	f04f 0c00 	moveq.w	ip, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2c78:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
      msg.flags.extended = (bool)(code & (1UL << 21));
    2c7c:	f88d c017 	strb.w	ip, [sp, #23]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2c80:	d17f      	bne.n	2d82 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1fa>
    2c82:	0c80      	lsrs	r0, r0, #18
    2c84:	9004      	str	r0, [sp, #16]
      msg.timestamp = code & 0xFFFF;
    2c86:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    2c8a:	f3c2 4203 	ubfx	r2, r2, #16, #4
    2c8e:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    2c92:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.mb = mb_num;
    2c96:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    2c9a:	f892 2915 	ldrb.w	r2, [r2, #2325]	; 0x915
    2c9e:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2ca2:	689a      	ldr	r2, [r3, #8]
    2ca4:	f88d 201f 	strb.w	r2, [sp, #31]
    2ca8:	689a      	ldr	r2, [r3, #8]
    2caa:	0a12      	lsrs	r2, r2, #8
    2cac:	f88d 201e 	strb.w	r2, [sp, #30]
    2cb0:	689a      	ldr	r2, [r3, #8]
    2cb2:	0c12      	lsrs	r2, r2, #16
    2cb4:	f88d 201d 	strb.w	r2, [sp, #29]
    2cb8:	689a      	ldr	r2, [r3, #8]
    2cba:	0e12      	lsrs	r2, r2, #24
    2cbc:	f88d 201c 	strb.w	r2, [sp, #28]
    2cc0:	68da      	ldr	r2, [r3, #12]
    2cc2:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    2cc6:	68da      	ldr	r2, [r3, #12]
    2cc8:	0a12      	lsrs	r2, r2, #8
    2cca:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    2cce:	68da      	ldr	r2, [r3, #12]
    2cd0:	0c12      	lsrs	r2, r2, #16
    2cd2:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
    2cd6:	68da      	ldr	r2, [r3, #12]
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    2cd8:	2900      	cmp	r1, #0
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2cda:	ea4f 6212 	mov.w	r2, r2, lsr #24
    2cde:	f88d 2020 	strb.w	r2, [sp, #32]
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    2ce2:	bf14      	ite	ne
    2ce4:	f04f 628c 	movne.w	r2, #73400320	; 0x4600000
    2ce8:	f04f 6280 	moveq.w	r2, #67108864	; 0x4000000
    2cec:	601a      	str	r2, [r3, #0]
      (void)FLEXCANb_TIMER(_bus);
    2cee:	f8d8 3008 	ldr.w	r3, [r8, #8]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    2cf2:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    2cf6:	2301      	movs	r3, #1
    2cf8:	40a3      	lsls	r3, r4
    2cfa:	4313      	orrs	r3, r2
    2cfc:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    2d00:	9a04      	ldr	r2, [sp, #16]
    2d02:	4621      	mov	r1, r4
    2d04:	4648      	mov	r0, r9
    2d06:	f7ff f8d1 	bl	1eac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::filter_match(FLEXCAN_MAILBOX, unsigned long)>
    2d0a:	2800      	cmp	r0, #0
    2d0c:	f040 8153 	bne.w	2fb6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x42e>
      frame_distribution(msg);
    2d10:	a904      	add	r1, sp, #16
    2d12:	4648      	mov	r0, r9
    2d14:	f7ff fdf8 	bl	2908 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    2d18:	a804      	add	r0, sp, #16
    2d1a:	f3af 8000 	nop.w
      ext_output2(msg);
    2d1e:	a804      	add	r0, sp, #16
    2d20:	f3af 8000 	nop.w
      ext_output3(msg);
    2d24:	a804      	add	r0, sp, #16
    2d26:	f3af 8000 	nop.w
    }
    2d2a:	e772      	b.n	2c12 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
  uint32_t esr1 = FLEXCANb_ESR1(_bus);
    2d2c:	4e52      	ldr	r6, [pc, #328]	; (2e78 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
  if ( (last_esr1 & 0x7FFBF) != (esr1 & 0x7FFBF) ) {
    2d2e:	4d54      	ldr	r5, [pc, #336]	; (2e80 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f8>)
  uint32_t esr1 = FLEXCANb_ESR1(_bus);
    2d30:	6a34      	ldr	r4, [r6, #32]
  if ( (last_esr1 & 0x7FFBF) != (esr1 & 0x7FFBF) ) {
    2d32:	682b      	ldr	r3, [r5, #0]
    2d34:	ea84 0203 	eor.w	r2, r4, r3
    2d38:	4b52      	ldr	r3, [pc, #328]	; (2e84 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2fc>)
    2d3a:	4013      	ands	r3, r2
    2d3c:	b13b      	cbz	r3, 2d4e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1c6>
        uint16_t size() { return _available; }
    2d3e:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
    2d42:	f8b3 3cd4 	ldrh.w	r3, [r3, #3284]	; 0xcd4
    2d46:	b29b      	uxth	r3, r3
    if ( busESR1.size() < busESR1.capacity() ) {
    2d48:	2b0f      	cmp	r3, #15
    2d4a:	f240 8198 	bls.w	307e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4f6>
  FLEXCANb_ESR1(_bus) |= esr1;
    2d4e:	4a4a      	ldr	r2, [pc, #296]	; (2e78 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    2d50:	6a13      	ldr	r3, [r2, #32]
    2d52:	4323      	orrs	r3, r4
    2d54:	6213      	str	r3, [r2, #32]
  asm volatile ("dsb");	
    2d56:	f3bf 8f4f 	dsb	sy
}
    2d5a:	b017      	add	sp, #92	; 0x5c
    2d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      msg.flags.extended = (bool)(code & (1UL << 21));
    2d60:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2d64:	6858      	ldr	r0, [r3, #4]
      msg.flags.extended = (bool)(code & (1UL << 21));
    2d66:	2900      	cmp	r1, #0
    2d68:	bf14      	ite	ne
    2d6a:	f04f 0c01 	movne.w	ip, #1
    2d6e:	f04f 0c00 	moveq.w	ip, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2d72:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
      msg.flags.extended = (bool)(code & (1UL << 21));
    2d76:	f88d c017 	strb.w	ip, [sp, #23]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2d7a:	d105      	bne.n	2d88 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x200>
    2d7c:	0c80      	lsrs	r0, r0, #18
    2d7e:	9004      	str	r0, [sp, #16]
    2d80:	e004      	b.n	2d8c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x204>
    2d82:	9004      	str	r0, [sp, #16]
      msg.flags.extended = (bool)(code & (1UL << 21));
    2d84:	2101      	movs	r1, #1
    2d86:	e77e      	b.n	2c86 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xfe>
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2d88:	9004      	str	r0, [sp, #16]
      msg.flags.extended = (bool)(code & (1UL << 21));
    2d8a:	2101      	movs	r1, #1
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
    2d8c:	2001      	movs	r0, #1
    2d8e:	f88d 0019 	strb.w	r0, [sp, #25]
    2d92:	e778      	b.n	2c86 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xfe>
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    2d94:	068a      	lsls	r2, r1, #26
    2d96:	f57f af12 	bpl.w	2bbe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    2d9a:	0685      	lsls	r5, r0, #26
    2d9c:	f57f af0f 	bpl.w	2bbe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
      uint32_t code = mbxAddr[0];
    2da0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
      msg.timestamp = code & 0xFFFF;
    2da4:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    2da8:	f3c2 4103 	ubfx	r1, r2, #16, #4
    2dac:	f88d 101b 	strb.w	r1, [sp, #27]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2db0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2db4:	4c30      	ldr	r4, [pc, #192]	; (2e78 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
      msg.flags.extended = (bool)(code & (1UL << 21));
    2db6:	f402 1000 	and.w	r0, r2, #2097152	; 0x200000
    2dba:	42b0      	cmp	r0, r6
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2dbc:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
      msg.flags.remote = (bool)(code & (1UL << 20));
    2dc0:	f3c2 5000 	ubfx	r0, r2, #20, #1
    2dc4:	f88d 0018 	strb.w	r0, [sp, #24]
      msg.idhit = code >> 23;
    2dc8:	ea4f 52d2 	mov.w	r2, r2, lsr #23
      msg.flags.extended = (bool)(code & (1UL << 21));
    2dcc:	bf12      	itee	ne
    2dce:	2001      	movne	r0, #1
    2dd0:	4630      	moveq	r0, r6
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2dd2:	0c89      	lsreq	r1, r1, #18
      msg.flags.extended = (bool)(code & (1UL << 21));
    2dd4:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.idhit = code >> 23;
    2dd8:	f88d 2016 	strb.w	r2, [sp, #22]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2ddc:	9104      	str	r1, [sp, #16]
    2dde:	a808      	add	r0, sp, #32
      msg.idhit = code >> 23;
    2de0:	2200      	movs	r2, #0
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2de2:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    2de6:	40d1      	lsrs	r1, r2
    2de8:	3208      	adds	r2, #8
    2dea:	2a20      	cmp	r2, #32
    2dec:	f800 1d01 	strb.w	r1, [r0, #-1]!
    2df0:	d1f7      	bne.n	2de2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x25a>
    2df2:	4821      	ldr	r0, [pc, #132]	; (2e78 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    2df4:	a909      	add	r1, sp, #36	; 0x24
    2df6:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    2dfa:	40da      	lsrs	r2, r3
    2dfc:	3308      	adds	r3, #8
    2dfe:	2b20      	cmp	r3, #32
    2e00:	f801 2d01 	strb.w	r2, [r1, #-1]!
    2e04:	d1f7      	bne.n	2df6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x26e>
      msg.bus = busNumber;
    2e06:	f509 5300 	add.w	r3, r9, #8192	; 0x2000
    2e0a:	f893 3915 	ldrb.w	r3, [r3, #2325]	; 0x915
    2e0e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
      msg.mb = FIFO; /* store the mailbox the message came from (for callback reference) */
    2e12:	2363      	movs	r3, #99	; 0x63
    2e14:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
      (void)FLEXCANb_TIMER(_bus);
    2e18:	6883      	ldr	r3, [r0, #8]
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    2e1a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2e1c:	f043 0320 	orr.w	r3, r3, #32
    2e20:	6303      	str	r3, [r0, #48]	; 0x30
      if ( iflag & FLEXCAN_IFLAG1_BUF6I ) writeIFLAGBit(6); /* clear FIFO bit only! */
    2e22:	9b01      	ldr	r3, [sp, #4]
    2e24:	065c      	lsls	r4, r3, #25
    2e26:	d503      	bpl.n	2e30 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2a8>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    2e28:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2e2e:	6303      	str	r3, [r0, #48]	; 0x30
      if ( iflag & FLEXCAN_IFLAG1_BUF7I ) writeIFLAGBit(7); /* clear FIFO bit only! */
    2e30:	9b01      	ldr	r3, [sp, #4]
    2e32:	0618      	lsls	r0, r3, #24
    2e34:	d504      	bpl.n	2e40 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2b8>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    2e36:	4a10      	ldr	r2, [pc, #64]	; (2e78 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x2f0>)
    2e38:	6b13      	ldr	r3, [r2, #48]	; 0x30
    2e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2e3e:	6313      	str	r3, [r2, #48]	; 0x30
      frame_distribution(msg);
    2e40:	a904      	add	r1, sp, #16
    2e42:	4648      	mov	r0, r9
    2e44:	f7ff fd60 	bl	2908 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    2e48:	a804      	add	r0, sp, #16
    2e4a:	f3af 8000 	nop.w
      ext_output2(msg);
    2e4e:	a804      	add	r0, sp, #16
    2e50:	f3af 8000 	nop.w
      ext_output3(msg);
    2e54:	a804      	add	r0, sp, #16
    2e56:	f3af 8000 	nop.w
      if (fifo_filter_match(msg.id)) struct2queueRx(msg);
    2e5a:	9904      	ldr	r1, [sp, #16]
    2e5c:	4648      	mov	r0, r9
    2e5e:	f7fe ffab 	bl	1db8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::fifo_filter_match(unsigned long)>
    2e62:	2800      	cmp	r0, #0
    2e64:	f43f aeab 	beq.w	2bbe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    2e68:	a904      	add	r1, sp, #16
    2e6a:	4648      	mov	r0, r9
    2e6c:	f7ff fcee 	bl	284c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2e70:	e6a5      	b.n	2bbe <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x36>
    2e72:	bf00      	nop
    2e74:	00011c70 	.word	0x00011c70
    2e78:	400a4000 	.word	0x400a4000
    2e7c:	0400a408 	.word	0x0400a408
    2e80:	1fff15e8 	.word	0x1fff15e8
    2e84:	0007ffbf 	.word	0x0007ffbf
      msg.flags.extended = (bool)(code & (1UL << 21));
    2e88:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
    2e8c:	2900      	cmp	r1, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2e8e:	6859      	ldr	r1, [r3, #4]
      msg.timestamp = code & 0xFFFF;
    2e90:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    2e94:	f3c2 4203 	ubfx	r2, r2, #16, #4
    2e98:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    2e9c:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.flags.extended = (bool)(code & (1UL << 21));
    2ea0:	bf14      	ite	ne
    2ea2:	2001      	movne	r0, #1
    2ea4:	2000      	moveq	r0, #0
    2ea6:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.bus = busNumber;
    2eaa:	f892 0915 	ldrb.w	r0, [r2, #2325]	; 0x915
      msg.mb = mb_num;
    2eae:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    2eb2:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2eb6:	6898      	ldr	r0, [r3, #8]
    2eb8:	f88d 001f 	strb.w	r0, [sp, #31]
    2ebc:	6898      	ldr	r0, [r3, #8]
    2ebe:	ea4f 2010 	mov.w	r0, r0, lsr #8
    2ec2:	f88d 001e 	strb.w	r0, [sp, #30]
    2ec6:	6898      	ldr	r0, [r3, #8]
    2ec8:	ea4f 4010 	mov.w	r0, r0, lsr #16
    2ecc:	f88d 001d 	strb.w	r0, [sp, #29]
    2ed0:	6898      	ldr	r0, [r3, #8]
    2ed2:	ea4f 6010 	mov.w	r0, r0, lsr #24
    2ed6:	f88d 001c 	strb.w	r0, [sp, #28]
    2eda:	68d8      	ldr	r0, [r3, #12]
    2edc:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    2ee0:	68d8      	ldr	r0, [r3, #12]
    2ee2:	ea4f 2010 	mov.w	r0, r0, lsr #8
    2ee6:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    2eea:	68d8      	ldr	r0, [r3, #12]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2eec:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
    2ef0:	bf08      	it	eq
    2ef2:	0c89      	lsreq	r1, r1, #18
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2ef4:	0c00      	lsrs	r0, r0, #16
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2ef6:	9104      	str	r1, [sp, #16]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2ef8:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    2efc:	f604 2102 	addw	r1, r4, #2562	; 0xa02
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2f00:	68d8      	ldr	r0, [r3, #12]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    2f02:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2f06:	0e00      	lsrs	r0, r0, #24
    2f08:	f88d 0020 	strb.w	r0, [sp, #32]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    2f0c:	b129      	cbz	r1, 2f1a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x392>
    2f0e:	a804      	add	r0, sp, #16
    2f10:	9203      	str	r2, [sp, #12]
    2f12:	9302      	str	r3, [sp, #8]
    2f14:	4788      	blx	r1
    2f16:	9a03      	ldr	r2, [sp, #12]
    2f18:	9b02      	ldr	r3, [sp, #8]
        if ( _mainTxHandler ) _mainTxHandler(msg);
    2f1a:	f8d2 2908 	ldr.w	r2, [r2, #2312]	; 0x908
    2f1e:	b11a      	cbz	r2, 2f28 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3a0>
    2f20:	a804      	add	r0, sp, #16
    2f22:	9302      	str	r3, [sp, #8]
    2f24:	4790      	blx	r2
    2f26:	9b02      	ldr	r3, [sp, #8]
    2f28:	f509 5280 	add.w	r2, r9, #4096	; 0x1000
    2f2c:	9202      	str	r2, [sp, #8]
    2f2e:	f8b2 2b1e 	ldrh.w	r2, [r2, #2846]	; 0xb1e
    2f32:	b292      	uxth	r2, r2
      if ( txBuffer.size() ) {
    2f34:	2a00      	cmp	r2, #0
    2f36:	f000 80b1 	beq.w	309c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x514>
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    2f3a:	9b02      	ldr	r3, [sp, #8]
    2f3c:	f8b3 1b1a 	ldrh.w	r1, [r3, #2842]	; 0xb1a
    2f40:	231a      	movs	r3, #26
    2f42:	f001 010f 	and.w	r1, r1, #15
    2f46:	fb03 9101 	mla	r1, r3, r1, r9
    2f4a:	f501 51d9 	add.w	r1, r1, #6944	; 0x1b20
    2f4e:	3112      	adds	r1, #18
    2f50:	2218      	movs	r2, #24
    2f52:	a810      	add	r0, sp, #64	; 0x40
    2f54:	f005 ffca 	bl	8eec <memcpy>
        memmove(&frame, buf, sizeof(frame));
    2f58:	ab0a      	add	r3, sp, #40	; 0x28
    2f5a:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
    2f5e:	469e      	mov	lr, r3
    2f60:	9303      	str	r3, [sp, #12]
    2f62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    2f66:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    2f6a:	e89c 0003 	ldmia.w	ip, {r0, r1}
    2f6e:	e88e 0003 	stmia.w	lr, {r0, r1}
        if ( frame.mb == -1 ) {
    2f72:	f99d 303c 	ldrsb.w	r3, [sp, #60]	; 0x3c
    2f76:	1c5a      	adds	r2, r3, #1
    2f78:	f000 809b 	beq.w	30b2 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x52a>
        else if ( frame.mb == mb_num ) {
    2f7c:	429c      	cmp	r4, r3
    2f7e:	f47f ae48 	bne.w	2c12 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
          writeTxMailbox(frame.mb, frame);
    2f82:	9a03      	ldr	r2, [sp, #12]
    2f84:	b2e1      	uxtb	r1, r4
    2f86:	4648      	mov	r0, r9
    2f88:	f7fe fcc4 	bl	1914 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
    head = ((head + 1)&(2*_size-1));
    2f8c:	9a02      	ldr	r2, [sp, #8]
    2f8e:	f8b2 3b1a 	ldrh.w	r3, [r2, #2842]	; 0xb1a
    2f92:	3301      	adds	r3, #1
    2f94:	f003 031f 	and.w	r3, r3, #31
    2f98:	f8a2 3b1a 	strh.w	r3, [r2, #2842]	; 0xb1a
    if ( _available ) _available--;
    2f9c:	f8b2 3b1e 	ldrh.w	r3, [r2, #2846]	; 0xb1e
    2fa0:	b29b      	uxth	r3, r3
    2fa2:	2b00      	cmp	r3, #0
    2fa4:	f43f ae35 	beq.w	2c12 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
    2fa8:	f8b2 3b1e 	ldrh.w	r3, [r2, #2846]	; 0xb1e
    2fac:	3b01      	subs	r3, #1
    2fae:	b29b      	uxth	r3, r3
    2fb0:	f8a2 3b1e 	strh.w	r3, [r2, #2846]	; 0xb1e
    2fb4:	e62d      	b.n	2c12 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    2fb6:	a904      	add	r1, sp, #16
    2fb8:	4648      	mov	r0, r9
    2fba:	f7ff fc47 	bl	284c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2fbe:	e6a7      	b.n	2d10 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x188>
      msg.flags.extended = (bool)(code & (1UL << 21));
    2fc0:	f402 1100 	and.w	r1, r2, #2097152	; 0x200000
    2fc4:	2900      	cmp	r1, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2fc6:	6859      	ldr	r1, [r3, #4]
      msg.timestamp = code & 0xFFFF;
    2fc8:	f8ad 2014 	strh.w	r2, [sp, #20]
      msg.len = (code & 0xF0000) >> 16;
    2fcc:	f3c2 4203 	ubfx	r2, r2, #16, #4
    2fd0:	f88d 201b 	strb.w	r2, [sp, #27]
      msg.bus = busNumber;
    2fd4:	f509 5200 	add.w	r2, r9, #8192	; 0x2000
      msg.flags.extended = (bool)(code & (1UL << 21));
    2fd8:	bf14      	ite	ne
    2fda:	2001      	movne	r0, #1
    2fdc:	2000      	moveq	r0, #0
    2fde:	f88d 0017 	strb.w	r0, [sp, #23]
      msg.bus = busNumber;
    2fe2:	f892 0915 	ldrb.w	r0, [r2, #2325]	; 0x915
      msg.mb = mb_num;
    2fe6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
      msg.bus = busNumber;
    2fea:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2fee:	6898      	ldr	r0, [r3, #8]
    2ff0:	f88d 001f 	strb.w	r0, [sp, #31]
    2ff4:	6898      	ldr	r0, [r3, #8]
    2ff6:	ea4f 2010 	mov.w	r0, r0, lsr #8
    2ffa:	f88d 001e 	strb.w	r0, [sp, #30]
    2ffe:	6898      	ldr	r0, [r3, #8]
    3000:	ea4f 4010 	mov.w	r0, r0, lsr #16
    3004:	f88d 001d 	strb.w	r0, [sp, #29]
    3008:	6898      	ldr	r0, [r3, #8]
    300a:	ea4f 6010 	mov.w	r0, r0, lsr #24
    300e:	f88d 001c 	strb.w	r0, [sp, #28]
    3012:	68d8      	ldr	r0, [r3, #12]
    3014:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    3018:	68d8      	ldr	r0, [r3, #12]
    301a:	ea4f 2010 	mov.w	r0, r0, lsr #8
    301e:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    3022:	68d8      	ldr	r0, [r3, #12]
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    3024:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
    3028:	bf08      	it	eq
    302a:	0c89      	lsreq	r1, r1, #18
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    302c:	0c00      	lsrs	r0, r0, #16
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    302e:	9104      	str	r1, [sp, #16]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3030:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    3034:	f604 2102 	addw	r1, r4, #2562	; 0xa02
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    3038:	68db      	ldr	r3, [r3, #12]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    303a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    303e:	0e1b      	lsrs	r3, r3, #24
    3040:	f88d 3020 	strb.w	r3, [sp, #32]
        if ( _mbTxHandlers[mb_num] ) _mbTxHandlers[mb_num](msg);
    3044:	b119      	cbz	r1, 304e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4c6>
    3046:	a804      	add	r0, sp, #16
    3048:	9202      	str	r2, [sp, #8]
    304a:	4788      	blx	r1
    304c:	9a02      	ldr	r2, [sp, #8]
        if ( _mainTxHandler ) _mainTxHandler(msg);
    304e:	f8d2 3908 	ldr.w	r3, [r2, #2312]	; 0x908
    3052:	b10b      	cbz	r3, 3058 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4d0>
    3054:	a804      	add	r0, sp, #16
    3056:	4798      	blx	r3
        uint16_t size() { return _available; }
    3058:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
    305c:	9302      	str	r3, [sp, #8]
    305e:	f8b3 3b1e 	ldrh.w	r3, [r3, #2846]	; 0xb1e
    3062:	b29b      	uxth	r3, r3
      if ( txBuffer.size() ) {
    3064:	2b00      	cmp	r3, #0
    3066:	f47f af68 	bne.w	2f3a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3b2>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    306a:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
    306e:	2301      	movs	r3, #1
    3070:	40a3      	lsls	r3, r4
    3072:	4313      	orrs	r3, r2
    3074:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
    3078:	e5cb      	b.n	2c12 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    307a:	682b      	ldr	r3, [r5, #0]
    307c:	e5bb      	b.n	2bf6 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x6e>
      busESR1.write(esr1);
    307e:	f509 50e6 	add.w	r0, r9, #7360	; 0x1cc0
    3082:	4621      	mov	r1, r4
    3084:	3010      	adds	r0, #16
    3086:	f7fe fe4f 	bl	1d28 <Circular_Buffer<unsigned long, (unsigned short)16, (unsigned short)0>::write(unsigned long)>
      busECR.write(FLEXCANb_ECR(_bus));
    308a:	69f1      	ldr	r1, [r6, #28]
    308c:	f509 50ec 	add.w	r0, r9, #7552	; 0x1d80
    3090:	b289      	uxth	r1, r1
    3092:	3018      	adds	r0, #24
    3094:	f7fe fe6c 	bl	1d70 <Circular_Buffer<unsigned short, (unsigned short)16, (unsigned short)0>::write(unsigned short)>
      last_esr1 = esr1;
    3098:	602c      	str	r4, [r5, #0]
    309a:	e658      	b.n	2d4e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1c6>
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    309c:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
    30a0:	2201      	movs	r2, #1
    30a2:	40a2      	lsls	r2, r4
    30a4:	430a      	orrs	r2, r1
    30a6:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE); /* set it back to a TX mailbox */
    30aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    30ae:	601a      	str	r2, [r3, #0]
    30b0:	e5af      	b.n	2c12 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x8a>
          writeTxMailbox(mb_num, frame);
    30b2:	9a03      	ldr	r2, [sp, #12]
    30b4:	4621      	mov	r1, r4
    30b6:	e766      	b.n	2f86 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3fe>

000030b8 <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)>:
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    30b8:	8843      	ldrh	r3, [r0, #2]
    30ba:	f04f 0c1a 	mov.w	ip, #26
    30be:	f003 030f 	and.w	r3, r3, #15
    30c2:	fb0c 0303 	mla	r3, ip, r3, r0
void Circular_Buffer<T,_size,multi>::write(const T *buffer, uint16_t length) {
    30c6:	b510      	push	{r4, lr}
    30c8:	4604      	mov	r4, r0
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    30ca:	2000      	movs	r0, #0
    30cc:	7598      	strb	r0, [r3, #22]
    _cabuf[((tail)&(_size-1))][1] = length & 0xFF;
    30ce:	8863      	ldrh	r3, [r4, #2]
    30d0:	f003 030f 	and.w	r3, r3, #15
    30d4:	fb0c 4303 	mla	r3, ip, r3, r4
    30d8:	75da      	strb	r2, [r3, #23]
    memmove(_cabuf[((tail)&(_size-1))]+2,buffer,length*sizeof(T));
    30da:	8860      	ldrh	r0, [r4, #2]
    30dc:	f000 000f 	and.w	r0, r0, #15
    30e0:	fb0c 4000 	mla	r0, ip, r0, r4
    30e4:	3018      	adds	r0, #24
    30e6:	f008 fd7b 	bl	bbe0 <memmove>
    if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    30ea:	8862      	ldrh	r2, [r4, #2]
    30ec:	8823      	ldrh	r3, [r4, #0]
    30ee:	b29b      	uxth	r3, r3
    30f0:	b292      	uxth	r2, r2
    30f2:	f083 0310 	eor.w	r3, r3, #16
    30f6:	429a      	cmp	r2, r3
    30f8:	d104      	bne.n	3104 <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)+0x4c>
    30fa:	8823      	ldrh	r3, [r4, #0]
    30fc:	3301      	adds	r3, #1
    30fe:	f003 031f 	and.w	r3, r3, #31
    3102:	8023      	strh	r3, [r4, #0]
    tail = ((tail + 1)&(2*_size-1));
    3104:	8863      	ldrh	r3, [r4, #2]
    3106:	3301      	adds	r3, #1
    3108:	f003 031f 	and.w	r3, r3, #31
    310c:	8063      	strh	r3, [r4, #2]
    if ( _available < _size ) _available++;
    310e:	88a3      	ldrh	r3, [r4, #4]
    3110:	b29b      	uxth	r3, r3
    3112:	2b0f      	cmp	r3, #15
    3114:	d803      	bhi.n	311e <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)+0x66>
    3116:	88a3      	ldrh	r3, [r4, #4]
    3118:	3301      	adds	r3, #1
    311a:	b29b      	uxth	r3, r3
    311c:	80a3      	strh	r3, [r4, #4]
}
    311e:	bd10      	pop	{r4, pc}

00003120 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)>:
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
    3120:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( msg.seq ) {
    3122:	7d8b      	ldrb	r3, [r1, #22]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    3124:	4e4d      	ldr	r6, [pc, #308]	; (325c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
    3126:	b08d      	sub	sp, #52	; 0x34
    3128:	460d      	mov	r5, r1
    312a:	4604      	mov	r4, r0
  if ( msg.seq ) {
    312c:	2b00      	cmp	r3, #0
    312e:	d14b      	bne.n	31c8 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xa8>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    3130:	6833      	ldr	r3, [r6, #0]
    3132:	f013 5c00 	ands.w	ip, r3, #536870912	; 0x20000000
    3136:	d025      	beq.n	3184 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x64>
    3138:	f7fd fb2c 	bl	794 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    313c:	6833      	ldr	r3, [r6, #0]
    313e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3142:	3301      	adds	r3, #1
    3144:	4298      	cmp	r0, r3
    3146:	4684      	mov	ip, r0
    3148:	d21e      	bcs.n	3188 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    314a:	4945      	ldr	r1, [pc, #276]	; (3260 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x140>)
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    314c:	4843      	ldr	r0, [pc, #268]	; (325c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
    314e:	e007      	b.n	3160 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x40>
    3150:	6803      	ldr	r3, [r0, #0]
    3152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3156:	fa5f fc82 	uxtb.w	ip, r2
    315a:	3301      	adds	r3, #1
    315c:	459c      	cmp	ip, r3
    315e:	d213      	bcs.n	3188 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    3160:	eb0c 0301 	add.w	r3, ip, r1
    3164:	011b      	lsls	r3, r3, #4
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    3166:	f10c 0201 	add.w	r2, ip, #1
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    316a:	681b      	ldr	r3, [r3, #0]
    316c:	f3c3 6303 	ubfx	r3, r3, #24, #4
    3170:	2b08      	cmp	r3, #8
    3172:	d1ed      	bne.n	3150 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x30>
      writeTxMailbox(i, msg);
    3174:	4620      	mov	r0, r4
    3176:	462a      	mov	r2, r5
    3178:	4661      	mov	r1, ip
    317a:	f7fe fa7b 	bl	1674 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    317e:	2001      	movs	r0, #1
}
    3180:	b00d      	add	sp, #52	; 0x34
    3182:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    3184:	6833      	ldr	r3, [r6, #0]
    3186:	e7e0      	b.n	314a <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x2a>
  CAN_message_t msg_copy = msg;
    3188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    318a:	46ec      	mov	ip, sp
    318c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3190:	e895 0003 	ldmia.w	r5, {r0, r1}
    3194:	e88c 0003 	stmia.w	ip, {r0, r1}
  memmove(buf, &msg, sizeof(msg));
    3198:	f04f 0eff 	mov.w	lr, #255	; 0xff
    319c:	f88d e014 	strb.w	lr, [sp, #20]
    31a0:	466f      	mov	r7, sp
    31a2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    31a4:	ae06      	add	r6, sp, #24
    31a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    31a8:	e89c 0003 	ldmia.w	ip, {r0, r1}
    31ac:	e886 0003 	stmia.w	r6, {r0, r1}
        void push_back(const T *buffer, uint16_t length) { write(buffer, length); }
    31b0:	2218      	movs	r2, #24
    31b2:	f504 50d8 	add.w	r0, r4, #6912	; 0x1b00
    31b6:	eb0d 0102 	add.w	r1, sp, r2
    31ba:	301a      	adds	r0, #26
    31bc:	f7ff ff7c 	bl	30b8 <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)>
  return -1; /* transmit entry failed, no mailboxes available, queued */
    31c0:	f04f 30ff 	mov.w	r0, #4294967295
}
    31c4:	b00d      	add	sp, #52	; 0x34
    31c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    31c8:	6830      	ldr	r0, [r6, #0]
    31ca:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
    31ce:	d042      	beq.n	3256 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x136>
    31d0:	f7fd fae0 	bl	794 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    31d4:	6833      	ldr	r3, [r6, #0]
    31d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    31da:	3301      	adds	r3, #1
    31dc:	4283      	cmp	r3, r0
    31de:	d929      	bls.n	3234 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x114>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    31e0:	4e1f      	ldr	r6, [pc, #124]	; (3260 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x140>)
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    31e2:	4f1e      	ldr	r7, [pc, #120]	; (325c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
    31e4:	e005      	b.n	31f2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xd2>
    31e6:	683b      	ldr	r3, [r7, #0]
    31e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    31ec:	3301      	adds	r3, #1
    31ee:	4298      	cmp	r0, r3
    31f0:	d220      	bcs.n	3234 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x114>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    31f2:	1983      	adds	r3, r0, r6
    31f4:	011b      	lsls	r3, r3, #4
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    31f6:	1c41      	adds	r1, r0, #1
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    31f8:	681a      	ldr	r2, [r3, #0]
    31fa:	0112      	lsls	r2, r2, #4
    31fc:	4684      	mov	ip, r0
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    31fe:	b2c8      	uxtb	r0, r1
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    3200:	d5f1      	bpl.n	31e6 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xc6>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    3202:	681b      	ldr	r3, [r3, #0]
    3204:	f3c3 6303 	ubfx	r3, r3, #24, #4
    3208:	2b08      	cmp	r3, #8
    320a:	d01b      	beq.n	3244 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x124>
      CAN_message_t msg_copy = msg;
    320c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    320e:	466e      	mov	r6, sp
    3210:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    3212:	e895 0003 	ldmia.w	r5, {r0, r1}
    3216:	e886 0003 	stmia.w	r6, {r0, r1}
  memmove(buf, &msg, sizeof(msg));
    321a:	46ee      	mov	lr, sp
      msg_copy.mb = first_tx_mb;
    321c:	f88d c014 	strb.w	ip, [sp, #20]
  memmove(buf, &msg, sizeof(msg));
    3220:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    3224:	af06      	add	r7, sp, #24
    3226:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    3228:	e896 0003 	ldmia.w	r6, {r0, r1}
    322c:	2218      	movs	r2, #24
    322e:	e887 0003 	stmia.w	r7, {r0, r1}
    3232:	e7be      	b.n	31b2 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x92>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    3234:	4b0b      	ldr	r3, [pc, #44]	; (3264 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x144>)
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    3236:	681b      	ldr	r3, [r3, #0]
    3238:	f3c3 6303 	ubfx	r3, r3, #24, #4
    323c:	2b08      	cmp	r3, #8
  return -1;
    323e:	f04f 3cff 	mov.w	ip, #4294967295
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    3242:	d1e3      	bne.n	320c <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xec>
      writeTxMailbox(first_tx_mb, msg);
    3244:	4620      	mov	r0, r4
    3246:	462a      	mov	r2, r5
    3248:	fa5f f18c 	uxtb.w	r1, ip
    324c:	f7fe fa12 	bl	1674 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    3250:	2001      	movs	r0, #1
}
    3252:	b00d      	add	sp, #52	; 0x34
    3254:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    3256:	6833      	ldr	r3, [r6, #0]
    3258:	e7c2      	b.n	31e0 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xc0>
    325a:	bf00      	nop
    325c:	40024000 	.word	0x40024000
    3260:	04002408 	.word	0x04002408
    3264:	40024070 	.word	0x40024070

00003268 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)>:
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
    3268:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( msg.seq ) {
    326a:	7d8b      	ldrb	r3, [r1, #22]
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    326c:	4e4d      	ldr	r6, [pc, #308]	; (33a4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
    326e:	b08d      	sub	sp, #52	; 0x34
    3270:	460d      	mov	r5, r1
    3272:	4604      	mov	r4, r0
  if ( msg.seq ) {
    3274:	2b00      	cmp	r3, #0
    3276:	d14b      	bne.n	3310 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xa8>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    3278:	6833      	ldr	r3, [r6, #0]
    327a:	f013 5c00 	ands.w	ip, r3, #536870912	; 0x20000000
    327e:	d025      	beq.n	32cc <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x64>
    3280:	f7fd fa64 	bl	74c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    3284:	6833      	ldr	r3, [r6, #0]
    3286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    328a:	3301      	adds	r3, #1
    328c:	4298      	cmp	r0, r3
    328e:	4684      	mov	ip, r0
    3290:	d21e      	bcs.n	32d0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    3292:	4945      	ldr	r1, [pc, #276]	; (33a8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x140>)
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    3294:	4843      	ldr	r0, [pc, #268]	; (33a4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
    3296:	e007      	b.n	32a8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x40>
    3298:	6803      	ldr	r3, [r0, #0]
    329a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    329e:	fa5f fc82 	uxtb.w	ip, r2
    32a2:	3301      	adds	r3, #1
    32a4:	459c      	cmp	ip, r3
    32a6:	d213      	bcs.n	32d0 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    32a8:	eb0c 0301 	add.w	r3, ip, r1
    32ac:	011b      	lsls	r3, r3, #4
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    32ae:	f10c 0201 	add.w	r2, ip, #1
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    32b2:	681b      	ldr	r3, [r3, #0]
    32b4:	f3c3 6303 	ubfx	r3, r3, #24, #4
    32b8:	2b08      	cmp	r3, #8
    32ba:	d1ed      	bne.n	3298 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x30>
      writeTxMailbox(i, msg);
    32bc:	4620      	mov	r0, r4
    32be:	462a      	mov	r2, r5
    32c0:	4661      	mov	r1, ip
    32c2:	f7fe fb27 	bl	1914 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    32c6:	2001      	movs	r0, #1
}
    32c8:	b00d      	add	sp, #52	; 0x34
    32ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    32cc:	6833      	ldr	r3, [r6, #0]
    32ce:	e7e0      	b.n	3292 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x2a>
  CAN_message_t msg_copy = msg;
    32d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    32d2:	46ec      	mov	ip, sp
    32d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    32d8:	e895 0003 	ldmia.w	r5, {r0, r1}
    32dc:	e88c 0003 	stmia.w	ip, {r0, r1}
  memmove(buf, &msg, sizeof(msg));
    32e0:	f04f 0eff 	mov.w	lr, #255	; 0xff
    32e4:	f88d e014 	strb.w	lr, [sp, #20]
    32e8:	466f      	mov	r7, sp
    32ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    32ec:	ae06      	add	r6, sp, #24
    32ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    32f0:	e89c 0003 	ldmia.w	ip, {r0, r1}
    32f4:	e886 0003 	stmia.w	r6, {r0, r1}
    32f8:	2218      	movs	r2, #24
    32fa:	f504 50d8 	add.w	r0, r4, #6912	; 0x1b00
    32fe:	eb0d 0102 	add.w	r1, sp, r2
    3302:	301a      	adds	r0, #26
    3304:	f7ff fed8 	bl	30b8 <Circular_Buffer<unsigned char, (unsigned short)16, (unsigned short)24>::write(unsigned char const*, unsigned short)>
  return -1; /* transmit entry failed, no mailboxes available, queued */
    3308:	f04f 30ff 	mov.w	r0, #4294967295
}
    330c:	b00d      	add	sp, #52	; 0x34
    330e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    3310:	6830      	ldr	r0, [r6, #0]
    3312:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
    3316:	d042      	beq.n	339e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x136>
    3318:	f7fd fa18 	bl	74c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .part.0]>
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    331c:	6833      	ldr	r3, [r6, #0]
    331e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3322:	3301      	adds	r3, #1
    3324:	4283      	cmp	r3, r0
    3326:	d929      	bls.n	337c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x114>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    3328:	4e1f      	ldr	r6, [pc, #124]	; (33a8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x140>)
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    332a:	4f1e      	ldr	r7, [pc, #120]	; (33a4 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
    332c:	e005      	b.n	333a <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xd2>
    332e:	683b      	ldr	r3, [r7, #0]
    3330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3334:	3301      	adds	r3, #1
    3336:	4298      	cmp	r0, r3
    3338:	d220      	bcs.n	337c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x114>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    333a:	1983      	adds	r3, r0, r6
    333c:	011b      	lsls	r3, r3, #4
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    333e:	1c41      	adds	r1, r0, #1
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    3340:	681a      	ldr	r2, [r3, #0]
    3342:	0112      	lsls	r2, r2, #4
    3344:	4684      	mov	ip, r0
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    3346:	b2c8      	uxtb	r0, r1
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
    3348:	d5f1      	bpl.n	332e <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xc6>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    334a:	681b      	ldr	r3, [r3, #0]
    334c:	f3c3 6303 	ubfx	r3, r3, #24, #4
    3350:	2b08      	cmp	r3, #8
    3352:	d01b      	beq.n	338c <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x124>
      CAN_message_t msg_copy = msg;
    3354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3356:	466e      	mov	r6, sp
    3358:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    335a:	e895 0003 	ldmia.w	r5, {r0, r1}
    335e:	e886 0003 	stmia.w	r6, {r0, r1}
  memmove(buf, &msg, sizeof(msg));
    3362:	46ee      	mov	lr, sp
      msg_copy.mb = first_tx_mb;
    3364:	f88d c014 	strb.w	ip, [sp, #20]
  memmove(buf, &msg, sizeof(msg));
    3368:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    336c:	af06      	add	r7, sp, #24
    336e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    3370:	e896 0003 	ldmia.w	r6, {r0, r1}
    3374:	2218      	movs	r2, #24
    3376:	e887 0003 	stmia.w	r7, {r0, r1}
    337a:	e7be      	b.n	32fa <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x92>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    337c:	4b0b      	ldr	r3, [pc, #44]	; (33ac <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x144>)
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    337e:	681b      	ldr	r3, [r3, #0]
    3380:	f3c3 6303 	ubfx	r3, r3, #24, #4
    3384:	2b08      	cmp	r3, #8
  return -1;
    3386:	f04f 3cff 	mov.w	ip, #4294967295
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, first_tx_mb)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    338a:	d1e3      	bne.n	3354 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xec>
      writeTxMailbox(first_tx_mb, msg);
    338c:	4620      	mov	r0, r4
    338e:	462a      	mov	r2, r5
    3390:	fa5f f18c 	uxtb.w	r1, ip
    3394:	f7fe fabe 	bl	1914 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    3398:	2001      	movs	r0, #1
}
    339a:	b00d      	add	sp, #52	; 0x34
    339c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    339e:	6833      	ldr	r3, [r6, #0]
    33a0:	e7c2      	b.n	3328 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0xc0>
    33a2:	bf00      	nop
    33a4:	400a4000 	.word	0x400a4000
    33a8:	0400a408 	.word	0x0400a408
    33ac:	400a4070 	.word	0x400a4070

000033b0 <_GLOBAL__sub_I_Can1>:
FCTP_FUNC FCTP_OPT::FlexCAN_T4() {
    33b0:	484c      	ldr	r0, [pc, #304]	; (34e4 <_GLOBAL__sub_I_Can1+0x134>)
    33b2:	494d      	ldr	r1, [pc, #308]	; (34e8 <_GLOBAL__sub_I_Can1+0x138>)
}
    33b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( _bus == CAN1 ) _CAN1 = this;
    33b6:	4d4d      	ldr	r5, [pc, #308]	; (34ec <_GLOBAL__sub_I_Can1+0x13c>)
class Circular_Buffer {
    33b8:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
    33bc:	2300      	movs	r3, #0
FCTP_FUNC FCTP_OPT::FlexCAN_T4() {
    33be:	f500 5400 	add.w	r4, r0, #8192	; 0x2000
  if ( _bus == CAN1 ) _CAN1 = this;
    33c2:	6028      	str	r0, [r5, #0]
FCTP_FUNC FCTP_OPT::FlexCAN_T4() {
    33c4:	4d4a      	ldr	r5, [pc, #296]	; (34f0 <_GLOBAL__sub_I_Can1+0x140>)
    33c6:	8283      	strh	r3, [r0, #20]
    33c8:	6005      	str	r5, [r0, #0]
    33ca:	82c3      	strh	r3, [r0, #22]
    33cc:	8303      	strh	r3, [r0, #24]
    33ce:	f8a2 3b1a 	strh.w	r3, [r2, #2842]	; 0xb1a
    33d2:	f501 5000 	add.w	r0, r1, #8192	; 0x2000
    33d6:	f8a2 3b1c 	strh.w	r3, [r2, #2844]	; 0xb1c
    33da:	f8a2 3b1e 	strh.w	r3, [r2, #2846]	; 0xb1e
    33de:	f8a2 3cd0 	strh.w	r3, [r2, #3280]	; 0xcd0
    33e2:	f8a2 3cd2 	strh.w	r3, [r2, #3282]	; 0xcd2
    33e6:	f8a2 3cd4 	strh.w	r3, [r2, #3284]	; 0xcd4
    33ea:	f8a2 3d98 	strh.w	r3, [r2, #3480]	; 0xd98
    33ee:	f8a2 3d9a 	strh.w	r3, [r2, #3482]	; 0xd9a
    33f2:	f8a2 3d9c 	strh.w	r3, [r2, #3484]	; 0xd9c
    33f6:	f501 5280 	add.w	r2, r1, #4096	; 0x1000
    33fa:	f884 3700 	strb.w	r3, [r4, #1792]	; 0x700
    33fe:	f8c4 390c 	str.w	r3, [r4, #2316]	; 0x90c
    3402:	f884 3701 	strb.w	r3, [r4, #1793]	; 0x701
    3406:	f8c4 3910 	str.w	r3, [r4, #2320]	; 0x910
    340a:	f884 3914 	strb.w	r3, [r4, #2324]	; 0x914
    340e:	4d39      	ldr	r5, [pc, #228]	; (34f4 <_GLOBAL__sub_I_Can1+0x144>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3410:	4c39      	ldr	r4, [pc, #228]	; (34f8 <_GLOBAL__sub_I_Can1+0x148>)
    3412:	828b      	strh	r3, [r1, #20]
    3414:	b08b      	sub	sp, #44	; 0x2c
    3416:	82cb      	strh	r3, [r1, #22]
    3418:	600d      	str	r5, [r1, #0]
    341a:	830b      	strh	r3, [r1, #24]
    341c:	f8a2 3b1a 	strh.w	r3, [r2, #2842]	; 0xb1a
    3420:	f8a2 3b1c 	strh.w	r3, [r2, #2844]	; 0xb1c
    3424:	f8a2 3b1e 	strh.w	r3, [r2, #2846]	; 0xb1e
    3428:	f8a2 3cd0 	strh.w	r3, [r2, #3280]	; 0xcd0
    342c:	f8a2 3cd2 	strh.w	r3, [r2, #3282]	; 0xcd2
    3430:	f8a2 3cd4 	strh.w	r3, [r2, #3284]	; 0xcd4
    3434:	f8a2 3d98 	strh.w	r3, [r2, #3480]	; 0xd98
    3438:	f8a2 3d9a 	strh.w	r3, [r2, #3482]	; 0xd9a
    343c:	f8a2 3d9c 	strh.w	r3, [r2, #3484]	; 0xd9c
    3440:	f880 3700 	strb.w	r3, [r0, #1792]	; 0x700
    3444:	f880 3701 	strb.w	r3, [r0, #1793]	; 0x701
    3448:	6822      	ldr	r2, [r4, #0]
    344a:	9201      	str	r2, [sp, #4]
	return ret;
    344c:	9d01      	ldr	r5, [sp, #4]
    344e:	f8c0 390c 	str.w	r3, [r0, #2316]	; 0x90c
    3452:	f8c0 3910 	str.w	r3, [r0, #2320]	; 0x910
    3456:	f880 3914 	strb.w	r3, [r0, #2324]	; 0x914
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    345a:	6823      	ldr	r3, [r4, #0]
    345c:	9302      	str	r3, [sp, #8]
	return ret;
    345e:	9802      	ldr	r0, [sp, #8]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3460:	6823      	ldr	r3, [r4, #0]
    3462:	9303      	str	r3, [sp, #12]
  if ( _bus == CAN0 ) _CAN0 = this;
    3464:	4a25      	ldr	r2, [pc, #148]	; (34fc <_GLOBAL__sub_I_Can1+0x14c>)
	elapsedMillis(void) { ms = millis(); }
    3466:	4b26      	ldr	r3, [pc, #152]	; (3500 <_GLOBAL__sub_I_Can1+0x150>)
    3468:	6011      	str	r1, [r2, #0]
    346a:	601d      	str	r5, [r3, #0]
	return ret;
    346c:	9a03      	ldr	r2, [sp, #12]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    346e:	6823      	ldr	r3, [r4, #0]
    3470:	9304      	str	r3, [sp, #16]
    3472:	4b24      	ldr	r3, [pc, #144]	; (3504 <_GLOBAL__sub_I_Can1+0x154>)
    3474:	4924      	ldr	r1, [pc, #144]	; (3508 <_GLOBAL__sub_I_Can1+0x158>)
    3476:	601a      	str	r2, [r3, #0]
    3478:	4b24      	ldr	r3, [pc, #144]	; (350c <_GLOBAL__sub_I_Can1+0x15c>)
	return ret;
    347a:	9a04      	ldr	r2, [sp, #16]
    347c:	601a      	str	r2, [r3, #0]
    347e:	6008      	str	r0, [r1, #0]
	elapsedMicros(void) { us = micros(); }
    3480:	f006 f86a 	bl	9558 <micros>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3484:	6823      	ldr	r3, [r4, #0]
    3486:	9305      	str	r3, [sp, #20]
	return ret;
    3488:	9a05      	ldr	r2, [sp, #20]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    348a:	6823      	ldr	r3, [r4, #0]
    348c:	9306      	str	r3, [sp, #24]
    348e:	4b20      	ldr	r3, [pc, #128]	; (3510 <_GLOBAL__sub_I_Can1+0x160>)
	return ret;
    3490:	9f06      	ldr	r7, [sp, #24]
    3492:	6018      	str	r0, [r3, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3494:	6823      	ldr	r3, [r4, #0]
    3496:	9307      	str	r3, [sp, #28]
	return ret;
    3498:	9e07      	ldr	r6, [sp, #28]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    349a:	6823      	ldr	r3, [r4, #0]
    349c:	9308      	str	r3, [sp, #32]
	return ret;
    349e:	9d08      	ldr	r5, [sp, #32]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    34a0:	6823      	ldr	r3, [r4, #0]
    34a2:	9309      	str	r3, [sp, #36]	; 0x24
	elapsedMillis(void) { ms = millis(); }
    34a4:	4b1b      	ldr	r3, [pc, #108]	; (3514 <_GLOBAL__sub_I_Can1+0x164>)
	return ret;
    34a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
    34a8:	601a      	str	r2, [r3, #0]
    34aa:	4b1b      	ldr	r3, [pc, #108]	; (3518 <_GLOBAL__sub_I_Can1+0x168>)
	IPAddress(uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4) {
    34ac:	481b      	ldr	r0, [pc, #108]	; (351c <_GLOBAL__sub_I_Can1+0x16c>)
    34ae:	601f      	str	r7, [r3, #0]
    34b0:	4b1b      	ldr	r3, [pc, #108]	; (3520 <_GLOBAL__sub_I_Can1+0x170>)
    34b2:	491c      	ldr	r1, [pc, #112]	; (3524 <_GLOBAL__sub_I_Can1+0x174>)
    34b4:	601e      	str	r6, [r3, #0]
    34b6:	4b1c      	ldr	r3, [pc, #112]	; (3528 <_GLOBAL__sub_I_Can1+0x178>)
    34b8:	4a1c      	ldr	r2, [pc, #112]	; (352c <_GLOBAL__sub_I_Can1+0x17c>)
    34ba:	601d      	str	r5, [r3, #0]
    34bc:	4b1c      	ldr	r3, [pc, #112]	; (3530 <_GLOBAL__sub_I_Can1+0x180>)
    34be:	601c      	str	r4, [r3, #0]
    34c0:	4b1c      	ldr	r3, [pc, #112]	; (3534 <_GLOBAL__sub_I_Can1+0x184>)
		_address.bytes[0] = b1;
    34c2:	4c1d      	ldr	r4, [pc, #116]	; (3538 <_GLOBAL__sub_I_Can1+0x188>)
	IPAddress(uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4) {
    34c4:	600b      	str	r3, [r1, #0]
		_address.bytes[0] = b1;
    34c6:	e9c0 3400 	strd	r3, r4, [r0]
    34ca:	481c      	ldr	r0, [pc, #112]	; (353c <_GLOBAL__sub_I_Can1+0x18c>)
    34cc:	6048      	str	r0, [r1, #4]
WiFiUDP UDP;
    34ce:	481c      	ldr	r0, [pc, #112]	; (3540 <_GLOBAL__sub_I_Can1+0x190>)
    34d0:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    34d4:	e9c2 3400 	strd	r3, r4, [r2]
}
    34d8:	b00b      	add	sp, #44	; 0x2c
    34da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
WiFiUDP UDP;
    34de:	f002 bc71 	b.w	5dc4 <WiFiUDP::WiFiUDP()>
    34e2:	bf00      	nop
    34e4:	1fff3f14 	.word	0x1fff3f14
    34e8:	1fff15f8 	.word	0x1fff15f8
    34ec:	1fff6df0 	.word	0x1fff6df0
    34f0:	00011bb0 	.word	0x00011bb0
    34f4:	00011bd4 	.word	0x00011bd4
    34f8:	1fff7ae4 	.word	0x1fff7ae4
    34fc:	1fff6dec 	.word	0x1fff6dec
    3500:	1fff6830 	.word	0x1fff6830
    3504:	1fff6de4 	.word	0x1fff6de4
    3508:	1fff6838 	.word	0x1fff6838
    350c:	1fff15f0 	.word	0x1fff15f0
    3510:	1fff7014 	.word	0x1fff7014
    3514:	1fff684c 	.word	0x1fff684c
    3518:	1fff6848 	.word	0x1fff6848
    351c:	1fff7004 	.word	0x1fff7004
    3520:	1fff700c 	.word	0x1fff700c
    3524:	1fff6df4 	.word	0x1fff6df4
    3528:	1fff7010 	.word	0x1fff7010
    352c:	1fff7018 	.word	0x1fff7018
    3530:	1fff7604 	.word	0x1fff7604
    3534:	00011fec 	.word	0x00011fec
    3538:	021ea8c0 	.word	0x021ea8c0
    353c:	ff1ea8c0 	.word	0xff1ea8c0
    3540:	1fff6850 	.word	0x1fff6850

00003544 <setup>:
void setup() {
    3544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  setSyncProvider(getTeensy3Time);
    3548:	4892      	ldr	r0, [pc, #584]	; (3794 <setup+0x250>)
  YELLOW_LED_state = HIGH;
    354a:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 37fc <setup+0x2b8>
  RED_LED_state = HIGH;
    354e:	4f92      	ldr	r7, [pc, #584]	; (3798 <setup+0x254>)
  BLUE_LED_state = LOW;
    3550:	4e92      	ldr	r6, [pc, #584]	; (379c <setup+0x258>)
void setup() {
    3552:	b089      	sub	sp, #36	; 0x24
  setSyncProvider(getTeensy3Time);
    3554:	f005 fae2 	bl	8b1c <setSyncProvider(long long (*)())>
  setSyncInterval(1);
    3558:	2001      	movs	r0, #1
    355a:	2100      	movs	r1, #0
    355c:	f005 faec 	bl	8b38 <setSyncInterval(long long)>
  pinMode(SILENT_0,OUTPUT);
    3560:	2101      	movs	r1, #1
    3562:	202a      	movs	r0, #42	; 0x2a
    3564:	f005 ffbc 	bl	94e0 <pinMode>
  pinMode(SILENT_1,OUTPUT);
    3568:	2101      	movs	r1, #1
    356a:	2029      	movs	r0, #41	; 0x29
    356c:	f005 ffb8 	bl	94e0 <pinMode>
  pinMode(SILENT_2,OUTPUT);
    3570:	2101      	movs	r1, #1
    3572:	2028      	movs	r0, #40	; 0x28
    3574:	f005 ffb4 	bl	94e0 <pinMode>
  digitalWrite(SILENT_0,LOW); 
    3578:	2100      	movs	r1, #0
    357a:	202a      	movs	r0, #42	; 0x2a
    357c:	f005 ff86 	bl	948c <digitalWrite>
  digitalWrite(SILENT_1,LOW);
    3580:	2100      	movs	r1, #0
    3582:	2029      	movs	r0, #41	; 0x29
    3584:	f005 ff82 	bl	948c <digitalWrite>
  digitalWrite(SILENT_2,LOW);
    3588:	2100      	movs	r1, #0
    358a:	2028      	movs	r0, #40	; 0x28
    358c:	f005 ff7e 	bl	948c <digitalWrite>
  pinMode(GREEN_LED, OUTPUT);
    3590:	2101      	movs	r1, #1
    3592:	2006      	movs	r0, #6
    3594:	f005 ffa4 	bl	94e0 <pinMode>
  pinMode(YELLOW_LED, OUTPUT);
    3598:	2101      	movs	r1, #1
    359a:	2005      	movs	r0, #5
    359c:	f005 ffa0 	bl	94e0 <pinMode>
  pinMode(RED_LED, OUTPUT);
    35a0:	2101      	movs	r1, #1
    35a2:	200e      	movs	r0, #14
    35a4:	f005 ff9c 	bl	94e0 <pinMode>
  pinMode(BLUE_LED, OUTPUT);
    35a8:	2101      	movs	r1, #1
    35aa:	2027      	movs	r0, #39	; 0x27
    35ac:	f005 ff98 	bl	94e0 <pinMode>
  GREEN_LED_state = HIGH;
    35b0:	2401      	movs	r4, #1
    35b2:	4b7b      	ldr	r3, [pc, #492]	; (37a0 <setup+0x25c>)
  YELLOW_LED_state = HIGH;
    35b4:	f888 4000 	strb.w	r4, [r8]
  digitalWrite(GREEN_LED,GREEN_LED_state);
    35b8:	4621      	mov	r1, r4
  BLUE_LED_state = LOW;
    35ba:	2500      	movs	r5, #0
  digitalWrite(GREEN_LED,GREEN_LED_state);
    35bc:	2006      	movs	r0, #6
  GREEN_LED_state = HIGH;
    35be:	701c      	strb	r4, [r3, #0]
  RED_LED_state = HIGH;
    35c0:	703c      	strb	r4, [r7, #0]
  BLUE_LED_state = LOW;
    35c2:	7035      	strb	r5, [r6, #0]
  digitalWrite(GREEN_LED,GREEN_LED_state);
    35c4:	f005 ff62 	bl	948c <digitalWrite>
  digitalWrite(YELLOW_LED,YELLOW_LED_state);
    35c8:	f898 1000 	ldrb.w	r1, [r8]
    35cc:	2005      	movs	r0, #5
    35ce:	f005 ff5d 	bl	948c <digitalWrite>
  digitalWrite(RED_LED,RED_LED_state);
    35d2:	7839      	ldrb	r1, [r7, #0]
    35d4:	200e      	movs	r0, #14
    35d6:	f005 ff59 	bl	948c <digitalWrite>
  digitalWrite(BLUE_LED,BLUE_LED_state);
    35da:	7831      	ldrb	r1, [r6, #0]
    35dc:	2027      	movs	r0, #39	; 0x27
    35de:	f005 ff55 	bl	948c <digitalWrite>
  SPI1.setMOSI(WIFI_MOSI_PIN);
    35e2:	4870      	ldr	r0, [pc, #448]	; (37a4 <setup+0x260>)
    35e4:	4629      	mov	r1, r5
    35e6:	f001 fbd3 	bl	4d90 <SPIClass::setMOSI(unsigned char)>
  SPI1.setMISO(WIFI_MISO_PIN);
    35ea:	4621      	mov	r1, r4
    35ec:	486d      	ldr	r0, [pc, #436]	; (37a4 <setup+0x260>)
    35ee:	f001 fc21 	bl	4e34 <SPIClass::setMISO(unsigned char)>
  SPI1.setSCK(WIFI_SCLK_PIN);
    35f2:	2120      	movs	r1, #32
    35f4:	486b      	ldr	r0, [pc, #428]	; (37a4 <setup+0x260>)
    35f6:	f001 fc6f 	bl	4ed8 <SPIClass::setSCK(unsigned char)>
  SPI1.begin();
    35fa:	486a      	ldr	r0, [pc, #424]	; (37a4 <setup+0x260>)
    35fc:	f001 fb5e 	bl	4cbc <SPIClass::begin()>
  pinMode(WAKE,OUTPUT);
    3600:	4621      	mov	r1, r4
    3602:	2024      	movs	r0, #36	; 0x24
    3604:	f005 ff6c 	bl	94e0 <pinMode>
  digitalWrite(WAKE,HIGH);
    3608:	4621      	mov	r1, r4
    360a:	2024      	movs	r0, #36	; 0x24
    360c:	f005 ff3e 	bl	948c <digitalWrite>
    3610:	2117      	movs	r1, #23
    3612:	4865      	ldr	r0, [pc, #404]	; (37a8 <setup+0x264>)
    3614:	f006 fda6 	bl	a164 <usb_serial_write>
  WiFi.setPins(WiFi_CS,WiFi_IRQ,WiFi_RST,WiFi_EN);
    3618:	2418      	movs	r4, #24
    361a:	4864      	ldr	r0, [pc, #400]	; (37ac <setup+0x268>)
    361c:	f005 fbc4 	bl	8da8 <Print::println()>
    3620:	4863      	ldr	r0, [pc, #396]	; (37b0 <setup+0x26c>)
    3622:	9400      	str	r4, [sp, #0]
    3624:	2319      	movs	r3, #25
    3626:	2217      	movs	r2, #23
    3628:	211f      	movs	r1, #31
    362a:	f001 fd95 	bl	5158 <WiFiClass::setPins(signed char, signed char, signed char, signed char)>
  if (WiFi.status() == WL_NO_SHIELD) {
    362e:	4860      	ldr	r0, [pc, #384]	; (37b0 <setup+0x26c>)
    3630:	f002 f92c 	bl	588c <WiFiClass::status()>
    3634:	28ff      	cmp	r0, #255	; 0xff
    3636:	f000 82b4 	beq.w	3ba2 <setup+0x65e>
  String fv = WiFi.firmwareVersion();
    363a:	485d      	ldr	r0, [pc, #372]	; (37b0 <setup+0x26c>)
    363c:	f001 fe16 	bl	526c <WiFiClass::firmwareVersion()>
    3640:	4601      	mov	r1, r0
    3642:	a804      	add	r0, sp, #16
    3644:	f005 fc1c 	bl	8e80 <String::String(char const*)>
    3648:	2112      	movs	r1, #18
    364a:	485a      	ldr	r0, [pc, #360]	; (37b4 <setup+0x270>)
    364c:	f006 fd8a 	bl	a164 <usb_serial_write>
	size_t println(const String &s)			{ return print(s) + println(); }
    3650:	a904      	add	r1, sp, #16
    3652:	4856      	ldr	r0, [pc, #344]	; (37ac <setup+0x268>)
    3654:	f005 fb7a 	bl	8d4c <Print::print(String const&)>
    3658:	4854      	ldr	r0, [pc, #336]	; (37ac <setup+0x268>)
    365a:	f005 fba5 	bl	8da8 <Print::println()>
class IPAddress : public Printable {
    365e:	4b56      	ldr	r3, [pc, #344]	; (37b8 <setup+0x274>)
    3660:	4a56      	ldr	r2, [pc, #344]	; (37bc <setup+0x278>)
    3662:	685b      	ldr	r3, [r3, #4]
   WiFi.config(ip);
    3664:	4852      	ldr	r0, [pc, #328]	; (37b0 <setup+0x26c>)
    3666:	a902      	add	r1, sp, #8
    3668:	e9cd 2302 	strd	r2, r3, [sp, #8]
    366c:	f002 f8b4 	bl	57d8 <WiFiClass::config(IPAddress)>
    3670:	211d      	movs	r1, #29
    3672:	4853      	ldr	r0, [pc, #332]	; (37c0 <setup+0x27c>)
    3674:	f006 fd76 	bl	a164 <usb_serial_write>
							  return write((const uint8_t *)str, strlen(str)); }
    3678:	4852      	ldr	r0, [pc, #328]	; (37c4 <setup+0x280>)
    367a:	f008 fcc1 	bl	c000 <strlen>
    367e:	4601      	mov	r1, r0
    3680:	4850      	ldr	r0, [pc, #320]	; (37c4 <setup+0x280>)
    3682:	f006 fd6f 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3686:	4849      	ldr	r0, [pc, #292]	; (37ac <setup+0x268>)
    3688:	f005 fb8e 	bl	8da8 <Print::println()>
  status = WiFi.beginAP(ssid);
    368c:	494d      	ldr	r1, [pc, #308]	; (37c4 <setup+0x280>)
    368e:	4848      	ldr	r0, [pc, #288]	; (37b0 <setup+0x26c>)
    3690:	f001 fef6 	bl	5480 <WiFiClass::beginAP(char const*)>
    3694:	4b4c      	ldr	r3, [pc, #304]	; (37c8 <setup+0x284>)
  if (status != WL_AP_LISTENING) {
    3696:	2807      	cmp	r0, #7
  status = WiFi.beginAP(ssid);
    3698:	6018      	str	r0, [r3, #0]
  if (status != WL_AP_LISTENING) {
    369a:	d007      	beq.n	36ac <setup+0x168>
    369c:	484b      	ldr	r0, [pc, #300]	; (37cc <setup+0x288>)
    369e:	211c      	movs	r1, #28
    36a0:	f006 fd60 	bl	a164 <usb_serial_write>
    36a4:	4841      	ldr	r0, [pc, #260]	; (37ac <setup+0x268>)
    36a6:	f005 fb7f 	bl	8da8 <Print::println()>
    while (true);
    36aa:	e7fe      	b.n	36aa <setup+0x166>
  UDP.begin(localPort);
    36ac:	4b48      	ldr	r3, [pc, #288]	; (37d0 <setup+0x28c>)
    36ae:	4849      	ldr	r0, [pc, #292]	; (37d4 <setup+0x290>)
    36b0:	8819      	ldrh	r1, [r3, #0]
  Can1_bitrate = baud_rates[0];
    36b2:	4e49      	ldr	r6, [pc, #292]	; (37d8 <setup+0x294>)
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
    36b4:	4c49      	ldr	r4, [pc, #292]	; (37dc <setup+0x298>)
  UDP.begin(localPort);
    36b6:	f002 f98b 	bl	59d0 <WiFiUDP::begin(unsigned short)>
  printWiFiStatus();
    36ba:	f7fd fa27 	bl	b0c <printWiFiStatus()>
  Can1.begin();
    36be:	4848      	ldr	r0, [pc, #288]	; (37e0 <setup+0x29c>)
    36c0:	f7fd fa7a 	bl	bb8 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>
  Can1_bitrate = baud_rates[0];
    36c4:	4b47      	ldr	r3, [pc, #284]	; (37e4 <setup+0x2a0>)
    36c6:	6831      	ldr	r1, [r6, #0]
  Can1.setBaudRate(Can1_bitrate);
    36c8:	4845      	ldr	r0, [pc, #276]	; (37e0 <setup+0x29c>)
  Can1_bitrate = baud_rates[0];
    36ca:	6019      	str	r1, [r3, #0]
  Can1.setBaudRate(Can1_bitrate);
    36cc:	2200      	movs	r2, #0
    36ce:	f7fc fed9 	bl	484 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>
    36d2:	6823      	ldr	r3, [r4, #0]
    36d4:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
    36d8:	6023      	str	r3, [r4, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
    36da:	6823      	ldr	r3, [r4, #0]
    36dc:	01da      	lsls	r2, r3, #7
    36de:	d5fc      	bpl.n	36da <setup+0x196>
    36e0:	2000      	movs	r0, #0
  bool fifo_was_cleared = FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN;
    36e2:	6825      	ldr	r5, [r4, #0]
    36e4:	f7fd f946 	bl	974 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  return FLEXCANb_IFLAG1(_bus);
    36e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  FLEXCANb_IFLAG1(_bus) = value;
    36ea:	6323      	str	r3, [r4, #48]	; 0x30
  FLEXCANb_MCR(_bus) &= ~0x7F; // clear current value
    36ec:	6823      	ldr	r3, [r4, #0]
    36ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    36f2:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= last; // set mailbox max
    36f4:	6823      	ldr	r3, [r4, #0]
    36f6:	f043 030f 	orr.w	r3, r3, #15
    36fa:	6023      	str	r3, [r4, #0]
  if ( fifo_was_cleared ) enableFIFO();
    36fc:	00ab      	lsls	r3, r5, #2
    36fe:	f100 85cb 	bmi.w	4298 <setup+0xd54>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
    3702:	4c36      	ldr	r4, [pc, #216]	; (37dc <setup+0x298>)
    3704:	6823      	ldr	r3, [r4, #0]
    3706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    370a:	6023      	str	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
    370c:	6823      	ldr	r3, [r4, #0]
    370e:	01df      	lsls	r7, r3, #7
    3710:	d4fc      	bmi.n	370c <setup+0x1c8>
  Can1.enableFIFO();
    3712:	2001      	movs	r0, #1
    3714:	f7fd f92e 	bl	974 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) ) return; /* FIFO must be enabled first */
    3718:	6823      	ldr	r3, [r4, #0]
    371a:	009d      	lsls	r5, r3, #2
    371c:	d50a      	bpl.n	3734 <setup+0x1f0>
  if ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IMASK1_BUF5M ) return; /* FIFO interrupts already enabled */
    371e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3720:	0698      	lsls	r0, r3, #26
    3722:	d407      	bmi.n	3734 <setup+0x1f0>
  FLEXCANb_IMASK1(_bus) &= ~0xFF; /* disable FIFO interrupt flags */
    3724:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3726:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    372a:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( status ) FLEXCANb_IMASK1(_bus) |= FLEXCAN_IMASK1_BUF5M; /* enable FIFO interrupt */
    372c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    372e:	f043 0320 	orr.w	r3, r3, #32
    3732:	62a3      	str	r3, [r4, #40]	; 0x28
  _mainHandler = handler;
    3734:	4b2c      	ldr	r3, [pc, #176]	; (37e8 <setup+0x2a4>)
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    3736:	4c29      	ldr	r4, [pc, #164]	; (37dc <setup+0x298>)
  _mainHandler = handler;
    3738:	4a2c      	ldr	r2, [pc, #176]	; (37ec <setup+0x2a8>)
    373a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    373e:	6823      	ldr	r3, [r4, #0]
    3740:	f013 5a00 	ands.w	sl, r3, #536870912	; 0x20000000
    3744:	f040 83b7 	bne.w	3eb6 <setup+0x972>
    3748:	4829      	ldr	r0, [pc, #164]	; (37f0 <setup+0x2ac>)
    switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    374a:	4d2a      	ldr	r5, [pc, #168]	; (37f4 <setup+0x2b0>)
          dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    374c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 3800 <setup+0x2bc>
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    3750:	4f29      	ldr	r7, [pc, #164]	; (37f8 <setup+0x2b4>)
    3752:	211a      	movs	r1, #26
    3754:	f006 fd06 	bl	a164 <usb_serial_write>
  for ( uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    3758:	6823      	ldr	r3, [r4, #0]
    375a:	4654      	mov	r4, sl
    switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    375c:	eb04 0905 	add.w	r9, r4, r5
    3760:	ea4f 1909 	mov.w	r9, r9, lsl #4
    3764:	f8d9 3000 	ldr.w	r3, [r9]
    3768:	f3c3 6303 	ubfx	r3, r3, #24, #4
    376c:	2b0e      	cmp	r3, #14
    376e:	f200 80d7 	bhi.w	3920 <setup+0x3dc>
    3772:	e8df f013 	tbh	[pc, r3, lsl #1]
    3776:	038e      	.short	0x038e
    3778:	036a037c 	.word	0x036a037c
    377c:	034f00d5 	.word	0x034f00d5
    3780:	033d00d5 	.word	0x033d00d5
    3784:	032b00d5 	.word	0x032b00d5
    3788:	02db02ed 	.word	0x02db02ed
    378c:	004700d5 	.word	0x004700d5
    3790:	02c900d5 	.word	0x02c900d5
    3794:	0000071d 	.word	0x0000071d
    3798:	1fff683c 	.word	0x1fff683c
    379c:	1fff15f4 	.word	0x1fff15f4
    37a0:	1fff6834 	.word	0x1fff6834
    37a4:	1fff764c 	.word	0x1fff764c
    37a8:	000118ec 	.word	0x000118ec
    37ac:	1fff0e64 	.word	0x1fff0e64
    37b0:	1fff76cc 	.word	0x1fff76cc
    37b4:	0001191c 	.word	0x0001191c
    37b8:	1fff7004 	.word	0x1fff7004
    37bc:	00011fec 	.word	0x00011fec
    37c0:	00011930 	.word	0x00011930
    37c4:	1fff0c74 	.word	0x1fff0c74
    37c8:	1fff7608 	.word	0x1fff7608
    37cc:	00011950 	.word	0x00011950
    37d0:	1fff0c58 	.word	0x1fff0c58
    37d4:	1fff6850 	.word	0x1fff6850
    37d8:	1fff0c3c 	.word	0x1fff0c3c
    37dc:	400a4000 	.word	0x400a4000
    37e0:	1fff3f14 	.word	0x1fff3f14
    37e4:	1fff682c 	.word	0x1fff682c
    37e8:	1fff5f14 	.word	0x1fff5f14
    37ec:	00004ac9 	.word	0x00004ac9
    37f0:	00011b0c 	.word	0x00011b0c
    37f4:	0400a408 	.word	0x0400a408
    37f8:	bff5bf80 	.word	0xbff5bf80
    37fc:	1fff6de8 	.word	0x1fff6de8
    3800:	400a408c 	.word	0x400a408c
    3804:	2104      	movs	r1, #4
    3806:	4881      	ldr	r0, [pc, #516]	; (3a0c <setup+0x4c8>)
    3808:	f006 fcac 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    380c:	2300      	movs	r3, #0
    380e:	4651      	mov	r1, sl
    3810:	220a      	movs	r2, #10
    3812:	487f      	ldr	r0, [pc, #508]	; (3a10 <setup+0x4cc>)
    3814:	f005 faee 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3818:	211d      	movs	r1, #29
    381a:	487e      	ldr	r0, [pc, #504]	; (3a14 <setup+0x4d0>)
    381c:	f006 fca2 	bl	a164 <usb_serial_write>
          uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
    3820:	f8d9 3000 	ldr.w	r3, [r9]
          (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
    3824:	0299      	lsls	r1, r3, #10
    3826:	f140 876e 	bpl.w	4706 <setup+0x11c2>
    382a:	487b      	ldr	r0, [pc, #492]	; (3a18 <setup+0x4d4>)
    382c:	2110      	movs	r1, #16
    382e:	f006 fc99 	bl	a164 <usb_serial_write>
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    3832:	f8d9 a008 	ldr.w	sl, [r9, #8]
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    3836:	f8d9 3004 	ldr.w	r3, [r9, #4]
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    383a:	eb09 0b07 	add.w	fp, r9, r7
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    383e:	f023 4960 	bic.w	r9, r3, #3758096384	; 0xe0000000
    3842:	2107      	movs	r1, #7
    3844:	4875      	ldr	r0, [pc, #468]	; (3a1c <setup+0x4d8>)
    3846:	f006 fc8d 	bl	a164 <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    384a:	2300      	movs	r3, #0
    384c:	2210      	movs	r2, #16
    384e:	4649      	mov	r1, r9
    3850:	486f      	ldr	r0, [pc, #444]	; (3a10 <setup+0x4cc>)
    3852:	f005 facf 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3856:	2101      	movs	r1, #1
    3858:	4871      	ldr	r0, [pc, #452]	; (3a20 <setup+0x4dc>)
    385a:	f006 fc83 	bl	a164 <usb_serial_write>
    385e:	210a      	movs	r1, #10
    3860:	4870      	ldr	r0, [pc, #448]	; (3a24 <setup+0x4e0>)
    3862:	f006 fc7f 	bl	a164 <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    3866:	2300      	movs	r3, #0
    3868:	2210      	movs	r2, #16
    386a:	ea4f 611a 	mov.w	r1, sl, lsr #24
    386e:	4868      	ldr	r0, [pc, #416]	; (3a10 <setup+0x4cc>)
    3870:	f005 fac0 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3874:	2101      	movs	r1, #1
    3876:	486c      	ldr	r0, [pc, #432]	; (3a28 <setup+0x4e4>)
    3878:	f006 fc74 	bl	a164 <usb_serial_write>
    387c:	2300      	movs	r3, #0
    387e:	2210      	movs	r2, #16
    3880:	f3ca 4107 	ubfx	r1, sl, #16, #8
    3884:	4862      	ldr	r0, [pc, #392]	; (3a10 <setup+0x4cc>)
    3886:	f005 fab5 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    388a:	2101      	movs	r1, #1
    388c:	4866      	ldr	r0, [pc, #408]	; (3a28 <setup+0x4e4>)
    388e:	f006 fc69 	bl	a164 <usb_serial_write>
    3892:	2300      	movs	r3, #0
    3894:	2210      	movs	r2, #16
    3896:	f3ca 2107 	ubfx	r1, sl, #8, #8
    389a:	485d      	ldr	r0, [pc, #372]	; (3a10 <setup+0x4cc>)
    389c:	f005 faaa 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    38a0:	2101      	movs	r1, #1
    38a2:	4861      	ldr	r0, [pc, #388]	; (3a28 <setup+0x4e4>)
    38a4:	f006 fc5e 	bl	a164 <usb_serial_write>
    38a8:	2300      	movs	r3, #0
    38aa:	2210      	movs	r2, #16
    38ac:	fa5f f18a 	uxtb.w	r1, sl
    38b0:	4857      	ldr	r0, [pc, #348]	; (3a10 <setup+0x4cc>)
    38b2:	f005 fa9f 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    38b6:	f85b 9008 	ldr.w	r9, [fp, r8]
    38ba:	485b      	ldr	r0, [pc, #364]	; (3a28 <setup+0x4e4>)
    38bc:	2101      	movs	r1, #1
    38be:	f006 fc51 	bl	a164 <usb_serial_write>
    38c2:	2300      	movs	r3, #0
    38c4:	2210      	movs	r2, #16
    38c6:	ea4f 6119 	mov.w	r1, r9, lsr #24
    38ca:	4851      	ldr	r0, [pc, #324]	; (3a10 <setup+0x4cc>)
    38cc:	f005 fa92 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    38d0:	2101      	movs	r1, #1
    38d2:	4855      	ldr	r0, [pc, #340]	; (3a28 <setup+0x4e4>)
    38d4:	f006 fc46 	bl	a164 <usb_serial_write>
    38d8:	2300      	movs	r3, #0
    38da:	2210      	movs	r2, #16
    38dc:	f3c9 4107 	ubfx	r1, r9, #16, #8
    38e0:	484b      	ldr	r0, [pc, #300]	; (3a10 <setup+0x4cc>)
    38e2:	f005 fa87 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    38e6:	2101      	movs	r1, #1
    38e8:	484f      	ldr	r0, [pc, #316]	; (3a28 <setup+0x4e4>)
    38ea:	f006 fc3b 	bl	a164 <usb_serial_write>
    38ee:	2300      	movs	r3, #0
    38f0:	2210      	movs	r2, #16
    38f2:	f3c9 2107 	ubfx	r1, r9, #8, #8
    38f6:	4846      	ldr	r0, [pc, #280]	; (3a10 <setup+0x4cc>)
    38f8:	f005 fa7c 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    38fc:	2101      	movs	r1, #1
    38fe:	484a      	ldr	r0, [pc, #296]	; (3a28 <setup+0x4e4>)
    3900:	f006 fc30 	bl	a164 <usb_serial_write>
    3904:	fa5f f189 	uxtb.w	r1, r9
    3908:	2300      	movs	r3, #0
    390a:	2210      	movs	r2, #16
    390c:	4840      	ldr	r0, [pc, #256]	; (3a10 <setup+0x4cc>)
    390e:	f005 fa71 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3912:	4843      	ldr	r0, [pc, #268]	; (3a20 <setup+0x4dc>)
    3914:	2101      	movs	r1, #1
    3916:	f006 fc25 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    391a:	483d      	ldr	r0, [pc, #244]	; (3a10 <setup+0x4cc>)
    391c:	f005 fa44 	bl	8da8 <Print::println()>
  for ( uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    3920:	4b42      	ldr	r3, [pc, #264]	; (3a2c <setup+0x4e8>)
    3922:	681b      	ldr	r3, [r3, #0]
    3924:	3401      	adds	r4, #1
    3926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    392a:	b2e4      	uxtb	r4, r4
    392c:	3301      	adds	r3, #1
    392e:	429c      	cmp	r4, r3
    3930:	46a2      	mov	sl, r4
    3932:	f4ff af13 	bcc.w	375c <setup+0x218>
  Can0.begin();
    3936:	483e      	ldr	r0, [pc, #248]	; (3a30 <setup+0x4ec>)
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
    3938:	4c3e      	ldr	r4, [pc, #248]	; (3a34 <setup+0x4f0>)
    393a:	f7fd f9d3 	bl	ce4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>
  Can0_bitrate = baud_rates[0];
    393e:	4b3e      	ldr	r3, [pc, #248]	; (3a38 <setup+0x4f4>)
    3940:	6831      	ldr	r1, [r6, #0]
  Can0.setBaudRate(Can0_bitrate);
    3942:	483b      	ldr	r0, [pc, #236]	; (3a30 <setup+0x4ec>)
  Can0_bitrate = baud_rates[0];
    3944:	6019      	str	r1, [r3, #0]
  Can0.setBaudRate(Can0_bitrate);
    3946:	2200      	movs	r2, #0
    3948:	f7fc fe3c 	bl	5c4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>
    394c:	6823      	ldr	r3, [r4, #0]
    394e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
    3952:	6023      	str	r3, [r4, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
    3954:	6823      	ldr	r3, [r4, #0]
    3956:	01da      	lsls	r2, r3, #7
    3958:	d5fc      	bpl.n	3954 <setup+0x410>
    395a:	2000      	movs	r0, #0
  bool fifo_was_cleared = FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN;
    395c:	6825      	ldr	r5, [r4, #0]
    395e:	f7fc ff3d 	bl	7dc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  return FLEXCANb_IFLAG1(_bus);
    3962:	6b23      	ldr	r3, [r4, #48]	; 0x30
  FLEXCANb_IFLAG1(_bus) = value;
    3964:	6323      	str	r3, [r4, #48]	; 0x30
  FLEXCANb_MCR(_bus) &= ~0x7F; // clear current value
    3966:	6823      	ldr	r3, [r4, #0]
    3968:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    396c:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= last; // set mailbox max
    396e:	6823      	ldr	r3, [r4, #0]
    3970:	f043 030f 	orr.w	r3, r3, #15
    3974:	6023      	str	r3, [r4, #0]
  if ( fifo_was_cleared ) enableFIFO();
    3976:	00ab      	lsls	r3, r5, #2
    3978:	f100 86b3 	bmi.w	46e2 <setup+0x119e>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
    397c:	4c2d      	ldr	r4, [pc, #180]	; (3a34 <setup+0x4f0>)
    397e:	6823      	ldr	r3, [r4, #0]
    3980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    3984:	6023      	str	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
    3986:	6823      	ldr	r3, [r4, #0]
    3988:	01df      	lsls	r7, r3, #7
    398a:	d4fc      	bmi.n	3986 <setup+0x442>
  Can0.enableFIFO();
    398c:	2001      	movs	r0, #1
    398e:	f7fc ff25 	bl	7dc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) ) return; /* FIFO must be enabled first */
    3992:	6823      	ldr	r3, [r4, #0]
    3994:	009e      	lsls	r6, r3, #2
    3996:	d50a      	bpl.n	39ae <setup+0x46a>
  if ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IMASK1_BUF5M ) return; /* FIFO interrupts already enabled */
    3998:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    399a:	069d      	lsls	r5, r3, #26
    399c:	d407      	bmi.n	39ae <setup+0x46a>
  FLEXCANb_IMASK1(_bus) &= ~0xFF; /* disable FIFO interrupt flags */
    399e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    39a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    39a4:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( status ) FLEXCANb_IMASK1(_bus) |= FLEXCAN_IMASK1_BUF5M; /* enable FIFO interrupt */
    39a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    39a8:	f043 0320 	orr.w	r3, r3, #32
    39ac:	62a3      	str	r3, [r4, #40]	; 0x28
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    39ae:	4c21      	ldr	r4, [pc, #132]	; (3a34 <setup+0x4f0>)
  _mainHandler = handler;
    39b0:	4a22      	ldr	r2, [pc, #136]	; (3a3c <setup+0x4f8>)
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    39b2:	6823      	ldr	r3, [r4, #0]
  _mainHandler = handler;
    39b4:	4922      	ldr	r1, [pc, #136]	; (3a40 <setup+0x4fc>)
    39b6:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    39ba:	f013 5900 	ands.w	r9, r3, #536870912	; 0x20000000
    39be:	f040 8499 	bne.w	42f4 <setup+0xdb0>
    39c2:	4820      	ldr	r0, [pc, #128]	; (3a44 <setup+0x500>)
    switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    39c4:	4d20      	ldr	r5, [pc, #128]	; (3a48 <setup+0x504>)
          dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    39c6:	4f21      	ldr	r7, [pc, #132]	; (3a4c <setup+0x508>)
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    39c8:	4e21      	ldr	r6, [pc, #132]	; (3a50 <setup+0x50c>)
    39ca:	211a      	movs	r1, #26
    39cc:	f006 fbca 	bl	a164 <usb_serial_write>
  for ( uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    39d0:	6823      	ldr	r3, [r4, #0]
    39d2:	464c      	mov	r4, r9
    switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    39d4:	eb04 0805 	add.w	r8, r4, r5
    39d8:	ea4f 1808 	mov.w	r8, r8, lsl #4
    39dc:	f8d8 3000 	ldr.w	r3, [r8]
    39e0:	f3c3 6303 	ubfx	r3, r3, #24, #4
    39e4:	2b0e      	cmp	r3, #14
    39e6:	f200 80c2 	bhi.w	3b6e <setup+0x62a>
    39ea:	e8df f013 	tbh	[pc, r3, lsl #1]
    39ee:	0145      	.short	0x0145
    39f0:	01210133 	.word	0x01210133
    39f4:	010600c0 	.word	0x010600c0
    39f8:	016900c0 	.word	0x016900c0
    39fc:	015700c0 	.word	0x015700c0
    3a00:	00f4017b 	.word	0x00f4017b
    3a04:	003300c0 	.word	0x003300c0
    3a08:	00e200c0 	.word	0x00e200c0
    3a0c:	000119dc 	.word	0x000119dc
    3a10:	1fff0e64 	.word	0x1fff0e64
    3a14:	00011a9c 	.word	0x00011a9c
    3a18:	00011abc 	.word	0x00011abc
    3a1c:	00011ae4 	.word	0x00011ae4
    3a20:	00011a18 	.word	0x00011a18
    3a24:	00011aec 	.word	0x00011aec
    3a28:	0001194c 	.word	0x0001194c
    3a2c:	400a4000 	.word	0x400a4000
    3a30:	1fff15f8 	.word	0x1fff15f8
    3a34:	40024000 	.word	0x40024000
    3a38:	1fff3f10 	.word	0x1fff3f10
    3a3c:	1fff35f8 	.word	0x1fff35f8
    3a40:	00004a89 	.word	0x00004a89
    3a44:	00011b0c 	.word	0x00011b0c
    3a48:	04002408 	.word	0x04002408
    3a4c:	4002408c 	.word	0x4002408c
    3a50:	bffdbf80 	.word	0xbffdbf80
    3a54:	2104      	movs	r1, #4
    3a56:	48c7      	ldr	r0, [pc, #796]	; (3d74 <setup+0x830>)
    3a58:	f006 fb84 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3a5c:	2300      	movs	r3, #0
    3a5e:	4649      	mov	r1, r9
    3a60:	220a      	movs	r2, #10
    3a62:	48c5      	ldr	r0, [pc, #788]	; (3d78 <setup+0x834>)
    3a64:	f005 f9c6 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3a68:	48c4      	ldr	r0, [pc, #784]	; (3d7c <setup+0x838>)
    3a6a:	211d      	movs	r1, #29
    3a6c:	f006 fb7a 	bl	a164 <usb_serial_write>
          uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
    3a70:	f8d8 3000 	ldr.w	r3, [r8]
          (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
    3a74:	029b      	lsls	r3, r3, #10
    3a76:	f140 8639 	bpl.w	46ec <setup+0x11a8>
    3a7a:	48c1      	ldr	r0, [pc, #772]	; (3d80 <setup+0x83c>)
    3a7c:	2110      	movs	r1, #16
    3a7e:	f006 fb71 	bl	a164 <usb_serial_write>
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    3a82:	f8d8 9008 	ldr.w	r9, [r8, #8]
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    3a86:	f8d8 3004 	ldr.w	r3, [r8, #4]
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    3a8a:	44b0      	add	r8, r6
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    3a8c:	f023 4a60 	bic.w	sl, r3, #3758096384	; 0xe0000000
    3a90:	2107      	movs	r1, #7
    3a92:	48bc      	ldr	r0, [pc, #752]	; (3d84 <setup+0x840>)
    3a94:	f006 fb66 	bl	a164 <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    3a98:	2300      	movs	r3, #0
    3a9a:	2210      	movs	r2, #16
    3a9c:	4651      	mov	r1, sl
    3a9e:	48b6      	ldr	r0, [pc, #728]	; (3d78 <setup+0x834>)
    3aa0:	f005 f9a8 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3aa4:	2101      	movs	r1, #1
    3aa6:	48b8      	ldr	r0, [pc, #736]	; (3d88 <setup+0x844>)
    3aa8:	f006 fb5c 	bl	a164 <usb_serial_write>
    3aac:	210a      	movs	r1, #10
    3aae:	48b7      	ldr	r0, [pc, #732]	; (3d8c <setup+0x848>)
    3ab0:	f006 fb58 	bl	a164 <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    3ab4:	2300      	movs	r3, #0
    3ab6:	2210      	movs	r2, #16
    3ab8:	ea4f 6119 	mov.w	r1, r9, lsr #24
    3abc:	48ae      	ldr	r0, [pc, #696]	; (3d78 <setup+0x834>)
    3abe:	f005 f999 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3ac2:	2101      	movs	r1, #1
    3ac4:	48b2      	ldr	r0, [pc, #712]	; (3d90 <setup+0x84c>)
    3ac6:	f006 fb4d 	bl	a164 <usb_serial_write>
    3aca:	2300      	movs	r3, #0
    3acc:	2210      	movs	r2, #16
    3ace:	f3c9 4107 	ubfx	r1, r9, #16, #8
    3ad2:	48a9      	ldr	r0, [pc, #676]	; (3d78 <setup+0x834>)
    3ad4:	f005 f98e 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3ad8:	2101      	movs	r1, #1
    3ada:	48ad      	ldr	r0, [pc, #692]	; (3d90 <setup+0x84c>)
    3adc:	f006 fb42 	bl	a164 <usb_serial_write>
    3ae0:	2300      	movs	r3, #0
    3ae2:	2210      	movs	r2, #16
    3ae4:	f3c9 2107 	ubfx	r1, r9, #8, #8
    3ae8:	48a3      	ldr	r0, [pc, #652]	; (3d78 <setup+0x834>)
    3aea:	f005 f983 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3aee:	2101      	movs	r1, #1
    3af0:	48a7      	ldr	r0, [pc, #668]	; (3d90 <setup+0x84c>)
    3af2:	f006 fb37 	bl	a164 <usb_serial_write>
    3af6:	2300      	movs	r3, #0
    3af8:	2210      	movs	r2, #16
    3afa:	fa5f f189 	uxtb.w	r1, r9
    3afe:	489e      	ldr	r0, [pc, #632]	; (3d78 <setup+0x834>)
    3b00:	f005 f978 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    3b04:	f858 8007 	ldr.w	r8, [r8, r7]
    3b08:	48a1      	ldr	r0, [pc, #644]	; (3d90 <setup+0x84c>)
    3b0a:	2101      	movs	r1, #1
    3b0c:	f006 fb2a 	bl	a164 <usb_serial_write>
    3b10:	2300      	movs	r3, #0
    3b12:	2210      	movs	r2, #16
    3b14:	ea4f 6118 	mov.w	r1, r8, lsr #24
    3b18:	4897      	ldr	r0, [pc, #604]	; (3d78 <setup+0x834>)
    3b1a:	f005 f96b 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3b1e:	2101      	movs	r1, #1
    3b20:	489b      	ldr	r0, [pc, #620]	; (3d90 <setup+0x84c>)
    3b22:	f006 fb1f 	bl	a164 <usb_serial_write>
    3b26:	2300      	movs	r3, #0
    3b28:	2210      	movs	r2, #16
    3b2a:	f3c8 4107 	ubfx	r1, r8, #16, #8
    3b2e:	4892      	ldr	r0, [pc, #584]	; (3d78 <setup+0x834>)
    3b30:	f005 f960 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3b34:	2101      	movs	r1, #1
    3b36:	4896      	ldr	r0, [pc, #600]	; (3d90 <setup+0x84c>)
    3b38:	f006 fb14 	bl	a164 <usb_serial_write>
    3b3c:	2300      	movs	r3, #0
    3b3e:	2210      	movs	r2, #16
    3b40:	f3c8 2107 	ubfx	r1, r8, #8, #8
    3b44:	488c      	ldr	r0, [pc, #560]	; (3d78 <setup+0x834>)
    3b46:	f005 f955 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3b4a:	2101      	movs	r1, #1
    3b4c:	4890      	ldr	r0, [pc, #576]	; (3d90 <setup+0x84c>)
    3b4e:	f006 fb09 	bl	a164 <usb_serial_write>
    3b52:	fa5f f188 	uxtb.w	r1, r8
    3b56:	2300      	movs	r3, #0
    3b58:	2210      	movs	r2, #16
    3b5a:	4887      	ldr	r0, [pc, #540]	; (3d78 <setup+0x834>)
    3b5c:	f005 f94a 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3b60:	4889      	ldr	r0, [pc, #548]	; (3d88 <setup+0x844>)
    3b62:	2101      	movs	r1, #1
    3b64:	f006 fafe 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3b68:	4883      	ldr	r0, [pc, #524]	; (3d78 <setup+0x834>)
    3b6a:	f005 f91d 	bl	8da8 <Print::println()>
  for ( uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    3b6e:	4b89      	ldr	r3, [pc, #548]	; (3d94 <setup+0x850>)
    3b70:	681b      	ldr	r3, [r3, #0]
    3b72:	3401      	adds	r4, #1
    3b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3b78:	b2e4      	uxtb	r4, r4
    3b7a:	3301      	adds	r3, #1
    3b7c:	429c      	cmp	r4, r3
    3b7e:	46a1      	mov	r9, r4
    3b80:	f4ff af28 	bcc.w	39d4 <setup+0x490>
  autoBaud0(); 
    3b84:	f7fd faca 	bl	111c <autoBaud0()>
  autoBaud1();
    3b88:	f7fd fcac 	bl	14e4 <autoBaud1()>
  txmsg.flags.extended = 1;
    3b8c:	4b82      	ldr	r3, [pc, #520]	; (3d98 <setup+0x854>)
    3b8e:	2101      	movs	r1, #1
  txmsg.len = 8;  
    3b90:	2208      	movs	r2, #8
}
    3b92:	a804      	add	r0, sp, #16
  txmsg.flags.extended = 1;
    3b94:	71d9      	strb	r1, [r3, #7]
  txmsg.len = 8;  
    3b96:	72da      	strb	r2, [r3, #11]
}
    3b98:	f005 f936 	bl	8e08 <String::~String()>
    3b9c:	b009      	add	sp, #36	; 0x24
    3b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ba2:	2117      	movs	r1, #23
    3ba4:	487d      	ldr	r0, [pc, #500]	; (3d9c <setup+0x858>)
    3ba6:	f006 fadd 	bl	a164 <usb_serial_write>
    3baa:	4873      	ldr	r0, [pc, #460]	; (3d78 <setup+0x834>)
    3bac:	f005 f8fc 	bl	8da8 <Print::println()>
    3bb0:	e543      	b.n	363a <setup+0xf6>
    3bb2:	2104      	movs	r1, #4
    3bb4:	486f      	ldr	r0, [pc, #444]	; (3d74 <setup+0x830>)
    3bb6:	f006 fad5 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3bba:	4649      	mov	r1, r9
    3bbc:	2300      	movs	r3, #0
    3bbe:	220a      	movs	r2, #10
    3bc0:	486d      	ldr	r0, [pc, #436]	; (3d78 <setup+0x834>)
    3bc2:	f005 f917 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3bc6:	2111      	movs	r1, #17
    3bc8:	4875      	ldr	r0, [pc, #468]	; (3da0 <setup+0x85c>)
    3bca:	f006 facb 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3bce:	486a      	ldr	r0, [pc, #424]	; (3d78 <setup+0x834>)
    3bd0:	f005 f8ea 	bl	8da8 <Print::println()>
    3bd4:	e7cb      	b.n	3b6e <setup+0x62a>
    3bd6:	2104      	movs	r1, #4
    3bd8:	4866      	ldr	r0, [pc, #408]	; (3d74 <setup+0x830>)
    3bda:	f006 fac3 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3bde:	4649      	mov	r1, r9
    3be0:	2300      	movs	r3, #0
    3be2:	220a      	movs	r2, #10
    3be4:	4864      	ldr	r0, [pc, #400]	; (3d78 <setup+0x834>)
    3be6:	f005 f905 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3bea:	2111      	movs	r1, #17
    3bec:	486d      	ldr	r0, [pc, #436]	; (3da4 <setup+0x860>)
    3bee:	f006 fab9 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3bf2:	4861      	ldr	r0, [pc, #388]	; (3d78 <setup+0x834>)
    3bf4:	f005 f8d8 	bl	8da8 <Print::println()>
    3bf8:	e7b9      	b.n	3b6e <setup+0x62a>
    3bfa:	2104      	movs	r1, #4
    3bfc:	485d      	ldr	r0, [pc, #372]	; (3d74 <setup+0x830>)
    3bfe:	f006 fab1 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3c02:	220a      	movs	r2, #10
    3c04:	4649      	mov	r1, r9
    3c06:	2300      	movs	r3, #0
    3c08:	485b      	ldr	r0, [pc, #364]	; (3d78 <setup+0x834>)
    3c0a:	f005 f8f3 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3c0e:	210f      	movs	r1, #15
    3c10:	4865      	ldr	r0, [pc, #404]	; (3da8 <setup+0x864>)
    3c12:	f006 faa7 	bl	a164 <usb_serial_write>
          (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE) ? Serial.println("\t(Extended Frame)") : Serial.println("\t(Standard Frame)");
    3c16:	f8d8 3000 	ldr.w	r3, [r8]
    3c1a:	029a      	lsls	r2, r3, #10
    3c1c:	bf4c      	ite	mi
    3c1e:	4863      	ldrmi	r0, [pc, #396]	; (3dac <setup+0x868>)
    3c20:	4863      	ldrpl	r0, [pc, #396]	; (3db0 <setup+0x86c>)
    3c22:	2111      	movs	r1, #17
    3c24:	f006 fa9e 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3c28:	4853      	ldr	r0, [pc, #332]	; (3d78 <setup+0x834>)
    3c2a:	f005 f8bd 	bl	8da8 <Print::println()>
    3c2e:	e79e      	b.n	3b6e <setup+0x62a>
    3c30:	2104      	movs	r1, #4
    3c32:	4850      	ldr	r0, [pc, #320]	; (3d74 <setup+0x830>)
    3c34:	f006 fa96 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3c38:	4649      	mov	r1, r9
    3c3a:	2300      	movs	r3, #0
    3c3c:	220a      	movs	r2, #10
    3c3e:	484e      	ldr	r0, [pc, #312]	; (3d78 <setup+0x834>)
    3c40:	f005 f8d8 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3c44:	210e      	movs	r1, #14
    3c46:	485b      	ldr	r0, [pc, #364]	; (3db4 <setup+0x870>)
    3c48:	f006 fa8c 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3c4c:	484a      	ldr	r0, [pc, #296]	; (3d78 <setup+0x834>)
    3c4e:	f005 f8ab 	bl	8da8 <Print::println()>
    3c52:	e78c      	b.n	3b6e <setup+0x62a>
    3c54:	2104      	movs	r1, #4
    3c56:	4847      	ldr	r0, [pc, #284]	; (3d74 <setup+0x830>)
    3c58:	f006 fa84 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3c5c:	4649      	mov	r1, r9
    3c5e:	2300      	movs	r3, #0
    3c60:	220a      	movs	r2, #10
    3c62:	4845      	ldr	r0, [pc, #276]	; (3d78 <setup+0x834>)
    3c64:	f005 f8c6 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3c68:	210e      	movs	r1, #14
    3c6a:	4853      	ldr	r0, [pc, #332]	; (3db8 <setup+0x874>)
    3c6c:	f006 fa7a 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3c70:	4841      	ldr	r0, [pc, #260]	; (3d78 <setup+0x834>)
    3c72:	f005 f899 	bl	8da8 <Print::println()>
    3c76:	e77a      	b.n	3b6e <setup+0x62a>
    3c78:	2104      	movs	r1, #4
    3c7a:	483e      	ldr	r0, [pc, #248]	; (3d74 <setup+0x830>)
    3c7c:	f006 fa72 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3c80:	4649      	mov	r1, r9
    3c82:	2300      	movs	r3, #0
    3c84:	220a      	movs	r2, #10
    3c86:	483c      	ldr	r0, [pc, #240]	; (3d78 <setup+0x834>)
    3c88:	f005 f8b4 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3c8c:	2112      	movs	r1, #18
    3c8e:	484b      	ldr	r0, [pc, #300]	; (3dbc <setup+0x878>)
    3c90:	f006 fa68 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3c94:	4838      	ldr	r0, [pc, #224]	; (3d78 <setup+0x834>)
    3c96:	f005 f887 	bl	8da8 <Print::println()>
    3c9a:	e768      	b.n	3b6e <setup+0x62a>
    3c9c:	2104      	movs	r1, #4
    3c9e:	4835      	ldr	r0, [pc, #212]	; (3d74 <setup+0x830>)
    3ca0:	f006 fa60 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3ca4:	4649      	mov	r1, r9
    3ca6:	2300      	movs	r3, #0
    3ca8:	220a      	movs	r2, #10
    3caa:	4833      	ldr	r0, [pc, #204]	; (3d78 <setup+0x834>)
    3cac:	f005 f8a2 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3cb0:	2112      	movs	r1, #18
    3cb2:	4843      	ldr	r0, [pc, #268]	; (3dc0 <setup+0x87c>)
    3cb4:	f006 fa56 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3cb8:	482f      	ldr	r0, [pc, #188]	; (3d78 <setup+0x834>)
    3cba:	f005 f875 	bl	8da8 <Print::println()>
    3cbe:	e756      	b.n	3b6e <setup+0x62a>
    3cc0:	2104      	movs	r1, #4
    3cc2:	482c      	ldr	r0, [pc, #176]	; (3d74 <setup+0x830>)
    3cc4:	f006 fa4e 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3cc8:	4649      	mov	r1, r9
    3cca:	2300      	movs	r3, #0
    3ccc:	220a      	movs	r2, #10
    3cce:	482a      	ldr	r0, [pc, #168]	; (3d78 <setup+0x834>)
    3cd0:	f005 f890 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3cd4:	2111      	movs	r1, #17
    3cd6:	483b      	ldr	r0, [pc, #236]	; (3dc4 <setup+0x880>)
    3cd8:	f006 fa44 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3cdc:	4826      	ldr	r0, [pc, #152]	; (3d78 <setup+0x834>)
    3cde:	f005 f863 	bl	8da8 <Print::println()>
    3ce2:	e744      	b.n	3b6e <setup+0x62a>
    3ce4:	2104      	movs	r1, #4
    3ce6:	4823      	ldr	r0, [pc, #140]	; (3d74 <setup+0x830>)
    3ce8:	f006 fa3c 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3cec:	4649      	mov	r1, r9
    3cee:	2300      	movs	r3, #0
    3cf0:	220a      	movs	r2, #10
    3cf2:	4821      	ldr	r0, [pc, #132]	; (3d78 <setup+0x834>)
    3cf4:	f005 f87e 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3cf8:	210f      	movs	r1, #15
    3cfa:	4833      	ldr	r0, [pc, #204]	; (3dc8 <setup+0x884>)
    3cfc:	f006 fa32 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3d00:	481d      	ldr	r0, [pc, #116]	; (3d78 <setup+0x834>)
    3d02:	f005 f851 	bl	8da8 <Print::println()>
    3d06:	e732      	b.n	3b6e <setup+0x62a>
    3d08:	2104      	movs	r1, #4
    3d0a:	481a      	ldr	r0, [pc, #104]	; (3d74 <setup+0x830>)
    3d0c:	f006 fa2a 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3d10:	4651      	mov	r1, sl
    3d12:	2300      	movs	r3, #0
    3d14:	220a      	movs	r2, #10
    3d16:	4818      	ldr	r0, [pc, #96]	; (3d78 <setup+0x834>)
    3d18:	f005 f86c 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3d1c:	2111      	movs	r1, #17
    3d1e:	4820      	ldr	r0, [pc, #128]	; (3da0 <setup+0x85c>)
    3d20:	f006 fa20 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3d24:	4814      	ldr	r0, [pc, #80]	; (3d78 <setup+0x834>)
    3d26:	f005 f83f 	bl	8da8 <Print::println()>
    3d2a:	e5f9      	b.n	3920 <setup+0x3dc>
    3d2c:	2104      	movs	r1, #4
    3d2e:	4811      	ldr	r0, [pc, #68]	; (3d74 <setup+0x830>)
    3d30:	f006 fa18 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3d34:	4651      	mov	r1, sl
    3d36:	2300      	movs	r3, #0
    3d38:	220a      	movs	r2, #10
    3d3a:	480f      	ldr	r0, [pc, #60]	; (3d78 <setup+0x834>)
    3d3c:	f005 f85a 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3d40:	2111      	movs	r1, #17
    3d42:	4818      	ldr	r0, [pc, #96]	; (3da4 <setup+0x860>)
    3d44:	f006 fa0e 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3d48:	480b      	ldr	r0, [pc, #44]	; (3d78 <setup+0x834>)
    3d4a:	f005 f82d 	bl	8da8 <Print::println()>
    3d4e:	e5e7      	b.n	3920 <setup+0x3dc>
    3d50:	2104      	movs	r1, #4
    3d52:	4808      	ldr	r0, [pc, #32]	; (3d74 <setup+0x830>)
    3d54:	f006 fa06 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3d58:	4651      	mov	r1, sl
    3d5a:	2300      	movs	r3, #0
    3d5c:	220a      	movs	r2, #10
    3d5e:	4806      	ldr	r0, [pc, #24]	; (3d78 <setup+0x834>)
    3d60:	f005 f848 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3d64:	210f      	movs	r1, #15
    3d66:	4818      	ldr	r0, [pc, #96]	; (3dc8 <setup+0x884>)
    3d68:	f006 f9fc 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3d6c:	4802      	ldr	r0, [pc, #8]	; (3d78 <setup+0x834>)
    3d6e:	f005 f81b 	bl	8da8 <Print::println()>
    3d72:	e5d5      	b.n	3920 <setup+0x3dc>
    3d74:	000119dc 	.word	0x000119dc
    3d78:	1fff0e64 	.word	0x1fff0e64
    3d7c:	00011a9c 	.word	0x00011a9c
    3d80:	00011abc 	.word	0x00011abc
    3d84:	00011ae4 	.word	0x00011ae4
    3d88:	00011a18 	.word	0x00011a18
    3d8c:	00011aec 	.word	0x00011aec
    3d90:	0001194c 	.word	0x0001194c
    3d94:	40024000 	.word	0x40024000
    3d98:	1fff0c88 	.word	0x1fff0c88
    3d9c:	00011904 	.word	0x00011904
    3da0:	00011af8 	.word	0x00011af8
    3da4:	00011a54 	.word	0x00011a54
    3da8:	000119f8 	.word	0x000119f8
    3dac:	00011a08 	.word	0x00011a08
    3db0:	00011a1c 	.word	0x00011a1c
    3db4:	00011a30 	.word	0x00011a30
    3db8:	00011a68 	.word	0x00011a68
    3dbc:	000119e4 	.word	0x000119e4
    3dc0:	00011a78 	.word	0x00011a78
    3dc4:	00011a40 	.word	0x00011a40
    3dc8:	00011a8c 	.word	0x00011a8c
    3dcc:	2104      	movs	r1, #4
    3dce:	487d      	ldr	r0, [pc, #500]	; (3fc4 <setup+0xa80>)
    3dd0:	f006 f9c8 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3dd4:	4651      	mov	r1, sl
    3dd6:	2300      	movs	r3, #0
    3dd8:	220a      	movs	r2, #10
    3dda:	487b      	ldr	r0, [pc, #492]	; (3fc8 <setup+0xa84>)
    3ddc:	f005 f80a 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3de0:	2112      	movs	r1, #18
    3de2:	487a      	ldr	r0, [pc, #488]	; (3fcc <setup+0xa88>)
    3de4:	f006 f9be 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3de8:	4877      	ldr	r0, [pc, #476]	; (3fc8 <setup+0xa84>)
    3dea:	f004 ffdd 	bl	8da8 <Print::println()>
    3dee:	e597      	b.n	3920 <setup+0x3dc>
    3df0:	2104      	movs	r1, #4
    3df2:	4874      	ldr	r0, [pc, #464]	; (3fc4 <setup+0xa80>)
    3df4:	f006 f9b6 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3df8:	4651      	mov	r1, sl
    3dfa:	2300      	movs	r3, #0
    3dfc:	220a      	movs	r2, #10
    3dfe:	4872      	ldr	r0, [pc, #456]	; (3fc8 <setup+0xa84>)
    3e00:	f004 fff8 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3e04:	2111      	movs	r1, #17
    3e06:	4872      	ldr	r0, [pc, #456]	; (3fd0 <setup+0xa8c>)
    3e08:	f006 f9ac 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3e0c:	486e      	ldr	r0, [pc, #440]	; (3fc8 <setup+0xa84>)
    3e0e:	f004 ffcb 	bl	8da8 <Print::println()>
    3e12:	e585      	b.n	3920 <setup+0x3dc>
    3e14:	2104      	movs	r1, #4
    3e16:	486b      	ldr	r0, [pc, #428]	; (3fc4 <setup+0xa80>)
    3e18:	f006 f9a4 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3e1c:	220a      	movs	r2, #10
    3e1e:	4651      	mov	r1, sl
    3e20:	2300      	movs	r3, #0
    3e22:	4869      	ldr	r0, [pc, #420]	; (3fc8 <setup+0xa84>)
    3e24:	f004 ffe6 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3e28:	210f      	movs	r1, #15
    3e2a:	486a      	ldr	r0, [pc, #424]	; (3fd4 <setup+0xa90>)
    3e2c:	f006 f99a 	bl	a164 <usb_serial_write>
    3e30:	f8d9 3000 	ldr.w	r3, [r9]
    3e34:	0298      	lsls	r0, r3, #10
    3e36:	bf4c      	ite	mi
    3e38:	4867      	ldrmi	r0, [pc, #412]	; (3fd8 <setup+0xa94>)
    3e3a:	4868      	ldrpl	r0, [pc, #416]	; (3fdc <setup+0xa98>)
    3e3c:	2111      	movs	r1, #17
    3e3e:	f006 f991 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3e42:	4861      	ldr	r0, [pc, #388]	; (3fc8 <setup+0xa84>)
    3e44:	f004 ffb0 	bl	8da8 <Print::println()>
    3e48:	e56a      	b.n	3920 <setup+0x3dc>
    3e4a:	2104      	movs	r1, #4
    3e4c:	485d      	ldr	r0, [pc, #372]	; (3fc4 <setup+0xa80>)
    3e4e:	f006 f989 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3e52:	4651      	mov	r1, sl
    3e54:	2300      	movs	r3, #0
    3e56:	220a      	movs	r2, #10
    3e58:	485b      	ldr	r0, [pc, #364]	; (3fc8 <setup+0xa84>)
    3e5a:	f004 ffcb 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3e5e:	210e      	movs	r1, #14
    3e60:	485f      	ldr	r0, [pc, #380]	; (3fe0 <setup+0xa9c>)
    3e62:	f006 f97f 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3e66:	4858      	ldr	r0, [pc, #352]	; (3fc8 <setup+0xa84>)
    3e68:	f004 ff9e 	bl	8da8 <Print::println()>
    3e6c:	e558      	b.n	3920 <setup+0x3dc>
    3e6e:	2104      	movs	r1, #4
    3e70:	4854      	ldr	r0, [pc, #336]	; (3fc4 <setup+0xa80>)
    3e72:	f006 f977 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3e76:	4651      	mov	r1, sl
    3e78:	2300      	movs	r3, #0
    3e7a:	220a      	movs	r2, #10
    3e7c:	4852      	ldr	r0, [pc, #328]	; (3fc8 <setup+0xa84>)
    3e7e:	f004 ffb9 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3e82:	210e      	movs	r1, #14
    3e84:	4857      	ldr	r0, [pc, #348]	; (3fe4 <setup+0xaa0>)
    3e86:	f006 f96d 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3e8a:	484f      	ldr	r0, [pc, #316]	; (3fc8 <setup+0xa84>)
    3e8c:	f004 ff8c 	bl	8da8 <Print::println()>
    3e90:	e546      	b.n	3920 <setup+0x3dc>
    3e92:	2104      	movs	r1, #4
    3e94:	484b      	ldr	r0, [pc, #300]	; (3fc4 <setup+0xa80>)
    3e96:	f006 f965 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3e9a:	4651      	mov	r1, sl
    3e9c:	2300      	movs	r3, #0
    3e9e:	220a      	movs	r2, #10
    3ea0:	4849      	ldr	r0, [pc, #292]	; (3fc8 <setup+0xa84>)
    3ea2:	f004 ffa7 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3ea6:	2112      	movs	r1, #18
    3ea8:	484f      	ldr	r0, [pc, #316]	; (3fe8 <setup+0xaa4>)
    3eaa:	f006 f95b 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3eae:	4846      	ldr	r0, [pc, #280]	; (3fc8 <setup+0xa84>)
    3eb0:	f004 ff7a 	bl	8da8 <Print::println()>
    3eb4:	e534      	b.n	3920 <setup+0x3dc>
    3eb6:	2111      	movs	r1, #17
    3eb8:	484c      	ldr	r0, [pc, #304]	; (3fec <setup+0xaa8>)
    3eba:	f006 f953 	bl	a164 <usb_serial_write>
    Serial.print("FIFO Enabled --> "); ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IFLAG1_BUF5I ) ? Serial.println("Interrupt Enabled") : Serial.println("Interrupt Disabled");
    3ebe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3ec0:	0699      	lsls	r1, r3, #26
    3ec2:	bf4b      	itete	mi
    3ec4:	2111      	movmi	r1, #17
    3ec6:	2112      	movpl	r1, #18
    3ec8:	4849      	ldrmi	r0, [pc, #292]	; (3ff0 <setup+0xaac>)
    3eca:	484a      	ldrpl	r0, [pc, #296]	; (3ff4 <setup+0xab0>)
    3ecc:	f006 f94a 	bl	a164 <usb_serial_write>
    3ed0:	483d      	ldr	r0, [pc, #244]	; (3fc8 <setup+0xa84>)
    3ed2:	f004 ff69 	bl	8da8 <Print::println()>
    3ed6:	2116      	movs	r1, #22
    3ed8:	4847      	ldr	r0, [pc, #284]	; (3ff8 <setup+0xab4>)
    3eda:	f006 f943 	bl	a164 <usb_serial_write>
    uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
    3ede:	4947      	ldr	r1, [pc, #284]	; (3ffc <setup+0xab8>)
    3ee0:	680c      	ldr	r4, [r1, #0]
    3ee2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    3ee4:	680a      	ldr	r2, [r1, #0]
    3ee6:	6b49      	ldr	r1, [r1, #52]	; 0x34
    3ee8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3eec:	f3c1 6103 	ubfx	r1, r1, #24, #4
    3ef0:	3201      	adds	r2, #1
    3ef2:	3104      	adds	r1, #4
    3ef4:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
    3ef8:	f0c0 8416 	bcc.w	4728 <setup+0x11e4>
    uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
    3efc:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    3f00:	f3c3 6303 	ubfx	r3, r3, #24, #4
    3f04:	3c05      	subs	r4, #5
    3f06:	3301      	adds	r3, #1
    3f08:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
    Serial.println(constrain((uint8_t)(FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes), 0, 32));
    3f0c:	b2e5      	uxtb	r5, r4
    3f0e:	4f3b      	ldr	r7, [pc, #236]	; (3ffc <setup+0xab8>)
	size_t print(int n)				{ return print((long)n); }
    3f10:	482d      	ldr	r0, [pc, #180]	; (3fc8 <setup+0xa84>)
    3f12:	6839      	ldr	r1, [r7, #0]
    3f14:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    3f18:	3101      	adds	r1, #1
    3f1a:	1b49      	subs	r1, r1, r5
    3f1c:	b2c9      	uxtb	r1, r1
    3f1e:	2920      	cmp	r1, #32
    3f20:	bfa8      	it	ge
    3f22:	2120      	movge	r1, #32
    3f24:	f004 ff38 	bl	8d98 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    3f28:	4827      	ldr	r0, [pc, #156]	; (3fc8 <setup+0xa84>)
    3f2a:	f004 ff3d 	bl	8da8 <Print::println()>
    3f2e:	2116      	movs	r1, #22
    3f30:	4833      	ldr	r0, [pc, #204]	; (4000 <setup+0xabc>)
    3f32:	f006 f917 	bl	a164 <usb_serial_write>
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    3f36:	683b      	ldr	r3, [r7, #0]
    3f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    3f3a:	4823      	ldr	r0, [pc, #140]	; (3fc8 <setup+0xa84>)
    3f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3f40:	f3c2 6203 	ubfx	r2, r2, #24, #4
    3f44:	3301      	adds	r3, #1
    3f46:	3204      	adds	r2, #4
    3f48:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    3f4c:	bf38      	it	cc
    3f4e:	2400      	movcc	r4, #0
    3f50:	f04f 0300 	mov.w	r3, #0
    3f54:	4621      	mov	r1, r4
    3f56:	f04f 020a 	mov.w	r2, #10
    3f5a:	bf38      	it	cc
    3f5c:	4625      	movcc	r5, r4
    3f5e:	f004 ff49 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    3f62:	4819      	ldr	r0, [pc, #100]	; (3fc8 <setup+0xa84>)
    3f64:	f004 ff20 	bl	8da8 <Print::println()>
    for ( uint8_t i = FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    3f68:	4b24      	ldr	r3, [pc, #144]	; (3ffc <setup+0xab8>)
    3f6a:	681c      	ldr	r4, [r3, #0]
    3f6c:	681b      	ldr	r3, [r3, #0]
    3f6e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    3f72:	3401      	adds	r4, #1
    3f74:	1b64      	subs	r4, r4, r5
    3f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3f7a:	b2e4      	uxtb	r4, r4
    3f7c:	3301      	adds	r3, #1
    3f7e:	429c      	cmp	r4, r3
    3f80:	f4bf acd9 	bcs.w	3936 <setup+0x3f2>
      switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    3f84:	4d1f      	ldr	r5, [pc, #124]	; (4004 <setup+0xac0>)
            dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    3f86:	f8df 8084 	ldr.w	r8, [pc, #132]	; 400c <setup+0xac8>
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    3f8a:	4f1f      	ldr	r7, [pc, #124]	; (4008 <setup+0xac4>)
      switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    3f8c:	eb04 0905 	add.w	r9, r4, r5
    3f90:	ea4f 1909 	mov.w	r9, r9, lsl #4
    3f94:	f8d9 3000 	ldr.w	r3, [r9]
    3f98:	f3c3 6303 	ubfx	r3, r3, #24, #4
    3f9c:	2b0e      	cmp	r3, #14
    3f9e:	f200 80c4 	bhi.w	412a <setup+0xbe6>
    3fa2:	e8df f013 	tbh	[pc, r3, lsl #1]
    3fa6:	0167      	.short	0x0167
    3fa8:	01430155 	.word	0x01430155
    3fac:	012800c2 	.word	0x012800c2
    3fb0:	011600c2 	.word	0x011600c2
    3fb4:	010400c2 	.word	0x010400c2
    3fb8:	00e000f2 	.word	0x00e000f2
    3fbc:	003500c2 	.word	0x003500c2
    3fc0:	00ce00c2 	.word	0x00ce00c2
    3fc4:	000119dc 	.word	0x000119dc
    3fc8:	1fff0e64 	.word	0x1fff0e64
    3fcc:	00011a78 	.word	0x00011a78
    3fd0:	00011a40 	.word	0x00011a40
    3fd4:	000119f8 	.word	0x000119f8
    3fd8:	00011a08 	.word	0x00011a08
    3fdc:	00011a1c 	.word	0x00011a1c
    3fe0:	00011a30 	.word	0x00011a30
    3fe4:	00011a68 	.word	0x00011a68
    3fe8:	000119e4 	.word	0x000119e4
    3fec:	00011970 	.word	0x00011970
    3ff0:	00011984 	.word	0x00011984
    3ff4:	00011998 	.word	0x00011998
    3ff8:	000119ac 	.word	0x000119ac
    3ffc:	400a4000 	.word	0x400a4000
    4000:	000119c4 	.word	0x000119c4
    4004:	0400a408 	.word	0x0400a408
    4008:	bff5bf80 	.word	0xbff5bf80
    400c:	400a408c 	.word	0x400a408c
    4010:	2104      	movs	r1, #4
    4012:	48a4      	ldr	r0, [pc, #656]	; (42a4 <setup+0xd60>)
    4014:	f006 f8a6 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4018:	2300      	movs	r3, #0
    401a:	220a      	movs	r2, #10
    401c:	4621      	mov	r1, r4
    401e:	48a2      	ldr	r0, [pc, #648]	; (42a8 <setup+0xd64>)
    4020:	f004 fee8 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    4024:	48a1      	ldr	r0, [pc, #644]	; (42ac <setup+0xd68>)
    4026:	211d      	movs	r1, #29
    4028:	f006 f89c 	bl	a164 <usb_serial_write>
            uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
    402c:	f8d9 3000 	ldr.w	r3, [r9]
            (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
    4030:	029b      	lsls	r3, r3, #10
    4032:	f100 8389 	bmi.w	4748 <setup+0x1204>
    4036:	489e      	ldr	r0, [pc, #632]	; (42b0 <setup+0xd6c>)
    4038:	2110      	movs	r1, #16
    403a:	f006 f893 	bl	a164 <usb_serial_write>
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    403e:	f8d9 b008 	ldr.w	fp, [r9, #8]
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    4042:	f8d9 3004 	ldr.w	r3, [r9, #4]
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    4046:	44b9      	add	r9, r7
            if (!extid) id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    4048:	f3c3 4a8a 	ubfx	sl, r3, #18, #11
    404c:	2107      	movs	r1, #7
    404e:	4899      	ldr	r0, [pc, #612]	; (42b4 <setup+0xd70>)
    4050:	f006 f888 	bl	a164 <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    4054:	2300      	movs	r3, #0
    4056:	2210      	movs	r2, #16
    4058:	4651      	mov	r1, sl
    405a:	4893      	ldr	r0, [pc, #588]	; (42a8 <setup+0xd64>)
    405c:	f004 feca 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    4060:	2101      	movs	r1, #1
    4062:	4895      	ldr	r0, [pc, #596]	; (42b8 <setup+0xd74>)
    4064:	f006 f87e 	bl	a164 <usb_serial_write>
    4068:	210a      	movs	r1, #10
    406a:	4894      	ldr	r0, [pc, #592]	; (42bc <setup+0xd78>)
    406c:	f006 f87a 	bl	a164 <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    4070:	2300      	movs	r3, #0
    4072:	2210      	movs	r2, #16
    4074:	ea4f 611b 	mov.w	r1, fp, lsr #24
    4078:	488b      	ldr	r0, [pc, #556]	; (42a8 <setup+0xd64>)
    407a:	f004 febb 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    407e:	2101      	movs	r1, #1
    4080:	488f      	ldr	r0, [pc, #572]	; (42c0 <setup+0xd7c>)
    4082:	f006 f86f 	bl	a164 <usb_serial_write>
    4086:	2300      	movs	r3, #0
    4088:	2210      	movs	r2, #16
    408a:	f3cb 4107 	ubfx	r1, fp, #16, #8
    408e:	4886      	ldr	r0, [pc, #536]	; (42a8 <setup+0xd64>)
    4090:	f004 feb0 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    4094:	2101      	movs	r1, #1
    4096:	488a      	ldr	r0, [pc, #552]	; (42c0 <setup+0xd7c>)
    4098:	f006 f864 	bl	a164 <usb_serial_write>
    409c:	2300      	movs	r3, #0
    409e:	2210      	movs	r2, #16
    40a0:	f3cb 2107 	ubfx	r1, fp, #8, #8
    40a4:	4880      	ldr	r0, [pc, #512]	; (42a8 <setup+0xd64>)
    40a6:	f004 fea5 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    40aa:	2101      	movs	r1, #1
    40ac:	4884      	ldr	r0, [pc, #528]	; (42c0 <setup+0xd7c>)
    40ae:	f006 f859 	bl	a164 <usb_serial_write>
    40b2:	2300      	movs	r3, #0
    40b4:	2210      	movs	r2, #16
    40b6:	fa5f f18b 	uxtb.w	r1, fp
    40ba:	487b      	ldr	r0, [pc, #492]	; (42a8 <setup+0xd64>)
    40bc:	f004 fe9a 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    40c0:	f859 9008 	ldr.w	r9, [r9, r8]
    40c4:	487e      	ldr	r0, [pc, #504]	; (42c0 <setup+0xd7c>)
    40c6:	2101      	movs	r1, #1
    40c8:	f006 f84c 	bl	a164 <usb_serial_write>
    40cc:	2300      	movs	r3, #0
    40ce:	2210      	movs	r2, #16
    40d0:	ea4f 6119 	mov.w	r1, r9, lsr #24
    40d4:	4874      	ldr	r0, [pc, #464]	; (42a8 <setup+0xd64>)
    40d6:	f004 fe8d 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    40da:	2101      	movs	r1, #1
    40dc:	4878      	ldr	r0, [pc, #480]	; (42c0 <setup+0xd7c>)
    40de:	f006 f841 	bl	a164 <usb_serial_write>
    40e2:	2300      	movs	r3, #0
    40e4:	2210      	movs	r2, #16
    40e6:	f3c9 4107 	ubfx	r1, r9, #16, #8
    40ea:	486f      	ldr	r0, [pc, #444]	; (42a8 <setup+0xd64>)
    40ec:	f004 fe82 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    40f0:	2101      	movs	r1, #1
    40f2:	4873      	ldr	r0, [pc, #460]	; (42c0 <setup+0xd7c>)
    40f4:	f006 f836 	bl	a164 <usb_serial_write>
    40f8:	2300      	movs	r3, #0
    40fa:	2210      	movs	r2, #16
    40fc:	f3c9 2107 	ubfx	r1, r9, #8, #8
    4100:	4869      	ldr	r0, [pc, #420]	; (42a8 <setup+0xd64>)
    4102:	f004 fe77 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    4106:	2101      	movs	r1, #1
    4108:	486d      	ldr	r0, [pc, #436]	; (42c0 <setup+0xd7c>)
    410a:	f006 f82b 	bl	a164 <usb_serial_write>
    410e:	fa5f f189 	uxtb.w	r1, r9
    4112:	2300      	movs	r3, #0
    4114:	2210      	movs	r2, #16
    4116:	4864      	ldr	r0, [pc, #400]	; (42a8 <setup+0xd64>)
    4118:	f004 fe6c 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    411c:	4866      	ldr	r0, [pc, #408]	; (42b8 <setup+0xd74>)
    411e:	2101      	movs	r1, #1
    4120:	f006 f820 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4124:	4860      	ldr	r0, [pc, #384]	; (42a8 <setup+0xd64>)
    4126:	f004 fe3f 	bl	8da8 <Print::println()>
    for ( uint8_t i = FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    412a:	4b66      	ldr	r3, [pc, #408]	; (42c4 <setup+0xd80>)
    412c:	681b      	ldr	r3, [r3, #0]
    412e:	3401      	adds	r4, #1
    4130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4134:	b2e4      	uxtb	r4, r4
    4136:	3301      	adds	r3, #1
    4138:	429c      	cmp	r4, r3
    413a:	f4ff af27 	bcc.w	3f8c <setup+0xa48>
    413e:	f7ff bbfa 	b.w	3936 <setup+0x3f2>
    4142:	2104      	movs	r1, #4
    4144:	4857      	ldr	r0, [pc, #348]	; (42a4 <setup+0xd60>)
    4146:	f006 f80d 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    414a:	2300      	movs	r3, #0
    414c:	220a      	movs	r2, #10
    414e:	4621      	mov	r1, r4
    4150:	4855      	ldr	r0, [pc, #340]	; (42a8 <setup+0xd64>)
    4152:	f004 fe4f 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    4156:	2111      	movs	r1, #17
    4158:	485b      	ldr	r0, [pc, #364]	; (42c8 <setup+0xd84>)
    415a:	f006 f803 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    415e:	4852      	ldr	r0, [pc, #328]	; (42a8 <setup+0xd64>)
    4160:	f004 fe22 	bl	8da8 <Print::println()>
    4164:	e7e1      	b.n	412a <setup+0xbe6>
    4166:	2104      	movs	r1, #4
    4168:	484e      	ldr	r0, [pc, #312]	; (42a4 <setup+0xd60>)
    416a:	f005 fffb 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    416e:	2300      	movs	r3, #0
    4170:	220a      	movs	r2, #10
    4172:	4621      	mov	r1, r4
    4174:	484c      	ldr	r0, [pc, #304]	; (42a8 <setup+0xd64>)
    4176:	f004 fe3d 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    417a:	2111      	movs	r1, #17
    417c:	4853      	ldr	r0, [pc, #332]	; (42cc <setup+0xd88>)
    417e:	f005 fff1 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4182:	4849      	ldr	r0, [pc, #292]	; (42a8 <setup+0xd64>)
    4184:	f004 fe10 	bl	8da8 <Print::println()>
    4188:	e7cf      	b.n	412a <setup+0xbe6>
    418a:	2104      	movs	r1, #4
    418c:	4845      	ldr	r0, [pc, #276]	; (42a4 <setup+0xd60>)
    418e:	f005 ffe9 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4192:	2300      	movs	r3, #0
    4194:	220a      	movs	r2, #10
    4196:	4621      	mov	r1, r4
    4198:	4843      	ldr	r0, [pc, #268]	; (42a8 <setup+0xd64>)
    419a:	f004 fe2b 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    419e:	210f      	movs	r1, #15
    41a0:	484b      	ldr	r0, [pc, #300]	; (42d0 <setup+0xd8c>)
    41a2:	f005 ffdf 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    41a6:	4840      	ldr	r0, [pc, #256]	; (42a8 <setup+0xd64>)
    41a8:	f004 fdfe 	bl	8da8 <Print::println()>
    41ac:	e7bd      	b.n	412a <setup+0xbe6>
    41ae:	2104      	movs	r1, #4
    41b0:	483c      	ldr	r0, [pc, #240]	; (42a4 <setup+0xd60>)
    41b2:	f005 ffd7 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    41b6:	2300      	movs	r3, #0
    41b8:	220a      	movs	r2, #10
    41ba:	4621      	mov	r1, r4
    41bc:	483a      	ldr	r0, [pc, #232]	; (42a8 <setup+0xd64>)
    41be:	f004 fe19 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    41c2:	2112      	movs	r1, #18
    41c4:	4843      	ldr	r0, [pc, #268]	; (42d4 <setup+0xd90>)
    41c6:	f005 ffcd 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    41ca:	4837      	ldr	r0, [pc, #220]	; (42a8 <setup+0xd64>)
    41cc:	f004 fdec 	bl	8da8 <Print::println()>
    41d0:	e7ab      	b.n	412a <setup+0xbe6>
    41d2:	2104      	movs	r1, #4
    41d4:	4833      	ldr	r0, [pc, #204]	; (42a4 <setup+0xd60>)
    41d6:	f005 ffc5 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    41da:	2300      	movs	r3, #0
    41dc:	220a      	movs	r2, #10
    41de:	4621      	mov	r1, r4
    41e0:	4831      	ldr	r0, [pc, #196]	; (42a8 <setup+0xd64>)
    41e2:	f004 fe07 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    41e6:	2111      	movs	r1, #17
    41e8:	483b      	ldr	r0, [pc, #236]	; (42d8 <setup+0xd94>)
    41ea:	f005 ffbb 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    41ee:	482e      	ldr	r0, [pc, #184]	; (42a8 <setup+0xd64>)
    41f0:	f004 fdda 	bl	8da8 <Print::println()>
    41f4:	e799      	b.n	412a <setup+0xbe6>
    41f6:	2104      	movs	r1, #4
    41f8:	482a      	ldr	r0, [pc, #168]	; (42a4 <setup+0xd60>)
    41fa:	f005 ffb3 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    41fe:	220a      	movs	r2, #10
    4200:	2300      	movs	r3, #0
    4202:	4621      	mov	r1, r4
    4204:	4828      	ldr	r0, [pc, #160]	; (42a8 <setup+0xd64>)
    4206:	f004 fdf5 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    420a:	210f      	movs	r1, #15
    420c:	4833      	ldr	r0, [pc, #204]	; (42dc <setup+0xd98>)
    420e:	f005 ffa9 	bl	a164 <usb_serial_write>
            (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE) ? Serial.println("\t(Extended Frame)") : Serial.println("\t(Standard Frame)");
    4212:	f8d9 3000 	ldr.w	r3, [r9]
    4216:	029a      	lsls	r2, r3, #10
    4218:	bf4c      	ite	mi
    421a:	4831      	ldrmi	r0, [pc, #196]	; (42e0 <setup+0xd9c>)
    421c:	4831      	ldrpl	r0, [pc, #196]	; (42e4 <setup+0xda0>)
    421e:	2111      	movs	r1, #17
    4220:	f005 ffa0 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4224:	4820      	ldr	r0, [pc, #128]	; (42a8 <setup+0xd64>)
    4226:	f004 fdbf 	bl	8da8 <Print::println()>
    422a:	e77e      	b.n	412a <setup+0xbe6>
    422c:	2104      	movs	r1, #4
    422e:	481d      	ldr	r0, [pc, #116]	; (42a4 <setup+0xd60>)
    4230:	f005 ff98 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4234:	2300      	movs	r3, #0
    4236:	220a      	movs	r2, #10
    4238:	4621      	mov	r1, r4
    423a:	481b      	ldr	r0, [pc, #108]	; (42a8 <setup+0xd64>)
    423c:	f004 fdda 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    4240:	210e      	movs	r1, #14
    4242:	4829      	ldr	r0, [pc, #164]	; (42e8 <setup+0xda4>)
    4244:	f005 ff8e 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4248:	4817      	ldr	r0, [pc, #92]	; (42a8 <setup+0xd64>)
    424a:	f004 fdad 	bl	8da8 <Print::println()>
    424e:	e76c      	b.n	412a <setup+0xbe6>
    4250:	2104      	movs	r1, #4
    4252:	4814      	ldr	r0, [pc, #80]	; (42a4 <setup+0xd60>)
    4254:	f005 ff86 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4258:	2300      	movs	r3, #0
    425a:	220a      	movs	r2, #10
    425c:	4621      	mov	r1, r4
    425e:	4812      	ldr	r0, [pc, #72]	; (42a8 <setup+0xd64>)
    4260:	f004 fdc8 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    4264:	210e      	movs	r1, #14
    4266:	4821      	ldr	r0, [pc, #132]	; (42ec <setup+0xda8>)
    4268:	f005 ff7c 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    426c:	480e      	ldr	r0, [pc, #56]	; (42a8 <setup+0xd64>)
    426e:	f004 fd9b 	bl	8da8 <Print::println()>
    4272:	e75a      	b.n	412a <setup+0xbe6>
    4274:	2104      	movs	r1, #4
    4276:	480b      	ldr	r0, [pc, #44]	; (42a4 <setup+0xd60>)
    4278:	f005 ff74 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    427c:	2300      	movs	r3, #0
    427e:	220a      	movs	r2, #10
    4280:	4621      	mov	r1, r4
    4282:	4809      	ldr	r0, [pc, #36]	; (42a8 <setup+0xd64>)
    4284:	f004 fdb6 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    4288:	2112      	movs	r1, #18
    428a:	4819      	ldr	r0, [pc, #100]	; (42f0 <setup+0xdac>)
    428c:	f005 ff6a 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4290:	4805      	ldr	r0, [pc, #20]	; (42a8 <setup+0xd64>)
    4292:	f004 fd89 	bl	8da8 <Print::println()>
    4296:	e748      	b.n	412a <setup+0xbe6>
  if ( fifo_was_cleared ) enableFIFO();
    4298:	2001      	movs	r0, #1
    429a:	f7fc fb6b 	bl	974 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
    429e:	f7ff ba30 	b.w	3702 <setup+0x1be>
    42a2:	bf00      	nop
    42a4:	000119dc 	.word	0x000119dc
    42a8:	1fff0e64 	.word	0x1fff0e64
    42ac:	00011a9c 	.word	0x00011a9c
    42b0:	00011ad0 	.word	0x00011ad0
    42b4:	00011ae4 	.word	0x00011ae4
    42b8:	00011a18 	.word	0x00011a18
    42bc:	00011aec 	.word	0x00011aec
    42c0:	0001194c 	.word	0x0001194c
    42c4:	400a4000 	.word	0x400a4000
    42c8:	00011af8 	.word	0x00011af8
    42cc:	00011a54 	.word	0x00011a54
    42d0:	00011a8c 	.word	0x00011a8c
    42d4:	00011a78 	.word	0x00011a78
    42d8:	00011a40 	.word	0x00011a40
    42dc:	000119f8 	.word	0x000119f8
    42e0:	00011a08 	.word	0x00011a08
    42e4:	00011a1c 	.word	0x00011a1c
    42e8:	00011a30 	.word	0x00011a30
    42ec:	00011a68 	.word	0x00011a68
    42f0:	000119e4 	.word	0x000119e4
    42f4:	2111      	movs	r1, #17
    42f6:	48bc      	ldr	r0, [pc, #752]	; (45e8 <setup+0x10a4>)
    42f8:	f005 ff34 	bl	a164 <usb_serial_write>
    Serial.print("FIFO Enabled --> "); ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IFLAG1_BUF5I ) ? Serial.println("Interrupt Enabled") : Serial.println("Interrupt Disabled");
    42fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    42fe:	069c      	lsls	r4, r3, #26
    4300:	bf4b      	itete	mi
    4302:	2111      	movmi	r1, #17
    4304:	2112      	movpl	r1, #18
    4306:	48b9      	ldrmi	r0, [pc, #740]	; (45ec <setup+0x10a8>)
    4308:	48b9      	ldrpl	r0, [pc, #740]	; (45f0 <setup+0x10ac>)
    430a:	f005 ff2b 	bl	a164 <usb_serial_write>
    430e:	48b9      	ldr	r0, [pc, #740]	; (45f4 <setup+0x10b0>)
    4310:	f004 fd4a 	bl	8da8 <Print::println()>
    4314:	2116      	movs	r1, #22
    4316:	48b8      	ldr	r0, [pc, #736]	; (45f8 <setup+0x10b4>)
    4318:	f005 ff24 	bl	a164 <usb_serial_write>
    uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
    431c:	49b7      	ldr	r1, [pc, #732]	; (45fc <setup+0x10b8>)
    431e:	680c      	ldr	r4, [r1, #0]
    4320:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    4322:	680a      	ldr	r2, [r1, #0]
    4324:	6b49      	ldr	r1, [r1, #52]	; 0x34
    4326:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    432a:	f3c1 6103 	ubfx	r1, r1, #24, #4
    432e:	3201      	adds	r2, #1
    4330:	3104      	adds	r1, #4
    4332:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
    4336:	f0c0 81f4 	bcc.w	4722 <setup+0x11de>
    uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
    433a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    433e:	f3c3 6303 	ubfx	r3, r3, #24, #4
    4342:	3c05      	subs	r4, #5
    4344:	3301      	adds	r3, #1
    4346:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
    Serial.println(constrain((uint8_t)(FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes), 0, 32));
    434a:	b2e5      	uxtb	r5, r4
    434c:	4eab      	ldr	r6, [pc, #684]	; (45fc <setup+0x10b8>)
	size_t print(int n)				{ return print((long)n); }
    434e:	48a9      	ldr	r0, [pc, #676]	; (45f4 <setup+0x10b0>)
    4350:	6831      	ldr	r1, [r6, #0]
    4352:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    4356:	3101      	adds	r1, #1
    4358:	1b49      	subs	r1, r1, r5
    435a:	b2c9      	uxtb	r1, r1
    435c:	2920      	cmp	r1, #32
    435e:	bfa8      	it	ge
    4360:	2120      	movge	r1, #32
    4362:	f004 fd19 	bl	8d98 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4366:	48a3      	ldr	r0, [pc, #652]	; (45f4 <setup+0x10b0>)
    4368:	f004 fd1e 	bl	8da8 <Print::println()>
    436c:	2116      	movs	r1, #22
    436e:	48a4      	ldr	r0, [pc, #656]	; (4600 <setup+0x10bc>)
    4370:	f005 fef8 	bl	a164 <usb_serial_write>
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    4374:	6833      	ldr	r3, [r6, #0]
    4376:	6b72      	ldr	r2, [r6, #52]	; 0x34
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4378:	489e      	ldr	r0, [pc, #632]	; (45f4 <setup+0x10b0>)
    437a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    437e:	f3c2 6203 	ubfx	r2, r2, #24, #4
    4382:	3301      	adds	r3, #1
    4384:	3204      	adds	r2, #4
    4386:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    438a:	bf38      	it	cc
    438c:	2400      	movcc	r4, #0
    438e:	f04f 0300 	mov.w	r3, #0
    4392:	4621      	mov	r1, r4
    4394:	f04f 020a 	mov.w	r2, #10
    4398:	bf38      	it	cc
    439a:	4625      	movcc	r5, r4
    439c:	f004 fd2a 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    43a0:	4894      	ldr	r0, [pc, #592]	; (45f4 <setup+0x10b0>)
    43a2:	f004 fd01 	bl	8da8 <Print::println()>
    for ( uint8_t i = FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    43a6:	4b95      	ldr	r3, [pc, #596]	; (45fc <setup+0x10b8>)
    43a8:	681c      	ldr	r4, [r3, #0]
    43aa:	681b      	ldr	r3, [r3, #0]
    43ac:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    43b0:	3401      	adds	r4, #1
    43b2:	1b64      	subs	r4, r4, r5
    43b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    43b8:	b2e4      	uxtb	r4, r4
    43ba:	3301      	adds	r3, #1
    43bc:	42a3      	cmp	r3, r4
    43be:	f67f abe1 	bls.w	3b84 <setup+0x640>
      switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    43c2:	4d90      	ldr	r5, [pc, #576]	; (4604 <setup+0x10c0>)
            dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    43c4:	4f90      	ldr	r7, [pc, #576]	; (4608 <setup+0x10c4>)
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    43c6:	4e91      	ldr	r6, [pc, #580]	; (460c <setup+0x10c8>)
      switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    43c8:	eb04 0805 	add.w	r8, r4, r5
    43cc:	ea4f 1808 	mov.w	r8, r8, lsl #4
    43d0:	f8d8 3000 	ldr.w	r3, [r8]
    43d4:	f3c3 6303 	ubfx	r3, r3, #24, #4
    43d8:	2b0e      	cmp	r3, #14
    43da:	f200 809e 	bhi.w	451a <setup+0xfd6>
    43de:	e8df f013 	tbh	[pc, r3, lsl #1]
    43e2:	016e      	.short	0x016e
    43e4:	014a015c 	.word	0x014a015c
    43e8:	012f009c 	.word	0x012f009c
    43ec:	00f0009c 	.word	0x00f0009c
    43f0:	00de009c 	.word	0x00de009c
    43f4:	00ba00cc 	.word	0x00ba00cc
    43f8:	000f009c 	.word	0x000f009c
    43fc:	00a8009c 	.word	0x00a8009c
    4400:	2104      	movs	r1, #4
    4402:	4883      	ldr	r0, [pc, #524]	; (4610 <setup+0x10cc>)
    4404:	f005 feae 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4408:	2300      	movs	r3, #0
    440a:	220a      	movs	r2, #10
    440c:	4621      	mov	r1, r4
    440e:	4879      	ldr	r0, [pc, #484]	; (45f4 <setup+0x10b0>)
    4410:	f004 fcf0 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    4414:	211d      	movs	r1, #29
    4416:	487f      	ldr	r0, [pc, #508]	; (4614 <setup+0x10d0>)
    4418:	f005 fea4 	bl	a164 <usb_serial_write>
            uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
    441c:	f8d8 3000 	ldr.w	r3, [r8]
            (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
    4420:	0299      	lsls	r1, r3, #10
    4422:	f100 8185 	bmi.w	4730 <setup+0x11ec>
    4426:	487c      	ldr	r0, [pc, #496]	; (4618 <setup+0x10d4>)
    4428:	2110      	movs	r1, #16
    442a:	f005 fe9b 	bl	a164 <usb_serial_write>
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    442e:	f8d8 a008 	ldr.w	sl, [r8, #8]
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    4432:	f8d8 3004 	ldr.w	r3, [r8, #4]
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    4436:	44b0      	add	r8, r6
            if (!extid) id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    4438:	f3c3 498a 	ubfx	r9, r3, #18, #11
    443c:	2107      	movs	r1, #7
    443e:	4877      	ldr	r0, [pc, #476]	; (461c <setup+0x10d8>)
    4440:	f005 fe90 	bl	a164 <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    4444:	2300      	movs	r3, #0
    4446:	2210      	movs	r2, #16
    4448:	4649      	mov	r1, r9
    444a:	486a      	ldr	r0, [pc, #424]	; (45f4 <setup+0x10b0>)
    444c:	f004 fcd2 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    4450:	2101      	movs	r1, #1
    4452:	4873      	ldr	r0, [pc, #460]	; (4620 <setup+0x10dc>)
    4454:	f005 fe86 	bl	a164 <usb_serial_write>
    4458:	210a      	movs	r1, #10
    445a:	4872      	ldr	r0, [pc, #456]	; (4624 <setup+0x10e0>)
    445c:	f005 fe82 	bl	a164 <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    4460:	2300      	movs	r3, #0
    4462:	2210      	movs	r2, #16
    4464:	ea4f 611a 	mov.w	r1, sl, lsr #24
    4468:	4862      	ldr	r0, [pc, #392]	; (45f4 <setup+0x10b0>)
    446a:	f004 fcc3 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    446e:	2101      	movs	r1, #1
    4470:	486d      	ldr	r0, [pc, #436]	; (4628 <setup+0x10e4>)
    4472:	f005 fe77 	bl	a164 <usb_serial_write>
    4476:	2300      	movs	r3, #0
    4478:	2210      	movs	r2, #16
    447a:	f3ca 4107 	ubfx	r1, sl, #16, #8
    447e:	485d      	ldr	r0, [pc, #372]	; (45f4 <setup+0x10b0>)
    4480:	f004 fcb8 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    4484:	2101      	movs	r1, #1
    4486:	4868      	ldr	r0, [pc, #416]	; (4628 <setup+0x10e4>)
    4488:	f005 fe6c 	bl	a164 <usb_serial_write>
    448c:	2300      	movs	r3, #0
    448e:	2210      	movs	r2, #16
    4490:	f3ca 2107 	ubfx	r1, sl, #8, #8
    4494:	4857      	ldr	r0, [pc, #348]	; (45f4 <setup+0x10b0>)
    4496:	f004 fcad 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    449a:	2101      	movs	r1, #1
    449c:	4862      	ldr	r0, [pc, #392]	; (4628 <setup+0x10e4>)
    449e:	f005 fe61 	bl	a164 <usb_serial_write>
    44a2:	2300      	movs	r3, #0
    44a4:	2210      	movs	r2, #16
    44a6:	fa5f f18a 	uxtb.w	r1, sl
    44aa:	4852      	ldr	r0, [pc, #328]	; (45f4 <setup+0x10b0>)
    44ac:	f004 fca2 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    44b0:	f858 8007 	ldr.w	r8, [r8, r7]
    44b4:	485c      	ldr	r0, [pc, #368]	; (4628 <setup+0x10e4>)
    44b6:	2101      	movs	r1, #1
    44b8:	f005 fe54 	bl	a164 <usb_serial_write>
    44bc:	2300      	movs	r3, #0
    44be:	2210      	movs	r2, #16
    44c0:	ea4f 6118 	mov.w	r1, r8, lsr #24
    44c4:	484b      	ldr	r0, [pc, #300]	; (45f4 <setup+0x10b0>)
    44c6:	f004 fc95 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    44ca:	2101      	movs	r1, #1
    44cc:	4856      	ldr	r0, [pc, #344]	; (4628 <setup+0x10e4>)
    44ce:	f005 fe49 	bl	a164 <usb_serial_write>
    44d2:	2300      	movs	r3, #0
    44d4:	2210      	movs	r2, #16
    44d6:	f3c8 4107 	ubfx	r1, r8, #16, #8
    44da:	4846      	ldr	r0, [pc, #280]	; (45f4 <setup+0x10b0>)
    44dc:	f004 fc8a 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    44e0:	2101      	movs	r1, #1
    44e2:	4851      	ldr	r0, [pc, #324]	; (4628 <setup+0x10e4>)
    44e4:	f005 fe3e 	bl	a164 <usb_serial_write>
    44e8:	2300      	movs	r3, #0
    44ea:	2210      	movs	r2, #16
    44ec:	f3c8 2107 	ubfx	r1, r8, #8, #8
    44f0:	4840      	ldr	r0, [pc, #256]	; (45f4 <setup+0x10b0>)
    44f2:	f004 fc7f 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    44f6:	2101      	movs	r1, #1
    44f8:	484b      	ldr	r0, [pc, #300]	; (4628 <setup+0x10e4>)
    44fa:	f005 fe33 	bl	a164 <usb_serial_write>
    44fe:	fa5f f188 	uxtb.w	r1, r8
    4502:	2300      	movs	r3, #0
    4504:	2210      	movs	r2, #16
    4506:	483b      	ldr	r0, [pc, #236]	; (45f4 <setup+0x10b0>)
    4508:	f004 fc74 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    450c:	4844      	ldr	r0, [pc, #272]	; (4620 <setup+0x10dc>)
    450e:	2101      	movs	r1, #1
    4510:	f005 fe28 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4514:	4837      	ldr	r0, [pc, #220]	; (45f4 <setup+0x10b0>)
    4516:	f004 fc47 	bl	8da8 <Print::println()>
    for ( uint8_t i = FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    451a:	4b38      	ldr	r3, [pc, #224]	; (45fc <setup+0x10b8>)
    451c:	681b      	ldr	r3, [r3, #0]
    451e:	3401      	adds	r4, #1
    4520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4524:	b2e4      	uxtb	r4, r4
    4526:	3301      	adds	r3, #1
    4528:	429c      	cmp	r4, r3
    452a:	f4ff af4d 	bcc.w	43c8 <setup+0xe84>
    452e:	f7ff bb29 	b.w	3b84 <setup+0x640>
    4532:	2104      	movs	r1, #4
    4534:	4836      	ldr	r0, [pc, #216]	; (4610 <setup+0x10cc>)
    4536:	f005 fe15 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    453a:	2300      	movs	r3, #0
    453c:	220a      	movs	r2, #10
    453e:	4621      	mov	r1, r4
    4540:	482c      	ldr	r0, [pc, #176]	; (45f4 <setup+0x10b0>)
    4542:	f004 fc57 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    4546:	2111      	movs	r1, #17
    4548:	4838      	ldr	r0, [pc, #224]	; (462c <setup+0x10e8>)
    454a:	f005 fe0b 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    454e:	4829      	ldr	r0, [pc, #164]	; (45f4 <setup+0x10b0>)
    4550:	f004 fc2a 	bl	8da8 <Print::println()>
    4554:	e7e1      	b.n	451a <setup+0xfd6>
    4556:	2104      	movs	r1, #4
    4558:	482d      	ldr	r0, [pc, #180]	; (4610 <setup+0x10cc>)
    455a:	f005 fe03 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    455e:	2300      	movs	r3, #0
    4560:	220a      	movs	r2, #10
    4562:	4621      	mov	r1, r4
    4564:	4823      	ldr	r0, [pc, #140]	; (45f4 <setup+0x10b0>)
    4566:	f004 fc45 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    456a:	2111      	movs	r1, #17
    456c:	4830      	ldr	r0, [pc, #192]	; (4630 <setup+0x10ec>)
    456e:	f005 fdf9 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4572:	4820      	ldr	r0, [pc, #128]	; (45f4 <setup+0x10b0>)
    4574:	f004 fc18 	bl	8da8 <Print::println()>
    4578:	e7cf      	b.n	451a <setup+0xfd6>
    457a:	2104      	movs	r1, #4
    457c:	4824      	ldr	r0, [pc, #144]	; (4610 <setup+0x10cc>)
    457e:	f005 fdf1 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4582:	2300      	movs	r3, #0
    4584:	220a      	movs	r2, #10
    4586:	4621      	mov	r1, r4
    4588:	481a      	ldr	r0, [pc, #104]	; (45f4 <setup+0x10b0>)
    458a:	f004 fc33 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    458e:	210f      	movs	r1, #15
    4590:	4828      	ldr	r0, [pc, #160]	; (4634 <setup+0x10f0>)
    4592:	f005 fde7 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4596:	4817      	ldr	r0, [pc, #92]	; (45f4 <setup+0x10b0>)
    4598:	f004 fc06 	bl	8da8 <Print::println()>
    459c:	e7bd      	b.n	451a <setup+0xfd6>
    459e:	2104      	movs	r1, #4
    45a0:	481b      	ldr	r0, [pc, #108]	; (4610 <setup+0x10cc>)
    45a2:	f005 fddf 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    45a6:	2300      	movs	r3, #0
    45a8:	220a      	movs	r2, #10
    45aa:	4621      	mov	r1, r4
    45ac:	4811      	ldr	r0, [pc, #68]	; (45f4 <setup+0x10b0>)
    45ae:	f004 fc21 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    45b2:	2112      	movs	r1, #18
    45b4:	4820      	ldr	r0, [pc, #128]	; (4638 <setup+0x10f4>)
    45b6:	f005 fdd5 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    45ba:	480e      	ldr	r0, [pc, #56]	; (45f4 <setup+0x10b0>)
    45bc:	f004 fbf4 	bl	8da8 <Print::println()>
    45c0:	e7ab      	b.n	451a <setup+0xfd6>
    45c2:	2104      	movs	r1, #4
    45c4:	4812      	ldr	r0, [pc, #72]	; (4610 <setup+0x10cc>)
    45c6:	f005 fdcd 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    45ca:	2300      	movs	r3, #0
    45cc:	220a      	movs	r2, #10
    45ce:	4621      	mov	r1, r4
    45d0:	4808      	ldr	r0, [pc, #32]	; (45f4 <setup+0x10b0>)
    45d2:	f004 fc0f 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    45d6:	2111      	movs	r1, #17
    45d8:	4818      	ldr	r0, [pc, #96]	; (463c <setup+0x10f8>)
    45da:	f005 fdc3 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    45de:	4805      	ldr	r0, [pc, #20]	; (45f4 <setup+0x10b0>)
    45e0:	f004 fbe2 	bl	8da8 <Print::println()>
    45e4:	e799      	b.n	451a <setup+0xfd6>
    45e6:	bf00      	nop
    45e8:	00011970 	.word	0x00011970
    45ec:	00011984 	.word	0x00011984
    45f0:	00011998 	.word	0x00011998
    45f4:	1fff0e64 	.word	0x1fff0e64
    45f8:	000119ac 	.word	0x000119ac
    45fc:	40024000 	.word	0x40024000
    4600:	000119c4 	.word	0x000119c4
    4604:	04002408 	.word	0x04002408
    4608:	4002408c 	.word	0x4002408c
    460c:	bffdbf80 	.word	0xbffdbf80
    4610:	000119dc 	.word	0x000119dc
    4614:	00011a9c 	.word	0x00011a9c
    4618:	00011ad0 	.word	0x00011ad0
    461c:	00011ae4 	.word	0x00011ae4
    4620:	00011a18 	.word	0x00011a18
    4624:	00011aec 	.word	0x00011aec
    4628:	0001194c 	.word	0x0001194c
    462c:	00011af8 	.word	0x00011af8
    4630:	00011a54 	.word	0x00011a54
    4634:	00011a8c 	.word	0x00011a8c
    4638:	00011a78 	.word	0x00011a78
    463c:	00011a40 	.word	0x00011a40
    4640:	2104      	movs	r1, #4
    4642:	4847      	ldr	r0, [pc, #284]	; (4760 <setup+0x121c>)
    4644:	f005 fd8e 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4648:	220a      	movs	r2, #10
    464a:	2300      	movs	r3, #0
    464c:	4621      	mov	r1, r4
    464e:	4845      	ldr	r0, [pc, #276]	; (4764 <setup+0x1220>)
    4650:	f004 fbd0 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    4654:	210f      	movs	r1, #15
    4656:	4844      	ldr	r0, [pc, #272]	; (4768 <setup+0x1224>)
    4658:	f005 fd84 	bl	a164 <usb_serial_write>
            (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE) ? Serial.println("\t(Extended Frame)") : Serial.println("\t(Standard Frame)");
    465c:	f8d8 3000 	ldr.w	r3, [r8]
    4660:	0298      	lsls	r0, r3, #10
    4662:	bf4c      	ite	mi
    4664:	4841      	ldrmi	r0, [pc, #260]	; (476c <setup+0x1228>)
    4666:	4842      	ldrpl	r0, [pc, #264]	; (4770 <setup+0x122c>)
    4668:	2111      	movs	r1, #17
    466a:	f005 fd7b 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    466e:	483d      	ldr	r0, [pc, #244]	; (4764 <setup+0x1220>)
    4670:	f004 fb9a 	bl	8da8 <Print::println()>
    4674:	e751      	b.n	451a <setup+0xfd6>
    4676:	2104      	movs	r1, #4
    4678:	4839      	ldr	r0, [pc, #228]	; (4760 <setup+0x121c>)
    467a:	f005 fd73 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    467e:	2300      	movs	r3, #0
    4680:	220a      	movs	r2, #10
    4682:	4621      	mov	r1, r4
    4684:	4837      	ldr	r0, [pc, #220]	; (4764 <setup+0x1220>)
    4686:	f004 fbb5 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    468a:	210e      	movs	r1, #14
    468c:	4839      	ldr	r0, [pc, #228]	; (4774 <setup+0x1230>)
    468e:	f005 fd69 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4692:	4834      	ldr	r0, [pc, #208]	; (4764 <setup+0x1220>)
    4694:	f004 fb88 	bl	8da8 <Print::println()>
    4698:	e73f      	b.n	451a <setup+0xfd6>
    469a:	2104      	movs	r1, #4
    469c:	4830      	ldr	r0, [pc, #192]	; (4760 <setup+0x121c>)
    469e:	f005 fd61 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    46a2:	2300      	movs	r3, #0
    46a4:	220a      	movs	r2, #10
    46a6:	4621      	mov	r1, r4
    46a8:	482e      	ldr	r0, [pc, #184]	; (4764 <setup+0x1220>)
    46aa:	f004 fba3 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    46ae:	210e      	movs	r1, #14
    46b0:	4831      	ldr	r0, [pc, #196]	; (4778 <setup+0x1234>)
    46b2:	f005 fd57 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    46b6:	482b      	ldr	r0, [pc, #172]	; (4764 <setup+0x1220>)
    46b8:	f004 fb76 	bl	8da8 <Print::println()>
    46bc:	e72d      	b.n	451a <setup+0xfd6>
    46be:	2104      	movs	r1, #4
    46c0:	4827      	ldr	r0, [pc, #156]	; (4760 <setup+0x121c>)
    46c2:	f005 fd4f 	bl	a164 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    46c6:	2300      	movs	r3, #0
    46c8:	220a      	movs	r2, #10
    46ca:	4621      	mov	r1, r4
    46cc:	4825      	ldr	r0, [pc, #148]	; (4764 <setup+0x1220>)
    46ce:	f004 fb91 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    46d2:	2112      	movs	r1, #18
    46d4:	4829      	ldr	r0, [pc, #164]	; (477c <setup+0x1238>)
    46d6:	f005 fd45 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    46da:	4822      	ldr	r0, [pc, #136]	; (4764 <setup+0x1220>)
    46dc:	f004 fb64 	bl	8da8 <Print::println()>
    46e0:	e71b      	b.n	451a <setup+0xfd6>
  if ( fifo_was_cleared ) enableFIFO();
    46e2:	2001      	movs	r0, #1
    46e4:	f7fc f87a 	bl	7dc <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool) [clone .isra.0]>
    46e8:	f7ff b948 	b.w	397c <setup+0x438>
    46ec:	4824      	ldr	r0, [pc, #144]	; (4780 <setup+0x123c>)
    46ee:	2110      	movs	r1, #16
    46f0:	f005 fd38 	bl	a164 <usb_serial_write>
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    46f4:	f8d8 9008 	ldr.w	r9, [r8, #8]
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    46f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    46fc:	44b0      	add	r8, r6
          if (!extid) id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    46fe:	f3c3 4a8a 	ubfx	sl, r3, #18, #11
    4702:	f7ff b9c5 	b.w	3a90 <setup+0x54c>
    4706:	481e      	ldr	r0, [pc, #120]	; (4780 <setup+0x123c>)
    4708:	2110      	movs	r1, #16
    470a:	f005 fd2b 	bl	a164 <usb_serial_write>
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    470e:	f8d9 a008 	ldr.w	sl, [r9, #8]
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    4712:	f8d9 3004 	ldr.w	r3, [r9, #4]
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    4716:	eb09 0b07 	add.w	fp, r9, r7
          if (!extid) id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    471a:	f3c3 498a 	ubfx	r9, r3, #18, #11
    471e:	f7ff b890 	b.w	3842 <setup+0x2fe>
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    4722:	2400      	movs	r4, #0
    4724:	4625      	mov	r5, r4
    4726:	e611      	b.n	434c <setup+0xe08>
    4728:	2400      	movs	r4, #0
    472a:	4625      	mov	r5, r4
    472c:	f7ff bbef 	b.w	3f0e <setup+0x9ca>
    4730:	4814      	ldr	r0, [pc, #80]	; (4784 <setup+0x1240>)
    4732:	2110      	movs	r1, #16
    4734:	f005 fd16 	bl	a164 <usb_serial_write>
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    4738:	f8d8 a008 	ldr.w	sl, [r8, #8]
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    473c:	f8d8 3004 	ldr.w	r3, [r8, #4]
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    4740:	44b0      	add	r8, r6
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    4742:	f023 4960 	bic.w	r9, r3, #3758096384	; 0xe0000000
    4746:	e679      	b.n	443c <setup+0xef8>
    4748:	480e      	ldr	r0, [pc, #56]	; (4784 <setup+0x1240>)
    474a:	2110      	movs	r1, #16
    474c:	f005 fd0a 	bl	a164 <usb_serial_write>
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    4750:	f8d9 b008 	ldr.w	fp, [r9, #8]
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    4754:	f8d9 3004 	ldr.w	r3, [r9, #4]
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    4758:	44b9      	add	r9, r7
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    475a:	f023 4a60 	bic.w	sl, r3, #3758096384	; 0xe0000000
    475e:	e475      	b.n	404c <setup+0xb08>
    4760:	000119dc 	.word	0x000119dc
    4764:	1fff0e64 	.word	0x1fff0e64
    4768:	000119f8 	.word	0x000119f8
    476c:	00011a08 	.word	0x00011a08
    4770:	00011a1c 	.word	0x00011a1c
    4774:	00011a30 	.word	0x00011a30
    4778:	00011a68 	.word	0x00011a68
    477c:	000119e4 	.word	0x000119e4
    4780:	00011ad0 	.word	0x00011ad0
    4784:	00011abc 	.word	0x00011abc

00004788 <check_buffer() [clone .part.0]>:
void check_buffer(){
    4788:	b5f0      	push	{r4, r5, r6, r7, lr}
    478a:	b083      	sub	sp, #12
    uint32_t start_micros = micros();
    478c:	f004 fee4 	bl	9558 <micros>
    sprintf(prefix,"CAN2");
    4790:	4b35      	ldr	r3, [pc, #212]	; (4868 <check_buffer() [clone .part.0]+0xe0>)
    memcpy(&data_buffer[0], &prefix[0], 4);
    4792:	4c36      	ldr	r4, [pc, #216]	; (486c <check_buffer() [clone .part.0]+0xe4>)
    4794:	4f36      	ldr	r7, [pc, #216]	; (4870 <check_buffer() [clone .part.0]+0xe8>)
    UDP.beginPacket(broadcastIp, destPort); //UDP.remotePort());
    4796:	4e37      	ldr	r6, [pc, #220]	; (4874 <check_buffer() [clone .part.0]+0xec>)
    uint32_t start_micros = micros();
    4798:	4605      	mov	r5, r0
    sprintf(prefix,"CAN2");
    479a:	e893 0003 	ldmia.w	r3, {r0, r1}
    479e:	4b36      	ldr	r3, [pc, #216]	; (4878 <check_buffer() [clone .part.0]+0xf0>)
    memcpy(&data_buffer[0], &prefix[0], 4);
    47a0:	6020      	str	r0, [r4, #0]
    sprintf(prefix,"CAN2");
    47a2:	6018      	str	r0, [r3, #0]
    47a4:	7119      	strb	r1, [r3, #4]
    current_position = 4;
    47a6:	4b35      	ldr	r3, [pc, #212]	; (487c <check_buffer() [clone .part.0]+0xf4>)
    memcpy(&data_buffer[479], &RXCount0, 4);
    47a8:	4935      	ldr	r1, [pc, #212]	; (4880 <check_buffer() [clone .part.0]+0xf8>)
    current_position = 4;
    47aa:	2204      	movs	r2, #4
    memcpy(&data_buffer[479], &RXCount0, 4);
    47ac:	f204 10df 	addw	r0, r4, #479	; 0x1df
    current_position = 4;
    47b0:	801a      	strh	r2, [r3, #0]
    memcpy(&data_buffer[479], &RXCount0, 4);
    47b2:	f004 fb9b 	bl	8eec <memcpy>
    memcpy(&data_buffer[483], &RXCount1, 4);
    47b6:	4933      	ldr	r1, [pc, #204]	; (4884 <check_buffer() [clone .part.0]+0xfc>)
    47b8:	2204      	movs	r2, #4
    47ba:	f204 10e3 	addw	r0, r4, #483	; 0x1e3
    47be:	f004 fb95 	bl	8eec <memcpy>
    47c2:	4b31      	ldr	r3, [pc, #196]	; (4888 <check_buffer() [clone .part.0]+0x100>)
    UDP.beginPacket(broadcastIp, destPort); //UDP.remotePort());
    47c4:	8832      	ldrh	r2, [r6, #0]
    47c6:	9300      	str	r3, [sp, #0]
    47c8:	4669      	mov	r1, sp
    47ca:	687b      	ldr	r3, [r7, #4]
    47cc:	482f      	ldr	r0, [pc, #188]	; (488c <check_buffer() [clone .part.0]+0x104>)
    47ce:	9301      	str	r3, [sp, #4]
    47d0:	f001 f8d0 	bl	5974 <WiFiUDP::beginPacket(IPAddress, unsigned short)>
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
    47d4:	482d      	ldr	r0, [pc, #180]	; (488c <check_buffer() [clone .part.0]+0x104>)
    47d6:	4621      	mov	r1, r4
    47d8:	f44f 7200 	mov.w	r2, #512	; 0x200
    47dc:	f001 f992 	bl	5b04 <WiFiUDP::write(unsigned char const*, unsigned int)>
    if (UDP.endPacket()) {
    47e0:	482a      	ldr	r0, [pc, #168]	; (488c <check_buffer() [clone .part.0]+0x104>)
    47e2:	f001 f969 	bl	5ab8 <WiFiUDP::endPacket()>
    47e6:	2800      	cmp	r0, #0
    47e8:	d035      	beq.n	4856 <check_buffer() [clone .part.0]+0xce>
    47ea:	210b      	movs	r1, #11
    47ec:	4828      	ldr	r0, [pc, #160]	; (4890 <check_buffer() [clone .part.0]+0x108>)
    47ee:	f005 fcb9 	bl	a164 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
    47f2:	4928      	ldr	r1, [pc, #160]	; (4894 <check_buffer() [clone .part.0]+0x10c>)
    47f4:	4638      	mov	r0, r7
    47f6:	f004 fa1b 	bl	8c30 <IPAddress::printTo(Print&) const>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    47fa:	2020      	movs	r0, #32
    47fc:	f005 fd38 	bl	a270 <usb_serial_putchar>
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
    4800:	2300      	movs	r3, #0
    4802:	220a      	movs	r2, #10
    4804:	6831      	ldr	r1, [r6, #0]
    4806:	4823      	ldr	r0, [pc, #140]	; (4894 <check_buffer() [clone .part.0]+0x10c>)
    4808:	f004 faf4 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned int n)			{ return print(n) + println(); }
    480c:	4821      	ldr	r0, [pc, #132]	; (4894 <check_buffer() [clone .part.0]+0x10c>)
    480e:	f004 facb 	bl	8da8 <Print::println()>
      BLUE_LED_state = !BLUE_LED_state;
    4812:	4a21      	ldr	r2, [pc, #132]	; (4898 <check_buffer() [clone .part.0]+0x110>)
    4814:	7813      	ldrb	r3, [r2, #0]
    4816:	f083 0301 	eor.w	r3, r3, #1
    481a:	7013      	strb	r3, [r2, #0]
    buffer_counter++;
    481c:	491f      	ldr	r1, [pc, #124]	; (489c <check_buffer() [clone .part.0]+0x114>)
    memset(&data_buffer,0xFF,BUFFER_SIZE);
    481e:	4813      	ldr	r0, [pc, #76]	; (486c <check_buffer() [clone .part.0]+0xe4>)
    buffer_counter++;
    4820:	680b      	ldr	r3, [r1, #0]
    4822:	3301      	adds	r3, #1
    memset(&data_buffer,0xFF,BUFFER_SIZE);
    4824:	f44f 7200 	mov.w	r2, #512	; 0x200
    buffer_counter++;
    4828:	600b      	str	r3, [r1, #0]
    memset(&data_buffer,0xFF,BUFFER_SIZE);
    482a:	21ff      	movs	r1, #255	; 0xff
    482c:	f007 fa54 	bl	bcd8 <memset>
    YELLOW_LED_state = !YELLOW_LED_state;
    4830:	4b1b      	ldr	r3, [pc, #108]	; (48a0 <check_buffer() [clone .part.0]+0x118>)
    4832:	7819      	ldrb	r1, [r3, #0]
    digitalWrite(YELLOW_LED,YELLOW_LED_state);
    4834:	2005      	movs	r0, #5
    YELLOW_LED_state = !YELLOW_LED_state;
    4836:	f081 0101 	eor.w	r1, r1, #1
    483a:	7019      	strb	r1, [r3, #0]
    digitalWrite(YELLOW_LED,YELLOW_LED_state);
    483c:	f004 fe26 	bl	948c <digitalWrite>
    uint32_t elapsed_micros = micros() - start_micros;
    4840:	f004 fe8a 	bl	9558 <micros>
    memcpy(&data_buffer[505], &elapsed_micros, 3);
    4844:	2203      	movs	r2, #3
    uint32_t elapsed_micros = micros() - start_micros;
    4846:	1b45      	subs	r5, r0, r5
    memcpy(&data_buffer[505], &elapsed_micros, 3);
    4848:	4669      	mov	r1, sp
    484a:	4816      	ldr	r0, [pc, #88]	; (48a4 <check_buffer() [clone .part.0]+0x11c>)
    uint32_t elapsed_micros = micros() - start_micros;
    484c:	9500      	str	r5, [sp, #0]
    memcpy(&data_buffer[505], &elapsed_micros, 3);
    484e:	f004 fb4d 	bl	8eec <memcpy>
}
    4852:	b003      	add	sp, #12
    4854:	bdf0      	pop	{r4, r5, r6, r7, pc}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4856:	2108      	movs	r1, #8
    4858:	4813      	ldr	r0, [pc, #76]	; (48a8 <check_buffer() [clone .part.0]+0x120>)
    485a:	f005 fc83 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    485e:	480d      	ldr	r0, [pc, #52]	; (4894 <check_buffer() [clone .part.0]+0x10c>)
    4860:	f004 faa2 	bl	8da8 <Print::println()>
    4864:	e7da      	b.n	481c <check_buffer() [clone .part.0]+0x94>
    4866:	bf00      	nop
    4868:	00011b40 	.word	0x00011b40
    486c:	1fff6e04 	.word	0x1fff6e04
    4870:	1fff6df4 	.word	0x1fff6df4
    4874:	1fff0c54 	.word	0x1fff0c54
    4878:	1fff75fc 	.word	0x1fff75fc
    487c:	1fff6e02 	.word	0x1fff6e02
    4880:	1fff6840 	.word	0x1fff6840
    4884:	1fff6844 	.word	0x1fff6844
    4888:	00011fec 	.word	0x00011fec
    488c:	1fff6850 	.word	0x1fff6850
    4890:	00011b28 	.word	0x00011b28
    4894:	1fff0e64 	.word	0x1fff0e64
    4898:	1fff15f4 	.word	0x1fff15f4
    489c:	1fff6dfc 	.word	0x1fff6dfc
    48a0:	1fff6de8 	.word	0x1fff6de8
    48a4:	1fff6ffd 	.word	0x1fff6ffd
    48a8:	00011b34 	.word	0x00011b34

000048ac <load_buffer()>:
void load_buffer(){
    48ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GREEN_LED_state = !GREEN_LED_state;
    48b0:	4b28      	ldr	r3, [pc, #160]	; (4954 <load_buffer()+0xa8>)
  data_buffer[current_position] = current_channel;
    48b2:	4d29      	ldr	r5, [pc, #164]	; (4958 <load_buffer()+0xac>)
  GREEN_LED_state = !GREEN_LED_state;
    48b4:	7819      	ldrb	r1, [r3, #0]
  data_buffer[current_position] = current_channel;
    48b6:	4e29      	ldr	r6, [pc, #164]	; (495c <load_buffer()+0xb0>)
  memcpy(&data_buffer[current_position], &rxmsg.id, 4);
    48b8:	4f29      	ldr	r7, [pc, #164]	; (4960 <load_buffer()+0xb4>)
void load_buffer(){
    48ba:	b084      	sub	sp, #16
  GREEN_LED_state = !GREEN_LED_state;
    48bc:	f081 0101 	eor.w	r1, r1, #1
  digitalWrite(GREEN_LED, GREEN_LED_state);
    48c0:	2006      	movs	r0, #6
  GREEN_LED_state = !GREEN_LED_state;
    48c2:	7019      	strb	r1, [r3, #0]
  digitalWrite(GREEN_LED, GREEN_LED_state);
    48c4:	f004 fde2 	bl	948c <digitalWrite>
  data_buffer[current_position] = current_channel;
    48c8:	882b      	ldrh	r3, [r5, #0]
    48ca:	4a26      	ldr	r2, [pc, #152]	; (4964 <load_buffer()+0xb8>)
    48cc:	7811      	ldrb	r1, [r2, #0]
    48ce:	54f1      	strb	r1, [r6, r3]
  current_position += 1;
    48d0:	1c5a      	adds	r2, r3, #1
    48d2:	802a      	strh	r2, [r5, #0]
  time_t timeStamp = now();
    48d4:	f004 f8cc 	bl	8a70 <now()>
  memcpy(&data_buffer[current_position], &timeStamp, 4);
    48d8:	882c      	ldrh	r4, [r5, #0]
  time_t timeStamp = now();
    48da:	e9cd 0102 	strd	r0, r1, [sp, #8]
  memcpy(&data_buffer[current_position], &timeStamp, 4);
    48de:	2204      	movs	r2, #4
    48e0:	a902      	add	r1, sp, #8
    48e2:	1930      	adds	r0, r6, r4
    48e4:	f004 fb02 	bl	8eec <memcpy>
  current_position += 4;
    48e8:	f104 0008 	add.w	r0, r4, #8
  memcpy(&data_buffer[current_position], &rxmsg.id, 4);
    48ec:	2204      	movs	r2, #4
    48ee:	4639      	mov	r1, r7
  current_position += 4;
    48f0:	340c      	adds	r4, #12
  memcpy(&data_buffer[current_position], &rxmsg.id, 4);
    48f2:	fa16 f080 	uxtah	r0, r6, r0
    48f6:	f004 faf9 	bl	8eec <memcpy>
  uint32_t DLC = (rxmsg.len << 24) | (0x00FFFFFF & uint32_t(microsecondsPerSecond));
    48fa:	f897 800b 	ldrb.w	r8, [r7, #11]
  current_position += 4;
    48fe:	802c      	strh	r4, [r5, #0]
	operator unsigned long () const { return micros() - us; }
    4900:	f004 fe2a 	bl	9558 <micros>
    4904:	4b18      	ldr	r3, [pc, #96]	; (4968 <load_buffer()+0xbc>)
  memcpy(&data_buffer[current_position], &DLC, 4);
    4906:	882c      	ldrh	r4, [r5, #0]
    4908:	681b      	ldr	r3, [r3, #0]
    490a:	1ac0      	subs	r0, r0, r3
  uint32_t DLC = (rxmsg.len << 24) | (0x00FFFFFF & uint32_t(microsecondsPerSecond));
    490c:	ea4f 6808 	mov.w	r8, r8, lsl #24
    4910:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  memcpy(&data_buffer[current_position], &DLC, 4);
    4914:	2204      	movs	r2, #4
  uint32_t DLC = (rxmsg.len << 24) | (0x00FFFFFF & uint32_t(microsecondsPerSecond));
    4916:	ea40 0008 	orr.w	r0, r0, r8
  memcpy(&data_buffer[current_position], &DLC, 4);
    491a:	eb0d 0102 	add.w	r1, sp, r2
  uint32_t DLC = (rxmsg.len << 24) | (0x00FFFFFF & uint32_t(microsecondsPerSecond));
    491e:	9001      	str	r0, [sp, #4]
  memcpy(&data_buffer[current_position], &DLC, 4);
    4920:	1930      	adds	r0, r6, r4
    4922:	f004 fae3 	bl	8eec <memcpy>
  current_position += 4;
    4926:	1d20      	adds	r0, r4, #4
  current_position += 8;
    4928:	340c      	adds	r4, #12
    492a:	b2a4      	uxth	r4, r4
  memcpy(&data_buffer[current_position], &rxmsg.buf, 8); 
    492c:	fa16 f080 	uxtah	r0, r6, r0
    4930:	f107 010c 	add.w	r1, r7, #12
    4934:	2208      	movs	r2, #8
    4936:	f004 fad9 	bl	8eec <memcpy>
  if (current_position >= BUFFER_POSITION_LIMIT){ //max number of messages
    493a:	f5b4 7fed 	cmp.w	r4, #474	; 0x1da
  current_position += 8;
    493e:	802c      	strh	r4, [r5, #0]
  if (current_position >= BUFFER_POSITION_LIMIT){ //max number of messages
    4940:	d802      	bhi.n	4948 <load_buffer()+0x9c>
}
    4942:	b004      	add	sp, #16
    4944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4948:	b004      	add	sp, #16
    494a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    494e:	f7ff bf1b 	b.w	4788 <check_buffer() [clone .part.0]>
    4952:	bf00      	nop
    4954:	1fff6834 	.word	0x1fff6834
    4958:	1fff6e02 	.word	0x1fff6e02
    495c:	1fff6e04 	.word	0x1fff6e04
    4960:	1fff0c5c 	.word	0x1fff0c5c
    4964:	1fff6e00 	.word	0x1fff6e00
    4968:	1fff7014 	.word	0x1fff7014
    496c:	ffffffff 	.word	0xffffffff

00004970 <printCAN(CAN_message_t const&, unsigned char)>:
void printCAN(const CAN_message_t &msg, uint8_t channel){
    4970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  current_channel=channel;
    4974:	4b3c      	ldr	r3, [pc, #240]	; (4a68 <printCAN(CAN_message_t const&, unsigned char)+0xf8>)
  rxmsg=msg;
    4976:	4c3d      	ldr	r4, [pc, #244]	; (4a6c <printCAN(CAN_message_t const&, unsigned char)+0xfc>)
  current_channel=channel;
    4978:	7019      	strb	r1, [r3, #0]
  rxmsg=msg;
    497a:	4605      	mov	r5, r0
void printCAN(const CAN_message_t &msg, uint8_t channel){
    497c:	4606      	mov	r6, r0
    497e:	460f      	mov	r7, r1
  rxmsg=msg;
    4980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4984:	e895 0003 	ldmia.w	r5, {r0, r1}
void printCAN(const CAN_message_t &msg, uint8_t channel){
    4988:	b086      	sub	sp, #24
  rxmsg=msg;
    498a:	e884 0003 	stmia.w	r4, {r0, r1}
  load_buffer();
    498e:	f7ff ff8d 	bl	48ac <load_buffer()>
  char channel_string[] = "can "; //{'c','a','n',' ',0};
    4992:	4b37      	ldr	r3, [pc, #220]	; (4a70 <printCAN(CAN_message_t const&, unsigned char)+0x100>)
    4994:	e893 0003 	ldmia.w	r3, {r0, r1}
    4998:	9004      	str	r0, [sp, #16]
    499a:	f88d 1014 	strb.w	r1, [sp, #20]
  double timestamp = double(now()) + double(microsecondsPerSecond)/1000000.0;
    499e:	f004 f867 	bl	8a70 <now()>
    49a2:	4605      	mov	r5, r0
    49a4:	4688      	mov	r8, r1
    49a6:	f004 fdd7 	bl	9558 <micros>
    49aa:	4b32      	ldr	r3, [pc, #200]	; (4a74 <printCAN(CAN_message_t const&, unsigned char)+0x104>)
    49ac:	681b      	ldr	r3, [r3, #0]
    49ae:	1ac0      	subs	r0, r0, r3
    49b0:	f005 ff42 	bl	a838 <__aeabi_ui2d>
    49b4:	a32a      	add	r3, pc, #168	; (adr r3, 4a60 <printCAN(CAN_message_t const&, unsigned char)+0xf0>)
    49b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    49ba:	f006 f8e1 	bl	ab80 <__aeabi_ddiv>
    49be:	4602      	mov	r2, r0
    49c0:	4628      	mov	r0, r5
    49c2:	460d      	mov	r5, r1
    49c4:	4641      	mov	r1, r8
    49c6:	4614      	mov	r4, r2
    49c8:	f005 ff82 	bl	a8d0 <__aeabi_l2d>
    49cc:	4602      	mov	r2, r0
    49ce:	460b      	mov	r3, r1
    49d0:	4620      	mov	r0, r4
    49d2:	4629      	mov	r1, r5
    49d4:	f005 fdf4 	bl	a5c0 <__adddf3>
    49d8:	4604      	mov	r4, r0
    49da:	460d      	mov	r5, r1
  if (channel == 0) channel_string[3] = '0';
    49dc:	2f00      	cmp	r7, #0
    49de:	d136      	bne.n	4a4e <printCAN(CAN_message_t const&, unsigned char)+0xde>
    49e0:	2330      	movs	r3, #48	; 0x30
    49e2:	f88d 3013 	strb.w	r3, [sp, #19]
  memset(ReplyBuffer,0,sizeof(ReplyBuffer));
    49e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    49ea:	2100      	movs	r1, #0
    49ec:	4822      	ldr	r0, [pc, #136]	; (4a78 <printCAN(CAN_message_t const&, unsigned char)+0x108>)
    49ee:	f007 f973 	bl	bcd8 <memset>
  sprintf(ReplyBuffer,"(%0.6f) %s %08X [%d]",timestamp,channel_string,msg.id,msg.len); 
    49f2:	7af0      	ldrb	r0, [r6, #11]
    49f4:	6831      	ldr	r1, [r6, #0]
    49f6:	9002      	str	r0, [sp, #8]
    49f8:	a804      	add	r0, sp, #16
    49fa:	462b      	mov	r3, r5
    49fc:	9101      	str	r1, [sp, #4]
    49fe:	9000      	str	r0, [sp, #0]
    4a00:	491e      	ldr	r1, [pc, #120]	; (4a7c <printCAN(CAN_message_t const&, unsigned char)+0x10c>)
    4a02:	481d      	ldr	r0, [pc, #116]	; (4a78 <printCAN(CAN_message_t const&, unsigned char)+0x108>)
    4a04:	4622      	mov	r2, r4
    4a06:	f006 ffef 	bl	b9e8 <sprintf>
  for ( uint8_t i = 0; i < msg.len; i++ ) {
    4a0a:	7af3      	ldrb	r3, [r6, #11]
    4a0c:	b193      	cbz	r3, 4a34 <printCAN(CAN_message_t const&, unsigned char)+0xc4>
    4a0e:	2500      	movs	r5, #0
    4a10:	4f19      	ldr	r7, [pc, #100]	; (4a78 <printCAN(CAN_message_t const&, unsigned char)+0x108>)
    sprintf(&ReplyBuffer[strlen(ReplyBuffer)]," %02X",msg.buf[i]);
    4a12:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4a84 <printCAN(CAN_message_t const&, unsigned char)+0x114>
    4a16:	462c      	mov	r4, r5
    4a18:	4638      	mov	r0, r7
    4a1a:	f007 faf1 	bl	c000 <strlen>
    4a1e:	4434      	add	r4, r6
    4a20:	4641      	mov	r1, r8
    4a22:	7b22      	ldrb	r2, [r4, #12]
    4a24:	4438      	add	r0, r7
    4a26:	f006 ffdf 	bl	b9e8 <sprintf>
  for ( uint8_t i = 0; i < msg.len; i++ ) {
    4a2a:	3501      	adds	r5, #1
    4a2c:	7af3      	ldrb	r3, [r6, #11]
    4a2e:	b2ec      	uxtb	r4, r5
    4a30:	42a3      	cmp	r3, r4
    4a32:	d8f1      	bhi.n	4a18 <printCAN(CAN_message_t const&, unsigned char)+0xa8>
							  return write((const uint8_t *)str, strlen(str)); }
    4a34:	4810      	ldr	r0, [pc, #64]	; (4a78 <printCAN(CAN_message_t const&, unsigned char)+0x108>)
    4a36:	f007 fae3 	bl	c000 <strlen>
    4a3a:	4601      	mov	r1, r0
    4a3c:	480e      	ldr	r0, [pc, #56]	; (4a78 <printCAN(CAN_message_t const&, unsigned char)+0x108>)
    4a3e:	f005 fb91 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4a42:	480f      	ldr	r0, [pc, #60]	; (4a80 <printCAN(CAN_message_t const&, unsigned char)+0x110>)
    4a44:	f004 f9b0 	bl	8da8 <Print::println()>
}
    4a48:	b006      	add	sp, #24
    4a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (channel == 1) channel_string[3] = '1';
    4a4e:	2f01      	cmp	r7, #1
    4a50:	bf04      	itt	eq
    4a52:	2331      	moveq	r3, #49	; 0x31
    4a54:	f88d 3013 	strbeq.w	r3, [sp, #19]
    4a58:	e7c5      	b.n	49e6 <printCAN(CAN_message_t const&, unsigned char)+0x76>
    4a5a:	bf00      	nop
    4a5c:	f3af 8000 	nop.w
    4a60:	00000000 	.word	0x00000000
    4a64:	412e8480 	.word	0x412e8480
    4a68:	1fff6e00 	.word	0x1fff6e00
    4a6c:	1fff0c5c 	.word	0x1fff0c5c
    4a70:	00011b68 	.word	0x00011b68
    4a74:	1fff7014 	.word	0x1fff7014
    4a78:	1fff083c 	.word	0x1fff083c
    4a7c:	00011b48 	.word	0x00011b48
    4a80:	1fff0e64 	.word	0x1fff0e64
    4a84:	00011b60 	.word	0x00011b60

00004a88 <processCan0(CAN_message_t const&)>:
void processCan0(const CAN_message_t &msg) {
    4a88:	b410      	push	{r4}
  RXCount0++;
    4a8a:	490b      	ldr	r1, [pc, #44]	; (4ab8 <processCan0(CAN_message_t const&)+0x30>)
  RED_LED_state = !RED_LED_state;
    4a8c:	4a0b      	ldr	r2, [pc, #44]	; (4abc <processCan0(CAN_message_t const&)+0x34>)
  RXCount0++;
    4a8e:	680b      	ldr	r3, [r1, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4a90:	4c0b      	ldr	r4, [pc, #44]	; (4ac0 <processCan0(CAN_message_t const&)+0x38>)
    4a92:	3301      	adds	r3, #1
void processCan0(const CAN_message_t &msg) {
    4a94:	b083      	sub	sp, #12
  RXCount0++;
    4a96:	600b      	str	r3, [r1, #0]
  RED_LED_state = !RED_LED_state;
    4a98:	7813      	ldrb	r3, [r2, #0]
    4a9a:	6824      	ldr	r4, [r4, #0]
    4a9c:	9401      	str	r4, [sp, #4]
    4a9e:	f083 0301 	eor.w	r3, r3, #1
	return ret;
    4aa2:	9c01      	ldr	r4, [sp, #4]
    4aa4:	7013      	strb	r3, [r2, #0]
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    4aa6:	4b07      	ldr	r3, [pc, #28]	; (4ac4 <processCan0(CAN_message_t const&)+0x3c>)
  printCAN(msg,0);
    4aa8:	2100      	movs	r1, #0
    4aaa:	601c      	str	r4, [r3, #0]
}
    4aac:	b003      	add	sp, #12
    4aae:	f85d 4b04 	ldr.w	r4, [sp], #4
  printCAN(msg,0);
    4ab2:	f7ff bf5d 	b.w	4970 <printCAN(CAN_message_t const&, unsigned char)>
    4ab6:	bf00      	nop
    4ab8:	1fff6840 	.word	0x1fff6840
    4abc:	1fff683c 	.word	0x1fff683c
    4ac0:	1fff7ae4 	.word	0x1fff7ae4
    4ac4:	1fff6848 	.word	0x1fff6848

00004ac8 <processCan1(CAN_message_t const&)>:
void processCan1(const CAN_message_t &msg) {
    4ac8:	b410      	push	{r4}
  RXCount1++;
    4aca:	490a      	ldr	r1, [pc, #40]	; (4af4 <processCan1(CAN_message_t const&)+0x2c>)
  YELLOW_LED_state = !YELLOW_LED_state;
    4acc:	4a0a      	ldr	r2, [pc, #40]	; (4af8 <processCan1(CAN_message_t const&)+0x30>)
  RXCount1++;
    4ace:	680b      	ldr	r3, [r1, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4ad0:	4c0a      	ldr	r4, [pc, #40]	; (4afc <processCan1(CAN_message_t const&)+0x34>)
    4ad2:	3301      	adds	r3, #1
void processCan1(const CAN_message_t &msg) {
    4ad4:	b083      	sub	sp, #12
  RXCount1++;
    4ad6:	600b      	str	r3, [r1, #0]
  YELLOW_LED_state = !YELLOW_LED_state;
    4ad8:	7813      	ldrb	r3, [r2, #0]
    4ada:	6824      	ldr	r4, [r4, #0]
    4adc:	9401      	str	r4, [sp, #4]
  printCAN(msg,1);
    4ade:	2101      	movs	r1, #1
  YELLOW_LED_state = !YELLOW_LED_state;
    4ae0:	404b      	eors	r3, r1
	return ret;
    4ae2:	9c01      	ldr	r4, [sp, #4]
    4ae4:	7013      	strb	r3, [r2, #0]
    4ae6:	4b06      	ldr	r3, [pc, #24]	; (4b00 <processCan1(CAN_message_t const&)+0x38>)
    4ae8:	601c      	str	r4, [r3, #0]
}
    4aea:	b003      	add	sp, #12
    4aec:	f85d 4b04 	ldr.w	r4, [sp], #4
  printCAN(msg,1);
    4af0:	f7ff bf3e 	b.w	4970 <printCAN(CAN_message_t const&, unsigned char)>
    4af4:	1fff6844 	.word	0x1fff6844
    4af8:	1fff6de8 	.word	0x1fff6de8
    4afc:	1fff7ae4 	.word	0x1fff7ae4
    4b00:	1fff684c 	.word	0x1fff684c

00004b04 <loop>:
void loop() {
    4b04:	b530      	push	{r4, r5, lr}
  Can0.events();
    4b06:	4849      	ldr	r0, [pc, #292]	; (4c2c <loop+0x128>)
  if (RXTimer0 > 500) RED_LED_state = HIGH;
    4b08:	4c49      	ldr	r4, [pc, #292]	; (4c30 <loop+0x12c>)
  if (RXTimer1 > 500) YELLOW_LED_state = HIGH;
    4b0a:	4d4a      	ldr	r5, [pc, #296]	; (4c34 <loop+0x130>)
void loop() {
    4b0c:	b087      	sub	sp, #28
  Can0.events();
    4b0e:	f7fc fdf1 	bl	16f4 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>
  Can1.events();
    4b12:	4849      	ldr	r0, [pc, #292]	; (4c38 <loop+0x134>)
    4b14:	f7fc ff3e 	bl	1994 <FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4b18:	4a48      	ldr	r2, [pc, #288]	; (4c3c <loop+0x138>)
	operator unsigned long () const { return millis() - ms; }
    4b1a:	4949      	ldr	r1, [pc, #292]	; (4c40 <loop+0x13c>)
    4b1c:	6813      	ldr	r3, [r2, #0]
    4b1e:	9300      	str	r3, [sp, #0]
	return ret;
    4b20:	9b00      	ldr	r3, [sp, #0]
    4b22:	6809      	ldr	r1, [r1, #0]
    4b24:	1a5b      	subs	r3, r3, r1
  if (RXTimer0 > 500) RED_LED_state = HIGH;
    4b26:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    4b2a:	bf84      	itt	hi
    4b2c:	2301      	movhi	r3, #1
    4b2e:	7023      	strbhi	r3, [r4, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4b30:	6813      	ldr	r3, [r2, #0]
    4b32:	4a44      	ldr	r2, [pc, #272]	; (4c44 <loop+0x140>)
    4b34:	9301      	str	r3, [sp, #4]
    4b36:	6812      	ldr	r2, [r2, #0]
	return ret;
    4b38:	9b01      	ldr	r3, [sp, #4]
    4b3a:	1a9b      	subs	r3, r3, r2
  if (RXTimer1 > 500) YELLOW_LED_state = HIGH;
    4b3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    4b40:	bf84      	itt	hi
    4b42:	2301      	movhi	r3, #1
    4b44:	702b      	strbhi	r3, [r5, #0]
  digitalWrite(GREEN_LED,GREEN_LED_state);
    4b46:	4b40      	ldr	r3, [pc, #256]	; (4c48 <loop+0x144>)
    4b48:	2006      	movs	r0, #6
    4b4a:	7819      	ldrb	r1, [r3, #0]
    4b4c:	f004 fc9e 	bl	948c <digitalWrite>
  digitalWrite(YELLOW_LED,YELLOW_LED_state);
    4b50:	7829      	ldrb	r1, [r5, #0]
    4b52:	2005      	movs	r0, #5
    4b54:	f004 fc9a 	bl	948c <digitalWrite>
  digitalWrite(RED_LED,RED_LED_state);
    4b58:	7821      	ldrb	r1, [r4, #0]
    4b5a:	200e      	movs	r0, #14
    4b5c:	f004 fc96 	bl	948c <digitalWrite>
  digitalWrite(BLUE_LED,BLUE_LED_state);
    4b60:	4b3a      	ldr	r3, [pc, #232]	; (4c4c <loop+0x148>)
    4b62:	2027      	movs	r0, #39	; 0x27
    4b64:	7819      	ldrb	r1, [r3, #0]
    4b66:	f004 fc91 	bl	948c <digitalWrite>
  int packetSize = UDP.parsePacket();
    4b6a:	4839      	ldr	r0, [pc, #228]	; (4c50 <loop+0x14c>)
    4b6c:	f001 f86a 	bl	5c44 <WiFiUDP::parsePacket()>
  if (packetSize) {
    4b70:	4604      	mov	r4, r0
    4b72:	b908      	cbnz	r0, 4b78 <loop+0x74>
}
    4b74:	b007      	add	sp, #28
    4b76:	bd30      	pop	{r4, r5, pc}
    4b78:	2118      	movs	r1, #24
    4b7a:	4836      	ldr	r0, [pc, #216]	; (4c54 <loop+0x150>)
    4b7c:	f005 faf2 	bl	a164 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4b80:	4621      	mov	r1, r4
    4b82:	4835      	ldr	r0, [pc, #212]	; (4c58 <loop+0x154>)
  // Read up to len bytes from the current packet and place them into buffer
  // Returns the number of bytes read, or 0 if none are available
  virtual int read(unsigned char* buffer, size_t len);
  // Read up to len characters from the current packet and place them into buffer
  // Returns the number of characters read, or 0 if none are available
  virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
    4b84:	4c35      	ldr	r4, [pc, #212]	; (4c5c <loop+0x158>)
    4b86:	f004 f907 	bl	8d98 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4b8a:	4833      	ldr	r0, [pc, #204]	; (4c58 <loop+0x154>)
    4b8c:	f004 f90c 	bl	8da8 <Print::println()>
    4b90:	2105      	movs	r1, #5
    4b92:	4833      	ldr	r0, [pc, #204]	; (4c60 <loop+0x15c>)
    4b94:	f005 fae6 	bl	a164 <usb_serial_write>
    IPAddress remoteIp = UDP.remoteIP();
    4b98:	a802      	add	r0, sp, #8
    4b9a:	492d      	ldr	r1, [pc, #180]	; (4c50 <loop+0x14c>)
    4b9c:	f000 ffca 	bl	5b34 <WiFiUDP::remoteIP()>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
    4ba0:	492d      	ldr	r1, [pc, #180]	; (4c58 <loop+0x154>)
    4ba2:	a802      	add	r0, sp, #8
    4ba4:	f004 f844 	bl	8c30 <IPAddress::printTo(Print&) const>
    4ba8:	2107      	movs	r1, #7
    4baa:	482e      	ldr	r0, [pc, #184]	; (4c64 <loop+0x160>)
    4bac:	f005 fada 	bl	a164 <usb_serial_write>
    Serial.println(UDP.remotePort());
    4bb0:	4827      	ldr	r0, [pc, #156]	; (4c50 <loop+0x14c>)
    4bb2:	f000 ffd5 	bl	5b60 <WiFiUDP::remotePort()>
    4bb6:	4601      	mov	r1, r0
	size_t print(int n)				{ return print((long)n); }
    4bb8:	4827      	ldr	r0, [pc, #156]	; (4c58 <loop+0x154>)
    4bba:	f004 f8ed 	bl	8d98 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4bbe:	4826      	ldr	r0, [pc, #152]	; (4c58 <loop+0x154>)
    4bc0:	f004 f8f2 	bl	8da8 <Print::println()>
    4bc4:	22ff      	movs	r2, #255	; 0xff
    4bc6:	4621      	mov	r1, r4
    4bc8:	4821      	ldr	r0, [pc, #132]	; (4c50 <loop+0x14c>)
    4bca:	f001 f8a5 	bl	5d18 <WiFiUDP::read(unsigned char*, unsigned int)>
    if (len > 0) {
    4bce:	2800      	cmp	r0, #0
      packetBuffer[len] = 0;
    4bd0:	bfc4      	itt	gt
    4bd2:	2300      	movgt	r3, #0
    4bd4:	5423      	strbgt	r3, [r4, r0]
    4bd6:	2109      	movs	r1, #9
    4bd8:	4823      	ldr	r0, [pc, #140]	; (4c68 <loop+0x164>)
    4bda:	f005 fac3 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4bde:	481e      	ldr	r0, [pc, #120]	; (4c58 <loop+0x154>)
    4be0:	f004 f8e2 	bl	8da8 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    4be4:	481d      	ldr	r0, [pc, #116]	; (4c5c <loop+0x158>)
    4be6:	f007 fa0b 	bl	c000 <strlen>
    4bea:	4601      	mov	r1, r0
    4bec:	481b      	ldr	r0, [pc, #108]	; (4c5c <loop+0x158>)
    4bee:	f005 fab9 	bl	a164 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4bf2:	4819      	ldr	r0, [pc, #100]	; (4c58 <loop+0x154>)
    4bf4:	f004 f8d8 	bl	8da8 <Print::println()>
    4bf8:	4b1c      	ldr	r3, [pc, #112]	; (4c6c <loop+0x168>)
    4bfa:	4a1d      	ldr	r2, [pc, #116]	; (4c70 <loop+0x16c>)
    4bfc:	685b      	ldr	r3, [r3, #4]
    UDP.beginPacket(broadcastIp, UDP.remotePort());
    4bfe:	4814      	ldr	r0, [pc, #80]	; (4c50 <loop+0x14c>)
    4c00:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4c04:	f000 ffac 	bl	5b60 <WiFiUDP::remotePort()>
    4c08:	a904      	add	r1, sp, #16
    4c0a:	4602      	mov	r2, r0
    4c0c:	4810      	ldr	r0, [pc, #64]	; (4c50 <loop+0x14c>)
    4c0e:	f000 feb1 	bl	5974 <WiFiUDP::beginPacket(IPAddress, unsigned short)>
							  return write((const uint8_t *)str, strlen(str)); }
    4c12:	4818      	ldr	r0, [pc, #96]	; (4c74 <loop+0x170>)
    4c14:	f007 f9f4 	bl	c000 <strlen>
    4c18:	4916      	ldr	r1, [pc, #88]	; (4c74 <loop+0x170>)
    4c1a:	4602      	mov	r2, r0
    4c1c:	480c      	ldr	r0, [pc, #48]	; (4c50 <loop+0x14c>)
    4c1e:	f000 ff71 	bl	5b04 <WiFiUDP::write(unsigned char const*, unsigned int)>
    UDP.endPacket();
    4c22:	480b      	ldr	r0, [pc, #44]	; (4c50 <loop+0x14c>)
    4c24:	f000 ff48 	bl	5ab8 <WiFiUDP::endPacket()>
}
    4c28:	b007      	add	sp, #28
    4c2a:	bd30      	pop	{r4, r5, pc}
    4c2c:	1fff15f8 	.word	0x1fff15f8
    4c30:	1fff683c 	.word	0x1fff683c
    4c34:	1fff6de8 	.word	0x1fff6de8
    4c38:	1fff3f14 	.word	0x1fff3f14
    4c3c:	1fff7ae4 	.word	0x1fff7ae4
    4c40:	1fff6848 	.word	0x1fff6848
    4c44:	1fff684c 	.word	0x1fff684c
    4c48:	1fff6834 	.word	0x1fff6834
    4c4c:	1fff15f4 	.word	0x1fff15f4
    4c50:	1fff6850 	.word	0x1fff6850
    4c54:	00011b70 	.word	0x00011b70
    4c58:	1fff0e64 	.word	0x1fff0e64
    4c5c:	1fff7020 	.word	0x1fff7020
    4c60:	00011b8c 	.word	0x00011b8c
    4c64:	00011b94 	.word	0x00011b94
    4c68:	00011b9c 	.word	0x00011b9c
    4c6c:	1fff6df4 	.word	0x1fff6df4
    4c70:	00011fec 	.word	0x00011fec
    4c74:	1fff083c 	.word	0x1fff083c

00004c78 <EventResponder::triggerEvent(int, void*)>:
		if (_type == EventTypeImmediate) {
    4c78:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    4c7c:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    4c7e:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    4c82:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    4c84:	d101      	bne.n	4c8a <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    4c86:	6883      	ldr	r3, [r0, #8]
    4c88:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    4c8a:	f003 bf63 	b.w	8b54 <EventResponder::triggerEventNotImmediate()>
    4c8e:	bf00      	nop

00004c90 <SPIClass::SPIClass(unsigned int, unsigned int)>:
	constexpr SPIClass(uintptr_t myport, uintptr_t myhardware)
    4c90:	b410      	push	{r4}
		: port_addr(myport), hardware_addr(myhardware) {
    4c92:	2400      	movs	r4, #0
    4c94:	6084      	str	r4, [r0, #8]
    4c96:	60c4      	str	r4, [r0, #12]
    4c98:	6104      	str	r4, [r0, #16]
    4c9a:	6144      	str	r4, [r0, #20]
    4c9c:	6184      	str	r4, [r0, #24]
    4c9e:	61c4      	str	r4, [r0, #28]
    4ca0:	6204      	str	r4, [r0, #32]
    4ca2:	6244      	str	r4, [r0, #36]	; 0x24
    4ca4:	6284      	str	r4, [r0, #40]	; 0x28
    4ca6:	8584      	strh	r4, [r0, #44]	; 0x2c
    4ca8:	6304      	str	r4, [r0, #48]	; 0x30
    4caa:	6344      	str	r4, [r0, #52]	; 0x34
    4cac:	6384      	str	r4, [r0, #56]	; 0x38
    4cae:	63c4      	str	r4, [r0, #60]	; 0x3c
    4cb0:	e9c0 1200 	strd	r1, r2, [r0]
	}
    4cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
    4cb8:	4770      	bx	lr
    4cba:	bf00      	nop

00004cbc <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    4cbc:	6843      	ldr	r3, [r0, #4]
{
    4cbe:	b410      	push	{r4}
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    4cc0:	681c      	ldr	r4, [r3, #0]
    4cc2:	685a      	ldr	r2, [r3, #4]
    4cc4:	6821      	ldr	r1, [r4, #0]
    4cc6:	4311      	orrs	r1, r2
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    4cc8:	6802      	ldr	r2, [r0, #0]
    4cca:	6021      	str	r1, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    4ccc:	4c16      	ldr	r4, [pc, #88]	; (4d28 <SPIClass::begin()+0x6c>)
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    4cce:	4917      	ldr	r1, [pc, #92]	; (4d2c <SPIClass::begin()+0x70>)
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    4cd0:	6014      	str	r4, [r2, #0]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    4cd2:	60d1      	str	r1, [r2, #12]
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    4cd4:	4c16      	ldr	r4, [pc, #88]	; (4d30 <SPIClass::begin()+0x74>)
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    4cd6:	4917      	ldr	r1, [pc, #92]	; (4d34 <SPIClass::begin()+0x78>)
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    4cd8:	6114      	str	r4, [r2, #16]
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    4cda:	6011      	str	r1, [r2, #0]
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    4cdc:	7a41      	ldrb	r1, [r0, #9]
    4cde:	4a16      	ldr	r2, [pc, #88]	; (4d38 <SPIClass::begin()+0x7c>)
    4ce0:	185c      	adds	r4, r3, r1
	*reg = hardware().mosi_mux[mosi_pin_index];
    4ce2:	310c      	adds	r1, #12
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    4ce4:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
	*reg = hardware().mosi_mux[mosi_pin_index];
    4ce8:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    4cec:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
    4cf0:	6849      	ldr	r1, [r1, #4]
	*reg = hardware().mosi_mux[mosi_pin_index];
    4cf2:	600c      	str	r4, [r1, #0]
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    4cf4:	7a01      	ldrb	r1, [r0, #8]
    4cf6:	185c      	adds	r4, r3, r1
	*reg= hardware().miso_mux[miso_pin_index];
    4cf8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    4cfc:	f894 c018 	ldrb.w	ip, [r4, #24]
	*reg= hardware().miso_mux[miso_pin_index];
    4d00:	69cc      	ldr	r4, [r1, #28]
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    4d02:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
    4d06:	6849      	ldr	r1, [r1, #4]
	*reg= hardware().miso_mux[miso_pin_index];
    4d08:	600c      	str	r4, [r1, #0]
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    4d0a:	7a81      	ldrb	r1, [r0, #10]
}
    4d0c:	f85d 4b04 	ldr.w	r4, [sp], #4
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    4d10:	1858      	adds	r0, r3, r1
	*reg = hardware().sck_mux[sck_pin_index];
    4d12:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    4d16:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
	*reg = hardware().sck_mux[sck_pin_index];
    4d1a:	6c59      	ldr	r1, [r3, #68]	; 0x44
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    4d1c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
    4d20:	6853      	ldr	r3, [r2, #4]
	*reg = hardware().sck_mux[sck_pin_index];
    4d22:	6019      	str	r1, [r3, #0]
}
    4d24:	4770      	bx	lr
    4d26:	bf00      	nop
    4d28:	001f4001 	.word	0x001f4001
    4d2c:	38001001 	.word	0x38001001
    4d30:	78001001 	.word	0x78001001
    4d34:	801f0000 	.word	0x801f0000
    4d38:	00012004 	.word	0x00012004

00004d3c <SPIClass::end()>:
{
    4d3c:	b410      	push	{r4}
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    4d3e:	6842      	ldr	r2, [r0, #4]
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    4d40:	f890 c009 	ldrb.w	ip, [r0, #9]
    4d44:	4b10      	ldr	r3, [pc, #64]	; (4d88 <SPIClass::end()+0x4c>)
    4d46:	4494      	add	ip, r2
	*reg = 0;
    4d48:	2100      	movs	r1, #0
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    4d4a:	f89c c02c 	ldrb.w	ip, [ip, #44]	; 0x2c
    4d4e:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
    4d52:	f8dc 4004 	ldr.w	r4, [ip, #4]
	*reg = 0;
    4d56:	6021      	str	r1, [r4, #0]
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    4d58:	f890 c008 	ldrb.w	ip, [r0, #8]
    4d5c:	4494      	add	ip, r2
    4d5e:	f89c c018 	ldrb.w	ip, [ip, #24]
    4d62:	eb03 0ccc 	add.w	ip, r3, ip, lsl #3
    4d66:	f8dc 4004 	ldr.w	r4, [ip, #4]
	*reg = 0;
    4d6a:	6021      	str	r1, [r4, #0]
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    4d6c:	7a84      	ldrb	r4, [r0, #10]
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    4d6e:	6800      	ldr	r0, [r0, #0]
    4d70:	4422      	add	r2, r4
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    4d72:	4c06      	ldr	r4, [pc, #24]	; (4d8c <SPIClass::end()+0x50>)
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    4d74:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
    4d78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4d7c:	685b      	ldr	r3, [r3, #4]
	*reg = 0;
    4d7e:	6019      	str	r1, [r3, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    4d80:	6004      	str	r4, [r0, #0]
}
    4d82:	f85d 4b04 	ldr.w	r4, [sp], #4
    4d86:	4770      	bx	lr
    4d88:	00012004 	.word	0x00012004
    4d8c:	001f4001 	.word	0x001f4001

00004d90 <SPIClass::setMOSI(unsigned char)>:
{
    4d90:	b530      	push	{r4, r5, lr}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    4d92:	4b25      	ldr	r3, [pc, #148]	; (4e28 <SPIClass::setMOSI(unsigned char)+0x98>)
    4d94:	6844      	ldr	r4, [r0, #4]
    4d96:	42a3      	cmp	r3, r4
    4d98:	d010      	beq.n	4dbc <SPIClass::setMOSI(unsigned char)+0x2c>
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    4d9a:	7a43      	ldrb	r3, [r0, #9]
    4d9c:	4423      	add	r3, r4
    4d9e:	f893 e02c 	ldrb.w	lr, [r3, #44]	; 0x2c
    4da2:	458e      	cmp	lr, r1
    4da4:	d009      	beq.n	4dba <SPIClass::setMOSI(unsigned char)+0x2a>
    4da6:	f104 022b 	add.w	r2, r4, #43	; 0x2b
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    4daa:	2300      	movs	r3, #0
			if  (pin == hardware().mosi_pin[i]) {
    4dac:	f812 cf01 	ldrb.w	ip, [r2, #1]!
    4db0:	458c      	cmp	ip, r1
    4db2:	d019      	beq.n	4de8 <SPIClass::setMOSI(unsigned char)+0x58>
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    4db4:	3301      	adds	r3, #1
    4db6:	2b04      	cmp	r3, #4
    4db8:	d1f8      	bne.n	4dac <SPIClass::setMOSI(unsigned char)+0x1c>
}
    4dba:	bd30      	pop	{r4, r5, pc}
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    4dbc:	290b      	cmp	r1, #11
    4dbe:	d02c      	beq.n	4e1a <SPIClass::setMOSI(unsigned char)+0x8a>
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    4dc0:	2907      	cmp	r1, #7
    4dc2:	d107      	bne.n	4dd4 <SPIClass::setMOSI(unsigned char)+0x44>
    4dc4:	4a19      	ldr	r2, [pc, #100]	; (4e2c <SPIClass::setMOSI(unsigned char)+0x9c>)
    4dc6:	7813      	ldrb	r3, [r2, #0]
    4dc8:	f023 0303 	bic.w	r3, r3, #3
    4dcc:	f043 0301 	orr.w	r3, r3, #1
    4dd0:	7013      	strb	r3, [r2, #0]
		if (pin == 28) pinout = (pinout & ~0x3) | 2;
    4dd2:	e7e2      	b.n	4d9a <SPIClass::setMOSI(unsigned char)+0xa>
    4dd4:	291c      	cmp	r1, #28
    4dd6:	d1e0      	bne.n	4d9a <SPIClass::setMOSI(unsigned char)+0xa>
    4dd8:	4a14      	ldr	r2, [pc, #80]	; (4e2c <SPIClass::setMOSI(unsigned char)+0x9c>)
    4dda:	7813      	ldrb	r3, [r2, #0]
    4ddc:	f023 0303 	bic.w	r3, r3, #3
    4de0:	f043 0302 	orr.w	r3, r3, #2
    4de4:	7013      	strb	r3, [r2, #0]
    4de6:	e7d8      	b.n	4d9a <SPIClass::setMOSI(unsigned char)+0xa>
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    4de8:	6822      	ldr	r2, [r4, #0]
    4dea:	6811      	ldr	r1, [r2, #0]
    4dec:	6862      	ldr	r2, [r4, #4]
    4dee:	4211      	tst	r1, r2
    4df0:	d011      	beq.n	4e16 <SPIClass::setMOSI(unsigned char)+0x86>
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    4df2:	4a0f      	ldr	r2, [pc, #60]	; (4e30 <SPIClass::setMOSI(unsigned char)+0xa0>)
    4df4:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
					*reg = 0;
    4df8:	2500      	movs	r5, #0
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    4dfa:	f8de 1004 	ldr.w	r1, [lr, #4]
					*reg = 0;
    4dfe:	600d      	str	r5, [r1, #0]
					reg = portConfigRegister(hardware().mosi_pin[i]);
    4e00:	18e1      	adds	r1, r4, r3
    4e02:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    4e06:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
					*reg = hardware().mosi_mux[i];
    4e0a:	f103 010c 	add.w	r1, r3, #12
					reg = portConfigRegister(hardware().mosi_pin[i]);
    4e0e:	6855      	ldr	r5, [r2, #4]
					*reg = hardware().mosi_mux[i];
    4e10:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
    4e14:	602a      	str	r2, [r5, #0]
				mosi_pin_index = i;
    4e16:	7243      	strb	r3, [r0, #9]
}
    4e18:	bd30      	pop	{r4, r5, pc}
		if (pin == 11) pinout &= ~3;
    4e1a:	4a04      	ldr	r2, [pc, #16]	; (4e2c <SPIClass::setMOSI(unsigned char)+0x9c>)
    4e1c:	7813      	ldrb	r3, [r2, #0]
    4e1e:	f023 0303 	bic.w	r3, r3, #3
    4e22:	7013      	strb	r3, [r2, #0]
		if (pin == 28) pinout = (pinout & ~0x3) | 2;
    4e24:	e7b9      	b.n	4d9a <SPIClass::setMOSI(unsigned char)+0xa>
    4e26:	bf00      	nop
    4e28:	00011c88 	.word	0x00011c88
    4e2c:	1fff7ae0 	.word	0x1fff7ae0
    4e30:	00012004 	.word	0x00012004

00004e34 <SPIClass::setMISO(unsigned char)>:
{
    4e34:	b530      	push	{r4, r5, lr}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    4e36:	4b25      	ldr	r3, [pc, #148]	; (4ecc <SPIClass::setMISO(unsigned char)+0x98>)
    4e38:	6844      	ldr	r4, [r0, #4]
    4e3a:	42a3      	cmp	r3, r4
    4e3c:	d010      	beq.n	4e60 <SPIClass::setMISO(unsigned char)+0x2c>
	if (pin != hardware().miso_pin[miso_pin_index]) {
    4e3e:	7a03      	ldrb	r3, [r0, #8]
    4e40:	4423      	add	r3, r4
    4e42:	f893 e018 	ldrb.w	lr, [r3, #24]
    4e46:	458e      	cmp	lr, r1
    4e48:	d009      	beq.n	4e5e <SPIClass::setMISO(unsigned char)+0x2a>
    4e4a:	f104 0217 	add.w	r2, r4, #23
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
    4e4e:	2300      	movs	r3, #0
			if  (pin == hardware().miso_pin[i]) {
    4e50:	f812 cf01 	ldrb.w	ip, [r2, #1]!
    4e54:	458c      	cmp	ip, r1
    4e56:	d019      	beq.n	4e8c <SPIClass::setMISO(unsigned char)+0x58>
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
    4e58:	3301      	adds	r3, #1
    4e5a:	2b04      	cmp	r3, #4
    4e5c:	d1f8      	bne.n	4e50 <SPIClass::setMISO(unsigned char)+0x1c>
}
    4e5e:	bd30      	pop	{r4, r5, pc}
		pinout = newpinout;
#endif
	}
	inline void setMISO_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
    4e60:	290c      	cmp	r1, #12
    4e62:	d02c      	beq.n	4ebe <SPIClass::setMISO(unsigned char)+0x8a>
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
    4e64:	2908      	cmp	r1, #8
    4e66:	d107      	bne.n	4e78 <SPIClass::setMISO(unsigned char)+0x44>
    4e68:	4a19      	ldr	r2, [pc, #100]	; (4ed0 <SPIClass::setMISO(unsigned char)+0x9c>)
    4e6a:	7813      	ldrb	r3, [r2, #0]
    4e6c:	f023 030c 	bic.w	r3, r3, #12
    4e70:	f043 0304 	orr.w	r3, r3, #4
    4e74:	7013      	strb	r3, [r2, #0]
		if (pin == 39) pinout = (pinout & ~0xc) | 8;
    4e76:	e7e2      	b.n	4e3e <SPIClass::setMISO(unsigned char)+0xa>
    4e78:	2927      	cmp	r1, #39	; 0x27
    4e7a:	d1e0      	bne.n	4e3e <SPIClass::setMISO(unsigned char)+0xa>
    4e7c:	4a14      	ldr	r2, [pc, #80]	; (4ed0 <SPIClass::setMISO(unsigned char)+0x9c>)
    4e7e:	7813      	ldrb	r3, [r2, #0]
    4e80:	f023 030c 	bic.w	r3, r3, #12
    4e84:	f043 0308 	orr.w	r3, r3, #8
    4e88:	7013      	strb	r3, [r2, #0]
    4e8a:	e7d8      	b.n	4e3e <SPIClass::setMISO(unsigned char)+0xa>
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    4e8c:	6822      	ldr	r2, [r4, #0]
    4e8e:	6811      	ldr	r1, [r2, #0]
    4e90:	6862      	ldr	r2, [r4, #4]
    4e92:	4211      	tst	r1, r2
    4e94:	d011      	beq.n	4eba <SPIClass::setMISO(unsigned char)+0x86>
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    4e96:	490f      	ldr	r1, [pc, #60]	; (4ed4 <SPIClass::setMISO(unsigned char)+0xa0>)
    4e98:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
					reg = portConfigRegister(hardware().miso_pin[i]);
    4e9c:	eb04 0c03 	add.w	ip, r4, r3
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    4ea0:	f8de 2004 	ldr.w	r2, [lr, #4]
					*reg = 0;
    4ea4:	2500      	movs	r5, #0
    4ea6:	6015      	str	r5, [r2, #0]
					reg = portConfigRegister(hardware().miso_pin[i]);
    4ea8:	f89c c018 	ldrb.w	ip, [ip, #24]
					*reg = hardware().miso_mux[i];
    4eac:	eb04 0283 	add.w	r2, r4, r3, lsl #2
					reg = portConfigRegister(hardware().miso_pin[i]);
    4eb0:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
					*reg = hardware().miso_mux[i];
    4eb4:	69d4      	ldr	r4, [r2, #28]
					reg = portConfigRegister(hardware().miso_pin[i]);
    4eb6:	684a      	ldr	r2, [r1, #4]
					*reg = hardware().miso_mux[i];
    4eb8:	6014      	str	r4, [r2, #0]
				miso_pin_index = i;
    4eba:	7203      	strb	r3, [r0, #8]
}
    4ebc:	bd30      	pop	{r4, r5, pc}
		if (pin == 12) pinout &= ~0xc;
    4ebe:	4a04      	ldr	r2, [pc, #16]	; (4ed0 <SPIClass::setMISO(unsigned char)+0x9c>)
    4ec0:	7813      	ldrb	r3, [r2, #0]
    4ec2:	f023 030c 	bic.w	r3, r3, #12
    4ec6:	7013      	strb	r3, [r2, #0]
		if (pin == 39) pinout = (pinout & ~0xc) | 8;
    4ec8:	e7b9      	b.n	4e3e <SPIClass::setMISO(unsigned char)+0xa>
    4eca:	bf00      	nop
    4ecc:	00011c88 	.word	0x00011c88
    4ed0:	1fff7ae0 	.word	0x1fff7ae0
    4ed4:	00012004 	.word	0x00012004

00004ed8 <SPIClass::setSCK(unsigned char)>:
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    4ed8:	4a2a      	ldr	r2, [pc, #168]	; (4f84 <SPIClass::setSCK(unsigned char)+0xac>)
    4eda:	6843      	ldr	r3, [r0, #4]
    4edc:	429a      	cmp	r2, r3
{
    4ede:	b430      	push	{r4, r5}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    4ee0:	d013      	beq.n	4f0a <SPIClass::setSCK(unsigned char)+0x32>
	if (pin != hardware().sck_pin[sck_pin_index]) {
    4ee2:	7a82      	ldrb	r2, [r0, #10]
    4ee4:	441a      	add	r2, r3
    4ee6:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
    4eea:	428a      	cmp	r2, r1
    4eec:	d00b      	beq.n	4f06 <SPIClass::setSCK(unsigned char)+0x2e>
			if  (pin == hardware().sck_pin[i]) {
    4eee:	f893 c040 	ldrb.w	ip, [r3, #64]	; 0x40
    4ef2:	458c      	cmp	ip, r1
    4ef4:	d025      	beq.n	4f42 <SPIClass::setSCK(unsigned char)+0x6a>
    4ef6:	f893 c041 	ldrb.w	ip, [r3, #65]	; 0x41
    4efa:	458c      	cmp	ip, r1
    4efc:	d03b      	beq.n	4f76 <SPIClass::setSCK(unsigned char)+0x9e>
    4efe:	f893 c042 	ldrb.w	ip, [r3, #66]	; 0x42
    4f02:	458c      	cmp	ip, r1
    4f04:	d03a      	beq.n	4f7c <SPIClass::setSCK(unsigned char)+0xa4>
}
    4f06:	bc30      	pop	{r4, r5}
    4f08:	4770      	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    4f0a:	290d      	cmp	r1, #13
    4f0c:	d013      	beq.n	4f36 <SPIClass::setSCK(unsigned char)+0x5e>
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    4f0e:	290e      	cmp	r1, #14
    4f10:	d107      	bne.n	4f22 <SPIClass::setSCK(unsigned char)+0x4a>
    4f12:	4c1d      	ldr	r4, [pc, #116]	; (4f88 <SPIClass::setSCK(unsigned char)+0xb0>)
    4f14:	7822      	ldrb	r2, [r4, #0]
    4f16:	f022 0230 	bic.w	r2, r2, #48	; 0x30
    4f1a:	f042 0210 	orr.w	r2, r2, #16
    4f1e:	7022      	strb	r2, [r4, #0]
		if (pin == 27) pinout = (pinout & ~0x30) | 0x20;
    4f20:	e7df      	b.n	4ee2 <SPIClass::setSCK(unsigned char)+0xa>
    4f22:	291b      	cmp	r1, #27
    4f24:	d1dd      	bne.n	4ee2 <SPIClass::setSCK(unsigned char)+0xa>
    4f26:	4c18      	ldr	r4, [pc, #96]	; (4f88 <SPIClass::setSCK(unsigned char)+0xb0>)
    4f28:	7822      	ldrb	r2, [r4, #0]
    4f2a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
    4f2e:	f042 0220 	orr.w	r2, r2, #32
    4f32:	7022      	strb	r2, [r4, #0]
    4f34:	e7d5      	b.n	4ee2 <SPIClass::setSCK(unsigned char)+0xa>
		if (pin == 13) pinout &= ~0x30;
    4f36:	4c14      	ldr	r4, [pc, #80]	; (4f88 <SPIClass::setSCK(unsigned char)+0xb0>)
    4f38:	7822      	ldrb	r2, [r4, #0]
    4f3a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
    4f3e:	7022      	strb	r2, [r4, #0]
		if (pin == 27) pinout = (pinout & ~0x30) | 0x20;
    4f40:	e7cf      	b.n	4ee2 <SPIClass::setSCK(unsigned char)+0xa>
			if  (pin == hardware().sck_pin[i]) {
    4f42:	2100      	movs	r1, #0
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    4f44:	468c      	mov	ip, r1
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    4f46:	681c      	ldr	r4, [r3, #0]
    4f48:	6825      	ldr	r5, [r4, #0]
    4f4a:	685c      	ldr	r4, [r3, #4]
    4f4c:	4225      	tst	r5, r4
    4f4e:	d010      	beq.n	4f72 <SPIClass::setSCK(unsigned char)+0x9a>
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    4f50:	4c0e      	ldr	r4, [pc, #56]	; (4f8c <SPIClass::setSCK(unsigned char)+0xb4>)
    4f52:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
					*reg = 0;
    4f56:	2500      	movs	r5, #0
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    4f58:	6852      	ldr	r2, [r2, #4]
					*reg = 0;
    4f5a:	6015      	str	r5, [r2, #0]
					reg = portConfigRegister(hardware().sck_pin[i]);
    4f5c:	eb03 020c 	add.w	r2, r3, ip
					*reg = hardware().sck_mux[i];
    4f60:	eb03 038c 	add.w	r3, r3, ip, lsl #2
					reg = portConfigRegister(hardware().sck_pin[i]);
    4f64:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
    4f68:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
					*reg = hardware().sck_mux[i];
    4f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
					reg = portConfigRegister(hardware().sck_pin[i]);
    4f6e:	6863      	ldr	r3, [r4, #4]
					*reg = hardware().sck_mux[i];
    4f70:	601a      	str	r2, [r3, #0]
				sck_pin_index = i;
    4f72:	7281      	strb	r1, [r0, #10]
				return;
    4f74:	e7c7      	b.n	4f06 <SPIClass::setSCK(unsigned char)+0x2e>
			if  (pin == hardware().sck_pin[i]) {
    4f76:	2101      	movs	r1, #1
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    4f78:	468c      	mov	ip, r1
    4f7a:	e7e4      	b.n	4f46 <SPIClass::setSCK(unsigned char)+0x6e>
			if  (pin == hardware().sck_pin[i]) {
    4f7c:	2102      	movs	r1, #2
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    4f7e:	468c      	mov	ip, r1
    4f80:	e7e1      	b.n	4f46 <SPIClass::setSCK(unsigned char)+0x6e>
    4f82:	bf00      	nop
    4f84:	00011c88 	.word	0x00011c88
    4f88:	1fff7ae0 	.word	0x1fff7ae0
    4f8c:	00012004 	.word	0x00012004

00004f90 <SPIClass::dma_rxisr()>:


//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
    4f90:	b470      	push	{r4, r5, r6}
		DMA_CINT = channel;
    4f92:	6b82      	ldr	r2, [r0, #56]	; 0x38
    4f94:	4b4b      	ldr	r3, [pc, #300]	; (50c4 <SPIClass::dma_rxisr()+0x134>)
    4f96:	7912      	ldrb	r2, [r2, #4]
    4f98:	77da      	strb	r2, [r3, #31]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    4f9a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    4f9c:	7912      	ldrb	r2, [r2, #4]
    4f9e:	771a      	strb	r2, [r3, #28]
    4fa0:	6b82      	ldr	r2, [r0, #56]	; 0x38
    4fa2:	7912      	ldrb	r2, [r2, #4]
    4fa4:	771a      	strb	r2, [r3, #28]
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    4fa6:	6b02      	ldr	r2, [r0, #48]	; 0x30
    4fa8:	b32a      	cbz	r2, 4ff6 <SPIClass::dma_rxisr()+0x66>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    4faa:	6843      	ldr	r3, [r0, #4]
    4fac:	68db      	ldr	r3, [r3, #12]
    4fae:	429a      	cmp	r2, r3
    4fb0:	d944      	bls.n	503c <SPIClass::dma_rxisr()+0xac>
			_dma_count_remaining -= hardware().max_dma_count;
    4fb2:	6b44      	ldr	r4, [r0, #52]	; 0x34
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    4fb4:	6b81      	ldr	r1, [r0, #56]	; 0x38
			_dma_count_remaining -= hardware().max_dma_count;
    4fb6:	1ad2      	subs	r2, r2, r3
    4fb8:	6823      	ldr	r3, [r4, #0]
    4fba:	6302      	str	r2, [r0, #48]	; 0x30
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    4fbc:	681d      	ldr	r5, [r3, #0]
    4fbe:	f100 042c 	add.w	r4, r0, #44	; 0x2c
    4fc2:	42a5      	cmp	r5, r4
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    4fc4:	f04f 0201 	mov.w	r2, #1
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    4fc8:	d05a      	beq.n	5080 <SPIClass::dma_rxisr()+0xf0>
    4fca:	6804      	ldr	r4, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    4fcc:	68e5      	ldr	r5, [r4, #12]
    4fce:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    4fd2:	681d      	ldr	r5, [r3, #0]
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    4fd4:	d12a      	bne.n	502c <SPIClass::dma_rxisr()+0x9c>
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    4fd6:	782d      	ldrb	r5, [r5, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    4fd8:	681e      	ldr	r6, [r3, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    4fda:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    4fde:	3601      	adds	r6, #1
    4fe0:	601e      	str	r6, [r3, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    4fe2:	6365      	str	r5, [r4, #52]	; 0x34
		DMA_SERQ = channel;
    4fe4:	4b37      	ldr	r3, [pc, #220]	; (50c4 <SPIClass::dma_rxisr()+0x134>)
    4fe6:	7909      	ldrb	r1, [r1, #4]
    4fe8:	76d9      	strb	r1, [r3, #27]
			}
		}
		_dmaRX->enable();
		if (should_reenable_tx)
    4fea:	b112      	cbz	r2, 4ff2 <SPIClass::dma_rxisr()+0x62>
    4fec:	6b42      	ldr	r2, [r0, #52]	; 0x34
    4fee:	7912      	ldrb	r2, [r2, #4]
    4ff0:	76da      	strb	r2, [r3, #27]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();

	}
}
    4ff2:	bc70      	pop	{r4, r5, r6}
    4ff4:	4770      	bx	lr
    4ff6:	6801      	ldr	r1, [r0, #0]
		port().SR = 0xFF0F0000;
    4ff8:	4c33      	ldr	r4, [pc, #204]	; (50c8 <SPIClass::dma_rxisr()+0x138>)
		_dma_event_responder->triggerEvent();
    4ffa:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		port().RSER = 0;
    4ffc:	630a      	str	r2, [r1, #48]	; 0x30
		port().SR = 0xFF0F0000;
    4ffe:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    5000:	68cc      	ldr	r4, [r1, #12]
    5002:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
    5006:	60cc      	str	r4, [r1, #12]
		_dma_event_responder->triggerEvent();
    5008:	681c      	ldr	r4, [r3, #0]
    500a:	4930      	ldr	r1, [pc, #192]	; (50cc <SPIClass::dma_rxisr()+0x13c>)
    500c:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    500e:	f04f 0c03 	mov.w	ip, #3
    5012:	428c      	cmp	r4, r1
    5014:	f880 c02d 	strb.w	ip, [r0, #45]	; 0x2d
		_dma_event_responder->triggerEvent();
    5018:	d13a      	bne.n	5090 <SPIClass::dma_rxisr()+0x100>
		if (_type == EventTypeImmediate) {
    501a:	7f19      	ldrb	r1, [r3, #28]
		_status = status;
    501c:	605a      	str	r2, [r3, #4]
		if (_type == EventTypeImmediate) {
    501e:	2902      	cmp	r1, #2
		_data = data;
    5020:	60da      	str	r2, [r3, #12]
		if (_type == EventTypeImmediate) {
    5022:	d13a      	bne.n	509a <SPIClass::dma_rxisr()+0x10a>
}
    5024:	bc70      	pop	{r4, r5, r6}
			(*_function)(*this);
    5026:	689a      	ldr	r2, [r3, #8]
    5028:	4618      	mov	r0, r3
    502a:	4710      	bx	r2
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    502c:	882d      	ldrh	r5, [r5, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    502e:	681e      	ldr	r6, [r3, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    5030:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    5034:	3602      	adds	r6, #2
    5036:	601e      	str	r6, [r3, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    5038:	6365      	str	r5, [r4, #52]	; 0x34
    503a:	e7d3      	b.n	4fe4 <SPIClass::dma_rxisr()+0x54>
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    503c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    503e:	681b      	ldr	r3, [r3, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    5040:	8bdc      	ldrh	r4, [r3, #30]
    5042:	0426      	lsls	r6, r4, #16
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    5044:	f102 31ff 	add.w	r1, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    5048:	d433      	bmi.n	50b2 <SPIClass::dma_rxisr()+0x122>
		tcd->BITER = len & 0x7fff;
    504a:	f3c1 010e 	ubfx	r1, r1, #0, #15
    504e:	83d9      	strh	r1, [r3, #30]
	tcd->CITER = tcd->BITER; 
    5050:	8bdc      	ldrh	r4, [r3, #30]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    5052:	6b81      	ldr	r1, [r0, #56]	; 0x38
	tcd->CITER = tcd->BITER; 
    5054:	b2a4      	uxth	r4, r4
    5056:	82dc      	strh	r4, [r3, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    5058:	680c      	ldr	r4, [r1, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    505a:	8be5      	ldrh	r5, [r4, #30]
    505c:	042d      	lsls	r5, r5, #16
    505e:	d420      	bmi.n	50a2 <SPIClass::dma_rxisr()+0x112>
		tcd->BITER = len & 0x7fff;
    5060:	f3c2 050e 	ubfx	r5, r2, #0, #15
    5064:	83e5      	strh	r5, [r4, #30]
	tcd->CITER = tcd->BITER; 
    5066:	8be5      	ldrh	r5, [r4, #30]
    5068:	b2ad      	uxth	r5, r5
    506a:	82e5      	strh	r5, [r4, #22]
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    506c:	681d      	ldr	r5, [r3, #0]
			_dma_count_remaining = 0;
    506e:	2400      	movs	r4, #0
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    5070:	3a01      	subs	r2, #1
			_dma_count_remaining = 0;
    5072:	6304      	str	r4, [r0, #48]	; 0x30
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    5074:	f100 042c 	add.w	r4, r0, #44	; 0x2c
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    5078:	bf18      	it	ne
    507a:	2201      	movne	r2, #1
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    507c:	42a5      	cmp	r5, r4
    507e:	d1a4      	bne.n	4fca <SPIClass::dma_rxisr()+0x3a>
    5080:	6803      	ldr	r3, [r0, #0]
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    5082:	68dc      	ldr	r4, [r3, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    5084:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
    5088:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    508c:	635c      	str	r4, [r3, #52]	; 0x34
    508e:	e7a9      	b.n	4fe4 <SPIClass::dma_rxisr()+0x54>
		_dma_event_responder->triggerEvent();
    5090:	4618      	mov	r0, r3
    5092:	4611      	mov	r1, r2
    5094:	4623      	mov	r3, r4
}
    5096:	bc70      	pop	{r4, r5, r6}
		_dma_event_responder->triggerEvent();
    5098:	4718      	bx	r3
}
    509a:	bc70      	pop	{r4, r5, r6}
			triggerEventNotImmediate();
    509c:	4618      	mov	r0, r3
    509e:	f003 bd59 	b.w	8b54 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    50a2:	8be5      	ldrh	r5, [r4, #30]
    50a4:	f3c2 0608 	ubfx	r6, r2, #0, #9
    50a8:	f405 457e 	and.w	r5, r5, #65024	; 0xfe00
    50ac:	4335      	orrs	r5, r6
    50ae:	83e5      	strh	r5, [r4, #30]
    50b0:	e7d9      	b.n	5066 <SPIClass::dma_rxisr()+0xd6>
    50b2:	8bdc      	ldrh	r4, [r3, #30]
    50b4:	f3c1 0108 	ubfx	r1, r1, #0, #9
    50b8:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    50bc:	4321      	orrs	r1, r4
    50be:	83d9      	strh	r1, [r3, #30]
    50c0:	e7c6      	b.n	5050 <SPIClass::dma_rxisr()+0xc0>
    50c2:	bf00      	nop
    50c4:	40008000 	.word	0x40008000
    50c8:	ff0f0000 	.word	0xff0f0000
    50cc:	00004c79 	.word	0x00004c79

000050d0 <_spi_dma_rxISR0()>:
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    50d0:	b508      	push	{r3, lr}
    50d2:	4802      	ldr	r0, [pc, #8]	; (50dc <_spi_dma_rxISR0()+0xc>)
    50d4:	f7ff ff5c 	bl	4f90 <SPIClass::dma_rxisr()>
    50d8:	bd08      	pop	{r3, pc}
    50da:	bf00      	nop
    50dc:	1fff760c 	.word	0x1fff760c

000050e0 <_spi_dma_rxISR1()>:
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    50e0:	b508      	push	{r3, lr}
    50e2:	4802      	ldr	r0, [pc, #8]	; (50ec <_spi_dma_rxISR1()+0xc>)
    50e4:	f7ff ff54 	bl	4f90 <SPIClass::dma_rxisr()>
    50e8:	bd08      	pop	{r3, pc}
    50ea:	bf00      	nop
    50ec:	1fff764c 	.word	0x1fff764c

000050f0 <_spi_dma_rxISR2()>:
void _spi_dma_rxISR2(void) {SPI2.dma_rxisr();}
    50f0:	b508      	push	{r3, lr}
    50f2:	4802      	ldr	r0, [pc, #8]	; (50fc <_spi_dma_rxISR2()+0xc>)
    50f4:	f7ff ff4c 	bl	4f90 <SPIClass::dma_rxisr()>
    50f8:	bd08      	pop	{r3, pc}
    50fa:	bf00      	nop
    50fc:	1fff768c 	.word	0x1fff768c

00005100 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v>:
}
    5100:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);
    5102:	4a08      	ldr	r2, [pc, #32]	; (5124 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x24>)
    5104:	4908      	ldr	r1, [pc, #32]	; (5128 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x28>)
    5106:	4809      	ldr	r0, [pc, #36]	; (512c <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x2c>)
    5108:	f7ff fdc2 	bl	4c90 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&KINETISK_SPI1, (uintptr_t)&SPIClass::spi1_hardware);
    510c:	4a08      	ldr	r2, [pc, #32]	; (5130 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x30>)
    510e:	4909      	ldr	r1, [pc, #36]	; (5134 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x34>)
    5110:	4809      	ldr	r0, [pc, #36]	; (5138 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x38>)
    5112:	f7ff fdbd 	bl	4c90 <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&KINETISK_SPI2, (uintptr_t)&SPIClass::spi2_hardware);
    5116:	4a09      	ldr	r2, [pc, #36]	; (513c <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x3c>)
    5118:	4909      	ldr	r1, [pc, #36]	; (5140 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x40>)
    511a:	480a      	ldr	r0, [pc, #40]	; (5144 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x44>)
    511c:	f7ff fdb8 	bl	4c90 <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    5120:	bd08      	pop	{r3, pc}
    5122:	bf00      	nop
    5124:	00011c88 	.word	0x00011c88
    5128:	4002c000 	.word	0x4002c000
    512c:	1fff760c 	.word	0x1fff760c
    5130:	00011d1c 	.word	0x00011d1c
    5134:	4002d000 	.word	0x4002d000
    5138:	1fff764c 	.word	0x1fff764c
    513c:	00011db0 	.word	0x00011db0
    5140:	400ac000 	.word	0x400ac000
    5144:	1fff768c 	.word	0x1fff768c

00005148 <resolve_cb(unsigned char*, unsigned long)>:
	WiFi.handleResolve(hostName, hostIp);
}

void WiFiClass::handleResolve(uint8_t * /*hostName*/, uint32_t hostIp)
{
	_resolve = hostIp;
    5148:	4b01      	ldr	r3, [pc, #4]	; (5150 <resolve_cb(unsigned char*, unsigned long)+0x8>)
    514a:	6219      	str	r1, [r3, #32]
}
    514c:	4770      	bx	lr
    514e:	bf00      	nop
    5150:	1fff76cc 	.word	0x1fff76cc

00005154 <socket_cb(signed char, unsigned char, void*)>:
}

static void socket_cb(SOCKET sock, uint8 u8Msg, void *pvMsg)
{
	WiFiSocket.eventCallback(sock, u8Msg, pvMsg);
    5154:	f003 bc70 	b.w	8a38 <WiFiSocketClass::eventCallback(signed char, unsigned char, void*)>

00005158 <WiFiClass::setPins(signed char, signed char, signed char, signed char)>:
  _timeout(60000)
{
}

void WiFiClass::setPins(int8_t cs, int8_t irq, int8_t rst, int8_t en)
{
    5158:	b430      	push	{r4, r5}
	gi8Winc1501CsPin = cs;
    515a:	4d06      	ldr	r5, [pc, #24]	; (5174 <WiFiClass::setPins(signed char, signed char, signed char, signed char)+0x1c>)
	gi8Winc1501IntnPin = irq;
    515c:	4c06      	ldr	r4, [pc, #24]	; (5178 <WiFiClass::setPins(signed char, signed char, signed char, signed char)+0x20>)
	gi8Winc1501CsPin = cs;
    515e:	7029      	strb	r1, [r5, #0]
	gi8Winc1501IntnPin = irq;
    5160:	7022      	strb	r2, [r4, #0]
	gi8Winc1501ResetPin = rst;
    5162:	4906      	ldr	r1, [pc, #24]	; (517c <WiFiClass::setPins(signed char, signed char, signed char, signed char)+0x24>)
	gi8Winc1501ChipEnPin = en;
    5164:	4a06      	ldr	r2, [pc, #24]	; (5180 <WiFiClass::setPins(signed char, signed char, signed char, signed char)+0x28>)
{
    5166:	f99d 0008 	ldrsb.w	r0, [sp, #8]
	gi8Winc1501ResetPin = rst;
    516a:	700b      	strb	r3, [r1, #0]
	gi8Winc1501ChipEnPin = en;
    516c:	7010      	strb	r0, [r2, #0]
}
    516e:	bc30      	pop	{r4, r5}
    5170:	4770      	bx	lr
    5172:	bf00      	nop
    5174:	1fff0ca1 	.word	0x1fff0ca1
    5178:	1fff0ca2 	.word	0x1fff0ca2
    517c:	1fff0ca3 	.word	0x1fff0ca3
    5180:	1fff0ca0 	.word	0x1fff0ca0

00005184 <WiFiClass::init()>:

int WiFiClass::init()
{
    5184:	b530      	push	{r4, r5, lr}
    5186:	b087      	sub	sp, #28
    5188:	4604      	mov	r4, r0
	tstrWifiInitParam param;
	int8_t ret;

	// Initialize the WiFi BSP:
	nm_bsp_init();
    518a:	f000 fe5d 	bl	5e48 <nm_bsp_init>

	// Initialize WiFi module and register status callback:
	param.pfAppWifiCb = wifi_cb;
    518e:	4b33      	ldr	r3, [pc, #204]	; (525c <WiFiClass::init()+0xd8>)
    5190:	9300      	str	r3, [sp, #0]
	ret = m2m_wifi_init(&param);
    5192:	4668      	mov	r0, sp
    5194:	f001 fc1e 	bl	69d4 <m2m_wifi_init>
	if (M2M_SUCCESS != ret && M2M_ERR_FW_VER_MISMATCH != ret) {
    5198:	4605      	mov	r5, r0
    519a:	b180      	cbz	r0, 51be <WiFiClass::init()+0x3a>
    519c:	f110 0f0d 	cmn.w	r0, #13
    51a0:	d00d      	beq.n	51be <WiFiClass::init()+0x3a>
#ifdef CONF_PERIPH
		if (ret != M2M_ERR_INVALID) {
    51a2:	f110 0f10 	cmn.w	r0, #16
    51a6:	d051      	beq.n	524c <WiFiClass::init()+0xc8>
			// Error led ON (rev A then rev B).
			m2m_periph_gpio_set_val(M2M_PERIPH_GPIO18, 0);
    51a8:	2100      	movs	r1, #0
    51aa:	2006      	movs	r0, #6
    51ac:	f001 fa2e 	bl	660c <m2m_periph_gpio_set_val>
			m2m_periph_gpio_set_dir(M2M_PERIPH_GPIO6, 1);
    51b0:	2101      	movs	r1, #1
    51b2:	2003      	movs	r0, #3
    51b4:	f001 fa12 	bl	65dc <m2m_periph_gpio_set_dir>
	m2m_periph_gpio_set_dir(M2M_PERIPH_GPIO5, 1);
	m2m_periph_gpio_set_dir(M2M_PERIPH_GPIO6, 1);
#endif

	return ret;
}
    51b8:	4628      	mov	r0, r5
    51ba:	b007      	add	sp, #28
    51bc:	bd30      	pop	{r4, r5, pc}
	socketInit();
    51be:	f002 fe15 	bl	7dec <socketInit>
	registerSocketCallback(socket_cb, resolve_cb);
    51c2:	4927      	ldr	r1, [pc, #156]	; (5260 <WiFiClass::init()+0xdc>)
    51c4:	4827      	ldr	r0, [pc, #156]	; (5264 <WiFiClass::init()+0xe0>)
    51c6:	f002 fe2f 	bl	7e28 <registerSocketCallback>
	if (nmdrv_firm_ver >= M2M_MAKE_VERSION(19, 5, 0)) {
    51ca:	4a27      	ldr	r2, [pc, #156]	; (5268 <WiFiClass::init()+0xe4>)
	_status = WL_IDLE_STATUS;
    51cc:	2300      	movs	r3, #0
	if (nmdrv_firm_ver >= M2M_MAKE_VERSION(19, 5, 0)) {
    51ce:	6811      	ldr	r1, [r2, #0]
	_status = WL_IDLE_STATUS;
    51d0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	_localip = 0;
    51d4:	6123      	str	r3, [r4, #16]
	_submask = 0;
    51d6:	6163      	str	r3, [r4, #20]
	_gateway = 0;
    51d8:	61a3      	str	r3, [r4, #24]
	_resolve = 0;
    51da:	6223      	str	r3, [r4, #32]
	_remoteMacAddress = 0;
    51dc:	6263      	str	r3, [r4, #36]	; 0x24
	if (nmdrv_firm_ver >= M2M_MAKE_VERSION(19, 5, 0)) {
    51de:	f241 334f 	movw	r3, #4943	; 0x134f
	_init = 1;
    51e2:	2201      	movs	r2, #1
	if (nmdrv_firm_ver >= M2M_MAKE_VERSION(19, 5, 0)) {
    51e4:	4299      	cmp	r1, r3
	_init = 1;
    51e6:	6022      	str	r2, [r4, #0]
	_dhcp = 1;
    51e8:	61e2      	str	r2, [r4, #28]
	if (nmdrv_firm_ver >= M2M_MAKE_VERSION(19, 5, 0)) {
    51ea:	d832      	bhi.n	5252 <WiFiClass::init()+0xce>
	m2m_periph_gpio_set_val(M2M_PERIPH_GPIO15, 1);
    51ec:	2101      	movs	r1, #1
    51ee:	2004      	movs	r0, #4
    51f0:	f001 fa0c 	bl	660c <m2m_periph_gpio_set_val>
	m2m_periph_gpio_set_val(M2M_PERIPH_GPIO16, 1);
    51f4:	2101      	movs	r1, #1
    51f6:	2005      	movs	r0, #5
    51f8:	f001 fa08 	bl	660c <m2m_periph_gpio_set_val>
	m2m_periph_gpio_set_val(M2M_PERIPH_GPIO18, 1);
    51fc:	2101      	movs	r1, #1
    51fe:	2006      	movs	r0, #6
    5200:	f001 fa04 	bl	660c <m2m_periph_gpio_set_val>
	m2m_periph_gpio_set_dir(M2M_PERIPH_GPIO15, 1);
    5204:	2101      	movs	r1, #1
    5206:	2004      	movs	r0, #4
    5208:	f001 f9e8 	bl	65dc <m2m_periph_gpio_set_dir>
	m2m_periph_gpio_set_dir(M2M_PERIPH_GPIO16, 1);
    520c:	2101      	movs	r1, #1
    520e:	2005      	movs	r0, #5
    5210:	f001 f9e4 	bl	65dc <m2m_periph_gpio_set_dir>
	m2m_periph_gpio_set_dir(M2M_PERIPH_GPIO18, 1);
    5214:	2101      	movs	r1, #1
    5216:	2006      	movs	r0, #6
    5218:	f001 f9e0 	bl	65dc <m2m_periph_gpio_set_dir>
	m2m_periph_gpio_set_val(M2M_PERIPH_GPIO4, 1);
    521c:	2101      	movs	r1, #1
    521e:	4608      	mov	r0, r1
    5220:	f001 f9f4 	bl	660c <m2m_periph_gpio_set_val>
	m2m_periph_gpio_set_val(M2M_PERIPH_GPIO5, 1);
    5224:	2101      	movs	r1, #1
    5226:	2002      	movs	r0, #2
    5228:	f001 f9f0 	bl	660c <m2m_periph_gpio_set_val>
	m2m_periph_gpio_set_val(M2M_PERIPH_GPIO6, 1);
    522c:	2101      	movs	r1, #1
    522e:	2003      	movs	r0, #3
    5230:	f001 f9ec 	bl	660c <m2m_periph_gpio_set_val>
	m2m_periph_gpio_set_dir(M2M_PERIPH_GPIO4, 1);
    5234:	2101      	movs	r1, #1
    5236:	4608      	mov	r0, r1
    5238:	f001 f9d0 	bl	65dc <m2m_periph_gpio_set_dir>
	m2m_periph_gpio_set_dir(M2M_PERIPH_GPIO5, 1);
    523c:	2101      	movs	r1, #1
    523e:	2002      	movs	r0, #2
    5240:	f001 f9cc 	bl	65dc <m2m_periph_gpio_set_dir>
	m2m_periph_gpio_set_dir(M2M_PERIPH_GPIO6, 1);
    5244:	2101      	movs	r1, #1
    5246:	2003      	movs	r0, #3
    5248:	f001 f9c8 	bl	65dc <m2m_periph_gpio_set_dir>
}
    524c:	4628      	mov	r0, r5
    524e:	b007      	add	sp, #28
    5250:	bd30      	pop	{r4, r5, pc}
		m2m_ssl_set_active_ciphersuites(SSL_CIPHER_RSA_WITH_AES_128_CBC_SHA | SSL_CIPHER_RSA_WITH_AES_128_CBC_SHA256 | SSL_CIPHER_RSA_WITH_AES_128_GCM_SHA256 | SSL_CIPHER_RSA_WITH_AES_256_CBC_SHA | SSL_CIPHER_RSA_WITH_AES_256_CBC_SHA256);
    5252:	20d3      	movs	r0, #211	; 0xd3
    5254:	f001 f9f2 	bl	663c <m2m_ssl_set_active_ciphersuites>
    5258:	e7c8      	b.n	51ec <WiFiClass::init()+0x68>
    525a:	bf00      	nop
    525c:	000057c9 	.word	0x000057c9
    5260:	00005149 	.word	0x00005149
    5264:	00005155 	.word	0x00005155
    5268:	1fff7780 	.word	0x1fff7780

0000526c <WiFiClass::firmwareVersion()>:
extern "C" {
	sint8 nm_get_firmware_info(tstrM2mRev* M2mRev);
}

char* WiFiClass::firmwareVersion()
{
    526c:	b510      	push	{r4, lr}
	tstrM2mRev rev;
	
	if (!_init) {
    526e:	6803      	ldr	r3, [r0, #0]
{
    5270:	b08c      	sub	sp, #48	; 0x30
    5272:	4604      	mov	r4, r0
	if (!_init) {
    5274:	b333      	cbz	r3, 52c4 <WiFiClass::firmwareVersion()+0x58>
		init();
	}
	nm_get_firmware_info(&rev);
    5276:	a802      	add	r0, sp, #8
	memset(_version, 0, 9);
    5278:	3404      	adds	r4, #4
	nm_get_firmware_info(&rev);
    527a:	f002 f801 	bl	7280 <nm_get_firmware_info>
	memset(_version, 0, 9);
    527e:	2209      	movs	r2, #9
    5280:	2100      	movs	r1, #0
    5282:	4620      	mov	r0, r4
    5284:	f006 fd28 	bl	bcd8 <memset>
	if (rev.u8FirmwareMajor != rev.u8DriverMajor && rev.u8FirmwareMinor != rev.u8DriverMinor) {
    5288:	f89d 200c 	ldrb.w	r2, [sp, #12]
    528c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    5290:	4293      	cmp	r3, r2
    5292:	d01a      	beq.n	52ca <WiFiClass::firmwareVersion()+0x5e>
    5294:	f89d 3010 	ldrb.w	r3, [sp, #16]
    5298:	f89d 100d 	ldrb.w	r1, [sp, #13]
    529c:	4299      	cmp	r1, r3
    529e:	d109      	bne.n	52b4 <WiFiClass::firmwareVersion()+0x48>
		sprintf(_version, "-Err-");
	}
	else {
		sprintf(_version, "%d.%d.%d", rev.u8FirmwareMajor, rev.u8FirmwareMinor, rev.u8FirmwarePatch);
    52a0:	f89d 000e 	ldrb.w	r0, [sp, #14]
    52a4:	9000      	str	r0, [sp, #0]
    52a6:	490a      	ldr	r1, [pc, #40]	; (52d0 <WiFiClass::firmwareVersion()+0x64>)
    52a8:	4620      	mov	r0, r4
    52aa:	f006 fb9d 	bl	b9e8 <sprintf>
	}
	return _version;
}
    52ae:	4620      	mov	r0, r4
    52b0:	b00c      	add	sp, #48	; 0x30
    52b2:	bd10      	pop	{r4, pc}
		sprintf(_version, "-Err-");
    52b4:	4907      	ldr	r1, [pc, #28]	; (52d4 <WiFiClass::firmwareVersion()+0x68>)
    52b6:	2206      	movs	r2, #6
    52b8:	4620      	mov	r0, r4
    52ba:	f003 fe17 	bl	8eec <memcpy>
}
    52be:	4620      	mov	r0, r4
    52c0:	b00c      	add	sp, #48	; 0x30
    52c2:	bd10      	pop	{r4, pc}
		init();
    52c4:	f7ff ff5e 	bl	5184 <WiFiClass::init()>
    52c8:	e7d5      	b.n	5276 <WiFiClass::firmwareVersion()+0xa>
	if (rev.u8FirmwareMajor != rev.u8DriverMajor && rev.u8FirmwareMinor != rev.u8DriverMinor) {
    52ca:	f89d 300d 	ldrb.w	r3, [sp, #13]
    52ce:	e7e7      	b.n	52a0 <WiFiClass::firmwareVersion()+0x34>
    52d0:	00011e4c 	.word	0x00011e4c
    52d4:	00011e44 	.word	0x00011e44

000052d8 <WiFiClass::begin()>:

uint8_t WiFiClass::begin()
{
    52d8:	b570      	push	{r4, r5, r6, lr}
	if (!_init) {
    52da:	6803      	ldr	r3, [r0, #0]
{
    52dc:	b082      	sub	sp, #8
    52de:	4604      	mov	r4, r0
	if (!_init) {
    52e0:	b373      	cbz	r3, 5340 <WiFiClass::begin()+0x68>
		init();
	}
	
	// Connect to router:
	if (_dhcp) {
    52e2:	69e3      	ldr	r3, [r4, #28]
    52e4:	b11b      	cbz	r3, 52ee <WiFiClass::begin()+0x16>
		_localip = 0;
    52e6:	2300      	movs	r3, #0
    52e8:	6123      	str	r3, [r4, #16]
		_submask = 0;
    52ea:	6163      	str	r3, [r4, #20]
		_gateway = 0;
    52ec:	61a3      	str	r3, [r4, #24]
	}
	if (m2m_wifi_default_connect() < 0) {
    52ee:	f001 fbad 	bl	6a4c <m2m_wifi_default_connect>
    52f2:	2800      	cmp	r0, #0
    52f4:	db30      	blt.n	5358 <WiFiClass::begin()+0x80>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    52f6:	4d1b      	ldr	r5, [pc, #108]	; (5364 <WiFiClass::begin()+0x8c>)
    52f8:	682a      	ldr	r2, [r5, #0]
    52fa:	9200      	str	r2, [sp, #0]
		_status = WL_CONNECT_FAILED;
		return _status;
	}
	_status = WL_IDLE_STATUS;
	_mode = WL_STA_MODE;
    52fc:	2301      	movs	r3, #1
	return ret;
    52fe:	9e00      	ldr	r6, [sp, #0]
    5300:	8523      	strh	r3, [r4, #40]	; 0x28

	// Wait for connection or timeout:
	for (unsigned long start = millis(); millis() - start < _timeout;)
    5302:	e005      	b.n	5310 <WiFiClass::begin()+0x38>
	{
		m2m_wifi_handle_events(NULL);
    5304:	f001 fba0 	bl	6a48 <m2m_wifi_handle_events>
		if ((_status & WL_CONNECTED) || (_status & WL_DISCONNECTED)) {
    5308:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    530c:	075b      	lsls	r3, r3, #29
    530e:	d108      	bne.n	5322 <WiFiClass::begin()+0x4a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5310:	682b      	ldr	r3, [r5, #0]
    5312:	9301      	str	r3, [sp, #4]
	return ret;
    5314:	9b01      	ldr	r3, [sp, #4]
	for (unsigned long start = millis(); millis() - start < _timeout;)
    5316:	6f22      	ldr	r2, [r4, #112]	; 0x70
    5318:	1b9b      	subs	r3, r3, r6
    531a:	4293      	cmp	r3, r2
		m2m_wifi_handle_events(NULL);
    531c:	f04f 0000 	mov.w	r0, #0
	for (unsigned long start = millis(); millis() - start < _timeout;)
    5320:	d3f0      	bcc.n	5304 <WiFiClass::begin()+0x2c>
			break;
		}
	}

	memset(_ssid, 0, M2M_MAX_SSID_LEN);
    5322:	2221      	movs	r2, #33	; 0x21
    5324:	2100      	movs	r1, #0
    5326:	f104 004d 	add.w	r0, r4, #77	; 0x4d
    532a:	f006 fcd5 	bl	bcd8 <memset>

	if (!(_status & WL_CONNECTED)) {
    532e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    5332:	f010 0303 	ands.w	r3, r0, #3
    5336:	d106      	bne.n	5346 <WiFiClass::begin()+0x6e>
		_mode = WL_RESET_MODE;
    5338:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

		m2m_wifi_handle_events(NULL);
	}

	return _status;
}
    533c:	b002      	add	sp, #8
    533e:	bd70      	pop	{r4, r5, r6, pc}
		init();
    5340:	f7ff ff20 	bl	5184 <WiFiClass::init()>
    5344:	e7cd      	b.n	52e2 <WiFiClass::begin()+0xa>
		m2m_wifi_get_connection_info();
    5346:	f001 fcdb 	bl	6d00 <m2m_wifi_get_connection_info>
		m2m_wifi_handle_events(NULL);
    534a:	2000      	movs	r0, #0
    534c:	f001 fb7c 	bl	6a48 <m2m_wifi_handle_events>
	return _status;
    5350:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
}
    5354:	b002      	add	sp, #8
    5356:	bd70      	pop	{r4, r5, r6, pc}
		_status = WL_CONNECT_FAILED;
    5358:	2004      	movs	r0, #4
    535a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
    535e:	b002      	add	sp, #8
    5360:	bd70      	pop	{r4, r5, r6, pc}
    5362:	bf00      	nop
    5364:	1fff7ae4 	.word	0x1fff7ae4

00005368 <WiFiClass::startAP(char const*, unsigned char, void const*, unsigned char)>:
{
	return startAP(ssid, M2M_WIFI_SEC_WPA_PSK, key, channel);
}

uint8_t WiFiClass::startAP(const char *ssid, uint8_t u8SecType, const void *pvAuthInfo, uint8_t channel)
{
    5368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    536c:	4615      	mov	r5, r2
    536e:	b0a2      	sub	sp, #136	; 0x88
	tstrM2MAPConfig strM2MAPConfig;

	if (!_init) {
    5370:	6802      	ldr	r2, [r0, #0]
{
    5372:	f89d 70a0 	ldrb.w	r7, [sp, #160]	; 0xa0
    5376:	4604      	mov	r4, r0
    5378:	460e      	mov	r6, r1
    537a:	4698      	mov	r8, r3
	if (!_init) {
    537c:	2a00      	cmp	r2, #0
    537e:	d061      	beq.n	5444 <WiFiClass::startAP(char const*, unsigned char, void const*, unsigned char)+0xdc>
	if (channel == 0) {
		channel = 1; // channel 1 is the minium channel
	}

	// Enter Access Point mode:
	memset(&strM2MAPConfig, 0x00, sizeof(tstrM2MAPConfig));
    5380:	2288      	movs	r2, #136	; 0x88
    5382:	2100      	movs	r1, #0
    5384:	4668      	mov	r0, sp
    5386:	f006 fca7 	bl	bcd8 <memset>
	strcpy((char *)&strM2MAPConfig.au8SSID, ssid);
    538a:	4631      	mov	r1, r6
    538c:	4668      	mov	r0, sp
    538e:	f006 fdc5 	bl	bf1c <strcpy>
	strM2MAPConfig.u8ListenChannel = channel;
    5392:	2f01      	cmp	r7, #1
	strM2MAPConfig.u8SecType = u8SecType;
	if (_localip == 0) { 
    5394:	6922      	ldr	r2, [r4, #16]
	strM2MAPConfig.u8SecType = u8SecType;
    5396:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
	strM2MAPConfig.u8ListenChannel = channel;
    539a:	bf38      	it	cc
    539c:	2701      	movcc	r7, #1
    539e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
	if (_localip == 0) { 
    53a2:	2a00      	cmp	r2, #0
    53a4:	d13d      	bne.n	5422 <WiFiClass::startAP(char const*, unsigned char, void const*, unsigned char)+0xba>
		strM2MAPConfig.au8DHCPServerIP[0] = 192;
    53a6:	23c0      	movs	r3, #192	; 0xc0
    53a8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		strM2MAPConfig.au8DHCPServerIP[1] = 168;
    53ac:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    53b0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
		strM2MAPConfig.au8DHCPServerIP[2] = 1;
		strM2MAPConfig.au8DHCPServerIP[3] = 1;
    53b4:	2301      	movs	r3, #1
    53b6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
			_status = WL_AP_FAILED;
			return _status;
		}
	}

	if (u8SecType == M2M_WIFI_SEC_WEP) {
    53ba:	2d03      	cmp	r5, #3
    53bc:	d051      	beq.n	5462 <WiFiClass::startAP(char const*, unsigned char, void const*, unsigned char)+0xfa>
		strM2MAPConfig.u8KeyIndx = wep_params->u8KeyIndx;
		strM2MAPConfig.u8KeySz = wep_params->u8KeySz;
		strcpy((char*)strM2MAPConfig.au8WepKey, (char *)wep_params->au8WepKey);
	}

	if (u8SecType == M2M_WIFI_SEC_WPA_PSK) {
    53be:	2d02      	cmp	r5, #2
    53c0:	d043      	beq.n	544a <WiFiClass::startAP(char const*, unsigned char, void const*, unsigned char)+0xe2>
		strM2MAPConfig.u8KeySz = strlen((char*)pvAuthInfo);
		strcpy((char*)strM2MAPConfig.au8Key, (char *)pvAuthInfo);
	}

	if (m2m_wifi_enable_ap(&strM2MAPConfig) < 0) {
    53c2:	4668      	mov	r0, sp
    53c4:	f001 fc0e 	bl	6be4 <m2m_wifi_enable_ap>
    53c8:	2800      	cmp	r0, #0
    53ca:	db35      	blt.n	5438 <WiFiClass::startAP(char const*, unsigned char, void const*, unsigned char)+0xd0>
		_status = WL_AP_FAILED;
		return _status;
	}
	_status = WL_AP_LISTENING;
	_mode = WL_AP_MODE;
    53cc:	f240 7303 	movw	r3, #1795	; 0x703

	memset(_ssid, 0, M2M_MAX_SSID_LEN);
    53d0:	f104 054d 	add.w	r5, r4, #77	; 0x4d
	_mode = WL_AP_MODE;
    53d4:	8523      	strh	r3, [r4, #40]	; 0x28
	memset(_ssid, 0, M2M_MAX_SSID_LEN);
    53d6:	2221      	movs	r2, #33	; 0x21
    53d8:	2100      	movs	r1, #0
    53da:	4628      	mov	r0, r5
    53dc:	f006 fc7c 	bl	bcd8 <memset>
	memcpy(_ssid, ssid, strlen(ssid));
    53e0:	4630      	mov	r0, r6
    53e2:	f006 fe0d 	bl	c000 <strlen>
    53e6:	4631      	mov	r1, r6
    53e8:	4602      	mov	r2, r0
    53ea:	4628      	mov	r0, r5
    53ec:	f003 fd7e 	bl	8eec <memcpy>
	m2m_memcpy((uint8 *)&_localip, (uint8 *)&strM2MAPConfig.au8DHCPServerIP[0], 4);
    53f0:	f10d 0141 	add.w	r1, sp, #65	; 0x41
    53f4:	f104 0010 	add.w	r0, r4, #16
    53f8:	2204      	movs	r2, #4
    53fa:	f000 fe5f 	bl	60bc <m2m_memcpy>
	_submask = 0x00FFFFFF;
	_gateway = _localip;
    53fe:	6923      	ldr	r3, [r4, #16]
    5400:	61a3      	str	r3, [r4, #24]
	_submask = 0x00FFFFFF;
    5402:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    5406:	6162      	str	r2, [r4, #20]

#ifdef CONF_PERIPH
	// WiFi led ON (rev A then rev B).
	m2m_periph_gpio_set_val(M2M_PERIPH_GPIO15, 0);
    5408:	2100      	movs	r1, #0
    540a:	2004      	movs	r0, #4
    540c:	f001 f8fe 	bl	660c <m2m_periph_gpio_set_val>
	m2m_periph_gpio_set_val(M2M_PERIPH_GPIO4, 0);
    5410:	2100      	movs	r1, #0
    5412:	2001      	movs	r0, #1
    5414:	f001 f8fa 	bl	660c <m2m_periph_gpio_set_val>
#endif

	return _status;
    5418:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
}
    541c:	b022      	add	sp, #136	; 0x88
    541e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(strM2MAPConfig.au8DHCPServerIP, &_localip, sizeof(_localip));
    5422:	2204      	movs	r2, #4
    5424:	f104 0110 	add.w	r1, r4, #16
    5428:	f10d 0041 	add.w	r0, sp, #65	; 0x41
    542c:	f003 fd5e 	bl	8eec <memcpy>
		if (strM2MAPConfig.au8DHCPServerIP[3] == 100) {
    5430:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
    5434:	2b64      	cmp	r3, #100	; 0x64
    5436:	d1c0      	bne.n	53ba <WiFiClass::startAP(char const*, unsigned char, void const*, unsigned char)+0x52>
			_status = WL_AP_FAILED;
    5438:	2009      	movs	r0, #9
    543a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
    543e:	b022      	add	sp, #136	; 0x88
    5440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		init();
    5444:	f7ff fe9e 	bl	5184 <WiFiClass::init()>
    5448:	e79a      	b.n	5380 <WiFiClass::startAP(char const*, unsigned char, void const*, unsigned char)+0x18>
		strM2MAPConfig.u8KeySz = strlen((char*)pvAuthInfo);
    544a:	4640      	mov	r0, r8
    544c:	f006 fdd8 	bl	c000 <strlen>
		strcpy((char*)strM2MAPConfig.au8Key, (char *)pvAuthInfo);
    5450:	4641      	mov	r1, r8
		strM2MAPConfig.u8KeySz = strlen((char*)pvAuthInfo);
    5452:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
		strcpy((char*)strM2MAPConfig.au8Key, (char *)pvAuthInfo);
    5456:	1c42      	adds	r2, r0, #1
    5458:	f10d 0045 	add.w	r0, sp, #69	; 0x45
    545c:	f003 fd46 	bl	8eec <memcpy>
    5460:	e7af      	b.n	53c2 <WiFiClass::startAP(char const*, unsigned char, void const*, unsigned char)+0x5a>
		strM2MAPConfig.u8KeyIndx = wep_params->u8KeyIndx;
    5462:	f898 3000 	ldrb.w	r3, [r8]
    5466:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		strcpy((char*)strM2MAPConfig.au8WepKey, (char *)wep_params->au8WepKey);
    546a:	f108 0102 	add.w	r1, r8, #2
		strM2MAPConfig.u8KeySz = wep_params->u8KeySz;
    546e:	f898 3001 	ldrb.w	r3, [r8, #1]
    5472:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		strcpy((char*)strM2MAPConfig.au8WepKey, (char *)wep_params->au8WepKey);
    5476:	a809      	add	r0, sp, #36	; 0x24
    5478:	f006 fd50 	bl	bf1c <strcpy>
	if (u8SecType == M2M_WIFI_SEC_WPA_PSK) {
    547c:	e7a1      	b.n	53c2 <WiFiClass::startAP(char const*, unsigned char, void const*, unsigned char)+0x5a>
    547e:	bf00      	nop

00005480 <WiFiClass::beginAP(char const*)>:
{
    5480:	b500      	push	{lr}
    5482:	b083      	sub	sp, #12
	return startAP(ssid, M2M_WIFI_SEC_OPEN, NULL, channel);
    5484:	2201      	movs	r2, #1
    5486:	9200      	str	r2, [sp, #0]
    5488:	2300      	movs	r3, #0
    548a:	f7ff ff6d 	bl	5368 <WiFiClass::startAP(char const*, unsigned char, void const*, unsigned char)>
}
    548e:	b003      	add	sp, #12
    5490:	f85d fb04 	ldr.w	pc, [sp], #4

00005494 <WiFiClass::startProvision(char const*, char const*, unsigned char)>:

	return status();
}

uint8_t WiFiClass::startProvision(const char *ssid, const char *url, uint8_t channel)
{
    5494:	b5f0      	push	{r4, r5, r6, r7, lr}
    5496:	461e      	mov	r6, r3
	tstrM2MAPConfig strM2MAPConfig;

	if (!_init) {
    5498:	6803      	ldr	r3, [r0, #0]
{
    549a:	b0a3      	sub	sp, #140	; 0x8c
    549c:	4604      	mov	r4, r0
    549e:	460d      	mov	r5, r1
    54a0:	4617      	mov	r7, r2
	if (!_init) {
    54a2:	2b00      	cmp	r3, #0
    54a4:	d042      	beq.n	552c <WiFiClass::startProvision(char const*, char const*, unsigned char)+0x98>
		init();
	}

	// Enter Provision mode:
	memset(&strM2MAPConfig, 0x00, sizeof(tstrM2MAPConfig));
    54a6:	2288      	movs	r2, #136	; 0x88
    54a8:	2100      	movs	r1, #0
    54aa:	4668      	mov	r0, sp
    54ac:	f006 fc14 	bl	bcd8 <memset>
	strcpy((char *)&strM2MAPConfig.au8SSID, ssid);
    54b0:	4629      	mov	r1, r5
    54b2:	4668      	mov	r0, sp
    54b4:	f006 fd32 	bl	bf1c <strcpy>
	strM2MAPConfig.u8ListenChannel = channel;
    54b8:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
	strM2MAPConfig.u8SecType = M2M_WIFI_SEC_OPEN;
    54bc:	2601      	movs	r6, #1
	strM2MAPConfig.u8SsidHide = SSID_MODE_VISIBLE;
    54be:	4b1f      	ldr	r3, [pc, #124]	; (553c <WiFiClass::startProvision(char const*, char const*, unsigned char)+0xa8>)
	strM2MAPConfig.u8SecType = M2M_WIFI_SEC_OPEN;
    54c0:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
	strM2MAPConfig.au8DHCPServerIP[0] = 192;
	strM2MAPConfig.au8DHCPServerIP[1] = 168;
	strM2MAPConfig.au8DHCPServerIP[2] = 1;
	strM2MAPConfig.au8DHCPServerIP[3] = 1;

	if (m2m_wifi_start_provision_mode((tstrM2MAPConfig *)&strM2MAPConfig, (char*)url, 1) < 0) {
    54c4:	4639      	mov	r1, r7
    54c6:	4668      	mov	r0, sp
    54c8:	4632      	mov	r2, r6
	strM2MAPConfig.au8DHCPServerIP[3] = 1;
    54ca:	f88d 6044 	strb.w	r6, [sp, #68]	; 0x44
	strM2MAPConfig.u8SsidHide = SSID_MODE_VISIBLE;
    54ce:	9310      	str	r3, [sp, #64]	; 0x40
	if (m2m_wifi_start_provision_mode((tstrM2MAPConfig *)&strM2MAPConfig, (char*)url, 1) < 0) {
    54d0:	f001 fbca 	bl	6c68 <m2m_wifi_start_provision_mode>
    54d4:	2800      	cmp	r0, #0
    54d6:	db2c      	blt.n	5532 <WiFiClass::startProvision(char const*, char const*, unsigned char)+0x9e>
		_status = WL_PROVISIONING_FAILED;
		return _status;
	}
	_status = WL_PROVISIONING;
	_mode = WL_PROV_MODE;
    54d8:	f640 2302 	movw	r3, #2562	; 0xa02

	memset(_ssid, 0, M2M_MAX_SSID_LEN);
    54dc:	f104 074d 	add.w	r7, r4, #77	; 0x4d
	_mode = WL_PROV_MODE;
    54e0:	8523      	strh	r3, [r4, #40]	; 0x28
	memset(_ssid, 0, M2M_MAX_SSID_LEN);
    54e2:	2221      	movs	r2, #33	; 0x21
    54e4:	2100      	movs	r1, #0
    54e6:	4638      	mov	r0, r7
    54e8:	f006 fbf6 	bl	bcd8 <memset>
	memcpy(_ssid, ssid, strlen(ssid));
    54ec:	4628      	mov	r0, r5
    54ee:	f006 fd87 	bl	c000 <strlen>
    54f2:	4629      	mov	r1, r5
    54f4:	4602      	mov	r2, r0
    54f6:	4638      	mov	r0, r7
    54f8:	f003 fcf8 	bl	8eec <memcpy>
	m2m_memcpy((uint8 *)&_localip, (uint8 *)&strM2MAPConfig.au8DHCPServerIP[0], 4);
    54fc:	f10d 0141 	add.w	r1, sp, #65	; 0x41
    5500:	f104 0010 	add.w	r0, r4, #16
    5504:	2204      	movs	r2, #4
    5506:	f000 fdd9 	bl	60bc <m2m_memcpy>
	_submask = 0x00FFFFFF;
	_gateway = _localip;
    550a:	6923      	ldr	r3, [r4, #16]
    550c:	61a3      	str	r3, [r4, #24]
	_submask = 0x00FFFFFF;
    550e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    5512:	6162      	str	r2, [r4, #20]

#ifdef CONF_PERIPH
	// WiFi led ON (rev A then rev B).
	m2m_periph_gpio_set_val(M2M_PERIPH_GPIO15, 0);
    5514:	2100      	movs	r1, #0
    5516:	2004      	movs	r0, #4
    5518:	f001 f878 	bl	660c <m2m_periph_gpio_set_val>
	m2m_periph_gpio_set_val(M2M_PERIPH_GPIO4, 0);
    551c:	2100      	movs	r1, #0
    551e:	4630      	mov	r0, r6
    5520:	f001 f874 	bl	660c <m2m_periph_gpio_set_val>
#endif

	return _status;
    5524:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
}
    5528:	b023      	add	sp, #140	; 0x8c
    552a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		init();
    552c:	f7ff fe2a 	bl	5184 <WiFiClass::init()>
    5530:	e7b9      	b.n	54a6 <WiFiClass::startProvision(char const*, char const*, unsigned char)+0x12>
		_status = WL_PROVISIONING_FAILED;
    5532:	200b      	movs	r0, #11
    5534:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
}
    5538:	b023      	add	sp, #140	; 0x8c
    553a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    553c:	01a8c000 	.word	0x01a8c000

00005540 <WiFiClass::beginProvision(unsigned char)>:
{
    5540:	b5f0      	push	{r4, r5, r6, r7, lr}
    5542:	b087      	sub	sp, #28
    5544:	4605      	mov	r5, r0
    5546:	460f      	mov	r7, r1
	if (begin() != WL_CONNECTED) {
    5548:	f7ff fec6 	bl	52d8 <WiFiClass::begin()>
    554c:	2803      	cmp	r0, #3
    554e:	d108      	bne.n	5562 <WiFiClass::beginProvision(unsigned char)+0x22>
	return _scan_channel;
}

uint8_t WiFiClass::status()
{
	if (!_init) {
    5550:	682b      	ldr	r3, [r5, #0]
    5552:	b33b      	cbz	r3, 55a4 <WiFiClass::beginProvision(unsigned char)+0x64>
		init();
	}

	m2m_wifi_handle_events(NULL);
    5554:	2000      	movs	r0, #0
    5556:	f001 fa77 	bl	6a48 <m2m_wifi_handle_events>
}
    555a:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    555e:	b007      	add	sp, #28
    5560:	bdf0      	pop	{r4, r5, r6, r7, pc}
	m2m_wifi_get_mac_address(mac);
    5562:	4668      	mov	r0, sp
	m2m_wifi_get_mac_address(tmpMac);
    5564:	ae02      	add	r6, sp, #8
	m2m_wifi_get_mac_address(mac);
    5566:	f001 fb6f 	bl	6c48 <m2m_wifi_get_mac_address>
	m2m_wifi_get_mac_address(tmpMac);
    556a:	4630      	mov	r0, r6
    556c:	f001 fb6c 	bl	6c48 <m2m_wifi_get_mac_address>
	for(i = 0; i < 6; i++)
    5570:	f10d 040e 	add.w	r4, sp, #14
    5574:	466a      	mov	r2, sp
		mac[i] = tmpMac[5-i];
    5576:	f814 cd01 	ldrb.w	ip, [r4, #-1]!
    557a:	f802 cb01 	strb.w	ip, [r2], #1
	for(i = 0; i < 6; i++)
    557e:	42b4      	cmp	r4, r6
    5580:	d1f9      	bne.n	5576 <WiFiClass::beginProvision(unsigned char)+0x36>
		sprintf(provSsid, "wifi101-%.2X%.2X", mac[1], mac[0]);
    5582:	f89d 2001 	ldrb.w	r2, [sp, #1]
    5586:	4909      	ldr	r1, [pc, #36]	; (55ac <WiFiClass::beginProvision(unsigned char)+0x6c>)
    5588:	f89d 3000 	ldrb.w	r3, [sp]
    558c:	4620      	mov	r0, r4
    558e:	f006 fa2b 	bl	b9e8 <sprintf>
		startProvision(provSsid, "wifi101", channel);
    5592:	463b      	mov	r3, r7
    5594:	4a06      	ldr	r2, [pc, #24]	; (55b0 <WiFiClass::beginProvision(unsigned char)+0x70>)
    5596:	4621      	mov	r1, r4
    5598:	4628      	mov	r0, r5
    559a:	f7ff ff7b 	bl	5494 <WiFiClass::startProvision(char const*, char const*, unsigned char)>
	if (!_init) {
    559e:	682b      	ldr	r3, [r5, #0]
    55a0:	2b00      	cmp	r3, #0
    55a2:	d1d7      	bne.n	5554 <WiFiClass::beginProvision(unsigned char)+0x14>
		init();
    55a4:	4628      	mov	r0, r5
    55a6:	f7ff fded 	bl	5184 <WiFiClass::init()>
    55aa:	e7d3      	b.n	5554 <WiFiClass::beginProvision(unsigned char)+0x14>
    55ac:	00011e58 	.word	0x00011e58
    55b0:	00011e6c 	.word	0x00011e6c

000055b4 <WiFiClass::handleEvent(unsigned char, void*)>:
{
    55b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (u8MsgType) {
    55b6:	3904      	subs	r1, #4
{
    55b8:	b083      	sub	sp, #12
    55ba:	4604      	mov	r4, r0
    55bc:	4615      	mov	r5, r2
	switch (u8MsgType) {
    55be:	292e      	cmp	r1, #46	; 0x2e
    55c0:	d842      	bhi.n	5648 <WiFiClass::handleEvent(unsigned char, void*)+0x94>
    55c2:	e8df f001 	tbb	[pc, r1]
    55c6:	4157      	.short	0x4157
    55c8:	7341415c 	.word	0x7341415c
    55cc:	41414141 	.word	0x41414141
    55d0:	9a414141 	.word	0x9a414141
    55d4:	41411841 	.word	0x41411841
    55d8:	41414141 	.word	0x41414141
    55dc:	4141a141 	.word	0x4141a141
    55e0:	41414141 	.word	0x41414141
    55e4:	41414141 	.word	0x41414141
    55e8:	41414141 	.word	0x41414141
    55ec:	41b341ab 	.word	0x41b341ab
    55f0:	41414141 	.word	0x41414141
    55f4:	43          	.byte	0x43
    55f5:	00          	.byte	0x00
			uint16_t scan_ssid_len = strlen((const char *)pstrScanResult->au8SSID);
    55f6:	f102 060a 	add.w	r6, r2, #10
    55fa:	4630      	mov	r0, r6
    55fc:	f006 fd00 	bl	c000 <strlen>
			memset(_scan_ssid, 0, M2M_MAX_SSID_LEN);
    5600:	f104 032a 	add.w	r3, r4, #42	; 0x2a
			uint16_t scan_ssid_len = strlen((const char *)pstrScanResult->au8SSID);
    5604:	4607      	mov	r7, r0
			memset(_scan_ssid, 0, M2M_MAX_SSID_LEN);
    5606:	2221      	movs	r2, #33	; 0x21
    5608:	2100      	movs	r1, #0
    560a:	4618      	mov	r0, r3
    560c:	f006 fb64 	bl	bcd8 <memset>
			if (scan_ssid_len) {
    5610:	b2ba      	uxth	r2, r7
    5612:	2a00      	cmp	r2, #0
    5614:	f040 80b7 	bne.w	5786 <WiFiClass::handleEvent(unsigned char, void*)+0x1d2>
			if (_remoteMacAddress) {
    5618:	6a62      	ldr	r2, [r4, #36]	; 0x24
    561a:	b14a      	cbz	r2, 5630 <WiFiClass::handleEvent(unsigned char, void*)+0x7c>
    561c:	4630      	mov	r0, r6
				for(int i = 0; i < 6; i++) {
    561e:	2300      	movs	r3, #0
    5620:	e000      	b.n	5624 <WiFiClass::handleEvent(unsigned char, void*)+0x70>
					_remoteMacAddress[i] = pstrScanResult->au8BSSID[5-i];
    5622:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5624:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
    5628:	54d1      	strb	r1, [r2, r3]
				for(int i = 0; i < 6; i++) {
    562a:	3301      	adds	r3, #1
    562c:	2b06      	cmp	r3, #6
    562e:	d1f8      	bne.n	5622 <WiFiClass::handleEvent(unsigned char, void*)+0x6e>
			_resolve = pstrScanResult->s8rssi;
    5630:	f995 3001 	ldrsb.w	r3, [r5, #1]
    5634:	6223      	str	r3, [r4, #32]
			_scan_auth = pstrScanResult->u8AuthType;
    5636:	78ab      	ldrb	r3, [r5, #2]
    5638:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
			_scan_channel = pstrScanResult->u8ch;
    563c:	78ea      	ldrb	r2, [r5, #3]
    563e:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
			_status = WL_SCAN_COMPLETED;
    5642:	2302      	movs	r3, #2
    5644:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
    5648:	b003      	add	sp, #12
    564a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (_mode == WL_STA_MODE) {
    564c:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
    5650:	2e01      	cmp	r6, #1
    5652:	d1f9      	bne.n	5648 <WiFiClass::handleEvent(unsigned char, void*)+0x94>
				_localip = pstrIPCfg->u32StaticIP;
    5654:	6813      	ldr	r3, [r2, #0]
    5656:	6103      	str	r3, [r0, #16]
				_submask = pstrIPCfg->u32SubnetMask;
    5658:	68d3      	ldr	r3, [r2, #12]
    565a:	6143      	str	r3, [r0, #20]
				_gateway = pstrIPCfg->u32Gateway;
    565c:	6852      	ldr	r2, [r2, #4]
    565e:	6182      	str	r2, [r0, #24]
				_status = WL_CONNECTED;
    5660:	2303      	movs	r3, #3
				m2m_periph_gpio_set_val(M2M_PERIPH_GPIO15, 0);
    5662:	2100      	movs	r1, #0
				_status = WL_CONNECTED;
    5664:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
				m2m_periph_gpio_set_val(M2M_PERIPH_GPIO15, 0);
    5668:	2004      	movs	r0, #4
    566a:	f000 ffcf 	bl	660c <m2m_periph_gpio_set_val>
				m2m_periph_gpio_set_val(M2M_PERIPH_GPIO4, 0);
    566e:	2100      	movs	r1, #0
    5670:	4630      	mov	r0, r6
    5672:	e06f      	b.n	5754 <WiFiClass::handleEvent(unsigned char, void*)+0x1a0>
			_resolve = *((int8_t *)pvMsg);
    5674:	f992 3000 	ldrsb.w	r3, [r2]
    5678:	6203      	str	r3, [r0, #32]
}
    567a:	b003      	add	sp, #12
    567c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (_remoteMacAddress) {
    567e:	6a42      	ldr	r2, [r0, #36]	; 0x24
    5680:	b162      	cbz	r2, 569c <WiFiClass::handleEvent(unsigned char, void*)+0xe8>
    5682:	f105 012c 	add.w	r1, r5, #44	; 0x2c
				for(int i = 0; i < 6; i++) {
    5686:	2300      	movs	r3, #0
    5688:	e000      	b.n	568c <WiFiClass::handleEvent(unsigned char, void*)+0xd8>
					_remoteMacAddress[i] = pstrConnInfo->au8MACAddress[5-i];
    568a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    568c:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
    5690:	54d0      	strb	r0, [r2, r3]
				for(int i = 0; i < 6; i++) {
    5692:	3301      	adds	r3, #1
    5694:	2b06      	cmp	r3, #6
    5696:	d1f8      	bne.n	568a <WiFiClass::handleEvent(unsigned char, void*)+0xd6>
				_remoteMacAddress = 0;
    5698:	2300      	movs	r3, #0
    569a:	6263      	str	r3, [r4, #36]	; 0x24
			strcpy((char *)_ssid, pstrConnInfo->acSSID);
    569c:	4629      	mov	r1, r5
    569e:	f104 004d 	add.w	r0, r4, #77	; 0x4d
}
    56a2:	b003      	add	sp, #12
    56a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			strcpy((char *)_ssid, pstrConnInfo->acSSID);
    56a8:	f006 bc38 	b.w	bf1c <strcpy>
			if (pstrProvInfo->u8Status == M2M_SUCCESS) {
    56ac:	f892 6063 	ldrb.w	r6, [r2, #99]	; 0x63
    56b0:	2e00      	cmp	r6, #0
    56b2:	d154      	bne.n	575e <WiFiClass::handleEvent(unsigned char, void*)+0x1aa>
				memset(_ssid, 0, M2M_MAX_SSID_LEN);
    56b4:	f100 074d 	add.w	r7, r0, #77	; 0x4d
    56b8:	4631      	mov	r1, r6
    56ba:	2221      	movs	r2, #33	; 0x21
    56bc:	4638      	mov	r0, r7
    56be:	f006 fb0b 	bl	bcd8 <memset>
				memcpy(_ssid, (char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID));
    56c2:	4628      	mov	r0, r5
    56c4:	f006 fc9c 	bl	c000 <strlen>
    56c8:	4629      	mov	r1, r5
    56ca:	4602      	mov	r2, r0
    56cc:	4638      	mov	r0, r7
    56ce:	f003 fc0d 	bl	8eec <memcpy>
				_mode = WL_STA_MODE;
    56d2:	2301      	movs	r3, #1
    56d4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
				_localip = 0;
    56d8:	6126      	str	r6, [r4, #16]
				_submask = 0;
    56da:	6166      	str	r6, [r4, #20]
				_gateway = 0;
    56dc:	61a6      	str	r6, [r4, #24]
				m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID),
    56de:	4628      	mov	r0, r5
    56e0:	f006 fc8e 	bl	c000 <strlen>
    56e4:	23ff      	movs	r3, #255	; 0xff
    56e6:	f895 2062 	ldrb.w	r2, [r5, #98]	; 0x62
    56ea:	9300      	str	r3, [sp, #0]
    56ec:	b2c1      	uxtb	r1, r0
    56ee:	f105 0321 	add.w	r3, r5, #33	; 0x21
    56f2:	4628      	mov	r0, r5
    56f4:	f001 fa48 	bl	6b88 <m2m_wifi_connect>
    56f8:	e7a6      	b.n	5648 <WiFiClass::handleEvent(unsigned char, void*)+0x94>
			if (pstrInfo->u8NumofCh >= 1) {
    56fa:	7813      	ldrb	r3, [r2, #0]
    56fc:	2b00      	cmp	r3, #0
    56fe:	d0a3      	beq.n	5648 <WiFiClass::handleEvent(unsigned char, void*)+0x94>
				_status = WL_SCAN_COMPLETED;
    5700:	2302      	movs	r3, #2
    5702:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    5706:	e79f      	b.n	5648 <WiFiClass::handleEvent(unsigned char, void*)+0x94>
			if (_resolve != 0) {
    5708:	6a00      	ldr	r0, [r0, #32]
    570a:	2800      	cmp	r0, #0
    570c:	d09c      	beq.n	5648 <WiFiClass::handleEvent(unsigned char, void*)+0x94>
				memcpy((tstrSystemTime *)_resolve, pvMsg, sizeof(tstrSystemTime));
    570e:	2208      	movs	r2, #8
    5710:	4629      	mov	r1, r5
    5712:	f003 fbeb 	bl	8eec <memcpy>
				_resolve = 0;
    5716:	2300      	movs	r3, #0
    5718:	6223      	str	r3, [r4, #32]
}
    571a:	e795      	b.n	5648 <WiFiClass::handleEvent(unsigned char, void*)+0x94>
			if (pstrDefaultConnResp->s8ErrorCode) {
    571c:	f992 3000 	ldrsb.w	r3, [r2]
    5720:	2b00      	cmp	r3, #0
    5722:	d091      	beq.n	5648 <WiFiClass::handleEvent(unsigned char, void*)+0x94>
				_status = WL_DISCONNECTED;
    5724:	2306      	movs	r3, #6
    5726:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    572a:	e78d      	b.n	5648 <WiFiClass::handleEvent(unsigned char, void*)+0x94>
			if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    572c:	7813      	ldrb	r3, [r2, #0]
    572e:	2b01      	cmp	r3, #1
    5730:	d01e      	beq.n	5770 <WiFiClass::handleEvent(unsigned char, void*)+0x1bc>
			} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    5732:	2b00      	cmp	r3, #0
    5734:	d188      	bne.n	5648 <WiFiClass::handleEvent(unsigned char, void*)+0x94>
				if (_mode == WL_STA_MODE) {
    5736:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    573a:	2a01      	cmp	r2, #1
    573c:	d030      	beq.n	57a0 <WiFiClass::handleEvent(unsigned char, void*)+0x1ec>
				} else if (_mode == WL_AP_MODE) {
    573e:	2a03      	cmp	r2, #3
					_status = WL_AP_LISTENING;
    5740:	bf04      	itt	eq
    5742:	2307      	moveq	r3, #7
    5744:	f880 3029 	strbeq.w	r3, [r0, #41]	; 0x29
				m2m_periph_gpio_set_val(M2M_PERIPH_GPIO15, 1);
    5748:	2101      	movs	r1, #1
    574a:	2004      	movs	r0, #4
    574c:	f000 ff5e 	bl	660c <m2m_periph_gpio_set_val>
				m2m_periph_gpio_set_val(M2M_PERIPH_GPIO4, 1);
    5750:	2101      	movs	r1, #1
    5752:	4608      	mov	r0, r1
}
    5754:	b003      	add	sp, #12
    5756:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				m2m_periph_gpio_set_val(M2M_PERIPH_GPIO4, 1);
    575a:	f000 bf57 	b.w	660c <m2m_periph_gpio_set_val>
				_status = WL_PROVISIONING_FAILED;
    575e:	230b      	movs	r3, #11
	return beginProvision(1);
    5760:	2101      	movs	r1, #1
				_status = WL_PROVISIONING_FAILED;
    5762:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
    5766:	b003      	add	sp, #12
    5768:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return beginProvision(1);
    576c:	f7ff bee8 	b.w	5540 <WiFiClass::beginProvision(unsigned char)>
				if (_mode == WL_STA_MODE && !_dhcp) {
    5770:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    5774:	2b01      	cmp	r3, #1
    5776:	d00a      	beq.n	578e <WiFiClass::handleEvent(unsigned char, void*)+0x1da>
				} else if (_mode == WL_AP_MODE) {
    5778:	2b03      	cmp	r3, #3
    577a:	f47f af65 	bne.w	5648 <WiFiClass::handleEvent(unsigned char, void*)+0x94>
					_status = WL_AP_CONNECTED;
    577e:	2308      	movs	r3, #8
    5780:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    5784:	e760      	b.n	5648 <WiFiClass::handleEvent(unsigned char, void*)+0x94>
				memcpy(_scan_ssid, (const char *)pstrScanResult->au8SSID, scan_ssid_len);
    5786:	4631      	mov	r1, r6
    5788:	f003 fbb0 	bl	8eec <memcpy>
    578c:	e744      	b.n	5618 <WiFiClass::handleEvent(unsigned char, void*)+0x64>
				if (_mode == WL_STA_MODE && !_dhcp) {
    578e:	69c1      	ldr	r1, [r0, #28]
    5790:	2900      	cmp	r1, #0
    5792:	f47f af59 	bne.w	5648 <WiFiClass::handleEvent(unsigned char, void*)+0x94>
					_status = WL_CONNECTED;
    5796:	2303      	movs	r3, #3
    5798:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
					m2m_periph_gpio_set_val(M2M_PERIPH_GPIO15, 0);
    579c:	2004      	movs	r0, #4
    579e:	e7d9      	b.n	5754 <WiFiClass::handleEvent(unsigned char, void*)+0x1a0>
					if (_dhcp) {
    57a0:	69c2      	ldr	r2, [r0, #28]
					_status = WL_DISCONNECTED;
    57a2:	2106      	movs	r1, #6
    57a4:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
					if (_dhcp) {
    57a8:	b112      	cbz	r2, 57b0 <WiFiClass::handleEvent(unsigned char, void*)+0x1fc>
						_localip = 0;
    57aa:	6103      	str	r3, [r0, #16]
						_submask = 0;
    57ac:	6143      	str	r3, [r0, #20]
						_gateway = 0;
    57ae:	6183      	str	r3, [r0, #24]
						WiFiSocket.close(i);
    57b0:	4d04      	ldr	r5, [pc, #16]	; (57c4 <WiFiClass::handleEvent(unsigned char, void*)+0x210>)
{
    57b2:	2400      	movs	r4, #0
						WiFiSocket.close(i);
    57b4:	b261      	sxtb	r1, r4
    57b6:	4628      	mov	r0, r5
					for (int i = 0; i < MAX_SOCKET; i++) {
    57b8:	3401      	adds	r4, #1
						WiFiSocket.close(i);
    57ba:	f002 ff79 	bl	86b0 <WiFiSocketClass::close(signed char)>
					for (int i = 0; i < MAX_SOCKET; i++) {
    57be:	2c0b      	cmp	r4, #11
    57c0:	d1f8      	bne.n	57b4 <WiFiClass::handleEvent(unsigned char, void*)+0x200>
    57c2:	e7c1      	b.n	5748 <WiFiClass::handleEvent(unsigned char, void*)+0x194>
    57c4:	1fff784c 	.word	0x1fff784c

000057c8 <wifi_cb(unsigned char, void*)>:
{
    57c8:	4603      	mov	r3, r0
    57ca:	460a      	mov	r2, r1
	WiFi.handleEvent(u8MsgType, pvMsg);
    57cc:	4801      	ldr	r0, [pc, #4]	; (57d4 <wifi_cb(unsigned char, void*)+0xc>)
    57ce:	4619      	mov	r1, r3
    57d0:	f7ff bef0 	b.w	55b4 <WiFiClass::handleEvent(unsigned char, void*)>
    57d4:	1fff76cc 	.word	0x1fff76cc

000057d8 <WiFiClass::config(IPAddress)>:
{
    57d8:	b530      	push	{r4, r5, lr}
	if (!_init) {
    57da:	6803      	ldr	r3, [r0, #0]
    57dc:	684d      	ldr	r5, [r1, #4]
{
    57de:	b08b      	sub	sp, #44	; 0x2c
    57e0:	4604      	mov	r4, r0
	if (!_init) {
    57e2:	b193      	cbz	r3, 580a <WiFiClass::config(IPAddress)+0x32>
	conf.u32DNS = (uint32_t)dns_server;
    57e4:	2000      	movs	r0, #0
	_dhcp = 0;
    57e6:	61e0      	str	r0, [r4, #28]
	conf.u32DNS = (uint32_t)dns_server;
    57e8:	9007      	str	r0, [sp, #28]
	conf.u32Gateway = (uint32_t)gateway;
    57ea:	9006      	str	r0, [sp, #24]
	conf.u32StaticIP = (uint32_t)local_ip;
    57ec:	9505      	str	r5, [sp, #20]
	conf.u32SubnetMask = (uint32_t)subnet;
    57ee:	9008      	str	r0, [sp, #32]
	m2m_wifi_enable_dhcp(0); // disable DHCP
    57f0:	f001 f9e6 	bl	6bc0 <m2m_wifi_enable_dhcp>
	m2m_wifi_set_static_ip(&conf);
    57f4:	a805      	add	r0, sp, #20
    57f6:	f001 f9d3 	bl	6ba0 <m2m_wifi_set_static_ip>
	_localip = conf.u32StaticIP;
    57fa:	9905      	ldr	r1, [sp, #20]
	_submask = conf.u32SubnetMask;
    57fc:	9a08      	ldr	r2, [sp, #32]
	_gateway = conf.u32Gateway;
    57fe:	9b06      	ldr	r3, [sp, #24]
	_localip = conf.u32StaticIP;
    5800:	6121      	str	r1, [r4, #16]
	_submask = conf.u32SubnetMask;
    5802:	6162      	str	r2, [r4, #20]
	_gateway = conf.u32Gateway;
    5804:	61a3      	str	r3, [r4, #24]
}
    5806:	b00b      	add	sp, #44	; 0x2c
    5808:	bd30      	pop	{r4, r5, pc}
		init();
    580a:	f7ff fcbb 	bl	5184 <WiFiClass::init()>
    580e:	e7e9      	b.n	57e4 <WiFiClass::config(IPAddress)+0xc>

00005810 <WiFiClass::localIP()>:
}
    5810:	6900      	ldr	r0, [r0, #16]
    5812:	4770      	bx	lr

00005814 <WiFiClass::SSID()>:
	if (_status == WL_CONNECTED || _status == WL_AP_LISTENING || _status == WL_AP_CONNECTED) {
    5814:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    5818:	2b03      	cmp	r3, #3
    581a:	d004      	beq.n	5826 <WiFiClass::SSID()+0x12>
    581c:	3b07      	subs	r3, #7
    581e:	2b01      	cmp	r3, #1
    5820:	d901      	bls.n	5826 <WiFiClass::SSID()+0x12>
		return 0;
    5822:	2000      	movs	r0, #0
}
    5824:	4770      	bx	lr
		return _ssid;
    5826:	304d      	adds	r0, #77	; 0x4d
    5828:	4770      	bx	lr
    582a:	bf00      	nop

0000582c <WiFiClass::RSSI()>:
	if (_mode == WL_RESET_MODE) {
    582c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    5830:	b33b      	cbz	r3, 5882 <WiFiClass::RSSI()+0x56>
{
    5832:	b570      	push	{r4, r5, r6, lr}
    5834:	4605      	mov	r5, r0
	m2m_wifi_handle_events(NULL);
    5836:	2000      	movs	r0, #0
	_resolve = 0;
    5838:	4604      	mov	r4, r0
{
    583a:	b082      	sub	sp, #8
	m2m_wifi_handle_events(NULL);
    583c:	f001 f904 	bl	6a48 <m2m_wifi_handle_events>
	_resolve = 0;
    5840:	622c      	str	r4, [r5, #32]
	if (m2m_wifi_req_curr_rssi() < 0) {
    5842:	f001 f9f3 	bl	6c2c <m2m_wifi_req_curr_rssi>
    5846:	42a0      	cmp	r0, r4
    5848:	db18      	blt.n	587c <WiFiClass::RSSI()+0x50>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    584a:	4c0f      	ldr	r4, [pc, #60]	; (5888 <WiFiClass::RSSI()+0x5c>)
	while (_resolve == 0 && millis() - start < 1000) {
    584c:	6a28      	ldr	r0, [r5, #32]
    584e:	6822      	ldr	r2, [r4, #0]
    5850:	9200      	str	r2, [sp, #0]
	return ret;
    5852:	9e00      	ldr	r6, [sp, #0]
    5854:	b120      	cbz	r0, 5860 <WiFiClass::RSSI()+0x34>
    5856:	e00d      	b.n	5874 <WiFiClass::RSSI()+0x48>
		m2m_wifi_handle_events(NULL);
    5858:	f001 f8f6 	bl	6a48 <m2m_wifi_handle_events>
	while (_resolve == 0 && millis() - start < 1000) {
    585c:	6a28      	ldr	r0, [r5, #32]
    585e:	b948      	cbnz	r0, 5874 <WiFiClass::RSSI()+0x48>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5860:	6823      	ldr	r3, [r4, #0]
    5862:	9301      	str	r3, [sp, #4]
	return ret;
    5864:	9b01      	ldr	r3, [sp, #4]
    5866:	1b9b      	subs	r3, r3, r6
    5868:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		m2m_wifi_handle_events(NULL);
    586c:	f04f 0000 	mov.w	r0, #0
	while (_resolve == 0 && millis() - start < 1000) {
    5870:	d3f2      	bcc.n	5858 <WiFiClass::RSSI()+0x2c>
    5872:	2000      	movs	r0, #0
	_resolve = 0;
    5874:	2300      	movs	r3, #0
    5876:	622b      	str	r3, [r5, #32]
}
    5878:	b002      	add	sp, #8
    587a:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
    587c:	4620      	mov	r0, r4
}
    587e:	b002      	add	sp, #8
    5880:	bd70      	pop	{r4, r5, r6, pc}
		return -100;
    5882:	f06f 0063 	mvn.w	r0, #99	; 0x63
}
    5886:	4770      	bx	lr
    5888:	1fff7ae4 	.word	0x1fff7ae4

0000588c <WiFiClass::status()>:
	if (!_init) {
    588c:	6803      	ldr	r3, [r0, #0]
{
    588e:	b510      	push	{r4, lr}
    5890:	4604      	mov	r4, r0
	if (!_init) {
    5892:	b12b      	cbz	r3, 58a0 <WiFiClass::status()+0x14>
	m2m_wifi_handle_events(NULL);
    5894:	2000      	movs	r0, #0
    5896:	f001 f8d7 	bl	6a48 <m2m_wifi_handle_events>

	return _status;
}
    589a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    589e:	bd10      	pop	{r4, pc}
		init();
    58a0:	f7ff fc70 	bl	5184 <WiFiClass::init()>
	m2m_wifi_handle_events(NULL);
    58a4:	2000      	movs	r0, #0
    58a6:	f001 f8cf 	bl	6a48 <m2m_wifi_handle_events>
}
    58aa:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    58ae:	bd10      	pop	{r4, pc}

000058b0 <WiFiClass::hostByName(char const*, IPAddress&)>:

int WiFiClass::hostByName(const char* aHostname, IPAddress& aResult)
{
    58b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    58b4:	4605      	mov	r5, r0
    58b6:	b082      	sub	sp, #8
	
	// check if aHostname is already an ipaddress
	if (aResult.fromString(aHostname)) {
    58b8:	4610      	mov	r0, r2
{
    58ba:	4616      	mov	r6, r2
    58bc:	460f      	mov	r7, r1
	if (aResult.fromString(aHostname)) {
    58be:	f003 f9d3 	bl	8c68 <IPAddress::fromString(char const*)>
    58c2:	b118      	cbz	r0, 58cc <WiFiClass::hostByName(char const*, IPAddress&)+0x1c>
		// if fromString returns true we have an IP address ready 
		return 1;
    58c4:	2001      	movs	r0, #1

		aResult = _resolve;
		_resolve = 0;
		return 1;
	}
}
    58c6:	b002      	add	sp, #8
    58c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		m2m_periph_gpio_set_val(M2M_PERIPH_GPIO16, 0);
    58cc:	4604      	mov	r4, r0
    58ce:	4601      	mov	r1, r0
    58d0:	2005      	movs	r0, #5
    58d2:	f000 fe9b 	bl	660c <m2m_periph_gpio_set_val>
		m2m_periph_gpio_set_val(M2M_PERIPH_GPIO5, 0);
    58d6:	4621      	mov	r1, r4
    58d8:	2002      	movs	r0, #2
    58da:	f000 fe97 	bl	660c <m2m_periph_gpio_set_val>
		_resolve = 0;
    58de:	622c      	str	r4, [r5, #32]
		if (gethostbyname((uint8 *)aHostname) < 0) {
    58e0:	4638      	mov	r0, r7
    58e2:	f002 fca9 	bl	8238 <gethostbyname>
    58e6:	2800      	cmp	r0, #0
    58e8:	db26      	blt.n	5938 <WiFiClass::hostByName(char const*, IPAddress&)+0x88>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    58ea:	4c18      	ldr	r4, [pc, #96]	; (594c <WiFiClass::hostByName(char const*, IPAddress&)+0x9c>)
		while (_resolve == 0 && millis() - start < 20000) {
    58ec:	6a2b      	ldr	r3, [r5, #32]
    58ee:	6822      	ldr	r2, [r4, #0]
    58f0:	9201      	str	r2, [sp, #4]
	return ret;
    58f2:	9f01      	ldr	r7, [sp, #4]
    58f4:	b973      	cbnz	r3, 5914 <WiFiClass::hostByName(char const*, IPAddress&)+0x64>
    58f6:	f644 681f 	movw	r8, #19999	; 0x4e1f
    58fa:	e003      	b.n	5904 <WiFiClass::hostByName(char const*, IPAddress&)+0x54>
			m2m_wifi_handle_events(NULL);
    58fc:	f001 f8a4 	bl	6a48 <m2m_wifi_handle_events>
		while (_resolve == 0 && millis() - start < 20000) {
    5900:	6a2b      	ldr	r3, [r5, #32]
    5902:	b93b      	cbnz	r3, 5914 <WiFiClass::hostByName(char const*, IPAddress&)+0x64>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5904:	6823      	ldr	r3, [r4, #0]
    5906:	9300      	str	r3, [sp, #0]
	return ret;
    5908:	9b00      	ldr	r3, [sp, #0]
    590a:	1bdb      	subs	r3, r3, r7
    590c:	4543      	cmp	r3, r8
			m2m_wifi_handle_events(NULL);
    590e:	f04f 0000 	mov.w	r0, #0
		while (_resolve == 0 && millis() - start < 20000) {
    5912:	d9f3      	bls.n	58fc <WiFiClass::hostByName(char const*, IPAddress&)+0x4c>
		m2m_periph_gpio_set_val(M2M_PERIPH_GPIO16, 1);
    5914:	2101      	movs	r1, #1
    5916:	2005      	movs	r0, #5
    5918:	f000 fe78 	bl	660c <m2m_periph_gpio_set_val>
		m2m_periph_gpio_set_val(M2M_PERIPH_GPIO5, 1);
    591c:	2101      	movs	r1, #1
    591e:	2002      	movs	r0, #2
    5920:	f000 fe74 	bl	660c <m2m_periph_gpio_set_val>
		if (_resolve == 0) {
    5924:	6a28      	ldr	r0, [r5, #32]
    5926:	2800      	cmp	r0, #0
    5928:	d0cd      	beq.n	58c6 <WiFiClass::hostByName(char const*, IPAddress&)+0x16>
		_address.bytes[2] = *address++;
		_address.bytes[3] = *address++;
		return *this;
	}
	IPAddress& operator=(uint32_t address) {
		_address.dword = address;
    592a:	6070      	str	r0, [r6, #4]
		_resolve = 0;
    592c:	2300      	movs	r3, #0
		return 1;
    592e:	2001      	movs	r0, #1
		_resolve = 0;
    5930:	622b      	str	r3, [r5, #32]
}
    5932:	b002      	add	sp, #8
    5934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			m2m_periph_gpio_set_val(M2M_PERIPH_GPIO16, 1);
    5938:	2101      	movs	r1, #1
    593a:	2005      	movs	r0, #5
    593c:	f000 fe66 	bl	660c <m2m_periph_gpio_set_val>
			m2m_periph_gpio_set_val(M2M_PERIPH_GPIO5, 1);
    5940:	2101      	movs	r1, #1
    5942:	2002      	movs	r0, #2
    5944:	f000 fe62 	bl	660c <m2m_periph_gpio_set_val>
			return 0;
    5948:	4620      	mov	r0, r4
    594a:	e7bc      	b.n	58c6 <WiFiClass::hostByName(char const*, IPAddress&)+0x16>
    594c:	1fff7ae4 	.word	0x1fff7ae4

00005950 <_GLOBAL__sub_I__ZN9WiFiClass11handleEventEhPv>:
  _init(0),
    5950:	4b04      	ldr	r3, [pc, #16]	; (5964 <_GLOBAL__sub_I__ZN9WiFiClass11handleEventEhPv+0x14>)
    5952:	2000      	movs	r0, #0
WiFiClass::WiFiClass() :
    5954:	f44f 417f 	mov.w	r1, #65280	; 0xff00
  _timeout(60000)
    5958:	f64e 2260 	movw	r2, #60000	; 0xea60
  _init(0),
    595c:	6018      	str	r0, [r3, #0]
WiFiClass::WiFiClass() :
    595e:	6299      	str	r1, [r3, #40]	; 0x28
  _timeout(60000)
    5960:	671a      	str	r2, [r3, #112]	; 0x70
void WiFiClass::setTimeout(unsigned long timeout)
{
	_timeout = timeout;
}

WiFiClass WiFi;
    5962:	4770      	bx	lr
    5964:	1fff76cc 	.word	0x1fff76cc

00005968 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
    5968:	2000      	movs	r0, #0
    596a:	4770      	bx	lr

0000596c <WiFiUDP::read(char*, unsigned int)>:
    596c:	6803      	ldr	r3, [r0, #0]
    596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5970:	4718      	bx	r3
    5972:	bf00      	nop

00005974 <WiFiUDP::beginPacket(IPAddress, unsigned short)>:
		return _address.dword;
    5974:	6849      	ldr	r1, [r1, #4]
	return 0;
}

int WiFiUDP::beginPacket(IPAddress ip, uint16_t port)
{
	_sndIP = ip;
    5976:	f8c0 1590 	str.w	r1, [r0, #1424]	; 0x590
	_sndPort = port;
	_sndSize = 0;
    597a:	2300      	movs	r3, #0
	_sndPort = port;
    597c:	f8a0 258e 	strh.w	r2, [r0, #1422]	; 0x58e
	_sndSize = 0;
    5980:	f8a0 358c 	strh.w	r3, [r0, #1420]	; 0x58c

	return 1;
}
    5984:	2001      	movs	r0, #1
    5986:	4770      	bx	lr

00005988 <WiFiUDP::read()>:

	return _parsedPacketSize;
}

int WiFiUDP::read()
{
    5988:	b500      	push	{lr}
	uint8_t b;

	if (read(&b, sizeof(b)) != 1) {
    598a:	6803      	ldr	r3, [r0, #0]
{
    598c:	b083      	sub	sp, #12
	if (read(&b, sizeof(b)) != 1) {
    598e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5990:	2201      	movs	r2, #1
    5992:	f10d 0107 	add.w	r1, sp, #7
    5996:	4798      	blx	r3
    5998:	2801      	cmp	r0, #1
		return -1;
	}

	return b;
    599a:	bf0c      	ite	eq
    599c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
		return -1;
    59a0:	f04f 30ff 	movne.w	r0, #4294967295
}
    59a4:	b003      	add	sp, #12
    59a6:	f85d fb04 	ldr.w	pc, [sp], #4
    59aa:	bf00      	nop

000059ac <WiFiUDP::flush()>:
	return WiFiSocket.peek(_socket);
}

void WiFiUDP::flush()
{
}
    59ac:	4770      	bx	lr
    59ae:	bf00      	nop

000059b0 <WiFiUDP::stop()>:
	if (_socket == -1) {
    59b0:	f990 100d 	ldrsb.w	r1, [r0, #13]
    59b4:	1c4b      	adds	r3, r1, #1
    59b6:	d007      	beq.n	59c8 <WiFiUDP::stop()+0x18>
{
    59b8:	b510      	push	{r4, lr}
    59ba:	4604      	mov	r4, r0
	WiFiSocket.close(_socket);
    59bc:	4803      	ldr	r0, [pc, #12]	; (59cc <WiFiUDP::stop()+0x1c>)
    59be:	f002 fe77 	bl	86b0 <WiFiSocketClass::close(signed char)>
	_socket = -1;
    59c2:	23ff      	movs	r3, #255	; 0xff
    59c4:	7363      	strb	r3, [r4, #13]
}
    59c6:	bd10      	pop	{r4, pc}
    59c8:	4770      	bx	lr
    59ca:	bf00      	nop
    59cc:	1fff784c 	.word	0x1fff784c

000059d0 <WiFiUDP::begin(unsigned short)>:
{
    59d0:	b530      	push	{r4, r5, lr}
    59d2:	4604      	mov	r4, r0
	if (_socket != -1 && WiFiSocket.bound(_socket)) {
    59d4:	f990 500d 	ldrsb.w	r5, [r0, #13]
{
    59d8:	b089      	sub	sp, #36	; 0x24
	uint32 u32EnableCallbacks = 0;
    59da:	2300      	movs	r3, #0
	addr.sin_family = AF_INET;
    59dc:	2002      	movs	r0, #2
	addr.sin_port = _htons(port);
    59de:	ba4a      	rev16	r2, r1
	uint32 u32EnableCallbacks = 0;
    59e0:	9303      	str	r3, [sp, #12]
	_sndSize = 0;
    59e2:	f8a4 358c 	strh.w	r3, [r4, #1420]	; 0x58c
	_parsedPacketSize = 0;
    59e6:	6123      	str	r3, [r4, #16]
	addr.sin_addr.s_addr = 0;
    59e8:	9305      	str	r3, [sp, #20]
	if (_socket != -1 && WiFiSocket.bound(_socket)) {
    59ea:	1c6b      	adds	r3, r5, #1
	addr.sin_family = AF_INET;
    59ec:	f8ad 0010 	strh.w	r0, [sp, #16]
	addr.sin_port = _htons(port);
    59f0:	f8ad 2012 	strh.w	r2, [sp, #18]
	if (_socket != -1 && WiFiSocket.bound(_socket)) {
    59f4:	d11e      	bne.n	5a34 <WiFiUDP::begin(unsigned short)+0x64>
	if ((_socket = WiFiSocket.create(AF_INET, SOCK_DGRAM, 0)) < 0) {
    59f6:	2202      	movs	r2, #2
    59f8:	4611      	mov	r1, r2
    59fa:	481c      	ldr	r0, [pc, #112]	; (5a6c <WiFiUDP::begin(unsigned short)+0x9c>)
    59fc:	2300      	movs	r3, #0
    59fe:	f002 fd77 	bl	84f0 <WiFiSocketClass::create(unsigned short, unsigned char, unsigned char)>
    5a02:	2800      	cmp	r0, #0
    5a04:	4601      	mov	r1, r0
    5a06:	7360      	strb	r0, [r4, #13]
    5a08:	db22      	blt.n	5a50 <WiFiUDP::begin(unsigned short)+0x80>
	WiFiSocket.setopt(_socket, SOL_SOCKET, SO_SET_UDP_SEND_CALLBACK, &u32EnableCallbacks, 0);
    5a0a:	2300      	movs	r3, #0
    5a0c:	aa03      	add	r2, sp, #12
    5a0e:	e9cd 2300 	strd	r2, r3, [sp]
    5a12:	4816      	ldr	r0, [pc, #88]	; (5a6c <WiFiUDP::begin(unsigned short)+0x9c>)
    5a14:	2201      	movs	r2, #1
    5a16:	f002 fdc1 	bl	859c <WiFiSocketClass::setopt(signed char, unsigned char, unsigned char, void const*, unsigned short)>
	if (!WiFiSocket.bind(_socket, (struct sockaddr *)&addr, sizeof(struct sockaddr_in))) {
    5a1a:	2310      	movs	r3, #16
    5a1c:	f994 100d 	ldrsb.w	r1, [r4, #13]
    5a20:	4812      	ldr	r0, [pc, #72]	; (5a6c <WiFiUDP::begin(unsigned short)+0x9c>)
    5a22:	eb0d 0203 	add.w	r2, sp, r3
    5a26:	f002 fd79 	bl	851c <WiFiSocketClass::bind(signed char, sockaddr*, unsigned char)>
    5a2a:	4605      	mov	r5, r0
    5a2c:	b198      	cbz	r0, 5a56 <WiFiUDP::begin(unsigned short)+0x86>
	return 1;
    5a2e:	2001      	movs	r0, #1
}
    5a30:	b009      	add	sp, #36	; 0x24
    5a32:	bd30      	pop	{r4, r5, pc}
	if (_socket != -1 && WiFiSocket.bound(_socket)) {
    5a34:	480d      	ldr	r0, [pc, #52]	; (5a6c <WiFiUDP::begin(unsigned short)+0x9c>)
    5a36:	4629      	mov	r1, r5
    5a38:	f002 fdbe 	bl	85b8 <WiFiSocketClass::bound(signed char)>
    5a3c:	2800      	cmp	r0, #0
    5a3e:	d0da      	beq.n	59f6 <WiFiUDP::begin(unsigned short)+0x26>
		WiFiSocket.close(_socket);
    5a40:	f994 100d 	ldrsb.w	r1, [r4, #13]
    5a44:	4809      	ldr	r0, [pc, #36]	; (5a6c <WiFiUDP::begin(unsigned short)+0x9c>)
    5a46:	f002 fe33 	bl	86b0 <WiFiSocketClass::close(signed char)>
		_socket = -1;
    5a4a:	23ff      	movs	r3, #255	; 0xff
    5a4c:	7363      	strb	r3, [r4, #13]
    5a4e:	e7d2      	b.n	59f6 <WiFiUDP::begin(unsigned short)+0x26>
		return 0;
    5a50:	2000      	movs	r0, #0
}
    5a52:	b009      	add	sp, #36	; 0x24
    5a54:	bd30      	pop	{r4, r5, pc}
		WiFiSocket.close(_socket);
    5a56:	f994 100d 	ldrsb.w	r1, [r4, #13]
    5a5a:	4804      	ldr	r0, [pc, #16]	; (5a6c <WiFiUDP::begin(unsigned short)+0x9c>)
    5a5c:	f002 fe28 	bl	86b0 <WiFiSocketClass::close(signed char)>
		_socket = -1;
    5a60:	23ff      	movs	r3, #255	; 0xff
		return 0;
    5a62:	4628      	mov	r0, r5
		_socket = -1;
    5a64:	7363      	strb	r3, [r4, #13]
}
    5a66:	b009      	add	sp, #36	; 0x24
    5a68:	bd30      	pop	{r4, r5, pc}
    5a6a:	bf00      	nop
    5a6c:	1fff784c 	.word	0x1fff784c

00005a70 <WiFiUDP::beginMulticast(IPAddress, unsigned short)>:
{
    5a70:	b510      	push	{r4, lr}
	if (!begin(port)) {
    5a72:	6803      	ldr	r3, [r0, #0]
	uint32_t multiIp = ip;
    5a74:	6849      	ldr	r1, [r1, #4]
	if (!begin(port)) {
    5a76:	69db      	ldr	r3, [r3, #28]
{
    5a78:	b084      	sub	sp, #16
    5a7a:	4604      	mov	r4, r0
	uint32_t multiIp = ip;
    5a7c:	9103      	str	r1, [sp, #12]
	if (!begin(port)) {
    5a7e:	4611      	mov	r1, r2
    5a80:	4798      	blx	r3
    5a82:	b148      	cbz	r0, 5a98 <WiFiUDP::beginMulticast(IPAddress, unsigned short)+0x28>
	setsockopt(_socket, SOL_SOCKET, IP_ADD_MEMBERSHIP, &multiIp, sizeof(multiIp));
    5a84:	2201      	movs	r2, #1
    5a86:	2304      	movs	r3, #4
    5a88:	f994 000d 	ldrsb.w	r0, [r4, #13]
    5a8c:	9300      	str	r3, [sp, #0]
    5a8e:	4611      	mov	r1, r2
    5a90:	ab03      	add	r3, sp, #12
    5a92:	f002 fbe9 	bl	8268 <setsockopt>
	return 1;
    5a96:	2001      	movs	r0, #1
}
    5a98:	b004      	add	sp, #16
    5a9a:	bd10      	pop	{r4, pc}

00005a9c <WiFiUDP::available()>:
	if (_socket == -1) {
    5a9c:	f990 100d 	ldrsb.w	r1, [r0, #13]
    5aa0:	1c4b      	adds	r3, r1, #1
    5aa2:	d005      	beq.n	5ab0 <WiFiUDP::available()+0x14>
	if (_parsedPacketSize <= 0) {
    5aa4:	6903      	ldr	r3, [r0, #16]
    5aa6:	2b00      	cmp	r3, #0
    5aa8:	dd02      	ble.n	5ab0 <WiFiUDP::available()+0x14>
	return WiFiSocket.available(_socket);
    5aaa:	4802      	ldr	r0, [pc, #8]	; (5ab4 <WiFiUDP::available()+0x18>)
    5aac:	f002 bd96 	b.w	85dc <WiFiSocketClass::available(signed char)>
 }
    5ab0:	2000      	movs	r0, #0
    5ab2:	4770      	bx	lr
    5ab4:	1fff784c 	.word	0x1fff784c

00005ab8 <WiFiUDP::endPacket()>:
{
    5ab8:	b530      	push	{r4, r5, lr}
	int result = WiFiSocket.sendto(_socket, (void *)_sndBuffer, _sndSize, 0, (struct sockaddr *)&addr, sizeof(addr));
    5aba:	2510      	movs	r5, #16
{
    5abc:	b089      	sub	sp, #36	; 0x24
	addr.sin_port = _htons(_sndPort);
    5abe:	f8b0 158e 	ldrh.w	r1, [r0, #1422]	; 0x58e
{
    5ac2:	4602      	mov	r2, r0
	int result = WiFiSocket.sendto(_socket, (void *)_sndBuffer, _sndSize, 0, (struct sockaddr *)&addr, sizeof(addr));
    5ac4:	eb0d 0305 	add.w	r3, sp, r5
	addr.sin_addr.s_addr = _sndIP;
    5ac8:	f8d0 0590 	ldr.w	r0, [r0, #1424]	; 0x590
	int result = WiFiSocket.sendto(_socket, (void *)_sndBuffer, _sndSize, 0, (struct sockaddr *)&addr, sizeof(addr));
    5acc:	9502      	str	r5, [sp, #8]
    5ace:	9301      	str	r3, [sp, #4]
    5ad0:	2400      	movs	r4, #0
    5ad2:	f8b2 358c 	ldrh.w	r3, [r2, #1420]	; 0x58c
	addr.sin_addr.s_addr = _sndIP;
    5ad6:	9005      	str	r0, [sp, #20]
	int result = WiFiSocket.sendto(_socket, (void *)_sndBuffer, _sndSize, 0, (struct sockaddr *)&addr, sizeof(addr));
    5ad8:	9400      	str	r4, [sp, #0]
	addr.sin_port = _htons(_sndPort);
    5ada:	ba49      	rev16	r1, r1
	addr.sin_family = AF_INET;
    5adc:	2002      	movs	r0, #2
    5ade:	f8ad 0010 	strh.w	r0, [sp, #16]
	addr.sin_port = _htons(_sndPort);
    5ae2:	f8ad 1012 	strh.w	r1, [sp, #18]
	int result = WiFiSocket.sendto(_socket, (void *)_sndBuffer, _sndSize, 0, (struct sockaddr *)&addr, sizeof(addr));
    5ae6:	3214      	adds	r2, #20
    5ae8:	f912 1c07 	ldrsb.w	r1, [r2, #-7]
    5aec:	4804      	ldr	r0, [pc, #16]	; (5b00 <WiFiUDP::endPacket()+0x48>)
    5aee:	f002 fda1 	bl	8634 <WiFiSocketClass::sendto(signed char, void*, unsigned short, unsigned short, sockaddr*, unsigned char)>
}
    5af2:	42a0      	cmp	r0, r4
    5af4:	bfb4      	ite	lt
    5af6:	2000      	movlt	r0, #0
    5af8:	2001      	movge	r0, #1
    5afa:	b009      	add	sp, #36	; 0x24
    5afc:	bd30      	pop	{r4, r5, pc}
    5afe:	bf00      	nop
    5b00:	1fff784c 	.word	0x1fff784c

00005b04 <WiFiUDP::write(unsigned char const*, unsigned int)>:
{
    5b04:	b538      	push	{r3, r4, r5, lr}
	if ((size + _sndSize) > sizeof(_sndBuffer)) {
    5b06:	f8b0 358c 	ldrh.w	r3, [r0, #1420]	; 0x58c
{
    5b0a:	4614      	mov	r4, r2
	if ((size + _sndSize) > sizeof(_sndBuffer)) {
    5b0c:	189a      	adds	r2, r3, r2
    5b0e:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
		size = sizeof(_sndBuffer) - _sndSize;
    5b12:	bf88      	it	hi
    5b14:	f5c3 64af 	rsbhi	r4, r3, #1400	; 0x578
{
    5b18:	4605      	mov	r5, r0
	memcpy(_sndBuffer + _sndSize, buffer, size);
    5b1a:	3014      	adds	r0, #20
    5b1c:	4622      	mov	r2, r4
    5b1e:	4418      	add	r0, r3
    5b20:	f003 f9e4 	bl	8eec <memcpy>
	_sndSize += size;
    5b24:	f8b5 358c 	ldrh.w	r3, [r5, #1420]	; 0x58c
}
    5b28:	4620      	mov	r0, r4
	_sndSize += size;
    5b2a:	441c      	add	r4, r3
    5b2c:	f8a5 458c 	strh.w	r4, [r5, #1420]	; 0x58c
}
    5b30:	bd38      	pop	{r3, r4, r5, pc}
    5b32:	bf00      	nop

00005b34 <WiFiUDP::remoteIP()>:

IPAddress WiFiUDP::remoteIP()
{
    5b34:	b510      	push	{r4, lr}
	if (_socket == -1) {
    5b36:	f991 200d 	ldrsb.w	r2, [r1, #13]
    5b3a:	1c53      	adds	r3, r2, #1
{
    5b3c:	4604      	mov	r4, r0
	if (_socket == -1) {
    5b3e:	d105      	bne.n	5b4c <WiFiUDP::remoteIP()+0x18>
	IPAddress(uint8_t b1, uint8_t b2, uint8_t b3, uint8_t b4) {
    5b40:	4a05      	ldr	r2, [pc, #20]	; (5b58 <WiFiUDP::remoteIP()+0x24>)
		_address.bytes[0] = b1;
    5b42:	2300      	movs	r3, #0
    5b44:	e9c0 2300 	strd	r2, r3, [r0]
		return IPAddress(0, 0, 0, 0);
	}

	return WiFiSocket.remoteIP(_socket);
}
    5b48:	4620      	mov	r0, r4
    5b4a:	bd10      	pop	{r4, pc}
	return WiFiSocket.remoteIP(_socket);
    5b4c:	4903      	ldr	r1, [pc, #12]	; (5b5c <WiFiUDP::remoteIP()+0x28>)
    5b4e:	f002 fd5f 	bl	8610 <WiFiSocketClass::remoteIP(signed char)>
}
    5b52:	4620      	mov	r0, r4
    5b54:	bd10      	pop	{r4, pc}
    5b56:	bf00      	nop
    5b58:	00011fec 	.word	0x00011fec
    5b5c:	1fff784c 	.word	0x1fff784c

00005b60 <WiFiUDP::remotePort()>:

uint16_t WiFiUDP::remotePort()
{
	if (_socket == -1) {
    5b60:	f990 100d 	ldrsb.w	r1, [r0, #13]
    5b64:	1c4a      	adds	r2, r1, #1
    5b66:	d00f      	beq.n	5b88 <WiFiUDP::remotePort()+0x28>
{
    5b68:	b538      	push	{r3, r4, r5, lr}
    5b6a:	4605      	mov	r5, r0
		return 0;
	}

	return _htons(WiFiSocket.remotePort(_socket));
    5b6c:	4807      	ldr	r0, [pc, #28]	; (5b8c <WiFiUDP::remotePort()+0x2c>)
    5b6e:	f002 fd5b 	bl	8628 <WiFiSocketClass::remotePort(signed char)>
    5b72:	f995 100d 	ldrsb.w	r1, [r5, #13]
    5b76:	4604      	mov	r4, r0
    5b78:	4804      	ldr	r0, [pc, #16]	; (5b8c <WiFiUDP::remotePort()+0x2c>)
    5b7a:	f002 fd55 	bl	8628 <WiFiSocketClass::remotePort(signed char)>
    5b7e:	0224      	lsls	r4, r4, #8
    5b80:	ea44 2010 	orr.w	r0, r4, r0, lsr #8
    5b84:	b280      	uxth	r0, r0
}
    5b86:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    5b88:	2000      	movs	r0, #0
}
    5b8a:	4770      	bx	lr
    5b8c:	1fff784c 	.word	0x1fff784c

00005b90 <WiFiUDP::beginPacket(char const*, unsigned short)>:
{
    5b90:	b5f0      	push	{r4, r5, r6, r7, lr}
	IPAddress() {
    5b92:	4d11      	ldr	r5, [pc, #68]	; (5bd8 <WiFiUDP::beginPacket(char const*, unsigned short)+0x48>)
    5b94:	b085      	sub	sp, #20
		_address.dword = 0;
    5b96:	2700      	movs	r7, #0
    5b98:	4604      	mov	r4, r0
    5b9a:	4616      	mov	r6, r2
	if (WiFi.hostByName(host, ip)) {
    5b9c:	480f      	ldr	r0, [pc, #60]	; (5bdc <WiFiUDP::beginPacket(char const*, unsigned short)+0x4c>)
    5b9e:	466a      	mov	r2, sp
    5ba0:	e9cd 5700 	strd	r5, r7, [sp]
    5ba4:	f7ff fe84 	bl	58b0 <WiFiClass::hostByName(char const*, IPAddress&)>
    5ba8:	b170      	cbz	r0, 5bc8 <WiFiUDP::beginPacket(char const*, unsigned short)+0x38>
		return beginPacket(ip, port);
    5baa:	6823      	ldr	r3, [r4, #0]
    5bac:	4a0c      	ldr	r2, [pc, #48]	; (5be0 <WiFiUDP::beginPacket(char const*, unsigned short)+0x50>)
class IPAddress : public Printable {
    5bae:	9502      	str	r5, [sp, #8]
    5bb0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    5bb2:	9b01      	ldr	r3, [sp, #4]
    5bb4:	9303      	str	r3, [sp, #12]
    5bb6:	4295      	cmp	r5, r2
    5bb8:	d108      	bne.n	5bcc <WiFiUDP::beginPacket(char const*, unsigned short)+0x3c>
	_sndIP = ip;
    5bba:	f8c4 3590 	str.w	r3, [r4, #1424]	; 0x590
	_sndPort = port;
    5bbe:	f8a4 658e 	strh.w	r6, [r4, #1422]	; 0x58e
	_sndSize = 0;
    5bc2:	f8a4 758c 	strh.w	r7, [r4, #1420]	; 0x58c
    5bc6:	2001      	movs	r0, #1
}
    5bc8:	b005      	add	sp, #20
    5bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return beginPacket(ip, port);
    5bcc:	4632      	mov	r2, r6
    5bce:	a902      	add	r1, sp, #8
    5bd0:	4620      	mov	r0, r4
    5bd2:	47a8      	blx	r5
}
    5bd4:	b005      	add	sp, #20
    5bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bd8:	00011fec 	.word	0x00011fec
    5bdc:	1fff76cc 	.word	0x1fff76cc
    5be0:	00005975 	.word	0x00005975

00005be4 <WiFiUDP::write(unsigned char)>:
{
    5be4:	b570      	push	{r4, r5, r6, lr}
  return write(&byte, 1);
    5be6:	6803      	ldr	r3, [r0, #0]
    5be8:	4a15      	ldr	r2, [pc, #84]	; (5c40 <WiFiUDP::write(unsigned char)+0x5c>)
    5bea:	685b      	ldr	r3, [r3, #4]
{
    5bec:	b082      	sub	sp, #8
    5bee:	4293      	cmp	r3, r2
    5bf0:	f88d 1007 	strb.w	r1, [sp, #7]
    5bf4:	d11c      	bne.n	5c30 <WiFiUDP::write(unsigned char)+0x4c>
	if ((size + _sndSize) > sizeof(_sndBuffer)) {
    5bf6:	f8b0 358c 	ldrh.w	r3, [r0, #1420]	; 0x58c
    5bfa:	1c5a      	adds	r2, r3, #1
    5bfc:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    5c00:	bf96      	itet	ls
    5c02:	2601      	movls	r6, #1
		size = sizeof(_sndBuffer) - _sndSize;
    5c04:	f5c3 65af 	rsbhi	r5, r3, #1400	; 0x578
    5c08:	4635      	movls	r5, r6
    5c0a:	4604      	mov	r4, r0
	memcpy(_sndBuffer + _sndSize, buffer, size);
    5c0c:	f100 0014 	add.w	r0, r0, #20
    5c10:	4418      	add	r0, r3
    5c12:	462a      	mov	r2, r5
    5c14:	f10d 0107 	add.w	r1, sp, #7
	_sndSize += size;
    5c18:	bf88      	it	hi
    5c1a:	b2ae      	uxthhi	r6, r5
	memcpy(_sndBuffer + _sndSize, buffer, size);
    5c1c:	f003 f966 	bl	8eec <memcpy>
	_sndSize += size;
    5c20:	f8b4 358c 	ldrh.w	r3, [r4, #1420]	; 0x58c
}
    5c24:	4628      	mov	r0, r5
	_sndSize += size;
    5c26:	441e      	add	r6, r3
    5c28:	f8a4 658c 	strh.w	r6, [r4, #1420]	; 0x58c
}
    5c2c:	b002      	add	sp, #8
    5c2e:	bd70      	pop	{r4, r5, r6, pc}
  return write(&byte, 1);
    5c30:	2201      	movs	r2, #1
    5c32:	f10d 0107 	add.w	r1, sp, #7
    5c36:	4798      	blx	r3
    5c38:	4605      	mov	r5, r0
}
    5c3a:	4628      	mov	r0, r5
    5c3c:	b002      	add	sp, #8
    5c3e:	bd70      	pop	{r4, r5, r6, pc}
    5c40:	00005b05 	.word	0x00005b05

00005c44 <WiFiUDP::parsePacket()>:
	if (_socket == -1) {
    5c44:	f990 300d 	ldrsb.w	r3, [r0, #13]
    5c48:	1c59      	adds	r1, r3, #1
    5c4a:	d03a      	beq.n	5cc2 <WiFiUDP::parsePacket()+0x7e>
{
    5c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (_parsedPacketSize > 0) {
    5c50:	6902      	ldr	r2, [r0, #16]
    5c52:	2a00      	cmp	r2, #0
{
    5c54:	b082      	sub	sp, #8
    5c56:	4604      	mov	r4, r0
	if (_parsedPacketSize > 0) {
    5c58:	dd28      	ble.n	5cac <WiFiUDP::parsePacket()+0x68>
    5c5a:	4d1b      	ldr	r5, [pc, #108]	; (5cc8 <WiFiUDP::parsePacket()+0x84>)
	return WiFiSocket.available(_socket);
    5c5c:	4f1b      	ldr	r7, [pc, #108]	; (5ccc <WiFiUDP::parsePacket()+0x88>)
    5c5e:	4e1c      	ldr	r6, [pc, #112]	; (5cd0 <WiFiUDP::parsePacket()+0x8c>)
		while (available()) {
    5c60:	6823      	ldr	r3, [r4, #0]
    5c62:	691b      	ldr	r3, [r3, #16]
    5c64:	42ab      	cmp	r3, r5
    5c66:	d11b      	bne.n	5ca0 <WiFiUDP::parsePacket()+0x5c>
	if (_socket == -1) {
    5c68:	f994 300d 	ldrsb.w	r3, [r4, #13]
    5c6c:	1c5a      	adds	r2, r3, #1
	return WiFiSocket.available(_socket);
    5c6e:	4638      	mov	r0, r7
    5c70:	4619      	mov	r1, r3
	if (_socket == -1) {
    5c72:	d01b      	beq.n	5cac <WiFiUDP::parsePacket()+0x68>
	if (_parsedPacketSize <= 0) {
    5c74:	6922      	ldr	r2, [r4, #16]
    5c76:	2a00      	cmp	r2, #0
    5c78:	dd18      	ble.n	5cac <WiFiUDP::parsePacket()+0x68>
	return WiFiSocket.available(_socket);
    5c7a:	f002 fcaf 	bl	85dc <WiFiSocketClass::available(signed char)>
    5c7e:	4603      	mov	r3, r0
	if (read(&b, sizeof(b)) != 1) {
    5c80:	2201      	movs	r2, #1
    5c82:	f10d 0107 	add.w	r1, sp, #7
    5c86:	4620      	mov	r0, r4
		while (available()) {
    5c88:	b173      	cbz	r3, 5ca8 <WiFiUDP::parsePacket()+0x64>
			read();
    5c8a:	6823      	ldr	r3, [r4, #0]
    5c8c:	f8d3 8014 	ldr.w	r8, [r3, #20]
    5c90:	45b0      	cmp	r8, r6
    5c92:	d113      	bne.n	5cbc <WiFiUDP::parsePacket()+0x78>
	if (read(&b, sizeof(b)) != 1) {
    5c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5c96:	4798      	blx	r3
		while (available()) {
    5c98:	6823      	ldr	r3, [r4, #0]
    5c9a:	691b      	ldr	r3, [r3, #16]
    5c9c:	42ab      	cmp	r3, r5
    5c9e:	d0e3      	beq.n	5c68 <WiFiUDP::parsePacket()+0x24>
    5ca0:	4620      	mov	r0, r4
    5ca2:	4798      	blx	r3
    5ca4:	4603      	mov	r3, r0
    5ca6:	e7eb      	b.n	5c80 <WiFiUDP::parsePacket()+0x3c>
	_parsedPacketSize = WiFiSocket.available(_socket);
    5ca8:	f994 300d 	ldrsb.w	r3, [r4, #13]
    5cac:	4807      	ldr	r0, [pc, #28]	; (5ccc <WiFiUDP::parsePacket()+0x88>)
    5cae:	4619      	mov	r1, r3
    5cb0:	f002 fc94 	bl	85dc <WiFiSocketClass::available(signed char)>
    5cb4:	6120      	str	r0, [r4, #16]
}
    5cb6:	b002      	add	sp, #8
    5cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			read();
    5cbc:	4620      	mov	r0, r4
    5cbe:	47c0      	blx	r8
    5cc0:	e7ce      	b.n	5c60 <WiFiUDP::parsePacket()+0x1c>
		return 0;
    5cc2:	2000      	movs	r0, #0
}
    5cc4:	4770      	bx	lr
    5cc6:	bf00      	nop
    5cc8:	00005a9d 	.word	0x00005a9d
    5ccc:	1fff784c 	.word	0x1fff784c
    5cd0:	00005989 	.word	0x00005989

00005cd4 <WiFiUDP::peek()>:
	if (!available()) {
    5cd4:	6803      	ldr	r3, [r0, #0]
    5cd6:	4a0e      	ldr	r2, [pc, #56]	; (5d10 <WiFiUDP::peek()+0x3c>)
    5cd8:	691b      	ldr	r3, [r3, #16]
    5cda:	4293      	cmp	r3, r2
{
    5cdc:	b510      	push	{r4, lr}
    5cde:	4604      	mov	r4, r0
    5ce0:	d111      	bne.n	5d06 <WiFiUDP::peek()+0x32>
	if (_socket == -1) {
    5ce2:	f990 100d 	ldrsb.w	r1, [r0, #13]
    5ce6:	1c4b      	adds	r3, r1, #1
    5ce8:	d00f      	beq.n	5d0a <WiFiUDP::peek()+0x36>
	if (_parsedPacketSize <= 0) {
    5cea:	6903      	ldr	r3, [r0, #16]
    5cec:	2b00      	cmp	r3, #0
    5cee:	dd0c      	ble.n	5d0a <WiFiUDP::peek()+0x36>
	return WiFiSocket.available(_socket);
    5cf0:	4808      	ldr	r0, [pc, #32]	; (5d14 <WiFiUDP::peek()+0x40>)
    5cf2:	f002 fc73 	bl	85dc <WiFiSocketClass::available(signed char)>
	if (!available()) {
    5cf6:	b140      	cbz	r0, 5d0a <WiFiUDP::peek()+0x36>
	return WiFiSocket.peek(_socket);
    5cf8:	f994 100d 	ldrsb.w	r1, [r4, #13]
    5cfc:	4805      	ldr	r0, [pc, #20]	; (5d14 <WiFiUDP::peek()+0x40>)
}
    5cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return WiFiSocket.peek(_socket);
    5d02:	f002 bd55 	b.w	87b0 <WiFiSocketClass::peek(signed char)>
	if (!available()) {
    5d06:	4798      	blx	r3
    5d08:	e7f5      	b.n	5cf6 <WiFiUDP::peek()+0x22>
}
    5d0a:	f04f 30ff 	mov.w	r0, #4294967295
    5d0e:	bd10      	pop	{r4, pc}
    5d10:	00005a9d 	.word	0x00005a9d
    5d14:	1fff784c 	.word	0x1fff784c

00005d18 <WiFiUDP::read(unsigned char*, unsigned int)>:
{
    5d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t size_tmp = available();
    5d1a:	6803      	ldr	r3, [r0, #0]
{
    5d1c:	460d      	mov	r5, r1
	uint16_t size_tmp = available();
    5d1e:	691e      	ldr	r6, [r3, #16]
    5d20:	4911      	ldr	r1, [pc, #68]	; (5d68 <WiFiUDP::read(unsigned char*, unsigned int)+0x50>)
    5d22:	428e      	cmp	r6, r1
{
    5d24:	4604      	mov	r4, r0
    5d26:	4617      	mov	r7, r2
    5d28:	d11b      	bne.n	5d62 <WiFiUDP::read(unsigned char*, unsigned int)+0x4a>
	if (_socket == -1) {
    5d2a:	f990 100d 	ldrsb.w	r1, [r0, #13]
    5d2e:	1c4b      	adds	r3, r1, #1
    5d30:	d014      	beq.n	5d5c <WiFiUDP::read(unsigned char*, unsigned int)+0x44>
	if (_parsedPacketSize <= 0) {
    5d32:	6903      	ldr	r3, [r0, #16]
    5d34:	2b00      	cmp	r3, #0
    5d36:	dd11      	ble.n	5d5c <WiFiUDP::read(unsigned char*, unsigned int)+0x44>
	return WiFiSocket.available(_socket);
    5d38:	480c      	ldr	r0, [pc, #48]	; (5d6c <WiFiUDP::read(unsigned char*, unsigned int)+0x54>)
    5d3a:	f002 fc4f 	bl	85dc <WiFiSocketClass::available(signed char)>
	if (size_tmp == 0) {
    5d3e:	b280      	uxth	r0, r0
    5d40:	b160      	cbz	r0, 5d5c <WiFiUDP::read(unsigned char*, unsigned int)+0x44>
	int result = WiFiSocket.read(_socket, buf, size);
    5d42:	f994 100d 	ldrsb.w	r1, [r4, #13]
    5d46:	4809      	ldr	r0, [pc, #36]	; (5d6c <WiFiUDP::read(unsigned char*, unsigned int)+0x54>)
    5d48:	463b      	mov	r3, r7
    5d4a:	462a      	mov	r2, r5
    5d4c:	f002 fd64 	bl	8818 <WiFiSocketClass::read(signed char, unsigned char*, unsigned int)>
	if (result > 0) {
    5d50:	2800      	cmp	r0, #0
    5d52:	dd02      	ble.n	5d5a <WiFiUDP::read(unsigned char*, unsigned int)+0x42>
		_parsedPacketSize -= result;
    5d54:	6923      	ldr	r3, [r4, #16]
    5d56:	1a1b      	subs	r3, r3, r0
    5d58:	6123      	str	r3, [r4, #16]
}
    5d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -1;
    5d5c:	f04f 30ff 	mov.w	r0, #4294967295
}
    5d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint16_t size_tmp = available();
    5d62:	47b0      	blx	r6
    5d64:	e7eb      	b.n	5d3e <WiFiUDP::read(unsigned char*, unsigned int)+0x26>
    5d66:	bf00      	nop
    5d68:	00005a9d 	.word	0x00005a9d
    5d6c:	1fff784c 	.word	0x1fff784c

00005d70 <WiFiUDP::beginMulti(IPAddress, unsigned short)>:
  virtual uint8_t beginMulti(IPAddress ip, uint16_t port) { return beginMulticast(ip, port); }
    5d70:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d72:	6805      	ldr	r5, [r0, #0]
    5d74:	4f11      	ldr	r7, [pc, #68]	; (5dbc <WiFiUDP::beginMulti(IPAddress, unsigned short)+0x4c>)
    5d76:	6a2e      	ldr	r6, [r5, #32]
    5d78:	684b      	ldr	r3, [r1, #4]
    5d7a:	f8df c044 	ldr.w	ip, [pc, #68]	; 5dc0 <WiFiUDP::beginMulti(IPAddress, unsigned short)+0x50>
    5d7e:	b087      	sub	sp, #28
/** The Printable class provides a way for new classes to allow themselves to be printed.
    By deriving from Printable and implementing the printTo method, it will then be possible
    for users to print out instances of this class by passing them into the usual
    Print::print and Print::println methods.
*/
class Printable
    5d80:	42be      	cmp	r6, r7
    5d82:	9305      	str	r3, [sp, #20]
    5d84:	f8cd c010 	str.w	ip, [sp, #16]
    5d88:	d113      	bne.n	5db2 <WiFiUDP::beginMulti(IPAddress, unsigned short)+0x42>
    5d8a:	4611      	mov	r1, r2
	uint32_t multiIp = ip;
    5d8c:	9303      	str	r3, [sp, #12]
	if (!begin(port)) {
    5d8e:	69ea      	ldr	r2, [r5, #28]
    5d90:	4604      	mov	r4, r0
    5d92:	4790      	blx	r2
    5d94:	b908      	cbnz	r0, 5d9a <WiFiUDP::beginMulti(IPAddress, unsigned short)+0x2a>
    5d96:	b007      	add	sp, #28
    5d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	setsockopt(_socket, SOL_SOCKET, IP_ADD_MEMBERSHIP, &multiIp, sizeof(multiIp));
    5d9a:	2201      	movs	r2, #1
    5d9c:	2304      	movs	r3, #4
    5d9e:	f994 000d 	ldrsb.w	r0, [r4, #13]
    5da2:	9300      	str	r3, [sp, #0]
    5da4:	4611      	mov	r1, r2
    5da6:	ab03      	add	r3, sp, #12
    5da8:	f002 fa5e 	bl	8268 <setsockopt>
	return 1;
    5dac:	2001      	movs	r0, #1
    5dae:	b007      	add	sp, #28
    5db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5db2:	a904      	add	r1, sp, #16
    5db4:	47b0      	blx	r6
    5db6:	b007      	add	sp, #28
    5db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5dba:	bf00      	nop
    5dbc:	00005a71 	.word	0x00005a71
    5dc0:	00011fec 	.word	0x00011fec

00005dc4 <WiFiUDP::WiFiUDP()>:
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    5dc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	constexpr Print() : write_error(0) {}
    5dc8:	2200      	movs	r2, #0
WiFiUDP::WiFiUDP()
    5dca:	b410      	push	{r4}
    5dcc:	4c06      	ldr	r4, [pc, #24]	; (5de8 <WiFiUDP::WiFiUDP()+0x24>)
    5dce:	6081      	str	r1, [r0, #8]
    5dd0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    5dd4:	6004      	str	r4, [r0, #0]
    5dd6:	6042      	str	r2, [r0, #4]
}
    5dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
    5ddc:	8181      	strh	r1, [r0, #12]
	_sndSize = 0;
    5dde:	f8a0 258c 	strh.w	r2, [r0, #1420]	; 0x58c
	_parsedPacketSize = 0;
    5de2:	6102      	str	r2, [r0, #16]
}
    5de4:	4770      	bx	lr
    5de6:	bf00      	nop
    5de8:	00011e7c 	.word	0x00011e7c

00005dec <chip_isr>:
	detachInterrupt(pin);
}

static void chip_isr(void)
{
	if (gpfIsr) {
    5dec:	4b02      	ldr	r3, [pc, #8]	; (5df8 <chip_isr+0xc>)
    5dee:	681b      	ldr	r3, [r3, #0]
    5df0:	b103      	cbz	r3, 5df4 <chip_isr+0x8>
		gpfIsr();
    5df2:	4718      	bx	r3
	}
}
    5df4:	4770      	bx	lr
    5df6:	bf00      	nop
    5df8:	1fff7740 	.word	0x1fff7740

00005dfc <attachInterruptMultiArch>:
	attachInterrupt(pin, chip_isr, mode);
    5dfc:	b2c0      	uxtb	r0, r0
    5dfe:	f003 ba03 	b.w	9208 <attachInterrupt>
    5e02:	bf00      	nop

00005e04 <detachInterruptMultiArch>:
	detachInterrupt(pin);
    5e04:	b2c0      	uxtb	r0, r0
    5e06:	f003 ba73 	b.w	92f0 <detachInterrupt>
    5e0a:	bf00      	nop

00005e0c <nm_bsp_reset>:
 *	@author	M. Abdelmawla
 *	@date	11 July 2012
 *	@version	1.0
 */
void nm_bsp_reset(void)
{
    5e0c:	b538      	push	{r3, r4, r5, lr}
	if (gi8Winc1501ResetPin > -1)
    5e0e:	4d0d      	ldr	r5, [pc, #52]	; (5e44 <nm_bsp_reset+0x38>)
    5e10:	f995 0000 	ldrsb.w	r0, [r5]
    5e14:	2800      	cmp	r0, #0
    5e16:	da00      	bge.n	5e1a <nm_bsp_reset+0xe>
		digitalWrite(gi8Winc1501ResetPin, LOW);
		nm_bsp_sleep(100);
		digitalWrite(gi8Winc1501ResetPin, HIGH);
		nm_bsp_sleep(100);
	}
}
    5e18:	bd38      	pop	{r3, r4, r5, pc}
		digitalWrite(gi8Winc1501ResetPin, LOW);
    5e1a:	2100      	movs	r1, #0
    5e1c:	b2c0      	uxtb	r0, r0
    5e1e:	f003 fb35 	bl	948c <digitalWrite>
    5e22:	2464      	movs	r4, #100	; 0x64
 *	@version	1.0
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
		delay(1);
    5e24:	2001      	movs	r0, #1
    5e26:	f003 fbb9 	bl	959c <delay>
	while (u32TimeMsec--) {
    5e2a:	3c01      	subs	r4, #1
    5e2c:	d1fa      	bne.n	5e24 <nm_bsp_reset+0x18>
		digitalWrite(gi8Winc1501ResetPin, HIGH);
    5e2e:	7828      	ldrb	r0, [r5, #0]
    5e30:	2101      	movs	r1, #1
    5e32:	f003 fb2b 	bl	948c <digitalWrite>
    5e36:	2464      	movs	r4, #100	; 0x64
		delay(1);
    5e38:	2001      	movs	r0, #1
    5e3a:	f003 fbaf 	bl	959c <delay>
	while (u32TimeMsec--) {
    5e3e:	3c01      	subs	r4, #1
    5e40:	d1fa      	bne.n	5e38 <nm_bsp_reset+0x2c>
}
    5e42:	bd38      	pop	{r3, r4, r5, pc}
    5e44:	1fff0ca3 	.word	0x1fff0ca3

00005e48 <nm_bsp_init>:
{
    5e48:	b510      	push	{r4, lr}
	if (gi8Winc1501ResetPin > -1)
    5e4a:	4c11      	ldr	r4, [pc, #68]	; (5e90 <nm_bsp_init+0x48>)
	gpfIsr = NULL;
    5e4c:	4b11      	ldr	r3, [pc, #68]	; (5e94 <nm_bsp_init+0x4c>)
	if (gi8Winc1501ResetPin > -1)
    5e4e:	f994 0000 	ldrsb.w	r0, [r4]
	gpfIsr = NULL;
    5e52:	2200      	movs	r2, #0
	if (gi8Winc1501ResetPin > -1)
    5e54:	4290      	cmp	r0, r2
	gpfIsr = NULL;
    5e56:	601a      	str	r2, [r3, #0]
	if (gi8Winc1501ResetPin > -1)
    5e58:	db07      	blt.n	5e6a <nm_bsp_init+0x22>
		pinMode(gi8Winc1501ResetPin, OUTPUT);
    5e5a:	2101      	movs	r1, #1
    5e5c:	b2c0      	uxtb	r0, r0
    5e5e:	f003 fb3f 	bl	94e0 <pinMode>
		digitalWrite(gi8Winc1501ResetPin, HIGH);
    5e62:	7820      	ldrb	r0, [r4, #0]
    5e64:	2101      	movs	r1, #1
    5e66:	f003 fb11 	bl	948c <digitalWrite>
	pinMode(gi8Winc1501IntnPin, INPUT);
    5e6a:	4b0b      	ldr	r3, [pc, #44]	; (5e98 <nm_bsp_init+0x50>)
    5e6c:	2100      	movs	r1, #0
    5e6e:	7818      	ldrb	r0, [r3, #0]
    5e70:	f003 fb36 	bl	94e0 <pinMode>
	if (gi8Winc1501ChipEnPin > -1)
    5e74:	4b09      	ldr	r3, [pc, #36]	; (5e9c <nm_bsp_init+0x54>)
    5e76:	f993 0000 	ldrsb.w	r0, [r3]
    5e7a:	2800      	cmp	r0, #0
    5e7c:	db03      	blt.n	5e86 <nm_bsp_init+0x3e>
		pinMode(gi8Winc1501ChipEnPin, INPUT_PULLUP);
    5e7e:	2102      	movs	r1, #2
    5e80:	b2c0      	uxtb	r0, r0
    5e82:	f003 fb2d 	bl	94e0 <pinMode>
	nm_bsp_reset();
    5e86:	f7ff ffc1 	bl	5e0c <nm_bsp_reset>
}
    5e8a:	2000      	movs	r0, #0
    5e8c:	bd10      	pop	{r4, pc}
    5e8e:	bf00      	nop
    5e90:	1fff0ca3 	.word	0x1fff0ca3
    5e94:	1fff7740 	.word	0x1fff7740
    5e98:	1fff0ca2 	.word	0x1fff0ca2
    5e9c:	1fff0ca0 	.word	0x1fff0ca0

00005ea0 <nm_bsp_sleep>:
	while (u32TimeMsec--) {
    5ea0:	b140      	cbz	r0, 5eb4 <nm_bsp_sleep+0x14>
{
    5ea2:	b510      	push	{r4, lr}
    5ea4:	1e44      	subs	r4, r0, #1
		delay(1);
    5ea6:	2001      	movs	r0, #1
	while (u32TimeMsec--) {
    5ea8:	3c01      	subs	r4, #1
		delay(1);
    5eaa:	f003 fb77 	bl	959c <delay>
	while (u32TimeMsec--) {
    5eae:	1c63      	adds	r3, r4, #1
    5eb0:	d1f9      	bne.n	5ea6 <nm_bsp_sleep+0x6>
	}
}
    5eb2:	bd10      	pop	{r4, pc}
    5eb4:	4770      	bx	lr
    5eb6:	bf00      	nop

00005eb8 <nm_bsp_register_isr>:
 *	@date	28 OCT 2013
 *	@sa		tpfNmBspIsr
 *	@version	1.0
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    5eb8:	b510      	push	{r4, lr}
	gpfIsr = pfIsr;
	attachInterruptMultiArch(gi8Winc1501IntnPin, chip_isr, FALLING);
    5eba:	4a05      	ldr	r2, [pc, #20]	; (5ed0 <nm_bsp_register_isr+0x18>)
	gpfIsr = pfIsr;
    5ebc:	4b05      	ldr	r3, [pc, #20]	; (5ed4 <nm_bsp_register_isr+0x1c>)
	attachInterruptMultiArch(gi8Winc1501IntnPin, chip_isr, FALLING);
    5ebe:	4906      	ldr	r1, [pc, #24]	; (5ed8 <nm_bsp_register_isr+0x20>)
{
    5ec0:	4604      	mov	r4, r0
	attachInterruptMultiArch(gi8Winc1501IntnPin, chip_isr, FALLING);
    5ec2:	f992 0000 	ldrsb.w	r0, [r2]
	gpfIsr = pfIsr;
    5ec6:	601c      	str	r4, [r3, #0]
	attachInterruptMultiArch(gi8Winc1501IntnPin, chip_isr, FALLING);
    5ec8:	2202      	movs	r2, #2
    5eca:	f7ff ff97 	bl	5dfc <attachInterruptMultiArch>
}
    5ece:	bd10      	pop	{r4, pc}
    5ed0:	1fff0ca2 	.word	0x1fff0ca2
    5ed4:	1fff7740 	.word	0x1fff7740
    5ed8:	00005ded 	.word	0x00005ded

00005edc <nm_bsp_interrupt_ctrl>:
 *	@author	M.S.M
 *	@date	28 OCT 2013
 *	@version	1.0
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    5edc:	b508      	push	{r3, lr}
	if (u8Enable) {
		attachInterruptMultiArch(gi8Winc1501IntnPin, chip_isr, FALLING);
    5ede:	4b07      	ldr	r3, [pc, #28]	; (5efc <nm_bsp_interrupt_ctrl+0x20>)
	if (u8Enable) {
    5ee0:	b130      	cbz	r0, 5ef0 <nm_bsp_interrupt_ctrl+0x14>
		attachInterruptMultiArch(gi8Winc1501IntnPin, chip_isr, FALLING);
    5ee2:	4907      	ldr	r1, [pc, #28]	; (5f00 <nm_bsp_interrupt_ctrl+0x24>)
    5ee4:	f993 0000 	ldrsb.w	r0, [r3]
    5ee8:	2202      	movs	r2, #2
    5eea:	f7ff ff87 	bl	5dfc <attachInterruptMultiArch>
	} else {
		detachInterruptMultiArch(gi8Winc1501IntnPin);
	}
}
    5eee:	bd08      	pop	{r3, pc}
		detachInterruptMultiArch(gi8Winc1501IntnPin);
    5ef0:	f993 0000 	ldrsb.w	r0, [r3]
    5ef4:	f7ff ff86 	bl	5e04 <detachInterruptMultiArch>
}
    5ef8:	bd08      	pop	{r3, pc}
    5efa:	bf00      	nop
    5efc:	1fff0ca2 	.word	0x1fff0ca2
    5f00:	00005ded 	.word	0x00005ded

00005f04 <nm_bus_init>:
*	@author	M.S.M
*	@date	28 oct 2013
*	@version	1.0
*/
sint8 nm_bus_init(void * /* pvInitValue */)
{
    5f04:	b510      	push	{r4, lr}

	/* Configure SPI peripheral. */
	WINC1501_SPI.begin();
	
	/* Configure CS PIN. */
	pinMode(gi8Winc1501CsPin, OUTPUT);
    5f06:	4c09      	ldr	r4, [pc, #36]	; (5f2c <nm_bus_init+0x28>)
	WINC1501_SPI.begin();
    5f08:	4809      	ldr	r0, [pc, #36]	; (5f30 <nm_bus_init+0x2c>)
    5f0a:	f7fe fed7 	bl	4cbc <SPIClass::begin()>
	pinMode(gi8Winc1501CsPin, OUTPUT);
    5f0e:	7820      	ldrb	r0, [r4, #0]
    5f10:	2101      	movs	r1, #1
    5f12:	f003 fae5 	bl	94e0 <pinMode>
	digitalWrite(gi8Winc1501CsPin, HIGH);
    5f16:	7820      	ldrb	r0, [r4, #0]
    5f18:	2101      	movs	r1, #1
    5f1a:	f003 fab7 	bl	948c <digitalWrite>

	/* Reset WINC1500. */
	nm_bsp_reset();
    5f1e:	f7ff ff75 	bl	5e0c <nm_bsp_reset>
	nm_bsp_sleep(1);
    5f22:	2001      	movs	r0, #1
    5f24:	f7ff ffbc 	bl	5ea0 <nm_bsp_sleep>

	return result;
}
    5f28:	2000      	movs	r0, #0
    5f2a:	bd10      	pop	{r4, pc}
    5f2c:	1fff0ca1 	.word	0x1fff0ca1
    5f30:	1fff764c 	.word	0x1fff764c

00005f34 <nm_bus_ioctl>:
*	@version	1.0
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
	sint8 s8Ret = 0;
	switch(u8Cmd)
    5f34:	2803      	cmp	r0, #3
    5f36:	f040 80a0 	bne.w	607a <nm_bus_ioctl+0x146>
{
    5f3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	{
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    5f3e:	680e      	ldr	r6, [r1, #0]
    5f40:	684d      	ldr	r5, [r1, #4]
    5f42:	890c      	ldrh	r4, [r1, #8]
{
    5f44:	b082      	sub	sp, #8
	uint8 u8Dummy = 0;
    5f46:	2300      	movs	r3, #0
    5f48:	f88d 3007 	strb.w	r3, [sp, #7]
	if (!pu8Mosi) {
    5f4c:	2e00      	cmp	r6, #0
    5f4e:	f000 808e 	beq.w	606e <nm_bus_ioctl+0x13a>
	else if(!pu8Miso) {
    5f52:	2d00      	cmp	r5, #0
    5f54:	f040 8094 	bne.w	6080 <nm_bus_ioctl+0x14c>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    5f58:	46a9      	mov	r9, r5
		u8SkipMiso = 1;
    5f5a:	f04f 0801 	mov.w	r8, #1
		pu8Miso = &u8Dummy;
    5f5e:	f10d 0507 	add.w	r5, sp, #7
	WINC1501_SPI.beginTransaction(wifi_SPISettings);
    5f62:	4b49      	ldr	r3, [pc, #292]	; (6088 <nm_bus_ioctl+0x154>)
		if (interruptMasksUsed) {
    5f64:	4f49      	ldr	r7, [pc, #292]	; (608c <nm_bus_ioctl+0x158>)
    5f66:	681a      	ldr	r2, [r3, #0]
    5f68:	7afb      	ldrb	r3, [r7, #11]
    5f6a:	b373      	cbz	r3, 5fca <nm_bus_ioctl+0x96>
			__disable_irq();
    5f6c:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    5f6e:	7af9      	ldrb	r1, [r7, #11]
    5f70:	07c8      	lsls	r0, r1, #31
    5f72:	d508      	bpl.n	5f86 <nm_bus_ioctl+0x52>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    5f74:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    5f78:	68fb      	ldr	r3, [r7, #12]
    5f7a:	f8dc 0180 	ldr.w	r0, [ip, #384]	; 0x180
    5f7e:	4003      	ands	r3, r0
				NVIC_ICER0 = interruptSave[0];
    5f80:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    5f84:	61fb      	str	r3, [r7, #28]
			if (interruptMasksUsed & 0x02) {
    5f86:	078b      	lsls	r3, r1, #30
    5f88:	d508      	bpl.n	5f9c <nm_bus_ioctl+0x68>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    5f8a:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    5f8e:	693b      	ldr	r3, [r7, #16]
    5f90:	f8dc 0184 	ldr.w	r0, [ip, #388]	; 0x184
    5f94:	4003      	ands	r3, r0
				NVIC_ICER1 = interruptSave[1];
    5f96:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    5f9a:	623b      	str	r3, [r7, #32]
			if (interruptMasksUsed & 0x04) {
    5f9c:	0748      	lsls	r0, r1, #29
    5f9e:	d508      	bpl.n	5fb2 <nm_bus_ioctl+0x7e>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    5fa0:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    5fa4:	697b      	ldr	r3, [r7, #20]
    5fa6:	f8dc 0188 	ldr.w	r0, [ip, #392]	; 0x188
    5faa:	4003      	ands	r3, r0
				NVIC_ICER2 = interruptSave[2];
    5fac:	f8cc 3188 	str.w	r3, [ip, #392]	; 0x188
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    5fb0:	627b      	str	r3, [r7, #36]	; 0x24
			if (interruptMasksUsed & 0x08) {
    5fb2:	070b      	lsls	r3, r1, #28
    5fb4:	d508      	bpl.n	5fc8 <nm_bus_ioctl+0x94>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    5fb6:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    5fba:	69b9      	ldr	r1, [r7, #24]
    5fbc:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
    5fc0:	400b      	ands	r3, r1
				NVIC_ICER3 = interruptSave[3];
    5fc2:	f8c0 318c 	str.w	r3, [r0, #396]	; 0x18c
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    5fc6:	62bb      	str	r3, [r7, #40]	; 0x28
			__enable_irq();
    5fc8:	b662      	cpsie	i
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    5fca:	683b      	ldr	r3, [r7, #0]
		if (port().CTAR0 != settings.ctar) {
    5fcc:	68d9      	ldr	r1, [r3, #12]
    5fce:	4291      	cmp	r1, r2
    5fd0:	d007      	beq.n	5fe2 <nm_bus_ioctl+0xae>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    5fd2:	492f      	ldr	r1, [pc, #188]	; (6090 <nm_bus_ioctl+0x15c>)
    5fd4:	6019      	str	r1, [r3, #0]
			port().CTAR0 = settings.ctar;
    5fd6:	60da      	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    5fd8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    5fdc:	611a      	str	r2, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    5fde:	4a2d      	ldr	r2, [pc, #180]	; (6094 <nm_bus_ioctl+0x160>)
    5fe0:	601a      	str	r2, [r3, #0]
	digitalWrite(gi8Winc1501CsPin, LOW);
    5fe2:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 6098 <nm_bus_ioctl+0x164>
    5fe6:	2100      	movs	r1, #0
    5fe8:	f89a 0000 	ldrb.w	r0, [sl]
    5fec:	f003 fa4e 	bl	948c <digitalWrite>
	while (u16Sz) {
    5ff0:	b1b4      	cbz	r4, 6020 <nm_bus_ioctl+0xec>
		port().SR = SPI_SR_TCF;
    5ff2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    5ff6:	683a      	ldr	r2, [r7, #0]
		*pu8Miso = WINC1501_SPI.transfer(*pu8Mosi);
    5ff8:	7833      	ldrb	r3, [r6, #0]
		port().SR = SPI_SR_TCF;
    5ffa:	62d1      	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    5ffc:	6353      	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    5ffe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    6000:	2b00      	cmp	r3, #0
    6002:	dafc      	bge.n	5ffe <nm_bus_ioctl+0xca>
		return port().POPR;
    6004:	6b93      	ldr	r3, [r2, #56]	; 0x38
    6006:	702b      	strb	r3, [r5, #0]
		u16Sz--;
    6008:	3c01      	subs	r4, #1
    600a:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
    600c:	f1b8 0f00 	cmp.w	r8, #0
    6010:	d100      	bne.n	6014 <nm_bus_ioctl+0xe0>
			pu8Miso++;
    6012:	3501      	adds	r5, #1
		if (!u8SkipMosi)
    6014:	f1b9 0f00 	cmp.w	r9, #0
    6018:	d100      	bne.n	601c <nm_bus_ioctl+0xe8>
			pu8Mosi++;
    601a:	3601      	adds	r6, #1
	while (u16Sz) {
    601c:	2c00      	cmp	r4, #0
    601e:	d1ea      	bne.n	5ff6 <nm_bus_ioctl+0xc2>
	digitalWrite(gi8Winc1501CsPin, HIGH);
    6020:	f89a 0000 	ldrb.w	r0, [sl]
    6024:	2101      	movs	r1, #1
    6026:	f003 fa31 	bl	948c <digitalWrite>
		if (interruptMasksUsed) {
    602a:	7afb      	ldrb	r3, [r7, #11]
    602c:	b1db      	cbz	r3, 6066 <nm_bus_ioctl+0x132>
			if (interruptMasksUsed & 0x01) {
    602e:	07d8      	lsls	r0, r3, #31
    6030:	d504      	bpl.n	603c <nm_bus_ioctl+0x108>
				NVIC_ISER0 = interruptSave[0];
    6032:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    6036:	69f9      	ldr	r1, [r7, #28]
    6038:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) {
    603c:	0799      	lsls	r1, r3, #30
    603e:	d504      	bpl.n	604a <nm_bus_ioctl+0x116>
				NVIC_ISER1 = interruptSave[1];
    6040:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    6044:	6a39      	ldr	r1, [r7, #32]
    6046:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) {
    604a:	075a      	lsls	r2, r3, #29
    604c:	d504      	bpl.n	6058 <nm_bus_ioctl+0x124>
				NVIC_ISER2 = interruptSave[2];
    604e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    6052:	6a79      	ldr	r1, [r7, #36]	; 0x24
    6054:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) {
    6058:	071b      	lsls	r3, r3, #28
    605a:	d504      	bpl.n	6066 <nm_bus_ioctl+0x132>
				NVIC_ISER3 = interruptSave[3];
    605c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    6060:	6aba      	ldr	r2, [r7, #40]	; 0x28
    6062:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	return M2M_SUCCESS;
    6066:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    6068:	b002      	add	sp, #8
    606a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    606e:	46b0      	mov	r8, r6
		u8SkipMosi = 1;
    6070:	f04f 0901 	mov.w	r9, #1
		pu8Mosi = &u8Dummy;
    6074:	f10d 0607 	add.w	r6, sp, #7
    6078:	e773      	b.n	5f62 <nm_bus_ioctl+0x2e>
			s8Ret = -1;
    607a:	f04f 30ff 	mov.w	r0, #4294967295
}
    607e:	4770      	bx	lr
		return M2M_ERR_BUS_FAIL;
    6080:	f06f 0005 	mvn.w	r0, #5
		break;
    6084:	e7f0      	b.n	6068 <nm_bus_ioctl+0x134>
    6086:	bf00      	nop
    6088:	1fff7744 	.word	0x1fff7744
    608c:	1fff764c 	.word	0x1fff764c
    6090:	003f4001 	.word	0x003f4001
    6094:	803f0000 	.word	0x803f0000
    6098:	1fff0ca1 	.word	0x1fff0ca1

0000609c <nm_bus_deinit>:
*	@author	M.S.M
*	@date	28 oct 2013
*	@version	1.0
*/
sint8 nm_bus_deinit(void)
{
    609c:	b508      	push	{r3, lr}
	WINC1501_SPI.end();
    609e:	4802      	ldr	r0, [pc, #8]	; (60a8 <nm_bus_deinit+0xc>)
    60a0:	f7fe fe4c 	bl	4d3c <SPIClass::end()>
	return 0;
}
    60a4:	2000      	movs	r0, #0
    60a6:	bd08      	pop	{r3, pc}
    60a8:	1fff764c 	.word	0x1fff764c

000060ac <_GLOBAL__sub_I_egstrNmBusCapabilities>:
		ctar = c | t;
    60ac:	4b01      	ldr	r3, [pc, #4]	; (60b4 <_GLOBAL__sub_I_egstrNmBusCapabilities+0x8>)
    60ae:	4a02      	ldr	r2, [pc, #8]	; (60b8 <_GLOBAL__sub_I_egstrNmBusCapabilities+0xc>)
    60b0:	601a      	str	r2, [r3, #0]
sint8 nm_bus_reinit(void* /* config */)
{
	return M2M_SUCCESS;
}

} // extern "C"
    60b2:	4770      	bx	lr
    60b4:	1fff7744 	.word	0x1fff7744
    60b8:	b8020000 	.word	0xb8020000

000060bc <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    60bc:	b13a      	cbz	r2, 60ce <m2m_memcpy+0x12>
    60be:	3901      	subs	r1, #1
    60c0:	4402      	add	r2, r0
	do
	{
		*pDst = *pSrc;
    60c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    60c6:	f800 3b01 	strb.w	r3, [r0], #1
		pDst++;
		pSrc++;
	}while(--sz);
    60ca:	4290      	cmp	r0, r2
    60cc:	d1f9      	bne.n	60c2 <m2m_memcpy+0x6>
}
    60ce:	4770      	bx	lr

000060d0 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    60d0:	b10a      	cbz	r2, 60d6 <m2m_memset+0x6>
	do
	{
		*pBuf = val;
    60d2:	f005 be01 	b.w	bcd8 <memset>
		pBuf++;
	}while(--sz);
}
    60d6:	4770      	bx	lr

000060d8 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    60d8:	7803      	ldrb	r3, [r0, #0]
    60da:	b14b      	cbz	r3, 60f0 <m2m_strlen+0x18>
    60dc:	4603      	mov	r3, r0
    60de:	f1c0 0101 	rsb	r1, r0, #1
	{
		u16StrLen ++;
    60e2:	1858      	adds	r0, r3, r1
	while(*pcStr)
    60e4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    60e8:	b280      	uxth	r0, r0
    60ea:	2a00      	cmp	r2, #0
    60ec:	d1f9      	bne.n	60e2 <m2m_strlen+0xa>
    60ee:	4770      	bx	lr
	uint16	u16StrLen = 0;
    60f0:	4618      	mov	r0, r3
		pcStr++;
	}
	return u16StrLen;
}
    60f2:	4770      	bx	lr

000060f4 <isr>:
volatile uint8 hif_receive_blocked = 0;
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    60f4:	4a02      	ldr	r2, [pc, #8]	; (6100 <isr+0xc>)
    60f6:	78d3      	ldrb	r3, [r2, #3]
    60f8:	3301      	adds	r3, #1
    60fa:	b2db      	uxtb	r3, r3
    60fc:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    60fe:	4770      	bx	lr
    6100:	1fff7748 	.word	0x1fff7748

00006104 <m2m_hif_cb>:
	// Silence "unused" warning
	(void)u8OpCode;
	(void)u16DataSize;
	(void)u32Addr;
#endif
}
    6104:	4770      	bx	lr
    6106:	bf00      	nop

00006108 <hif_set_rx_done>:
{
    6108:	b500      	push	{lr}
	hif_receive_blocked = 0;
    610a:	490d      	ldr	r1, [pc, #52]	; (6140 <hif_set_rx_done+0x38>)
	gstrHifCxt.u8HifRXDone = 0;
    610c:	4a0d      	ldr	r2, [pc, #52]	; (6144 <hif_set_rx_done+0x3c>)
{
    610e:	b083      	sub	sp, #12
	hif_receive_blocked = 0;
    6110:	2300      	movs	r3, #0
	nm_bsp_interrupt_ctrl(1);
    6112:	2001      	movs	r0, #1
	hif_receive_blocked = 0;
    6114:	700b      	strb	r3, [r1, #0]
	gstrHifCxt.u8HifRXDone = 0;
    6116:	7093      	strb	r3, [r2, #2]
	nm_bsp_interrupt_ctrl(1);
    6118:	f7ff fee0 	bl	5edc <nm_bsp_interrupt_ctrl>
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    611c:	a901      	add	r1, sp, #4
    611e:	f241 0070 	movw	r0, #4208	; 0x1070
    6122:	f001 f859 	bl	71d8 <nm_read_reg_with_ret>
	if(ret != M2M_SUCCESS)goto ERR1;
    6126:	b938      	cbnz	r0, 6138 <hif_set_rx_done+0x30>
	reg |= NBIT1;
    6128:	9901      	ldr	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    612a:	f241 0070 	movw	r0, #4208	; 0x1070
	reg |= NBIT1;
    612e:	f041 0102 	orr.w	r1, r1, #2
    6132:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    6134:	f001 f852 	bl	71dc <nm_write_reg>
}
    6138:	b003      	add	sp, #12
    613a:	f85d fb04 	ldr.w	pc, [sp], #4
    613e:	bf00      	nop
    6140:	1fff7770 	.word	0x1fff7770
    6144:	1fff7748 	.word	0x1fff7748

00006148 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    6148:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    614a:	4c0a      	ldr	r4, [pc, #40]	; (6174 <hif_chip_wake+0x2c>)
    614c:	78a3      	ldrb	r3, [r4, #2]
    614e:	b94b      	cbnz	r3, 6164 <hif_chip_wake+0x1c>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    6150:	7863      	ldrb	r3, [r4, #1]
    6152:	b90b      	cbnz	r3, 6158 <hif_chip_wake+0x10>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    6154:	7823      	ldrb	r3, [r4, #0]
    6156:	b93b      	cbnz	r3, 6168 <hif_chip_wake+0x20>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    6158:	7863      	ldrb	r3, [r4, #1]
    615a:	3301      	adds	r3, #1
    615c:	b2db      	uxtb	r3, r3
    615e:	2000      	movs	r0, #0
    6160:	7063      	strb	r3, [r4, #1]
ERR1:
	return ret;
}
    6162:	bd10      	pop	{r4, pc}
		return ret;
    6164:	2000      	movs	r0, #0
}
    6166:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    6168:	f000 fe8c 	bl	6e84 <chip_wake>
			if(ret != M2M_SUCCESS)goto ERR1;
    616c:	2800      	cmp	r0, #0
    616e:	d0f3      	beq.n	6158 <hif_chip_wake+0x10>
    6170:	e7f7      	b.n	6162 <hif_chip_wake+0x1a>
    6172:	bf00      	nop
    6174:	1fff7748 	.word	0x1fff7748

00006178 <hif_chip_sleep>:

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    6178:	4b07      	ldr	r3, [pc, #28]	; (6198 <hif_chip_sleep+0x20>)
    617a:	785a      	ldrb	r2, [r3, #1]
    617c:	b11a      	cbz	r2, 6186 <hif_chip_sleep+0xe>
	{
		gstrHifCxt.u8ChipSleep--;
    617e:	785a      	ldrb	r2, [r3, #1]
    6180:	3a01      	subs	r2, #1
    6182:	b2d2      	uxtb	r2, r2
    6184:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    6186:	785a      	ldrb	r2, [r3, #1]
    6188:	b90a      	cbnz	r2, 618e <hif_chip_sleep+0x16>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    618a:	781b      	ldrb	r3, [r3, #0]
    618c:	b90b      	cbnz	r3, 6192 <hif_chip_sleep+0x1a>
		{
		}
	}
ERR1:
	return ret;
}
    618e:	2000      	movs	r0, #0
    6190:	4770      	bx	lr
			ret = chip_sleep();
    6192:	f000 be47 	b.w	6e24 <chip_sleep>
    6196:	bf00      	nop
    6198:	1fff7748 	.word	0x1fff7748

0000619c <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    619c:	b510      	push	{r4, lr}
#ifdef ARDUINO
	(void)arg; // Silence "unused" warning
#endif
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    619e:	4c06      	ldr	r4, [pc, #24]	; (61b8 <hif_init+0x1c>)
    61a0:	2228      	movs	r2, #40	; 0x28
    61a2:	2100      	movs	r1, #0
    61a4:	4620      	mov	r0, r4
    61a6:	f7ff ff93 	bl	60d0 <m2m_memset>
	nm_bsp_register_isr(isr);
    61aa:	4804      	ldr	r0, [pc, #16]	; (61bc <hif_init+0x20>)
    61ac:	f7ff fe84 	bl	5eb8 <nm_bsp_register_isr>
			break;
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
			break;
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
    61b0:	4b03      	ldr	r3, [pc, #12]	; (61c0 <hif_init+0x24>)
    61b2:	61e3      	str	r3, [r4, #28]
}
    61b4:	2000      	movs	r0, #0
    61b6:	bd10      	pop	{r4, pc}
    61b8:	1fff7748 	.word	0x1fff7748
    61bc:	000060f5 	.word	0x000060f5
    61c0:	00006105 	.word	0x00006105

000061c4 <hif_send>:
{
    61c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61c8:	b087      	sub	sp, #28
    61ca:	461e      	mov	r6, r3
	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    61cc:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    61d0:	f88d 3009 	strb.w	r3, [sp, #9]
{
    61d4:	9d10      	ldr	r5, [sp, #64]	; 0x40
	strHif.u8Gid		= u8Gid;
    61d6:	f88d 0008 	strb.w	r0, [sp, #8]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    61da:	2308      	movs	r3, #8
    61dc:	f8ad 300a 	strh.w	r3, [sp, #10]
{
    61e0:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
    61e4:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
		strHif.u16Length += u16DataOffset + u16DataSize;
    61e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
{
    61ec:	468b      	mov	fp, r1
    61ee:	4682      	mov	sl, r0
    61f0:	4617      	mov	r7, r2
	if(pu8DataBuf != NULL)
    61f2:	2d00      	cmp	r5, #0
    61f4:	d070      	beq.n	62d8 <hif_send+0x114>
		strHif.u16Length += u16DataOffset + u16DataSize;
    61f6:	fa19 f383 	uxtah	r3, r9, r3
    61fa:	4443      	add	r3, r8
    61fc:	b29b      	uxth	r3, r3
    61fe:	f8ad 300a 	strh.w	r3, [sp, #10]
	if(gstrHifCxt.u8HifRXDone)
    6202:	4c68      	ldr	r4, [pc, #416]	; (63a4 <hif_send+0x1e0>)
    6204:	78a3      	ldrb	r3, [r4, #2]
    6206:	b92b      	cbnz	r3, 6214 <hif_send+0x50>
	if(gstrHifCxt.u8ChipSleep == 0)
    6208:	7863      	ldrb	r3, [r4, #1]
    620a:	b32b      	cbz	r3, 6258 <hif_send+0x94>
	gstrHifCxt.u8ChipSleep++;
    620c:	7863      	ldrb	r3, [r4, #1]
    620e:	3301      	adds	r3, #1
    6210:	b2db      	uxtb	r3, r3
    6212:	7063      	strb	r3, [r4, #1]
		volatile uint32 reg, dma_addr = 0;
    6214:	2300      	movs	r3, #0
    6216:	9304      	str	r3, [sp, #16]
		volatile uint16 cnt = 0;
    6218:	f8ad 3006 	strh.w	r3, [sp, #6]
		reg = 0UL;
    621c:	9303      	str	r3, [sp, #12]
		reg |= (uint32)u8Gid;
    621e:	9b03      	ldr	r3, [sp, #12]
    6220:	ea4a 0303 	orr.w	r3, sl, r3
    6224:	9303      	str	r3, [sp, #12]
		reg |= ((uint32)u8Opcode<<8);
    6226:	9b03      	ldr	r3, [sp, #12]
    6228:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
    622c:	9303      	str	r3, [sp, #12]
		reg |= ((uint32)strHif.u16Length<<16);
    622e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    6232:	9b03      	ldr	r3, [sp, #12]
    6234:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    6238:	9303      	str	r3, [sp, #12]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    623a:	9903      	ldr	r1, [sp, #12]
    623c:	f241 008c 	movw	r0, #4236	; 0x108c
    6240:	f000 ffcc 	bl	71dc <nm_write_reg>
		if(M2M_SUCCESS != ret) goto ERR1;
    6244:	b180      	cbz	r0, 6268 <hif_send+0xa4>
	if(gstrHifCxt.u8ChipSleep >= 1)
    6246:	7863      	ldrb	r3, [r4, #1]
    6248:	b11b      	cbz	r3, 6252 <hif_send+0x8e>
		gstrHifCxt.u8ChipSleep--;
    624a:	7863      	ldrb	r3, [r4, #1]
    624c:	3b01      	subs	r3, #1
    624e:	b2db      	uxtb	r3, r3
    6250:	7063      	strb	r3, [r4, #1]
}
    6252:	b007      	add	sp, #28
    6254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    6258:	7823      	ldrb	r3, [r4, #0]
    625a:	2b00      	cmp	r3, #0
    625c:	d0d6      	beq.n	620c <hif_send+0x48>
			ret = chip_wake();
    625e:	f000 fe11 	bl	6e84 <chip_wake>
			if(ret != M2M_SUCCESS)goto ERR1;
    6262:	2800      	cmp	r0, #0
    6264:	d0d2      	beq.n	620c <hif_send+0x48>
    6266:	e7f4      	b.n	6252 <hif_send+0x8e>
		reg = 0UL;
    6268:	9003      	str	r0, [sp, #12]
		reg |= NBIT1;
    626a:	9b03      	ldr	r3, [sp, #12]
    626c:	f043 0302 	orr.w	r3, r3, #2
    6270:	9303      	str	r3, [sp, #12]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    6272:	9903      	ldr	r1, [sp, #12]
    6274:	f241 0078 	movw	r0, #4216	; 0x1078
    6278:	f000 ffb0 	bl	71dc <nm_write_reg>
		if(M2M_SUCCESS != ret) goto ERR1;
    627c:	2800      	cmp	r0, #0
    627e:	d1e2      	bne.n	6246 <hif_send+0x82>
		dma_addr = 0;
    6280:	9004      	str	r0, [sp, #16]
		for(cnt = 0; cnt < 1000; cnt ++)
    6282:	f8ad 0006 	strh.w	r0, [sp, #6]
    6286:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    628a:	b29b      	uxth	r3, r3
    628c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    6290:	d310      	bcc.n	62b4 <hif_send+0xf0>
    6292:	e02d      	b.n	62f0 <hif_send+0x12c>
			if (!(reg & NBIT1))
    6294:	9b03      	ldr	r3, [sp, #12]
    6296:	f013 0a02 	ands.w	sl, r3, #2
    629a:	d023      	beq.n	62e4 <hif_send+0x120>
		for(cnt = 0; cnt < 1000; cnt ++)
    629c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    62a0:	3001      	adds	r0, #1
    62a2:	b280      	uxth	r0, r0
    62a4:	f8ad 0006 	strh.w	r0, [sp, #6]
    62a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    62ac:	b29b      	uxth	r3, r3
    62ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    62b2:	d21d      	bcs.n	62f0 <hif_send+0x12c>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    62b4:	a903      	add	r1, sp, #12
    62b6:	f241 0078 	movw	r0, #4216	; 0x1078
    62ba:	f000 ff8d 	bl	71d8 <nm_read_reg_with_ret>
			if(ret != M2M_SUCCESS) break;
    62be:	b9b8      	cbnz	r0, 62f0 <hif_send+0x12c>
			if(cnt >= 500) {
    62c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    62c4:	b29b      	uxth	r3, r3
    62c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    62ca:	d3e3      	bcc.n	6294 <hif_send+0xd0>
				nm_bsp_sleep(1);
    62cc:	2001      	movs	r0, #1
				if(cnt < 501) {
    62ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
				nm_bsp_sleep(1);
    62d2:	f7ff fde5 	bl	5ea0 <nm_bsp_sleep>
    62d6:	e7dd      	b.n	6294 <hif_send+0xd0>
		strHif.u16Length += u16CtrlBufSize;
    62d8:	fa16 f383 	uxtah	r3, r6, r3
    62dc:	b29b      	uxth	r3, r3
    62de:	f8ad 300a 	strh.w	r3, [sp, #10]
    62e2:	e78e      	b.n	6202 <hif_send+0x3e>
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    62e4:	4830      	ldr	r0, [pc, #192]	; (63a8 <hif_send+0x1e4>)
    62e6:	a904      	add	r1, sp, #16
    62e8:	f000 ff76 	bl	71d8 <nm_read_reg_with_ret>
				if(ret != M2M_SUCCESS) {
    62ec:	2800      	cmp	r0, #0
    62ee:	d150      	bne.n	6392 <hif_send+0x1ce>
		if (dma_addr != 0)
    62f0:	9b04      	ldr	r3, [sp, #16]
    62f2:	2b00      	cmp	r3, #0
    62f4:	d050      	beq.n	6398 <hif_send+0x1d4>
			u32CurrAddr = dma_addr;
    62f6:	9b04      	ldr	r3, [sp, #16]
    62f8:	9305      	str	r3, [sp, #20]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    62fa:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    62fe:	b29b      	uxth	r3, r3
    6300:	f8ad 300a 	strh.w	r3, [sp, #10]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    6304:	2208      	movs	r2, #8
    6306:	9805      	ldr	r0, [sp, #20]
    6308:	eb0d 0102 	add.w	r1, sp, r2
    630c:	f000 ff90 	bl	7230 <nm_write_block>
			if(M2M_SUCCESS != ret) goto ERR1;
    6310:	2800      	cmp	r0, #0
    6312:	d198      	bne.n	6246 <hif_send+0x82>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    6314:	9b05      	ldr	r3, [sp, #20]
    6316:	3308      	adds	r3, #8
    6318:	9305      	str	r3, [sp, #20]
			if(pu8CtrlBuf != NULL)
    631a:	b14f      	cbz	r7, 6330 <hif_send+0x16c>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    631c:	9805      	ldr	r0, [sp, #20]
    631e:	4639      	mov	r1, r7
    6320:	4632      	mov	r2, r6
    6322:	f000 ff85 	bl	7230 <nm_write_block>
				if(M2M_SUCCESS != ret) goto ERR1;
    6326:	2800      	cmp	r0, #0
    6328:	d18d      	bne.n	6246 <hif_send+0x82>
				u32CurrAddr += u16CtrlBufSize;
    632a:	9b05      	ldr	r3, [sp, #20]
    632c:	4433      	add	r3, r6
    632e:	9305      	str	r3, [sp, #20]
			if(pu8DataBuf != NULL)
    6330:	b17d      	cbz	r5, 6352 <hif_send+0x18e>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    6332:	9b05      	ldr	r3, [sp, #20]
    6334:	eba8 0806 	sub.w	r8, r8, r6
    6338:	4443      	add	r3, r8
    633a:	9305      	str	r3, [sp, #20]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    633c:	9805      	ldr	r0, [sp, #20]
    633e:	464a      	mov	r2, r9
    6340:	4629      	mov	r1, r5
    6342:	f000 ff75 	bl	7230 <nm_write_block>
				if(M2M_SUCCESS != ret) goto ERR1;
    6346:	2800      	cmp	r0, #0
    6348:	f47f af7d 	bne.w	6246 <hif_send+0x82>
				u32CurrAddr += u16DataSize;
    634c:	9b05      	ldr	r3, [sp, #20]
    634e:	444b      	add	r3, r9
    6350:	9305      	str	r3, [sp, #20]
			reg = dma_addr << 2;
    6352:	9b04      	ldr	r3, [sp, #16]
    6354:	009b      	lsls	r3, r3, #2
    6356:	9303      	str	r3, [sp, #12]
			reg |= NBIT1;
    6358:	9b03      	ldr	r3, [sp, #12]
    635a:	f043 0302 	orr.w	r3, r3, #2
    635e:	9303      	str	r3, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    6360:	9903      	ldr	r1, [sp, #12]
    6362:	f241 006c 	movw	r0, #4204	; 0x106c
    6366:	f000 ff39 	bl	71dc <nm_write_reg>
			if(M2M_SUCCESS != ret) goto ERR1;
    636a:	2800      	cmp	r0, #0
    636c:	f47f af6b 	bne.w	6246 <hif_send+0x82>
	if(gstrHifCxt.u8ChipSleep >= 1)
    6370:	7863      	ldrb	r3, [r4, #1]
    6372:	b11b      	cbz	r3, 637c <hif_send+0x1b8>
		gstrHifCxt.u8ChipSleep--;
    6374:	7863      	ldrb	r3, [r4, #1]
    6376:	3b01      	subs	r3, #1
    6378:	b2db      	uxtb	r3, r3
    637a:	7063      	strb	r3, [r4, #1]
	if(gstrHifCxt.u8ChipSleep == 0)
    637c:	7863      	ldrb	r3, [r4, #1]
    637e:	2b00      	cmp	r3, #0
    6380:	f47f af67 	bne.w	6252 <hif_send+0x8e>
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    6384:	7823      	ldrb	r3, [r4, #0]
    6386:	2b00      	cmp	r3, #0
    6388:	f43f af63 	beq.w	6252 <hif_send+0x8e>
			ret = chip_sleep();
    638c:	f000 fd4a 	bl	6e24 <chip_sleep>
			if(ret != M2M_SUCCESS)goto ERR1;
    6390:	e75f      	b.n	6252 <hif_send+0x8e>
					dma_addr = 0;
    6392:	f8cd a010 	str.w	sl, [sp, #16]
					goto ERR1;
    6396:	e756      	b.n	6246 <hif_send+0x82>
			ret = hif_chip_sleep();
    6398:	f7ff feee 	bl	6178 <hif_chip_sleep>
			ret = M2M_ERR_MEM_ALLOC;
    639c:	f06f 0002 	mvn.w	r0, #2
			goto ERR2;
    63a0:	e757      	b.n	6252 <hif_send+0x8e>
    63a2:	bf00      	nop
    63a4:	1fff7748 	.word	0x1fff7748
    63a8:	00150400 	.word	0x00150400

000063ac <hif_handle_isr>:
{
    63ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (hif_receive_blocked) {
    63b0:	4e5f      	ldr	r6, [pc, #380]	; (6530 <hif_handle_isr+0x184>)
    63b2:	7833      	ldrb	r3, [r6, #0]
{
    63b4:	b084      	sub	sp, #16
	if (hif_receive_blocked) {
    63b6:	2b00      	cmp	r3, #0
    63b8:	f040 8090 	bne.w	64dc <hif_handle_isr+0x130>
	while (gstrHifCxt.u8Interrupt) {
    63bc:	4d5d      	ldr	r5, [pc, #372]	; (6534 <hif_handle_isr+0x188>)
    63be:	78eb      	ldrb	r3, [r5, #3]
    63c0:	2b00      	cmp	r3, #0
    63c2:	f000 808b 	beq.w	64dc <hif_handle_isr+0x130>
			gstrHifCxt.u8HifRXDone = 1;
    63c6:	2701      	movs	r7, #1
		gstrHifCxt.u8Interrupt--;
    63c8:	78eb      	ldrb	r3, [r5, #3]
    63ca:	3b01      	subs	r3, #1
    63cc:	b2db      	uxtb	r3, r3
    63ce:	70eb      	strb	r3, [r5, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, (uint32*)&reg);
    63d0:	a901      	add	r1, sp, #4
    63d2:	f241 0070 	movw	r0, #4208	; 0x1070
    63d6:	f000 feff 	bl	71d8 <nm_read_reg_with_ret>
	if(M2M_SUCCESS == ret)
    63da:	4604      	mov	r4, r0
    63dc:	2800      	cmp	r0, #0
    63de:	d15b      	bne.n	6498 <hif_handle_isr+0xec>
		if(reg & 0x1)	/* New interrupt has been received */
    63e0:	9b01      	ldr	r3, [sp, #4]
    63e2:	07db      	lsls	r3, r3, #31
    63e4:	d574      	bpl.n	64d0 <hif_handle_isr+0x124>
			nm_bsp_interrupt_ctrl(0);
    63e6:	f7ff fd79 	bl	5edc <nm_bsp_interrupt_ctrl>
			reg &= ~NBIT0;
    63ea:	9b01      	ldr	r3, [sp, #4]
    63ec:	f023 0301 	bic.w	r3, r3, #1
    63f0:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    63f2:	9901      	ldr	r1, [sp, #4]
    63f4:	f241 0070 	movw	r0, #4208	; 0x1070
    63f8:	f000 fef0 	bl	71dc <nm_write_reg>
			if(ret != M2M_SUCCESS)goto ERR1;
    63fc:	4604      	mov	r4, r0
    63fe:	2800      	cmp	r0, #0
    6400:	d14a      	bne.n	6498 <hif_handle_isr+0xec>
			gstrHifCxt.u8HifRXDone = 1;
    6402:	70af      	strb	r7, [r5, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    6404:	9b01      	ldr	r3, [sp, #4]
    6406:	f3c3 088b 	ubfx	r8, r3, #2, #12
			if (size > 0) {
    640a:	f1b8 0f00 	cmp.w	r8, #0
    640e:	f000 8088 	beq.w	6522 <hif_handle_isr+0x176>
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    6412:	a903      	add	r1, sp, #12
    6414:	f241 0084 	movw	r0, #4228	; 0x1084
				uint32 address = 0;
    6418:	9403      	str	r4, [sp, #12]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    641a:	f000 fedd 	bl	71d8 <nm_read_reg_with_ret>
				if(M2M_SUCCESS != ret)
    641e:	4604      	mov	r4, r0
    6420:	bbb8      	cbnz	r0, 6492 <hif_handle_isr+0xe6>
				gstrHifCxt.u32RxAddr = address;
    6422:	9803      	ldr	r0, [sp, #12]
    6424:	6068      	str	r0, [r5, #4]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    6426:	2204      	movs	r2, #4
    6428:	a902      	add	r1, sp, #8
				gstrHifCxt.u32RxSize = size;
    642a:	f8c5 8008 	str.w	r8, [r5, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    642e:	f000 fed7 	bl	71e0 <nm_read_block>
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    6432:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6436:	b29b      	uxth	r3, r3
    6438:	f8ad 300a 	strh.w	r3, [sp, #10]
				if(M2M_SUCCESS != ret)
    643c:	4604      	mov	r4, r0
    643e:	bb40      	cbnz	r0, 6492 <hif_handle_isr+0xe6>
				if(strHif.u16Length != size)
    6440:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    6444:	b29b      	uxth	r3, r3
    6446:	4598      	cmp	r8, r3
    6448:	d007      	beq.n	645a <hif_handle_isr+0xae>
					if((size - strHif.u16Length) > 4)
    644a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    644e:	b29b      	uxth	r3, r3
    6450:	eba8 0803 	sub.w	r8, r8, r3
    6454:	f1b8 0f04 	cmp.w	r8, #4
    6458:	dc4f      	bgt.n	64fa <hif_handle_isr+0x14e>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    645a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    645e:	2b01      	cmp	r3, #1
    6460:	d021      	beq.n	64a6 <hif_handle_isr+0xfa>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    6462:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6466:	2b02      	cmp	r3, #2
    6468:	d03d      	beq.n	64e6 <hif_handle_isr+0x13a>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    646a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    646e:	2b04      	cmp	r3, #4
    6470:	d04d      	beq.n	650e <hif_handle_isr+0x162>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    6472:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6476:	2b06      	cmp	r3, #6
    6478:	d03a      	beq.n	64f0 <hif_handle_isr+0x144>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    647a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    647e:	2b07      	cmp	r3, #7
    6480:	d04a      	beq.n	6518 <hif_handle_isr+0x16c>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    6482:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6486:	2b05      	cmp	r3, #5
    6488:	d13a      	bne.n	6500 <hif_handle_isr+0x154>
				    if(gstrHifCxt.pfSslCb)
    648a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    648c:	b1bb      	cbz	r3, 64be <hif_handle_isr+0x112>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    648e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6490:	e00c      	b.n	64ac <hif_handle_isr+0x100>
					nm_bsp_interrupt_ctrl(1);
    6492:	2001      	movs	r0, #1
    6494:	f7ff fd22 	bl	5edc <nm_bsp_interrupt_ctrl>
			if (hif_receive_blocked) {
    6498:	7833      	ldrb	r3, [r6, #0]
    649a:	2b00      	cmp	r3, #0
    649c:	d098      	beq.n	63d0 <hif_handle_isr+0x24>
}
    649e:	4620      	mov	r0, r4
    64a0:	b004      	add	sp, #16
    64a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if(gstrHifCxt.pfWifiCb)
    64a6:	68eb      	ldr	r3, [r5, #12]
    64a8:	b14b      	cbz	r3, 64be <hif_handle_isr+0x112>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    64aa:	68eb      	ldr	r3, [r5, #12]
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    64ac:	f89d 0009 	ldrb.w	r0, [sp, #9]
    64b0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    64b4:	9a03      	ldr	r2, [sp, #12]
    64b6:	3908      	subs	r1, #8
    64b8:	b289      	uxth	r1, r1
    64ba:	3208      	adds	r2, #8
    64bc:	4798      	blx	r3
				if (hif_receive_blocked) {
    64be:	7833      	ldrb	r3, [r6, #0]
    64c0:	b933      	cbnz	r3, 64d0 <hif_handle_isr+0x124>
				if(gstrHifCxt.u8HifRXDone)
    64c2:	78ab      	ldrb	r3, [r5, #2]
    64c4:	b123      	cbz	r3, 64d0 <hif_handle_isr+0x124>
					ret = hif_set_rx_done();
    64c6:	f7ff fe1f 	bl	6108 <hif_set_rx_done>
					if(ret != M2M_SUCCESS) goto ERR1;
    64ca:	4604      	mov	r4, r0
    64cc:	2800      	cmp	r0, #0
    64ce:	d1e3      	bne.n	6498 <hif_handle_isr+0xec>
			if (hif_receive_blocked) {
    64d0:	7833      	ldrb	r3, [r6, #0]
    64d2:	b91b      	cbnz	r3, 64dc <hif_handle_isr+0x130>
	while (gstrHifCxt.u8Interrupt) {
    64d4:	78eb      	ldrb	r3, [r5, #3]
    64d6:	2b00      	cmp	r3, #0
    64d8:	f47f af76 	bne.w	63c8 <hif_handle_isr+0x1c>
		return ret;
    64dc:	2400      	movs	r4, #0
}
    64de:	4620      	mov	r0, r4
    64e0:	b004      	add	sp, #16
    64e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if(gstrHifCxt.pfIpCb)
    64e6:	692b      	ldr	r3, [r5, #16]
    64e8:	2b00      	cmp	r3, #0
    64ea:	d0e8      	beq.n	64be <hif_handle_isr+0x112>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    64ec:	692b      	ldr	r3, [r5, #16]
    64ee:	e7dd      	b.n	64ac <hif_handle_isr+0x100>
					if(gstrHifCxt.pfCryptoCb)
    64f0:	6a2b      	ldr	r3, [r5, #32]
    64f2:	2b00      	cmp	r3, #0
    64f4:	d0e3      	beq.n	64be <hif_handle_isr+0x112>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    64f6:	6a2b      	ldr	r3, [r5, #32]
    64f8:	e7d8      	b.n	64ac <hif_handle_isr+0x100>
						nm_bsp_interrupt_ctrl(1);
    64fa:	2001      	movs	r0, #1
    64fc:	f7ff fcee 	bl	5edc <nm_bsp_interrupt_ctrl>
			if (hif_receive_blocked) {
    6500:	7833      	ldrb	r3, [r6, #0]
    6502:	2b00      	cmp	r3, #0
    6504:	f43f af64 	beq.w	63d0 <hif_handle_isr+0x24>
						ret = M2M_ERR_BUS_FAIL;
    6508:	f06f 0405 	mvn.w	r4, #5
    650c:	e7c7      	b.n	649e <hif_handle_isr+0xf2>
					if(gstrHifCxt.pfOtaCb)
    650e:	696b      	ldr	r3, [r5, #20]
    6510:	2b00      	cmp	r3, #0
    6512:	d0d4      	beq.n	64be <hif_handle_isr+0x112>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    6514:	696b      	ldr	r3, [r5, #20]
    6516:	e7c9      	b.n	64ac <hif_handle_isr+0x100>
					if(gstrHifCxt.pfSigmaCb)
    6518:	69ab      	ldr	r3, [r5, #24]
    651a:	2b00      	cmp	r3, #0
    651c:	d0cf      	beq.n	64be <hif_handle_isr+0x112>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    651e:	69ab      	ldr	r3, [r5, #24]
    6520:	e7c4      	b.n	64ac <hif_handle_isr+0x100>
			if (hif_receive_blocked) {
    6522:	7833      	ldrb	r3, [r6, #0]
    6524:	2b00      	cmp	r3, #0
    6526:	f43f af53 	beq.w	63d0 <hif_handle_isr+0x24>
				ret = M2M_ERR_RCV;
    652a:	f06f 0401 	mvn.w	r4, #1
    652e:	e7b6      	b.n	649e <hif_handle_isr+0xf2>
    6530:	1fff7770 	.word	0x1fff7770
    6534:	1fff7748 	.word	0x1fff7748

00006538 <hif_receive>:
{
    6538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    653a:	461d      	mov	r5, r3
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    653c:	b1e0      	cbz	r0, 6578 <hif_receive+0x40>
    653e:	b1d9      	cbz	r1, 6578 <hif_receive+0x40>
    6540:	4614      	mov	r4, r2
    6542:	b1ca      	cbz	r2, 6578 <hif_receive+0x40>
	if(u16Sz > gstrHifCxt.u32RxSize)
    6544:	4e0f      	ldr	r6, [pc, #60]	; (6584 <hif_receive+0x4c>)
    6546:	68b3      	ldr	r3, [r6, #8]
    6548:	429a      	cmp	r2, r3
    654a:	d817      	bhi.n	657c <hif_receive+0x44>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    654c:	6873      	ldr	r3, [r6, #4]
    654e:	4283      	cmp	r3, r0
    6550:	d814      	bhi.n	657c <hif_receive+0x44>
    6552:	6873      	ldr	r3, [r6, #4]
    6554:	68b7      	ldr	r7, [r6, #8]
    6556:	4404      	add	r4, r0
    6558:	443b      	add	r3, r7
    655a:	429c      	cmp	r4, r3
    655c:	d80e      	bhi.n	657c <hif_receive+0x44>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    655e:	f000 fe3f 	bl	71e0 <nm_read_block>
	if(ret != M2M_SUCCESS)goto ERR1;
    6562:	b968      	cbnz	r0, 6580 <hif_receive+0x48>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    6564:	6873      	ldr	r3, [r6, #4]
    6566:	68b2      	ldr	r2, [r6, #8]
    6568:	4413      	add	r3, r2
    656a:	429c      	cmp	r4, r3
    656c:	d000      	beq.n	6570 <hif_receive+0x38>
    656e:	b13d      	cbz	r5, 6580 <hif_receive+0x48>
}
    6570:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ret = hif_set_rx_done();
    6574:	f7ff bdc8 	b.w	6108 <hif_set_rx_done>
		if(isDone)
    6578:	2d00      	cmp	r5, #0
    657a:	d1f9      	bne.n	6570 <hif_receive+0x38>
			ret = M2M_ERR_FAIL;
    657c:	f06f 000b 	mvn.w	r0, #11
}
    6580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6582:	bf00      	nop
    6584:	1fff7748 	.word	0x1fff7748

00006588 <hif_register_cb>:
	switch(u8Grp)
    6588:	3801      	subs	r0, #1
    658a:	2806      	cmp	r0, #6
    658c:	d821      	bhi.n	65d2 <hif_register_cb+0x4a>
    658e:	e8df f000 	tbb	[pc, r0]
    6592:	0c08      	.short	0x0c08
    6594:	1c181410 	.word	0x1c181410
    6598:	04          	.byte	0x04
    6599:	00          	.byte	0x00
			break;
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
			break;
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
    659a:	4b0f      	ldr	r3, [pc, #60]	; (65d8 <hif_register_cb+0x50>)
	sint8 ret = M2M_SUCCESS;
    659c:	2000      	movs	r0, #0
			gstrHifCxt.pfSigmaCb = fn;
    659e:	6199      	str	r1, [r3, #24]
			break;
    65a0:	4770      	bx	lr
			gstrHifCxt.pfWifiCb = fn;
    65a2:	4b0d      	ldr	r3, [pc, #52]	; (65d8 <hif_register_cb+0x50>)
	sint8 ret = M2M_SUCCESS;
    65a4:	2000      	movs	r0, #0
			gstrHifCxt.pfWifiCb = fn;
    65a6:	60d9      	str	r1, [r3, #12]
			break;
    65a8:	4770      	bx	lr
			gstrHifCxt.pfIpCb = fn;
    65aa:	4b0b      	ldr	r3, [pc, #44]	; (65d8 <hif_register_cb+0x50>)
	sint8 ret = M2M_SUCCESS;
    65ac:	2000      	movs	r0, #0
			gstrHifCxt.pfIpCb = fn;
    65ae:	6119      	str	r1, [r3, #16]
			break;
    65b0:	4770      	bx	lr
			gstrHifCxt.pfHifCb = fn;
    65b2:	4b09      	ldr	r3, [pc, #36]	; (65d8 <hif_register_cb+0x50>)
	sint8 ret = M2M_SUCCESS;
    65b4:	2000      	movs	r0, #0
			gstrHifCxt.pfHifCb = fn;
    65b6:	61d9      	str	r1, [r3, #28]
			break;
    65b8:	4770      	bx	lr
			gstrHifCxt.pfOtaCb = fn;
    65ba:	4b07      	ldr	r3, [pc, #28]	; (65d8 <hif_register_cb+0x50>)
	sint8 ret = M2M_SUCCESS;
    65bc:	2000      	movs	r0, #0
			gstrHifCxt.pfOtaCb = fn;
    65be:	6159      	str	r1, [r3, #20]
			break;
    65c0:	4770      	bx	lr
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
    65c2:	4b05      	ldr	r3, [pc, #20]	; (65d8 <hif_register_cb+0x50>)
	sint8 ret = M2M_SUCCESS;
    65c4:	2000      	movs	r0, #0
			gstrHifCxt.pfSslCb = fn;
    65c6:	6259      	str	r1, [r3, #36]	; 0x24
			break;
    65c8:	4770      	bx	lr
			gstrHifCxt.pfCryptoCb = fn;
    65ca:	4b03      	ldr	r3, [pc, #12]	; (65d8 <hif_register_cb+0x50>)
	sint8 ret = M2M_SUCCESS;
    65cc:	2000      	movs	r0, #0
			gstrHifCxt.pfCryptoCb = fn;
    65ce:	6219      	str	r1, [r3, #32]
			break;
    65d0:	4770      	bx	lr
	switch(u8Grp)
    65d2:	f06f 000b 	mvn.w	r0, #11
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    65d6:	4770      	bx	lr
    65d8:	1fff7748 	.word	0x1fff7748

000065dc <m2m_periph_gpio_set_dir>:
#endif
	return M2M_SUCCESS;
}

sint8 m2m_periph_gpio_set_dir(uint8 u8GpioNum, uint8 u8GpioDir)
{
    65dc:	b538      	push	{r3, r4, r5, lr}
    65de:	4604      	mov	r4, r0
    65e0:	460d      	mov	r5, r1
	ret = hif_chip_wake();
    65e2:	f7ff fdb1 	bl	6148 <hif_chip_wake>
	if(ret != M2M_SUCCESS) goto _EXIT;
    65e6:	b968      	cbnz	r0, 6604 <m2m_periph_gpio_set_dir+0x28>
	if(u8GpioNum >= M2M_PERIPH_GPIO_MAX) return -1;
    65e8:	2c06      	cmp	r4, #6
    65ea:	d807      	bhi.n	65fc <m2m_periph_gpio_set_dir+0x20>
	if(u8GpioNum == M2M_PERIPH_GPIO15) { return 15;
    65ec:	4b06      	ldr	r3, [pc, #24]	; (6608 <m2m_periph_gpio_set_dir+0x2c>)
    65ee:	5718      	ldrsb	r0, [r3, r4]
	if(gpio < 0) goto _EXIT1;
    65f0:	2800      	cmp	r0, #0
    65f2:	db03      	blt.n	65fc <m2m_periph_gpio_set_dir+0x20>
		ret = set_gpio_dir((uint8)gpio, u8InVal);
    65f4:	4629      	mov	r1, r5
    65f6:	b2c0      	uxtb	r0, r0
    65f8:	f000 fd76 	bl	70e8 <set_gpio_dir>
	return gpio_ioctl(GPIO_OP_DIR, u8GpioNum, u8GpioDir, NULL);
}
    65fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = hif_chip_sleep();
    6600:	f7ff bdba 	b.w	6178 <hif_chip_sleep>
}
    6604:	bd38      	pop	{r3, r4, r5, pc}
    6606:	bf00      	nop
    6608:	00011ec8 	.word	0x00011ec8

0000660c <m2m_periph_gpio_set_val>:

sint8 m2m_periph_gpio_set_val(uint8 u8GpioNum, uint8 u8GpioVal)
{
    660c:	b538      	push	{r3, r4, r5, lr}
    660e:	4604      	mov	r4, r0
    6610:	460d      	mov	r5, r1
	ret = hif_chip_wake();
    6612:	f7ff fd99 	bl	6148 <hif_chip_wake>
	if(ret != M2M_SUCCESS) goto _EXIT;
    6616:	b968      	cbnz	r0, 6634 <m2m_periph_gpio_set_val+0x28>
	if(u8GpioNum >= M2M_PERIPH_GPIO_MAX) return -1;
    6618:	2c06      	cmp	r4, #6
    661a:	d807      	bhi.n	662c <m2m_periph_gpio_set_val+0x20>
	if(u8GpioNum == M2M_PERIPH_GPIO15) { return 15;
    661c:	4b06      	ldr	r3, [pc, #24]	; (6638 <m2m_periph_gpio_set_val+0x2c>)
    661e:	5718      	ldrsb	r0, [r3, r4]
	if(gpio < 0) goto _EXIT1;
    6620:	2800      	cmp	r0, #0
    6622:	db03      	blt.n	662c <m2m_periph_gpio_set_val+0x20>
		ret = set_gpio_val((uint8)gpio, u8InVal);
    6624:	4629      	mov	r1, r5
    6626:	b2c0      	uxtb	r0, r0
    6628:	f000 fd7c 	bl	7124 <set_gpio_val>
	return gpio_ioctl(GPIO_OP_SET, u8GpioNum, u8GpioVal, NULL);
}
    662c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = hif_chip_sleep();
    6630:	f7ff bda2 	b.w	6178 <hif_chip_sleep>
}
    6634:	bd38      	pop	{r3, r4, r5, pc}
    6636:	bf00      	nop
    6638:	00011ec8 	.word	0x00011ec8

0000663c <m2m_ssl_set_active_ciphersuites>:
@return		
	- [SOCK_ERR_NO_ERROR](@ref SOCK_ERR_NO_ERROR)
	- [SOCK_ERR_INVALID_ARG](@ref SOCK_ERR_INVALID_ARG)
*/
sint8 m2m_ssl_set_active_ciphersuites(uint32 u32SslCsBMP)
{
    663c:	b510      	push	{r4, lr}
    663e:	b086      	sub	sp, #24
	sint8 s8Ret = M2M_SUCCESS;
	tstrSslSetActiveCsList	strCsList;
	
	strCsList.u32CsBMP = u32SslCsBMP;
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_REQ_SET_CS_LIST, (uint8*)&strCsList, sizeof(tstrSslSetActiveCsList), NULL, 0, 0);
    6640:	2300      	movs	r3, #0
    6642:	2105      	movs	r1, #5
{
    6644:	4604      	mov	r4, r0
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_REQ_SET_CS_LIST, (uint8*)&strCsList, sizeof(tstrSslSetActiveCsList), NULL, 0, 0);
    6646:	9302      	str	r3, [sp, #8]
    6648:	9301      	str	r3, [sp, #4]
    664a:	9300      	str	r3, [sp, #0]
    664c:	aa05      	add	r2, sp, #20
    664e:	2304      	movs	r3, #4
    6650:	4608      	mov	r0, r1
	strCsList.u32CsBMP = u32SslCsBMP;
    6652:	9405      	str	r4, [sp, #20]
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_REQ_SET_CS_LIST, (uint8*)&strCsList, sizeof(tstrSslSetActiveCsList), NULL, 0, 0);
    6654:	f7ff fdb6 	bl	61c4 <hif_send>

	return s8Ret;
}
    6658:	b006      	add	sp, #24
    665a:	bd10      	pop	{r4, pc}

0000665c <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    665c:	b510      	push	{r4, lr}
    665e:	3804      	subs	r0, #4
    6660:	b09a      	sub	sp, #104	; 0x68
    6662:	4614      	mov	r4, r2
    6664:	2861      	cmp	r0, #97	; 0x61
    6666:	d86c      	bhi.n	6742 <m2m_wifi_cb+0xe6>
    6668:	e8df f010 	tbh	[pc, r0, lsl #1]
    666c:	006b007e 	.word	0x006b007e
    6670:	006b008f 	.word	0x006b008f
    6674:	009f006b 	.word	0x009f006b
    6678:	006b006b 	.word	0x006b006b
    667c:	006b006b 	.word	0x006b006b
    6680:	006b006b 	.word	0x006b006b
    6684:	00af006b 	.word	0x00af006b
    6688:	00c6006b 	.word	0x00c6006b
    668c:	006b006b 	.word	0x006b006b
    6690:	006b006b 	.word	0x006b006b
    6694:	006b006b 	.word	0x006b006b
    6698:	00d6006b 	.word	0x00d6006b
    669c:	006b006b 	.word	0x006b006b
    66a0:	006b006b 	.word	0x006b006b
    66a4:	006b0062 	.word	0x006b0062
    66a8:	006b006b 	.word	0x006b006b
    66ac:	006b006b 	.word	0x006b006b
    66b0:	006b006b 	.word	0x006b006b
    66b4:	006b006b 	.word	0x006b006b
    66b8:	006b00e6 	.word	0x006b00e6
    66bc:	006b00f9 	.word	0x006b00f9
    66c0:	010c006b 	.word	0x010c006b
    66c4:	006b006b 	.word	0x006b006b
    66c8:	006b0123 	.word	0x006b0123
    66cc:	006b013c 	.word	0x006b013c
    66d0:	006b006b 	.word	0x006b006b
    66d4:	006b006b 	.word	0x006b006b
    66d8:	006b006b 	.word	0x006b006b
    66dc:	006b006b 	.word	0x006b006b
    66e0:	006b006b 	.word	0x006b006b
    66e4:	006b006b 	.word	0x006b006b
    66e8:	006b006b 	.word	0x006b006b
    66ec:	006b006b 	.word	0x006b006b
    66f0:	006b006b 	.word	0x006b006b
    66f4:	006b006b 	.word	0x006b006b
    66f8:	006b006b 	.word	0x006b006b
    66fc:	006b006b 	.word	0x006b006b
    6700:	006b006b 	.word	0x006b006b
    6704:	006b006b 	.word	0x006b006b
    6708:	006b006b 	.word	0x006b006b
    670c:	006b006b 	.word	0x006b006b
    6710:	006b006b 	.word	0x006b006b
    6714:	006b006b 	.word	0x006b006b
    6718:	006b006b 	.word	0x006b006b
    671c:	006b006b 	.word	0x006b006b
    6720:	006b006b 	.word	0x006b006b
    6724:	006b006b 	.word	0x006b006b
    6728:	006b006b 	.word	0x006b006b
    672c:	006d006b 	.word	0x006d006b
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    6730:	2300      	movs	r3, #0
    6732:	2208      	movs	r2, #8
    6734:	a901      	add	r1, sp, #4
    6736:	4620      	mov	r0, r4
    6738:	f7ff fefe 	bl	6538 <hif_receive>
    673c:	2800      	cmp	r0, #0
    673e:	f000 80e4 	beq.w	690a <m2m_wifi_cb+0x2ae>
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    6742:	b01a      	add	sp, #104	; 0x68
    6744:	bd10      	pop	{r4, pc}
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    6746:	2204      	movs	r2, #4
    6748:	2300      	movs	r3, #0
    674a:	eb0d 0102 	add.w	r1, sp, r2
    674e:	4620      	mov	r0, r4
    6750:	f7ff fef2 	bl	6538 <hif_receive>
    6754:	2800      	cmp	r0, #0
    6756:	d1f4      	bne.n	6742 <m2m_wifi_cb+0xe6>
			if (gpfAppWifiCb)
    6758:	4b76      	ldr	r3, [pc, #472]	; (6934 <m2m_wifi_cb+0x2d8>)
    675a:	681b      	ldr	r3, [r3, #0]
    675c:	2b00      	cmp	r3, #0
    675e:	d0f0      	beq.n	6742 <m2m_wifi_cb+0xe6>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    6760:	a901      	add	r1, sp, #4
    6762:	2065      	movs	r0, #101	; 0x65
    6764:	4798      	blx	r3
    6766:	e7ec      	b.n	6742 <m2m_wifi_cb+0xe6>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    6768:	2204      	movs	r2, #4
    676a:	2300      	movs	r3, #0
    676c:	eb0d 0102 	add.w	r1, sp, r2
    6770:	4620      	mov	r0, r4
    6772:	f7ff fee1 	bl	6538 <hif_receive>
    6776:	2800      	cmp	r0, #0
    6778:	d1e3      	bne.n	6742 <m2m_wifi_cb+0xe6>
			if (gpfAppWifiCb)
    677a:	4b6e      	ldr	r3, [pc, #440]	; (6934 <m2m_wifi_cb+0x2d8>)
    677c:	681b      	ldr	r3, [r3, #0]
    677e:	2b00      	cmp	r3, #0
    6780:	d0df      	beq.n	6742 <m2m_wifi_cb+0xe6>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    6782:	a901      	add	r1, sp, #4
    6784:	2004      	movs	r0, #4
    6786:	4798      	blx	r3
    6788:	e7db      	b.n	6742 <m2m_wifi_cb+0xe6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    678a:	2301      	movs	r3, #1
    678c:	2230      	movs	r2, #48	; 0x30
    678e:	a901      	add	r1, sp, #4
    6790:	4620      	mov	r0, r4
    6792:	f7ff fed1 	bl	6538 <hif_receive>
    6796:	2800      	cmp	r0, #0
    6798:	d1d3      	bne.n	6742 <m2m_wifi_cb+0xe6>
			if(gpfAppWifiCb)
    679a:	4b66      	ldr	r3, [pc, #408]	; (6934 <m2m_wifi_cb+0x2d8>)
    679c:	681b      	ldr	r3, [r3, #0]
    679e:	2b00      	cmp	r3, #0
    67a0:	d0cf      	beq.n	6742 <m2m_wifi_cb+0xe6>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    67a2:	a901      	add	r1, sp, #4
    67a4:	2006      	movs	r0, #6
    67a6:	4798      	blx	r3
    67a8:	e7cb      	b.n	6742 <m2m_wifi_cb+0xe6>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    67aa:	2301      	movs	r3, #1
    67ac:	2264      	movs	r2, #100	; 0x64
    67ae:	a901      	add	r1, sp, #4
    67b0:	4620      	mov	r0, r4
    67b2:	f7ff fec1 	bl	6538 <hif_receive>
    67b6:	2800      	cmp	r0, #0
    67b8:	d1c3      	bne.n	6742 <m2m_wifi_cb+0xe6>
			if(gpfAppWifiCb)
    67ba:	4b5e      	ldr	r3, [pc, #376]	; (6934 <m2m_wifi_cb+0x2d8>)
    67bc:	681b      	ldr	r3, [r3, #0]
    67be:	2b00      	cmp	r3, #0
    67c0:	d0bf      	beq.n	6742 <m2m_wifi_cb+0xe6>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    67c2:	a901      	add	r1, sp, #4
    67c4:	2009      	movs	r0, #9
    67c6:	4798      	blx	r3
    67c8:	e7bb      	b.n	6742 <m2m_wifi_cb+0xe6>
		gu8scanInProgress = 0;
    67ca:	4a5b      	ldr	r2, [pc, #364]	; (6938 <m2m_wifi_cb+0x2dc>)
    67cc:	2300      	movs	r3, #0
    67ce:	7013      	strb	r3, [r2, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    67d0:	2204      	movs	r2, #4
    67d2:	4620      	mov	r0, r4
    67d4:	eb0d 0102 	add.w	r1, sp, r2
    67d8:	f7ff feae 	bl	6538 <hif_receive>
    67dc:	2800      	cmp	r0, #0
    67de:	d1b0      	bne.n	6742 <m2m_wifi_cb+0xe6>
			if (gpfAppWifiCb)
    67e0:	4b54      	ldr	r3, [pc, #336]	; (6934 <m2m_wifi_cb+0x2d8>)
			gu8ChNum = strState.u8NumofCh;
    67e2:	4a56      	ldr	r2, [pc, #344]	; (693c <m2m_wifi_cb+0x2e0>)
			if (gpfAppWifiCb)
    67e4:	681b      	ldr	r3, [r3, #0]
			gu8ChNum = strState.u8NumofCh;
    67e6:	f89d 1004 	ldrb.w	r1, [sp, #4]
    67ea:	7011      	strb	r1, [r2, #0]
			if (gpfAppWifiCb)
    67ec:	2b00      	cmp	r3, #0
    67ee:	d0a8      	beq.n	6742 <m2m_wifi_cb+0xe6>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    67f0:	a901      	add	r1, sp, #4
    67f2:	2011      	movs	r0, #17
    67f4:	4798      	blx	r3
    67f6:	e7a4      	b.n	6742 <m2m_wifi_cb+0xe6>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    67f8:	2300      	movs	r3, #0
    67fa:	222c      	movs	r2, #44	; 0x2c
    67fc:	a901      	add	r1, sp, #4
    67fe:	4620      	mov	r0, r4
    6800:	f7ff fe9a 	bl	6538 <hif_receive>
    6804:	2800      	cmp	r0, #0
    6806:	d19c      	bne.n	6742 <m2m_wifi_cb+0xe6>
			if (gpfAppWifiCb)
    6808:	4b4a      	ldr	r3, [pc, #296]	; (6934 <m2m_wifi_cb+0x2d8>)
    680a:	681b      	ldr	r3, [r3, #0]
    680c:	2b00      	cmp	r3, #0
    680e:	d098      	beq.n	6742 <m2m_wifi_cb+0xe6>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    6810:	a901      	add	r1, sp, #4
    6812:	2013      	movs	r0, #19
    6814:	4798      	blx	r3
    6816:	e794      	b.n	6742 <m2m_wifi_cb+0xe6>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    6818:	2300      	movs	r3, #0
    681a:	2208      	movs	r2, #8
    681c:	a901      	add	r1, sp, #4
    681e:	4620      	mov	r0, r4
    6820:	f7ff fe8a 	bl	6538 <hif_receive>
    6824:	2800      	cmp	r0, #0
    6826:	d18c      	bne.n	6742 <m2m_wifi_cb+0xe6>
			if (gpfAppWifiCb)
    6828:	4b42      	ldr	r3, [pc, #264]	; (6934 <m2m_wifi_cb+0x2d8>)
    682a:	681b      	ldr	r3, [r3, #0]
    682c:	2b00      	cmp	r3, #0
    682e:	d088      	beq.n	6742 <m2m_wifi_cb+0xe6>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    6830:	a901      	add	r1, sp, #4
    6832:	201b      	movs	r0, #27
    6834:	4798      	blx	r3
    6836:	e784      	b.n	6742 <m2m_wifi_cb+0xe6>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    6838:	2204      	movs	r2, #4
    683a:	2301      	movs	r3, #1
    683c:	eb0d 0102 	add.w	r1, sp, r2
    6840:	4620      	mov	r0, r4
    6842:	f7ff fe79 	bl	6538 <hif_receive>
    6846:	2800      	cmp	r0, #0
    6848:	f47f af7b 	bne.w	6742 <m2m_wifi_cb+0xe6>
			if(gpfAppWifiCb)
    684c:	4b39      	ldr	r3, [pc, #228]	; (6934 <m2m_wifi_cb+0x2d8>)
    684e:	681b      	ldr	r3, [r3, #0]
    6850:	2b00      	cmp	r3, #0
    6852:	f43f af76 	beq.w	6742 <m2m_wifi_cb+0xe6>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    6856:	a901      	add	r1, sp, #4
    6858:	202a      	movs	r0, #42	; 0x2a
    685a:	4798      	blx	r3
    685c:	e771      	b.n	6742 <m2m_wifi_cb+0xe6>
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    685e:	2204      	movs	r2, #4
    6860:	2300      	movs	r3, #0
    6862:	eb0d 0102 	add.w	r1, sp, r2
    6866:	4620      	mov	r0, r4
    6868:	f7ff fe66 	bl	6538 <hif_receive>
    686c:	2800      	cmp	r0, #0
    686e:	f47f af68 	bne.w	6742 <m2m_wifi_cb+0xe6>
			if (gpfAppWifiCb)
    6872:	4b30      	ldr	r3, [pc, #192]	; (6934 <m2m_wifi_cb+0x2d8>)
    6874:	681b      	ldr	r3, [r3, #0]
    6876:	2b00      	cmp	r3, #0
    6878:	f43f af63 	beq.w	6742 <m2m_wifi_cb+0xe6>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    687c:	a901      	add	r1, sp, #4
    687e:	202c      	movs	r0, #44	; 0x2c
    6880:	4798      	blx	r3
    6882:	e75e      	b.n	6742 <m2m_wifi_cb+0xe6>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    6884:	2264      	movs	r2, #100	; 0x64
    6886:	2100      	movs	r1, #0
    6888:	a801      	add	r0, sp, #4
    688a:	f7ff fc21 	bl	60d0 <m2m_memset>
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    688e:	2300      	movs	r3, #0
    6890:	2264      	movs	r2, #100	; 0x64
    6892:	a901      	add	r1, sp, #4
    6894:	4620      	mov	r0, r4
    6896:	f7ff fe4f 	bl	6538 <hif_receive>
    689a:	2800      	cmp	r0, #0
    689c:	f47f af51 	bne.w	6742 <m2m_wifi_cb+0xe6>
			if (gpfAppWifiCb)
    68a0:	4b24      	ldr	r3, [pc, #144]	; (6934 <m2m_wifi_cb+0x2d8>)
    68a2:	681b      	ldr	r3, [r3, #0]
    68a4:	2b00      	cmp	r3, #0
    68a6:	f43f af4c 	beq.w	6742 <m2m_wifi_cb+0xe6>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    68aa:	a901      	add	r1, sp, #4
    68ac:	202f      	movs	r0, #47	; 0x2f
    68ae:	4798      	blx	r3
    68b0:	e747      	b.n	6742 <m2m_wifi_cb+0xe6>
		if (nmdrv_firm_ver < M2M_MAKE_VERSION(19, 5, 0)) {
    68b2:	4b23      	ldr	r3, [pc, #140]	; (6940 <m2m_wifi_cb+0x2e4>)
    68b4:	6819      	ldr	r1, [r3, #0]
    68b6:	f241 324f 	movw	r2, #4943	; 0x134f
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, rxSize, 0) == M2M_SUCCESS)
    68ba:	4291      	cmp	r1, r2
    68bc:	bf8c      	ite	hi
    68be:	2214      	movhi	r2, #20
    68c0:	2210      	movls	r2, #16
    68c2:	2300      	movs	r3, #0
    68c4:	a901      	add	r1, sp, #4
    68c6:	4620      	mov	r0, r4
    68c8:	f7ff fe36 	bl	6538 <hif_receive>
    68cc:	2800      	cmp	r0, #0
    68ce:	f47f af38 	bne.w	6742 <m2m_wifi_cb+0xe6>
			if (gpfAppWifiCb)
    68d2:	4b18      	ldr	r3, [pc, #96]	; (6934 <m2m_wifi_cb+0x2d8>)
    68d4:	681b      	ldr	r3, [r3, #0]
    68d6:	2b00      	cmp	r3, #0
    68d8:	f43f af33 	beq.w	6742 <m2m_wifi_cb+0xe6>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    68dc:	a901      	add	r1, sp, #4
    68de:	2032      	movs	r0, #50	; 0x32
    68e0:	4798      	blx	r3
    68e2:	e72e      	b.n	6742 <m2m_wifi_cb+0xe6>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    68e4:	2204      	movs	r2, #4
    68e6:	2300      	movs	r3, #0
    68e8:	eb0d 0102 	add.w	r1, sp, r2
    68ec:	4620      	mov	r0, r4
    68ee:	f7ff fe23 	bl	6538 <hif_receive>
    68f2:	2800      	cmp	r0, #0
    68f4:	f47f af25 	bne.w	6742 <m2m_wifi_cb+0xe6>
			if (gpfAppWifiCb)
    68f8:	4b0e      	ldr	r3, [pc, #56]	; (6934 <m2m_wifi_cb+0x2d8>)
    68fa:	681b      	ldr	r3, [r3, #0]
    68fc:	2b00      	cmp	r3, #0
    68fe:	f43f af20 	beq.w	6742 <m2m_wifi_cb+0xe6>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    6902:	4601      	mov	r1, r0
    6904:	2034      	movs	r0, #52	; 0x34
    6906:	4798      	blx	r3
    6908:	e71b      	b.n	6742 <m2m_wifi_cb+0xe6>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    690a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    690e:	9901      	ldr	r1, [sp, #4]
    6910:	2301      	movs	r3, #1
    6912:	f104 0008 	add.w	r0, r4, #8
    6916:	f7ff fe0f 	bl	6538 <hif_receive>
    691a:	2800      	cmp	r0, #0
    691c:	f47f af11 	bne.w	6742 <m2m_wifi_cb+0xe6>
				if(gpfAppWifiCb)
    6920:	4b04      	ldr	r3, [pc, #16]	; (6934 <m2m_wifi_cb+0x2d8>)
    6922:	681b      	ldr	r3, [r3, #0]
    6924:	2b00      	cmp	r3, #0
    6926:	f43f af0c 	beq.w	6742 <m2m_wifi_cb+0xe6>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    692a:	a901      	add	r1, sp, #4
    692c:	2020      	movs	r0, #32
    692e:	4798      	blx	r3
}
    6930:	e707      	b.n	6742 <m2m_wifi_cb+0xe6>
    6932:	bf00      	nop
    6934:	1fff7774 	.word	0x1fff7774
    6938:	1fff7779 	.word	0x1fff7779
    693c:	1fff7778 	.word	0x1fff7778
    6940:	1fff7780 	.word	0x1fff7780

00006944 <m2m_validate_ap_parameters>:

static sint8 m2m_validate_ap_parameters(CONST tstrM2MAPConfig* pstrM2MAPConfig)
{
	sint8 s8Ret = M2M_SUCCESS;
	/* Check for incoming pointer */
	if(pstrM2MAPConfig == NULL)
    6944:	2800      	cmp	r0, #0
    6946:	d041      	beq.n	69cc <m2m_validate_ap_parameters+0x88>
{
    6948:	b510      	push	{r4, lr}
    694a:	4604      	mov	r4, r0
		M2M_ERR("INVALID POINTER\n");
		s8Ret = M2M_ERR_FAIL;
		goto ERR1;
	}
	/* Check for SSID */
	if((m2m_strlen((uint8 *)pstrM2MAPConfig->au8SSID) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPConfig->au8SSID) >= M2M_MAX_SSID_LEN))
    694c:	f7ff fbc4 	bl	60d8 <m2m_strlen>
    6950:	b360      	cbz	r0, 69ac <m2m_validate_ap_parameters+0x68>
    6952:	4620      	mov	r0, r4
    6954:	f7ff fbc0 	bl	60d8 <m2m_strlen>
    6958:	2820      	cmp	r0, #32
    695a:	d827      	bhi.n	69ac <m2m_validate_ap_parameters+0x68>
		M2M_ERR("INVALID SSID\n");
		s8Ret = M2M_ERR_FAIL;
		goto ERR1;
	}
	/* Check for Channel */
	if(pstrM2MAPConfig->u8ListenChannel > M2M_WIFI_CH_14 || pstrM2MAPConfig->u8ListenChannel < M2M_WIFI_CH_1)
    695c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    6960:	3b01      	subs	r3, #1
    6962:	2b0d      	cmp	r3, #13
    6964:	d822      	bhi.n	69ac <m2m_validate_ap_parameters+0x68>
		M2M_ERR("INVALID CH\n");
		s8Ret = M2M_ERR_FAIL;
		goto ERR1;
	}
	/* Check for DHCP Server IP address */
	if(!(pstrM2MAPConfig->au8DHCPServerIP[0] || pstrM2MAPConfig->au8DHCPServerIP[1]))
    6966:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    696a:	b92b      	cbnz	r3, 6978 <m2m_validate_ap_parameters+0x34>
    696c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    6970:	b913      	cbnz	r3, 6978 <m2m_validate_ap_parameters+0x34>
	{
		if(!(pstrM2MAPConfig->au8DHCPServerIP[2]))
    6972:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    6976:	b1cb      	cbz	r3, 69ac <m2m_validate_ap_parameters+0x68>
			s8Ret = M2M_ERR_FAIL;
			goto ERR1;
		}
	}
	/* Check for Security */
	if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_OPEN)
    6978:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    697c:	2b01      	cmp	r3, #1
    697e:	d008      	beq.n	6992 <m2m_validate_ap_parameters+0x4e>
	{
		goto ERR1;
	}
	else if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_WEP)
    6980:	2b03      	cmp	r3, #3
    6982:	d008      	beq.n	6996 <m2m_validate_ap_parameters+0x52>
			M2M_ERR("INVALID KEY SIZE\n");
			s8Ret = M2M_ERR_FAIL;
			goto ERR1;
		}
	}
	else if(pstrM2MAPConfig->u8SecType == M2M_WIFI_SEC_WPA_PSK)
    6984:	2b02      	cmp	r3, #2
    6986:	d111      	bne.n	69ac <m2m_validate_ap_parameters+0x68>
	{
		/* Check for WPA Key size */
		if(	((pstrM2MAPConfig->u8KeySz + 1) < M2M_MIN_PSK_LEN) || ((pstrM2MAPConfig->u8KeySz + 1) > M2M_MAX_PSK_LEN))
    6988:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    698c:	3b08      	subs	r3, #8
    698e:	2b38      	cmp	r3, #56	; 0x38
    6990:	d80c      	bhi.n	69ac <m2m_validate_ap_parameters+0x68>
	sint8 s8Ret = M2M_SUCCESS;
    6992:	2000      	movs	r0, #0
		goto ERR1;
	}
	
ERR1:
	return s8Ret;
}
    6994:	bd10      	pop	{r4, pc}
		if((pstrM2MAPConfig->u8KeyIndx <= 0) || (pstrM2MAPConfig->u8KeyIndx > WEP_KEY_MAX_INDEX))
    6996:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    699a:	3b01      	subs	r3, #1
    699c:	2b03      	cmp	r3, #3
    699e:	d805      	bhi.n	69ac <m2m_validate_ap_parameters+0x68>
		if(	(pstrM2MAPConfig->u8KeySz != WEP_40_KEY_STRING_SIZE) &&
    69a0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    69a4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    69a8:	2b0a      	cmp	r3, #10
    69aa:	d002      	beq.n	69b2 <m2m_validate_ap_parameters+0x6e>
			s8Ret = M2M_ERR_FAIL;
    69ac:	f06f 000b 	mvn.w	r0, #11
}
    69b0:	bd10      	pop	{r4, pc}
		if((m2m_strlen((uint8 *)pstrM2MAPConfig->au8WepKey) <= 0) || (m2m_strlen((uint8 *)pstrM2MAPConfig->au8WepKey) > WEP_104_KEY_STRING_SIZE))
    69b2:	3424      	adds	r4, #36	; 0x24
    69b4:	4620      	mov	r0, r4
    69b6:	f7ff fb8f 	bl	60d8 <m2m_strlen>
    69ba:	2800      	cmp	r0, #0
    69bc:	d0f6      	beq.n	69ac <m2m_validate_ap_parameters+0x68>
    69be:	4620      	mov	r0, r4
    69c0:	f7ff fb8a 	bl	60d8 <m2m_strlen>
    69c4:	281a      	cmp	r0, #26
    69c6:	d8f1      	bhi.n	69ac <m2m_validate_ap_parameters+0x68>
	sint8 s8Ret = M2M_SUCCESS;
    69c8:	2000      	movs	r0, #0
    69ca:	e7e3      	b.n	6994 <m2m_validate_ap_parameters+0x50>
			s8Ret = M2M_ERR_FAIL;
    69cc:	f06f 000b 	mvn.w	r0, #11
}
    69d0:	4770      	bx	lr
    69d2:	bf00      	nop

000069d4 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    69d4:	b570      	push	{r4, r5, r6, lr}
    69d6:	b08c      	sub	sp, #48	; 0x30
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    69d8:	2501      	movs	r5, #1
    69da:	f88d 5007 	strb.w	r5, [sp, #7]
	
	if(param == NULL) {
    69de:	b348      	cbz	r0, 6a34 <m2m_wifi_init+0x60>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    69e0:	4916      	ldr	r1, [pc, #88]	; (6a3c <m2m_wifi_init+0x68>)
    69e2:	6800      	ldr	r0, [r0, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    69e4:	4b16      	ldr	r3, [pc, #88]	; (6a40 <m2m_wifi_init+0x6c>)
	gpfAppWifiCb = param->pfAppWifiCb;
    69e6:	6008      	str	r0, [r1, #0]
	gu8scanInProgress = 0;
    69e8:	2200      	movs	r2, #0
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    69ea:	f10d 0007 	add.w	r0, sp, #7
	gu8scanInProgress = 0;
    69ee:	701a      	strb	r2, [r3, #0]
	ret = nm_drv_init(&u8WifiMode);
    69f0:	f000 fcfa 	bl	73e8 <nm_drv_init>
    69f4:	4604      	mov	r4, r0
    69f6:	4606      	mov	r6, r0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    69f8:	b110      	cbz	r0, 6a00 <m2m_wifi_init+0x2c>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    69fa:	4620      	mov	r0, r4
    69fc:	b00c      	add	sp, #48	; 0x30
    69fe:	bd70      	pop	{r4, r5, r6, pc}
	ret = hif_init(NULL);
    6a00:	f7ff fbcc 	bl	619c <hif_init>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    6a04:	4604      	mov	r4, r0
    6a06:	b128      	cbz	r0, 6a14 <m2m_wifi_init+0x40>
	nm_drv_deinit(NULL);
    6a08:	4630      	mov	r0, r6
    6a0a:	f000 fd2b 	bl	7464 <nm_drv_deinit>
}
    6a0e:	4620      	mov	r0, r4
    6a10:	b00c      	add	sp, #48	; 0x30
    6a12:	bd70      	pop	{r4, r5, r6, pc}
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    6a14:	490b      	ldr	r1, [pc, #44]	; (6a44 <m2m_wifi_init+0x70>)
    6a16:	4628      	mov	r0, r5
    6a18:	f7ff fdb6 	bl	6588 <hif_register_cb>
	ret = nm_get_firmware_full_info(&strtmp);
    6a1c:	a802      	add	r0, sp, #8
    6a1e:	f000 fc8b 	bl	7338 <nm_get_firmware_full_info>
	if (M2M_ERR_FAIL == ret)
    6a22:	f110 0f0c 	cmn.w	r0, #12
	ret = nm_get_firmware_full_info(&strtmp);
    6a26:	4604      	mov	r4, r0
	if (M2M_ERR_FAIL == ret)
    6a28:	d1e7      	bne.n	69fa <m2m_wifi_init+0x26>
		ret = nm_get_firmware_info(&strtmp);
    6a2a:	a802      	add	r0, sp, #8
    6a2c:	f000 fc28 	bl	7280 <nm_get_firmware_info>
    6a30:	4604      	mov	r4, r0
    6a32:	e7e2      	b.n	69fa <m2m_wifi_init+0x26>
		ret = M2M_ERR_FAIL;
    6a34:	f06f 040b 	mvn.w	r4, #11
    6a38:	e7df      	b.n	69fa <m2m_wifi_init+0x26>
    6a3a:	bf00      	nop
    6a3c:	1fff7774 	.word	0x1fff7774
    6a40:	1fff7779 	.word	0x1fff7779
    6a44:	0000665d 	.word	0x0000665d

00006a48 <m2m_wifi_handle_events>:
sint8 m2m_wifi_handle_events(void * arg)
{
#ifdef ARDUINO
	(void)arg; // Silence "unused" warning
#endif
	return hif_handle_isr();
    6a48:	f7ff bcb0 	b.w	63ac <hif_handle_isr>

00006a4c <m2m_wifi_default_connect>:
}

sint8 m2m_wifi_default_connect(void)
{
    6a4c:	b500      	push	{lr}
    6a4e:	b085      	sub	sp, #20
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
    6a50:	2300      	movs	r3, #0
    6a52:	9302      	str	r3, [sp, #8]
    6a54:	9301      	str	r3, [sp, #4]
    6a56:	9300      	str	r3, [sp, #0]
    6a58:	461a      	mov	r2, r3
    6a5a:	2129      	movs	r1, #41	; 0x29
    6a5c:	2001      	movs	r0, #1
    6a5e:	f7ff fbb1 	bl	61c4 <hif_send>
}
    6a62:	b005      	add	sp, #20
    6a64:	f85d fb04 	ldr.w	pc, [sp], #4

00006a68 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    6a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6a6c:	b0a1      	sub	sp, #132	; 0x84
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    6a6e:	2a01      	cmp	r2, #1
{
    6a70:	f8bd 60a0 	ldrh.w	r6, [sp, #160]	; 0xa0
    6a74:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
    6a78:	4614      	mov	r4, r2
    6a7a:	4681      	mov	r9, r0
    6a7c:	460d      	mov	r5, r1
    6a7e:	461f      	mov	r7, r3
	if(u8SecType != M2M_WIFI_SEC_OPEN)
    6a80:	d003      	beq.n	6a8a <m2m_wifi_connect_sc+0x22>
	{
		if(pvAuthInfo == NULL)
    6a82:	2b00      	cmp	r3, #0
    6a84:	d042      	beq.n	6b0c <m2m_wifi_connect_sc+0xa4>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    6a86:	2a02      	cmp	r2, #2
    6a88:	d05e      	beq.n	6b48 <m2m_wifi_connect_sc+0xe0>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    6a8a:	1e6b      	subs	r3, r5, #1
    6a8c:	2b1f      	cmp	r3, #31
    6a8e:	d83d      	bhi.n	6b0c <m2m_wifi_connect_sc+0xa4>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    6a90:	1e73      	subs	r3, r6, #1
    6a92:	2b0d      	cmp	r3, #13
    6a94:	d901      	bls.n	6a9a <m2m_wifi_connect_sc+0x32>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    6a96:	2eff      	cmp	r6, #255	; 0xff
    6a98:	d138      	bne.n	6b0c <m2m_wifi_connect_sc+0xa4>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    6a9a:	462a      	mov	r2, r5
    6a9c:	4649      	mov	r1, r9
    6a9e:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
    6aa2:	f7ff fb0b 	bl	60bc <m2m_memcpy>
	strConnect.au8SSID[u8SsidLen]	= 0;
    6aa6:	f105 0380 	add.w	r3, r5, #128	; 0x80
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    6aaa:	f1b8 0200 	subs.w	r2, r8, #0
	strConnect.au8SSID[u8SsidLen]	= 0;
    6aae:	eb0d 0503 	add.w	r5, sp, r3
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    6ab2:	bf18      	it	ne
    6ab4:	2201      	movne	r2, #1
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    6ab6:	f8ad 6058 	strh.w	r6, [sp, #88]	; 0x58
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;

	if(u8SecType == M2M_WIFI_SEC_WEP)
    6aba:	2c03      	cmp	r4, #3
	strConnect.au8SSID[u8SsidLen]	= 0;
    6abc:	f04f 0600 	mov.w	r6, #0
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    6ac0:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
	pstrAuthInfo->u8SecType		= u8SecType;
    6ac4:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55
	strConnect.au8SSID[u8SsidLen]	= 0;
    6ac8:	f805 6c26 	strb.w	r6, [r5, #-38]
	if(u8SecType == M2M_WIFI_SEC_WEP)
    6acc:	d012      	beq.n	6af4 <m2m_wifi_connect_sc+0x8c>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    6ace:	2c02      	cmp	r4, #2
    6ad0:	d02c      	beq.n	6b2c <m2m_wifi_connect_sc+0xc4>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    6ad2:	2c04      	cmp	r4, #4
    6ad4:	d052      	beq.n	6b7c <m2m_wifi_connect_sc+0x114>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    6ad6:	2c01      	cmp	r4, #1
    6ad8:	d118      	bne.n	6b0c <m2m_wifi_connect_sc+0xa4>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    6ada:	2300      	movs	r3, #0
    6adc:	9302      	str	r3, [sp, #8]
    6ade:	9301      	str	r3, [sp, #4]
    6ae0:	9300      	str	r3, [sp, #0]
    6ae2:	aa05      	add	r2, sp, #20
    6ae4:	236c      	movs	r3, #108	; 0x6c
    6ae6:	2128      	movs	r1, #40	; 0x28
    6ae8:	2001      	movs	r0, #1
    6aea:	f7ff fb6b 	bl	61c4 <hif_send>

ERR1:
	return ret;
}
    6aee:	b021      	add	sp, #132	; 0x84
    6af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx;
    6af4:	783b      	ldrb	r3, [r7, #0]
    6af6:	f88d 3014 	strb.w	r3, [sp, #20]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    6afa:	2b03      	cmp	r3, #3
    6afc:	d806      	bhi.n	6b0c <m2m_wifi_connect_sc+0xa4>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz;
    6afe:	787a      	ldrb	r2, [r7, #1]
    6b00:	f88d 2015 	strb.w	r2, [sp, #21]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    6b04:	f002 03ef 	and.w	r3, r2, #239	; 0xef
    6b08:	2b0a      	cmp	r3, #10
    6b0a:	d004      	beq.n	6b16 <m2m_wifi_connect_sc+0xae>
			ret = M2M_ERR_FAIL;
    6b0c:	f06f 000b 	mvn.w	r0, #11
}
    6b10:	b021      	add	sp, #132	; 0x84
    6b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    6b16:	1cb9      	adds	r1, r7, #2
    6b18:	f10d 0016 	add.w	r0, sp, #22
    6b1c:	f7ff face 	bl	60bc <m2m_memcpy>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    6b20:	787b      	ldrb	r3, [r7, #1]
    6b22:	3380      	adds	r3, #128	; 0x80
    6b24:	446b      	add	r3, sp
    6b26:	f803 6c6a 	strb.w	r6, [r3, #-106]
    6b2a:	e7d6      	b.n	6ada <m2m_wifi_connect_sc+0x72>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    6b2c:	4638      	mov	r0, r7
    6b2e:	f7ff fad3 	bl	60d8 <m2m_strlen>
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    6b32:	1e43      	subs	r3, r0, #1
    6b34:	b29b      	uxth	r3, r3
    6b36:	2b3f      	cmp	r3, #63	; 0x3f
    6b38:	d8e8      	bhi.n	6b0c <m2m_wifi_connect_sc+0xa4>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    6b3a:	3001      	adds	r0, #1
    6b3c:	b282      	uxth	r2, r0
    6b3e:	4639      	mov	r1, r7
    6b40:	a805      	add	r0, sp, #20
    6b42:	f7ff fabb 	bl	60bc <m2m_memcpy>
    6b46:	e7c8      	b.n	6ada <m2m_wifi_connect_sc+0x72>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    6b48:	4618      	mov	r0, r3
    6b4a:	f7ff fac5 	bl	60d8 <m2m_strlen>
    6b4e:	2840      	cmp	r0, #64	; 0x40
    6b50:	d19b      	bne.n	6a8a <m2m_wifi_connect_sc+0x22>
    6b52:	1e7b      	subs	r3, r7, #1
    6b54:	f107 0c3f 	add.w	ip, r7, #63	; 0x3f
    6b58:	e005      	b.n	6b66 <m2m_wifi_connect_sc+0xfe>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    6b5a:	2806      	cmp	r0, #6
    6b5c:	d9d6      	bls.n	6b0c <m2m_wifi_connect_sc+0xa4>
    6b5e:	2a19      	cmp	r2, #25
    6b60:	d9d4      	bls.n	6b0c <m2m_wifi_connect_sc+0xa4>
			while(i < (M2M_MAX_PSK_LEN-1))
    6b62:	4563      	cmp	r3, ip
    6b64:	d091      	beq.n	6a8a <m2m_wifi_connect_sc+0x22>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    6b66:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6b6a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    6b6e:	2936      	cmp	r1, #54	; 0x36
    6b70:	f1a2 003a 	sub.w	r0, r2, #58	; 0x3a
    6b74:	f1a2 0247 	sub.w	r2, r2, #71	; 0x47
    6b78:	d9ef      	bls.n	6b5a <m2m_wifi_connect_sc+0xf2>
    6b7a:	e7c7      	b.n	6b0c <m2m_wifi_connect_sc+0xa4>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    6b7c:	223e      	movs	r2, #62	; 0x3e
    6b7e:	4639      	mov	r1, r7
    6b80:	a805      	add	r0, sp, #20
    6b82:	f7ff fa9b 	bl	60bc <m2m_memcpy>
    6b86:	e7a8      	b.n	6ada <m2m_wifi_connect_sc+0x72>

00006b88 <m2m_wifi_connect>:
{
    6b88:	b510      	push	{r4, lr}
    6b8a:	b082      	sub	sp, #8
    6b8c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    6b90:	9400      	str	r4, [sp, #0]
    6b92:	2400      	movs	r4, #0
    6b94:	9401      	str	r4, [sp, #4]
    6b96:	f7ff ff67 	bl	6a68 <m2m_wifi_connect_sc>
}
    6b9a:	b002      	add	sp, #8
    6b9c:	bd10      	pop	{r4, pc}
    6b9e:	bf00      	nop

00006ba0 <m2m_wifi_set_static_ip>:
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_MAC_ADDRESS,
		(uint8*) &strTmp, sizeof(tstrM2mSetMacAddress), NULL, 0,0);
}

sint8 m2m_wifi_set_static_ip(tstrM2MIPConfig * pstrStaticIPConf)
{
    6ba0:	b500      	push	{lr}
    6ba2:	b085      	sub	sp, #20
	pstrStaticIPConf->u32Gateway = NM_BSP_B_L_32(pstrStaticIPConf->u32Gateway);
	pstrStaticIPConf->u32StaticIP = NM_BSP_B_L_32(
		pstrStaticIPConf->u32StaticIP);
	pstrStaticIPConf->u32SubnetMask = NM_BSP_B_L_32(
		pstrStaticIPConf->u32SubnetMask);
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
    6ba4:	2300      	movs	r3, #0
{
    6ba6:	4602      	mov	r2, r0
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
    6ba8:	9302      	str	r3, [sp, #8]
    6baa:	9301      	str	r3, [sp, #4]
    6bac:	9300      	str	r3, [sp, #0]
    6bae:	210a      	movs	r1, #10
    6bb0:	2314      	movs	r3, #20
    6bb2:	2002      	movs	r0, #2
    6bb4:	f7ff fb06 	bl	61c4 <hif_send>
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}
    6bb8:	b005      	add	sp, #20
    6bba:	f85d fb04 	ldr.w	pc, [sp], #4
    6bbe:	bf00      	nop

00006bc0 <m2m_wifi_enable_dhcp>:
@sa			tstrM2mLsnInt , m2m_wifi_set_sleep_mode
@pre		m2m_wifi_set_sleep_mode shall be called first
@warning	The Function called once after initialization. 
*/
sint8 m2m_wifi_enable_dhcp(uint8  u8DhcpEn )
{
    6bc0:	b500      	push	{lr}

	uint8	u8Req;
	u8Req = u8DhcpEn ? M2M_IP_REQ_ENABLE_DHCP : M2M_IP_REQ_DISABLE_DHCP;
	return hif_send(M2M_REQ_GROUP_IP, u8Req, NULL, 0, NULL, 0, 0);
    6bc2:	2300      	movs	r3, #0
{
    6bc4:	b085      	sub	sp, #20
	u8Req = u8DhcpEn ? M2M_IP_REQ_ENABLE_DHCP : M2M_IP_REQ_DISABLE_DHCP;
    6bc6:	4298      	cmp	r0, r3
	return hif_send(M2M_REQ_GROUP_IP, u8Req, NULL, 0, NULL, 0, 0);
    6bc8:	9302      	str	r3, [sp, #8]
    6bca:	9301      	str	r3, [sp, #4]
    6bcc:	9300      	str	r3, [sp, #0]
    6bce:	461a      	mov	r2, r3
    6bd0:	bf14      	ite	ne
    6bd2:	210b      	movne	r1, #11
    6bd4:	210c      	moveq	r1, #12
    6bd6:	2002      	movs	r0, #2
    6bd8:	f7ff faf4 	bl	61c4 <hif_send>


}
    6bdc:	b005      	add	sp, #20
    6bde:	f85d fb04 	ldr.w	pc, [sp], #4
    6be2:	bf00      	nop

00006be4 <m2m_wifi_enable_ap>:
	sint8 ret = M2M_SUCCESS;
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISABLE_P2P, NULL, 0, NULL, 0, 0);
	return ret;
}
sint8 m2m_wifi_enable_ap(CONST tstrM2MAPConfig* pstrM2MAPConfig)
{
    6be4:	b510      	push	{r4, lr}
    6be6:	b084      	sub	sp, #16
    6be8:	4604      	mov	r4, r0
	sint8 ret = M2M_ERR_FAIL;
	if(M2M_SUCCESS == m2m_validate_ap_parameters(pstrM2MAPConfig))
    6bea:	f7ff feab 	bl	6944 <m2m_validate_ap_parameters>
    6bee:	b9c0      	cbnz	r0, 6c22 <m2m_wifi_enable_ap+0x3e>
	{
#ifdef ARDUINO
		extern uint32 nmdrv_firm_ver;
		uint16 txSize = sizeof(tstrM2MAPConfig);

		if (nmdrv_firm_ver < M2M_MAKE_VERSION(19, 5, 0)) {
    6bf0:	4a0d      	ldr	r2, [pc, #52]	; (6c28 <m2m_wifi_enable_ap+0x44>)
    6bf2:	6812      	ldr	r2, [r2, #0]
    6bf4:	f241 334f 	movw	r3, #4943	; 0x134f
    6bf8:	429a      	cmp	r2, r3
    6bfa:	d90b      	bls.n	6c14 <m2m_wifi_enable_ap+0x30>
		uint16 txSize = sizeof(tstrM2MAPConfig);
    6bfc:	2388      	movs	r3, #136	; 0x88
			// (listen channel is 0 based, there is no au8Key field)
			((tstrM2MAPConfig*)pstrM2MAPConfig)->u8ListenChannel--;
			txSize -= sizeof(pstrM2MAPConfig->au8Key) + 1;
		}

		ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_ENABLE_AP, (uint8 *)pstrM2MAPConfig, txSize, NULL, 0, 0);
    6bfe:	2200      	movs	r2, #0
    6c00:	9202      	str	r2, [sp, #8]
    6c02:	9201      	str	r2, [sp, #4]
    6c04:	9200      	str	r2, [sp, #0]
    6c06:	2146      	movs	r1, #70	; 0x46
    6c08:	4622      	mov	r2, r4
    6c0a:	2001      	movs	r0, #1
    6c0c:	f7ff fada 	bl	61c4 <hif_send>
#else
		ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_ENABLE_AP, (uint8 *)pstrM2MAPConfig, sizeof(tstrM2MAPConfig), NULL, 0, 0);
#endif
	}
	return ret;
}
    6c10:	b004      	add	sp, #16
    6c12:	bd10      	pop	{r4, pc}
			((tstrM2MAPConfig*)pstrM2MAPConfig)->u8ListenChannel--;
    6c14:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    6c18:	3a01      	subs	r2, #1
			txSize -= sizeof(pstrM2MAPConfig->au8Key) + 1;
    6c1a:	2346      	movs	r3, #70	; 0x46
			((tstrM2MAPConfig*)pstrM2MAPConfig)->u8ListenChannel--;
    6c1c:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
			txSize -= sizeof(pstrM2MAPConfig->au8Key) + 1;
    6c20:	e7ed      	b.n	6bfe <m2m_wifi_enable_ap+0x1a>
	sint8 ret = M2M_ERR_FAIL;
    6c22:	f06f 000b 	mvn.w	r0, #11
    6c26:	e7f3      	b.n	6c10 <m2m_wifi_enable_ap+0x2c>
    6c28:	1fff7780 	.word	0x1fff7780

00006c2c <m2m_wifi_req_curr_rssi>:
			 the response received in wifi_cb M2M_WIFI_RESP_CURRENT_RSSI	
@sa          M2M_WIFI_RESP_CURRENT_RSSI              
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
*/
sint8 m2m_wifi_req_curr_rssi(void)
{
    6c2c:	b500      	push	{lr}
    6c2e:	b085      	sub	sp, #20
	sint8 ret = M2M_SUCCESS;
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CURRENT_RSSI, NULL, 0, NULL,0, 0);
    6c30:	2300      	movs	r3, #0
    6c32:	9302      	str	r3, [sp, #8]
    6c34:	9301      	str	r3, [sp, #4]
    6c36:	9300      	str	r3, [sp, #0]
    6c38:	461a      	mov	r2, r3
    6c3a:	2103      	movs	r1, #3
    6c3c:	2001      	movs	r0, #1
    6c3e:	f7ff fac1 	bl	61c4 <hif_send>
	return ret;
}
    6c42:	b005      	add	sp, #20
    6c44:	f85d fb04 	ldr.w	pc, [sp], #4

00006c48 <m2m_wifi_get_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_otp_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_mac_address(uint8 *pu8MacAddr)
{
    6c48:	b510      	push	{r4, lr}
    6c4a:	4604      	mov	r4, r0
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
    6c4c:	f7ff fa7c 	bl	6148 <hif_chip_wake>
	if(ret == M2M_SUCCESS)
    6c50:	b100      	cbz	r0, 6c54 <m2m_wifi_get_mac_address+0xc>
			ret = hif_chip_sleep();
		}
	}

	return ret;
}
    6c52:	bd10      	pop	{r4, pc}
		ret = nmi_get_mac_address(pu8MacAddr);
    6c54:	4620      	mov	r0, r4
    6c56:	f000 fa83 	bl	7160 <nmi_get_mac_address>
		if(ret == M2M_SUCCESS)
    6c5a:	2800      	cmp	r0, #0
    6c5c:	d1f9      	bne.n	6c52 <m2m_wifi_get_mac_address+0xa>
}
    6c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			ret = hif_chip_sleep();
    6c62:	f7ff ba89 	b.w	6178 <hif_chip_sleep>
    6c66:	bf00      	nop

00006c68 <m2m_wifi_start_provision_mode>:

sint8 m2m_wifi_start_provision_mode(tstrM2MAPConfig *pstrAPConfig, char *pcHttpServerDomainName, uint8 bEnableHttpRedirect)
{
	sint8	s8Ret = M2M_ERR_FAIL;

	if((pstrAPConfig != NULL))
    6c68:	2800      	cmp	r0, #0
    6c6a:	d041      	beq.n	6cf0 <m2m_wifi_start_provision_mode+0x88>
{
    6c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c6e:	b0b9      	sub	sp, #228	; 0xe4
    6c70:	460e      	mov	r6, r1
    6c72:	4617      	mov	r7, r2
    6c74:	4604      	mov	r4, r0
	{
		tstrM2MProvisionModeConfig	strProvConfig;
		if(M2M_SUCCESS == m2m_validate_ap_parameters(pstrAPConfig))
    6c76:	f7ff fe65 	bl	6944 <m2m_validate_ap_parameters>
    6c7a:	4605      	mov	r5, r0
    6c7c:	b118      	cbz	r0, 6c86 <m2m_wifi_start_provision_mode+0x1e>
	sint8	s8Ret = M2M_ERR_FAIL;
    6c7e:	f06f 000b 	mvn.w	r0, #11
			/*goto ERR1;*/
		}
	}
ERR1:
	return s8Ret;
}
    6c82:	b039      	add	sp, #228	; 0xe4
    6c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
			m2m_memcpy((uint8*)&strProvConfig.strApConfig, (uint8*)pstrAPConfig, sizeof(tstrM2MAPConfig));
    6c86:	a805      	add	r0, sp, #20
    6c88:	4621      	mov	r1, r4
    6c8a:	2288      	movs	r2, #136	; 0x88
    6c8c:	f7ff fa16 	bl	60bc <m2m_memcpy>
			if((m2m_strlen((uint8 *)pcHttpServerDomainName) <= 0) || (NULL == pcHttpServerDomainName))
    6c90:	4630      	mov	r0, r6
    6c92:	f7ff fa21 	bl	60d8 <m2m_strlen>
    6c96:	2800      	cmp	r0, #0
    6c98:	d0f1      	beq.n	6c7e <m2m_wifi_start_provision_mode+0x16>
    6c9a:	2e00      	cmp	r6, #0
    6c9c:	d0ef      	beq.n	6c7e <m2m_wifi_start_provision_mode+0x16>
			m2m_memcpy((uint8*)strProvConfig.acHttpServerDomainName, (uint8*)pcHttpServerDomainName, 64);
    6c9e:	2240      	movs	r2, #64	; 0x40
    6ca0:	4631      	mov	r1, r6
    6ca2:	a827      	add	r0, sp, #156	; 0x9c
    6ca4:	f7ff fa0a 	bl	60bc <m2m_memcpy>
			if (nmdrv_firm_ver < M2M_MAKE_VERSION(19, 5, 0)) {
    6ca8:	4a13      	ldr	r2, [pc, #76]	; (6cf8 <m2m_wifi_start_provision_mode+0x90>)
			gu8scanInProgress = 0;
    6caa:	4b14      	ldr	r3, [pc, #80]	; (6cfc <m2m_wifi_start_provision_mode+0x94>)
			if (nmdrv_firm_ver < M2M_MAKE_VERSION(19, 5, 0)) {
    6cac:	6812      	ldr	r2, [r2, #0]
			gu8scanInProgress = 0;
    6cae:	701d      	strb	r5, [r3, #0]
			if (nmdrv_firm_ver < M2M_MAKE_VERSION(19, 5, 0)) {
    6cb0:	f241 334f 	movw	r3, #4943	; 0x134f
    6cb4:	429a      	cmp	r2, r3
			strProvConfig.u8EnableRedirect = bEnableHttpRedirect;
    6cb6:	f88d 70dc 	strb.w	r7, [sp, #220]	; 0xdc
			if (nmdrv_firm_ver < M2M_MAKE_VERSION(19, 5, 0)) {
    6cba:	d90b      	bls.n	6cd4 <m2m_wifi_start_provision_mode+0x6c>
			uint16 txSize = sizeof(tstrM2MProvisionModeConfig);
    6cbc:	23cc      	movs	r3, #204	; 0xcc
			s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_START_PROVISION_MODE | M2M_REQ_DATA_PKT, 
    6cbe:	2200      	movs	r2, #0
    6cc0:	9202      	str	r2, [sp, #8]
    6cc2:	9201      	str	r2, [sp, #4]
    6cc4:	9200      	str	r2, [sp, #0]
    6cc6:	2188      	movs	r1, #136	; 0x88
    6cc8:	aa05      	add	r2, sp, #20
    6cca:	2001      	movs	r0, #1
    6ccc:	f7ff fa7a 	bl	61c4 <hif_send>
}
    6cd0:	b039      	add	sp, #228	; 0xe4
    6cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				strProvConfig.strApConfig.u8ListenChannel--;
    6cd4:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
				m2m_memcpy((uint8*)&strProvConfig.strApConfig.au8Key[3], (uint8*)pcHttpServerDomainName, 64);
    6cd8:	2240      	movs	r2, #64	; 0x40
				strProvConfig.strApConfig.u8ListenChannel--;
    6cda:	3b01      	subs	r3, #1
				m2m_memcpy((uint8*)&strProvConfig.strApConfig.au8Key[3], (uint8*)pcHttpServerDomainName, 64);
    6cdc:	4631      	mov	r1, r6
    6cde:	a817      	add	r0, sp, #92	; 0x5c
				strProvConfig.strApConfig.u8ListenChannel--;
    6ce0:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
				m2m_memcpy((uint8*)&strProvConfig.strApConfig.au8Key[3], (uint8*)pcHttpServerDomainName, 64);
    6ce4:	f7ff f9ea 	bl	60bc <m2m_memcpy>
				pu8EnableRedirect[3 + 64] = bEnableHttpRedirect;
    6ce8:	f88d 709c 	strb.w	r7, [sp, #156]	; 0x9c
				txSize -= sizeof(strProvConfig.strApConfig.au8Key) + 1;
    6cec:	238a      	movs	r3, #138	; 0x8a
    6cee:	e7e6      	b.n	6cbe <m2m_wifi_start_provision_mode+0x56>
	sint8	s8Ret = M2M_ERR_FAIL;
    6cf0:	f06f 000b 	mvn.w	r0, #11
}
    6cf4:	4770      	bx	lr
    6cf6:	bf00      	nop
    6cf8:	1fff7780 	.word	0x1fff7780
    6cfc:	1fff7779 	.word	0x1fff7779

00006d00 <m2m_wifi_get_connection_info>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_STOP_PROVISION_MODE, NULL, 0, NULL, 0, 0);
}

sint8 m2m_wifi_get_connection_info(void)
{
    6d00:	b500      	push	{lr}
    6d02:	b085      	sub	sp, #20
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_GET_CONN_INFO, NULL, 0, NULL, 0, 0);
    6d04:	2300      	movs	r3, #0
    6d06:	9302      	str	r3, [sp, #8]
    6d08:	9301      	str	r3, [sp, #4]
    6d0a:	9300      	str	r3, [sp, #0]
    6d0c:	461a      	mov	r2, r3
    6d0e:	2105      	movs	r1, #5
    6d10:	2001      	movs	r0, #1
    6d12:	f7ff fa57 	bl	61c4 <hif_send>
}
    6d16:	b005      	add	sp, #20
    6d18:	f85d fb04 	ldr.w	pc, [sp], #4

00006d1c <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    6d1c:	b500      	push	{lr}
    6d1e:	b083      	sub	sp, #12
	uint32 reg = 0;
    6d20:	2300      	movs	r3, #0
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    6d22:	a901      	add	r1, sp, #4
    6d24:	f241 4008 	movw	r0, #5128	; 0x1408
	uint32 reg = 0;
    6d28:	9301      	str	r3, [sp, #4]
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    6d2a:	f000 fa55 	bl	71d8 <nm_read_reg_with_ret>
	if (M2M_SUCCESS != ret) goto ERR1;
    6d2e:	b110      	cbz	r0, 6d36 <enable_interrupts+0x1a>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    6d30:	b003      	add	sp, #12
    6d32:	f85d fb04 	ldr.w	pc, [sp], #4
	reg |= ((uint32) 1 << 8);
    6d36:	9901      	ldr	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    6d38:	f241 4008 	movw	r0, #5128	; 0x1408
	reg |= ((uint32) 1 << 8);
    6d3c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
    6d40:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    6d42:	f000 fa4b 	bl	71dc <nm_write_reg>
	if (M2M_SUCCESS != ret) goto ERR1;
    6d46:	2800      	cmp	r0, #0
    6d48:	d1f2      	bne.n	6d30 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    6d4a:	a901      	add	r1, sp, #4
    6d4c:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
    6d50:	f000 fa42 	bl	71d8 <nm_read_reg_with_ret>
	if (M2M_SUCCESS != ret) goto ERR1;
    6d54:	2800      	cmp	r0, #0
    6d56:	d1eb      	bne.n	6d30 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    6d58:	9901      	ldr	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    6d5a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
	reg |= ((uint32) 1 << 16);
    6d5e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
    6d62:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    6d64:	f000 fa3a 	bl	71dc <nm_write_reg>
}
    6d68:	b003      	add	sp, #12
    6d6a:	f85d fb04 	ldr.w	pc, [sp], #4
    6d6e:	bf00      	nop

00006d70 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    6d70:	b530      	push	{r4, r5, lr}
	static uint32 chipid = 0;

	if (chipid == 0) {
    6d72:	4d23      	ldr	r5, [pc, #140]	; (6e00 <nmi_get_chipid+0x90>)
    6d74:	682c      	ldr	r4, [r5, #0]
{
    6d76:	b083      	sub	sp, #12
	if (chipid == 0) {
    6d78:	b114      	cbz	r4, 6d80 <nmi_get_chipid+0x10>
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
}
    6d7a:	4620      	mov	r0, r4
    6d7c:	b003      	add	sp, #12
    6d7e:	bd30      	pop	{r4, r5, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    6d80:	4629      	mov	r1, r5
    6d82:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    6d86:	f000 fa27 	bl	71d8 <nm_read_reg_with_ret>
    6d8a:	b120      	cbz	r0, 6d96 <nmi_get_chipid+0x26>
			chipid = 0;
    6d8c:	2300      	movs	r3, #0
}
    6d8e:	4620      	mov	r0, r4
			chipid = 0;
    6d90:	602b      	str	r3, [r5, #0]
}
    6d92:	b003      	add	sp, #12
    6d94:	bd30      	pop	{r4, r5, pc}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    6d96:	a901      	add	r1, sp, #4
    6d98:	f241 30f4 	movw	r0, #5108	; 0x13f4
    6d9c:	f000 fa1c 	bl	71d8 <nm_read_reg_with_ret>
    6da0:	2800      	cmp	r0, #0
    6da2:	d1f3      	bne.n	6d8c <nmi_get_chipid+0x1c>
		if (chipid == 0x1002a0)  {
    6da4:	682b      	ldr	r3, [r5, #0]
    6da6:	4a17      	ldr	r2, [pc, #92]	; (6e04 <nmi_get_chipid+0x94>)
    6da8:	4293      	cmp	r3, r2
    6daa:	d016      	beq.n	6dda <nmi_get_chipid+0x6a>
		} else if(chipid == 0x1002b0) {
    6dac:	4a16      	ldr	r2, [pc, #88]	; (6e08 <nmi_get_chipid+0x98>)
    6dae:	4293      	cmp	r3, r2
    6db0:	d00a      	beq.n	6dc8 <nmi_get_chipid+0x58>
		}else if(chipid == 0x1000F0) { 
    6db2:	4a16      	ldr	r2, [pc, #88]	; (6e0c <nmi_get_chipid+0x9c>)
    6db4:	4293      	cmp	r3, r2
    6db6:	d017      	beq.n	6de8 <nmi_get_chipid+0x78>
		chipid &= ~(0x0f0000);
    6db8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
		chipid |= 0x050000;
    6dbc:	f443 24a0 	orr.w	r4, r3, #327680	; 0x50000
}
    6dc0:	4620      	mov	r0, r4
		chipid |= 0x050000;
    6dc2:	602c      	str	r4, [r5, #0]
}
    6dc4:	b003      	add	sp, #12
    6dc6:	bd30      	pop	{r4, r5, pc}
			if(rfrevid == 3) { /* 1002B0 */
    6dc8:	9b01      	ldr	r3, [sp, #4]
    6dca:	2b03      	cmp	r3, #3
    6dcc:	d015      	beq.n	6dfa <nmi_get_chipid+0x8a>
			} else if(rfrevid == 4) { /* 1002B1 */
    6dce:	4c10      	ldr	r4, [pc, #64]	; (6e10 <nmi_get_chipid+0xa0>)
    6dd0:	4a10      	ldr	r2, [pc, #64]	; (6e14 <nmi_get_chipid+0xa4>)
    6dd2:	2b04      	cmp	r3, #4
    6dd4:	bf18      	it	ne
    6dd6:	4614      	movne	r4, r2
    6dd8:	e7f2      	b.n	6dc0 <nmi_get_chipid+0x50>
			if (rfrevid == 0x1) { /* 1002A0 */
    6dda:	9a01      	ldr	r2, [sp, #4]
    6ddc:	4c0e      	ldr	r4, [pc, #56]	; (6e18 <nmi_get_chipid+0xa8>)
    6dde:	4b0f      	ldr	r3, [pc, #60]	; (6e1c <nmi_get_chipid+0xac>)
    6de0:	2a01      	cmp	r2, #1
    6de2:	bf08      	it	eq
    6de4:	461c      	moveq	r4, r3
    6de6:	e7eb      	b.n	6dc0 <nmi_get_chipid+0x50>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    6de8:	4629      	mov	r1, r5
    6dea:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
    6dee:	f000 f9f3 	bl	71d8 <nm_read_reg_with_ret>
    6df2:	2800      	cmp	r0, #0
    6df4:	d1ca      	bne.n	6d8c <nmi_get_chipid+0x1c>
		chipid &= ~(0x0f0000);
    6df6:	682b      	ldr	r3, [r5, #0]
    6df8:	e7de      	b.n	6db8 <nmi_get_chipid+0x48>
    6dfa:	4c09      	ldr	r4, [pc, #36]	; (6e20 <nmi_get_chipid+0xb0>)
    6dfc:	e7e0      	b.n	6dc0 <nmi_get_chipid+0x50>
    6dfe:	bf00      	nop
    6e00:	1fff777c 	.word	0x1fff777c
    6e04:	001002a0 	.word	0x001002a0
    6e08:	001002b0 	.word	0x001002b0
    6e0c:	001000f0 	.word	0x001000f0
    6e10:	001502b1 	.word	0x001502b1
    6e14:	001502b2 	.word	0x001502b2
    6e18:	001502a1 	.word	0x001502a1
    6e1c:	001502a0 	.word	0x001502a0
    6e20:	001502b0 	.word	0x001502b0

00006e24 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    6e24:	b500      	push	{lr}
    6e26:	b083      	sub	sp, #12
    6e28:	e002      	b.n	6e30 <chip_sleep+0xc>
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    6e2a:	9b01      	ldr	r3, [sp, #4]
    6e2c:	07d9      	lsls	r1, r3, #31
    6e2e:	d508      	bpl.n	6e42 <chip_sleep+0x1e>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    6e30:	a901      	add	r1, sp, #4
    6e32:	2010      	movs	r0, #16
    6e34:	f000 f9d0 	bl	71d8 <nm_read_reg_with_ret>
		if(ret != M2M_SUCCESS) goto ERR1;
    6e38:	2800      	cmp	r0, #0
    6e3a:	d0f6      	beq.n	6e2a <chip_sleep+0x6>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    6e3c:	b003      	add	sp, #12
    6e3e:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    6e42:	a901      	add	r1, sp, #4
    6e44:	2001      	movs	r0, #1
    6e46:	f000 f9c7 	bl	71d8 <nm_read_reg_with_ret>
	if(ret != M2M_SUCCESS)goto ERR1;
    6e4a:	2800      	cmp	r0, #0
    6e4c:	d1f6      	bne.n	6e3c <chip_sleep+0x18>
	if(reg & NBIT1)
    6e4e:	9901      	ldr	r1, [sp, #4]
    6e50:	078a      	lsls	r2, r1, #30
    6e52:	d507      	bpl.n	6e64 <chip_sleep+0x40>
		reg &=~NBIT1;
    6e54:	f021 0102 	bic.w	r1, r1, #2
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    6e58:	2001      	movs	r0, #1
		reg &=~NBIT1;
    6e5a:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    6e5c:	f000 f9be 	bl	71dc <nm_write_reg>
		if(ret != M2M_SUCCESS)goto ERR1;
    6e60:	2800      	cmp	r0, #0
    6e62:	d1eb      	bne.n	6e3c <chip_sleep+0x18>
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    6e64:	a901      	add	r1, sp, #4
    6e66:	200b      	movs	r0, #11
    6e68:	f000 f9b6 	bl	71d8 <nm_read_reg_with_ret>
	if(ret != M2M_SUCCESS)goto ERR1;
    6e6c:	2800      	cmp	r0, #0
    6e6e:	d1e5      	bne.n	6e3c <chip_sleep+0x18>
	if(reg & NBIT0)
    6e70:	9901      	ldr	r1, [sp, #4]
    6e72:	07cb      	lsls	r3, r1, #31
    6e74:	d5e2      	bpl.n	6e3c <chip_sleep+0x18>
		reg &= ~NBIT0;
    6e76:	f021 0101 	bic.w	r1, r1, #1
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    6e7a:	200b      	movs	r0, #11
		reg &= ~NBIT0;
    6e7c:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    6e7e:	f000 f9ad 	bl	71dc <nm_write_reg>
		if(ret != M2M_SUCCESS)goto ERR1;
    6e82:	e7db      	b.n	6e3c <chip_sleep+0x18>

00006e84 <chip_wake>:
sint8 chip_wake(void)
{
    6e84:	b530      	push	{r4, r5, lr}
    6e86:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    6e88:	2300      	movs	r3, #0

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    6e8a:	4669      	mov	r1, sp
    6e8c:	200b      	movs	r0, #11
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    6e8e:	e9cd 3300 	strd	r3, r3, [sp]
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    6e92:	f000 f9a1 	bl	71d8 <nm_read_reg_with_ret>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    6e96:	4604      	mov	r4, r0
    6e98:	bb18      	cbnz	r0, 6ee2 <chip_wake+0x5e>
	
	if(!(reg & NBIT0))
    6e9a:	9900      	ldr	r1, [sp, #0]
    6e9c:	07c8      	lsls	r0, r1, #31
    6e9e:	d406      	bmi.n	6eae <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    6ea0:	f041 0101 	orr.w	r1, r1, #1
    6ea4:	200b      	movs	r0, #11
    6ea6:	f000 f999 	bl	71dc <nm_write_reg>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    6eaa:	4604      	mov	r4, r0
    6eac:	b9c8      	cbnz	r0, 6ee2 <chip_wake+0x5e>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    6eae:	4669      	mov	r1, sp
    6eb0:	2001      	movs	r0, #1
    6eb2:	f000 f991 	bl	71d8 <nm_read_reg_with_ret>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    6eb6:	4604      	mov	r4, r0
    6eb8:	b998      	cbnz	r0, 6ee2 <chip_wake+0x5e>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    6eba:	9900      	ldr	r1, [sp, #0]
    6ebc:	078a      	lsls	r2, r1, #30
    6ebe:	d513      	bpl.n	6ee8 <chip_wake+0x64>
{
    6ec0:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    6ec2:	a901      	add	r1, sp, #4
    6ec4:	200f      	movs	r0, #15
    6ec6:	f000 f987 	bl	71d8 <nm_read_reg_with_ret>
    6eca:	4604      	mov	r4, r0
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    6ecc:	2002      	movs	r0, #2
		if(ret != M2M_SUCCESS) {
    6ece:	b944      	cbnz	r4, 6ee2 <chip_wake+0x5e>
		if(clk_status_reg & NBIT2) {
    6ed0:	9b01      	ldr	r3, [sp, #4]
    6ed2:	075b      	lsls	r3, r3, #29
    6ed4:	d411      	bmi.n	6efa <chip_wake+0x76>
		nm_bsp_sleep(2);
    6ed6:	f7fe ffe3 	bl	5ea0 <nm_bsp_sleep>
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    6eda:	3d01      	subs	r5, #1
    6edc:	d1f1      	bne.n	6ec2 <chip_wake+0x3e>
		{
			M2M_ERR("Failed to wakup the chip\n");
			ret = M2M_ERR_TIME_OUT;
    6ede:	f06f 0403 	mvn.w	r4, #3
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    6ee2:	4620      	mov	r0, r4
    6ee4:	b003      	add	sp, #12
    6ee6:	bd30      	pop	{r4, r5, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    6ee8:	f041 0102 	orr.w	r1, r1, #2
    6eec:	2001      	movs	r0, #1
    6eee:	f000 f975 	bl	71dc <nm_write_reg>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    6ef2:	4604      	mov	r4, r0
    6ef4:	2800      	cmp	r0, #0
    6ef6:	d0e3      	beq.n	6ec0 <chip_wake+0x3c>
    6ef8:	e7f3      	b.n	6ee2 <chip_wake+0x5e>
	nm_bus_reset();
    6efa:	f000 f969 	bl	71d0 <nm_bus_reset>
    6efe:	e7f0      	b.n	6ee2 <chip_wake+0x5e>

00006f00 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    6f00:	b570      	push	{r4, r5, r6, lr}
    6f02:	4606      	mov	r6, r0
    6f04:	b082      	sub	sp, #8
    6f06:	e001      	b.n	6f0c <wait_for_bootrom+0xc>
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    6f08:	f7fe ffca 	bl	5ea0 <nm_bsp_sleep>
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    6f0c:	f241 0014 	movw	r0, #4116	; 0x1014
    6f10:	f000 f960 	bl	71d4 <nm_read_reg>
		if (reg & 0x80000000) {
    6f14:	2800      	cmp	r0, #0
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    6f16:	f04f 0001 	mov.w	r0, #1
		if (reg & 0x80000000) {
    6f1a:	daf5      	bge.n	6f08 <wait_for_bootrom+0x8>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    6f1c:	4843      	ldr	r0, [pc, #268]	; (702c <wait_for_bootrom+0x12c>)
    6f1e:	f000 f959 	bl	71d4 <nm_read_reg>
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    6f22:	07c3      	lsls	r3, r0, #31
    6f24:	d418      	bmi.n	6f58 <wait_for_bootrom+0x58>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    6f26:	2001      	movs	r0, #1
    6f28:	f7fe ffba 	bl	5ea0 <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
    6f2c:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
    6f30:	f000 f950 	bl	71d4 <nm_read_reg>
		while(reg != M2M_FINISH_BOOT_ROM)
    6f34:	4d3e      	ldr	r5, [pc, #248]	; (7030 <wait_for_bootrom+0x130>)
			reg = nm_read_reg(BOOTROM_REG);
    6f36:	4603      	mov	r3, r0
    6f38:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    6f3c:	e008      	b.n	6f50 <wait_for_bootrom+0x50>
			nm_bsp_sleep(1);
    6f3e:	f7fe ffaf 	bl	5ea0 <nm_bsp_sleep>
			reg = nm_read_reg(BOOTROM_REG);
    6f42:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
    6f46:	f000 f945 	bl	71d4 <nm_read_reg>

			if(++cnt > TIMEOUT)
    6f4a:	3c01      	subs	r4, #1
			reg = nm_read_reg(BOOTROM_REG);
    6f4c:	4603      	mov	r3, r0
			if(++cnt > TIMEOUT)
    6f4e:	d069      	beq.n	7024 <wait_for_bootrom+0x124>
		while(reg != M2M_FINISH_BOOT_ROM)
    6f50:	42ab      	cmp	r3, r5
			nm_bsp_sleep(1);
    6f52:	f04f 0001 	mov.w	r0, #1
		while(reg != M2M_FINISH_BOOT_ROM)
    6f56:	d1f2      	bne.n	6f3e <wait_for_bootrom+0x3e>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    6f58:	2e02      	cmp	r6, #2
    6f5a:	d04c      	beq.n	6ff6 <wait_for_bootrom+0xf6>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    6f5c:	2e03      	cmp	r6, #3
    6f5e:	d056      	beq.n	700e <wait_for_bootrom+0x10e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    6f60:	2e04      	cmp	r6, #4
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    6f62:	4934      	ldr	r1, [pc, #208]	; (7034 <wait_for_bootrom+0x134>)
    6f64:	f241 008c 	movw	r0, #4236	; 0x108c
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    6f68:	d025      	beq.n	6fb6 <wait_for_bootrom+0xb6>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    6f6a:	f000 f937 	bl	71dc <nm_write_reg>
	uint32 u32GpReg1 = 0;
    6f6e:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    6f70:	f7ff fefe 	bl	6d70 <nmi_get_chipid>
    6f74:	f3c0 000b 	ubfx	r0, r0, #0, #12
    6f78:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
    6f7c:	d326      	bcc.n	6fcc <wait_for_bootrom+0xcc>
	val32 |= rHAVE_RESERVED1_BIT;
    6f7e:	f444 7481 	orr.w	r4, r4, #258	; 0x102
    6f82:	ad01      	add	r5, sp, #4
			uint32 reg = 0;
    6f84:	2600      	movs	r6, #0
		nm_write_reg(rNMI_GP_REG_1, val32);
    6f86:	4621      	mov	r1, r4
    6f88:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
    6f8c:	f000 f926 	bl	71dc <nm_write_reg>
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    6f90:	4629      	mov	r1, r5
    6f92:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
			uint32 reg = 0;
    6f96:	9601      	str	r6, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    6f98:	f000 f91e 	bl	71d8 <nm_read_reg_with_ret>
			if(ret == M2M_SUCCESS) {
    6f9c:	2800      	cmp	r0, #0
    6f9e:	d1f2      	bne.n	6f86 <wait_for_bootrom+0x86>
				if(reg == val32)
    6fa0:	9b01      	ldr	r3, [sp, #4]
    6fa2:	429c      	cmp	r4, r3
    6fa4:	d1ef      	bne.n	6f86 <wait_for_bootrom+0x86>
	} else {
		chip_apply_conf(u32GpReg1);
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    6fa6:	4924      	ldr	r1, [pc, #144]	; (7038 <wait_for_bootrom+0x138>)
    6fa8:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
    6fac:	f000 f916 	bl	71dc <nm_write_reg>
	sint8 ret = M2M_SUCCESS;
    6fb0:	2000      	movs	r0, #0
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    6fb2:	b002      	add	sp, #8
    6fb4:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    6fb6:	f000 f911 	bl	71dc <nm_write_reg>
	if(REV(nmi_get_chipid()) >= REV_3A0){
    6fba:	f7ff fed9 	bl	6d70 <nmi_get_chipid>
    6fbe:	f3c0 000b 	ubfx	r0, r0, #0, #12
    6fc2:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    6fc6:	f04f 0480 	mov.w	r4, #128	; 0x80
	if(REV(nmi_get_chipid()) >= REV_3A0){
    6fca:	d2d8      	bcs.n	6f7e <wait_for_bootrom+0x7e>
	val32 |= rHAVE_RESERVED1_BIT;
    6fcc:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    6fd0:	ad01      	add	r5, sp, #4
			uint32 reg = 0;
    6fd2:	2600      	movs	r6, #0
		nm_write_reg(rNMI_GP_REG_1, val32);
    6fd4:	4621      	mov	r1, r4
    6fd6:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
    6fda:	f000 f8ff 	bl	71dc <nm_write_reg>
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    6fde:	4629      	mov	r1, r5
    6fe0:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
			uint32 reg = 0;
    6fe4:	9601      	str	r6, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    6fe6:	f000 f8f7 	bl	71d8 <nm_read_reg_with_ret>
			if(ret == M2M_SUCCESS) {
    6fea:	2800      	cmp	r0, #0
    6fec:	d1f2      	bne.n	6fd4 <wait_for_bootrom+0xd4>
				if(reg == val32)
    6fee:	9b01      	ldr	r3, [sp, #4]
    6ff0:	429c      	cmp	r4, r3
    6ff2:	d1ef      	bne.n	6fd4 <wait_for_bootrom+0xd4>
    6ff4:	e7d7      	b.n	6fa6 <wait_for_bootrom+0xa6>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    6ff6:	4911      	ldr	r1, [pc, #68]	; (703c <wait_for_bootrom+0x13c>)
    6ff8:	4811      	ldr	r0, [pc, #68]	; (7040 <wait_for_bootrom+0x140>)
    6ffa:	f000 f8ef 	bl	71dc <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, NBIT20);
    6ffe:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    7002:	f241 008c 	movw	r0, #4236	; 0x108c
    7006:	f000 f8e9 	bl	71dc <nm_write_reg>
	uint32 u32GpReg1 = 0;
    700a:	2400      	movs	r4, #0
    700c:	e7b0      	b.n	6f70 <wait_for_bootrom+0x70>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    700e:	490b      	ldr	r1, [pc, #44]	; (703c <wait_for_bootrom+0x13c>)
    7010:	480b      	ldr	r0, [pc, #44]	; (7040 <wait_for_bootrom+0x140>)
    7012:	f000 f8e3 	bl	71dc <nm_write_reg>
		nm_write_reg(NMI_STATE_REG, 0);
    7016:	2100      	movs	r1, #0
    7018:	f241 008c 	movw	r0, #4236	; 0x108c
    701c:	f000 f8de 	bl	71dc <nm_write_reg>
	uint32 u32GpReg1 = 0;
    7020:	2400      	movs	r4, #0
    7022:	e7a5      	b.n	6f70 <wait_for_bootrom+0x70>
				ret = M2M_ERR_INIT;
    7024:	f06f 0004 	mvn.w	r0, #4
	return ret;
    7028:	e7c3      	b.n	6fb2 <wait_for_bootrom+0xb2>
    702a:	bf00      	nop
    702c:	000207bc 	.word	0x000207bc
    7030:	10add09e 	.word	0x10add09e
    7034:	13521352 	.word	0x13521352
    7038:	ef522f61 	.word	0xef522f61
    703c:	3c1cd57d 	.word	0x3c1cd57d
    7040:	000207ac 	.word	0x000207ac

00007044 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    7044:	b510      	push	{r4, lr}
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    7046:	3802      	subs	r0, #2
{
    7048:	b082      	sub	sp, #8
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    704a:	4b1a      	ldr	r3, [pc, #104]	; (70b4 <wait_for_firmware_start+0x70>)
	volatile uint32 regAddress = NMI_STATE_REG;
    704c:	f241 028c 	movw	r2, #4236	; 0x108c
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    7050:	2801      	cmp	r0, #1
	volatile uint32 regAddress = NMI_STATE_REG;
    7052:	9200      	str	r2, [sp, #0]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    7054:	9301      	str	r3, [sp, #4]
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    7056:	d808      	bhi.n	706a <wait_for_firmware_start+0x26>
		regAddress = NMI_REV_REG;
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    7058:	f103 4355 	add.w	r3, r3, #3573547008	; 0xd5000000
    705c:	f503 2329 	add.w	r3, r3, #692224	; 0xa9000
		regAddress = NMI_REV_REG;
    7060:	4a15      	ldr	r2, [pc, #84]	; (70b8 <wait_for_firmware_start+0x74>)
    7062:	9200      	str	r2, [sp, #0]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    7064:	f603 338d 	addw	r3, r3, #2957	; 0xb8d
    7068:	9301      	str	r3, [sp, #4]
{
    706a:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    706e:	2300      	movs	r3, #0
    7070:	e007      	b.n	7082 <wait_for_firmware_start+0x3e>
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    7072:	f7fe ff15 	bl	5ea0 <nm_bsp_sleep>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    7076:	9800      	ldr	r0, [sp, #0]
    7078:	f000 f8ac 	bl	71d4 <nm_read_reg>
		if(++cnt >= u32Timeout)
    707c:	3c01      	subs	r4, #1
		reg = nm_read_reg(regAddress);
    707e:	4603      	mov	r3, r0
		if(++cnt >= u32Timeout)
    7080:	d013      	beq.n	70aa <wait_for_firmware_start+0x66>
	while (checkValue != reg)
    7082:	9a01      	ldr	r2, [sp, #4]
    7084:	429a      	cmp	r2, r3
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    7086:	f04f 0002 	mov.w	r0, #2
	while (checkValue != reg)
    708a:	d1f2      	bne.n	7072 <wait_for_firmware_start+0x2e>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    708c:	9a01      	ldr	r2, [sp, #4]
    708e:	4b09      	ldr	r3, [pc, #36]	; (70b4 <wait_for_firmware_start+0x70>)
    7090:	429a      	cmp	r2, r3
    7092:	d002      	beq.n	709a <wait_for_firmware_start+0x56>
	sint8 ret = M2M_SUCCESS;
    7094:	2000      	movs	r0, #0
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    7096:	b002      	add	sp, #8
    7098:	bd10      	pop	{r4, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    709a:	2100      	movs	r1, #0
    709c:	f241 008c 	movw	r0, #4236	; 0x108c
    70a0:	f000 f89c 	bl	71dc <nm_write_reg>
	sint8 ret = M2M_SUCCESS;
    70a4:	2000      	movs	r0, #0
}
    70a6:	b002      	add	sp, #8
    70a8:	bd10      	pop	{r4, pc}
			ret = M2M_ERR_INIT;
    70aa:	f06f 0004 	mvn.w	r0, #4
}
    70ae:	b002      	add	sp, #8
    70b0:	bd10      	pop	{r4, pc}
    70b2:	bf00      	nop
    70b4:	02532636 	.word	0x02532636
    70b8:	000207ac 	.word	0x000207ac

000070bc <chip_deinit>:

sint8 chip_deinit(void)
{
    70bc:	b500      	push	{lr}
    70be:	b083      	sub	sp, #12
	uint32 reg = 0;
    70c0:	2300      	movs	r3, #0
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    70c2:	a901      	add	r1, sp, #4
    70c4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
	uint32 reg = 0;
    70c8:	9301      	str	r3, [sp, #4]
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    70ca:	f000 f885 	bl	71d8 <nm_read_reg_with_ret>
	if (ret != M2M_SUCCESS) {
    70ce:	b938      	cbnz	r0, 70e0 <chip_deinit+0x24>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    70d0:	9901      	ldr	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    70d2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
	reg &= ~(1 << 10);
    70d6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
    70da:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    70dc:	f000 f87e 	bl	71dc <nm_write_reg>
		goto ERR1;
	}

ERR1:
	return ret;
}
    70e0:	b003      	add	sp, #12
    70e2:	f85d fb04 	ldr.w	pc, [sp], #4
    70e6:	bf00      	nop

000070e8 <set_gpio_dir>:

#ifdef CONF_PERIPH

sint8 set_gpio_dir(uint8 gpio, uint8 dir)
{
    70e8:	b530      	push	{r4, r5, lr}
    70ea:	b083      	sub	sp, #12
    70ec:	4605      	mov	r5, r0
    70ee:	460c      	mov	r4, r1
	uint32 val32;
	sint8 ret;

	ret = nm_read_reg_with_ret(0x20108, &val32);
    70f0:	480b      	ldr	r0, [pc, #44]	; (7120 <set_gpio_dir+0x38>)
    70f2:	a901      	add	r1, sp, #4
    70f4:	f000 f870 	bl	71d8 <nm_read_reg_with_ret>
	if(ret != M2M_SUCCESS) goto _EXIT;
    70f8:	b948      	cbnz	r0, 710e <set_gpio_dir+0x26>

	if(dir) {
    70fa:	b954      	cbnz	r4, 7112 <set_gpio_dir+0x2a>
		val32 |= (1ul << gpio);
	} else {
		val32 &= ~(1ul << gpio);
    70fc:	9901      	ldr	r1, [sp, #4]
    70fe:	2301      	movs	r3, #1
    7100:	40ab      	lsls	r3, r5
    7102:	ea21 0103 	bic.w	r1, r1, r3
	}

	ret = nm_write_reg(0x20108, val32);
    7106:	4806      	ldr	r0, [pc, #24]	; (7120 <set_gpio_dir+0x38>)
    7108:	9101      	str	r1, [sp, #4]
    710a:	f000 f867 	bl	71dc <nm_write_reg>

_EXIT:
	return ret;
}
    710e:	b003      	add	sp, #12
    7110:	bd30      	pop	{r4, r5, pc}
		val32 |= (1ul << gpio);
    7112:	2101      	movs	r1, #1
    7114:	9b01      	ldr	r3, [sp, #4]
    7116:	fa01 f005 	lsl.w	r0, r1, r5
    711a:	ea40 0103 	orr.w	r1, r0, r3
    711e:	e7f2      	b.n	7106 <set_gpio_dir+0x1e>
    7120:	00020108 	.word	0x00020108

00007124 <set_gpio_val>:
sint8 set_gpio_val(uint8 gpio, uint8 val)
{
    7124:	b530      	push	{r4, r5, lr}
    7126:	b083      	sub	sp, #12
    7128:	4605      	mov	r5, r0
    712a:	460c      	mov	r4, r1
	uint32 val32;
	sint8 ret;

	ret = nm_read_reg_with_ret(0x20100, &val32);
    712c:	480b      	ldr	r0, [pc, #44]	; (715c <set_gpio_val+0x38>)
    712e:	a901      	add	r1, sp, #4
    7130:	f000 f852 	bl	71d8 <nm_read_reg_with_ret>
	if(ret != M2M_SUCCESS) goto _EXIT;
    7134:	b948      	cbnz	r0, 714a <set_gpio_val+0x26>

	if(val) {
    7136:	b954      	cbnz	r4, 714e <set_gpio_val+0x2a>
		val32 |= (1ul << gpio);
	} else {
		val32 &= ~(1ul << gpio);
    7138:	9901      	ldr	r1, [sp, #4]
    713a:	2301      	movs	r3, #1
    713c:	40ab      	lsls	r3, r5
    713e:	ea21 0103 	bic.w	r1, r1, r3
	}

	ret = nm_write_reg(0x20100, val32);
    7142:	4806      	ldr	r0, [pc, #24]	; (715c <set_gpio_val+0x38>)
    7144:	9101      	str	r1, [sp, #4]
    7146:	f000 f849 	bl	71dc <nm_write_reg>

_EXIT:
	return ret;
}
    714a:	b003      	add	sp, #12
    714c:	bd30      	pop	{r4, r5, pc}
		val32 |= (1ul << gpio);
    714e:	2101      	movs	r1, #1
    7150:	9b01      	ldr	r3, [sp, #4]
    7152:	fa01 f005 	lsl.w	r0, r1, r5
    7156:	ea40 0103 	orr.w	r1, r0, r3
    715a:	e7f2      	b.n	7142 <set_gpio_val+0x1e>
    715c:	00020100 	.word	0x00020100

00007160 <nmi_get_mac_address>:
	if(pu8IsValid) *pu8IsValid = 0;
	return ret;
}

sint8 nmi_get_mac_address(uint8 *pu8MacAddr)
{
    7160:	b530      	push	{r4, r5, lr}
    7162:	b087      	sub	sp, #28
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
    7164:	2300      	movs	r3, #0

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    7166:	a901      	add	r1, sp, #4
{
    7168:	4605      	mov	r5, r0
	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    716a:	4816      	ldr	r0, [pc, #88]	; (71c4 <nmi_get_mac_address+0x64>)
	tstrGpRegs strgp = {0};
    716c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    7170:	f000 f832 	bl	71d8 <nm_read_reg_with_ret>
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    7174:	4604      	mov	r4, r0
    7176:	b9b8      	cbnz	r0, 71a8 <nmi_get_mac_address+0x48>
#ifdef ARDUINO
	if (u32RegValue) {
    7178:	9801      	ldr	r0, [sp, #4]
    717a:	b9c0      	cbnz	r0, 71ae <nmi_get_mac_address+0x4e>
		ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
		if(ret != M2M_SUCCESS) goto _EXIT_ERR;
		u32RegValue = strgp.u32Mac_efuse_mib;
	} else {
		// firmware version 19.3.0
		ret = nm_read_reg_with_ret(rNMI_GP_REG_0, &u32RegValue);
    717c:	a901      	add	r1, sp, #4
    717e:	f241 409c 	movw	r0, #5276	; 0x149c
    7182:	f000 f829 	bl	71d8 <nm_read_reg_with_ret>
		if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    7186:	4604      	mov	r4, r0
    7188:	b970      	cbnz	r0, 71a8 <nmi_get_mac_address+0x48>
#else
	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
	u32RegValue = strgp.u32Mac_efuse_mib;
#endif
	u32RegValue &=0x0000ffff;
    718a:	9801      	ldr	r0, [sp, #4]
    718c:	b280      	uxth	r0, r0
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    718e:	2206      	movs	r2, #6
    7190:	a902      	add	r1, sp, #8
	u32RegValue &=0x0000ffff;
    7192:	9001      	str	r0, [sp, #4]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    7194:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    7198:	f000 f822 	bl	71e0 <nm_read_block>
	m2m_memcpy(pu8MacAddr, mac, 6);
    719c:	2206      	movs	r2, #6
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    719e:	4604      	mov	r4, r0
	m2m_memcpy(pu8MacAddr, mac, 6);
    71a0:	a902      	add	r1, sp, #8
    71a2:	4628      	mov	r0, r5
    71a4:	f7fe ff8a 	bl	60bc <m2m_memcpy>

	return ret;

_EXIT_ERR:
	return ret;
}
    71a8:	4620      	mov	r0, r4
    71aa:	b007      	add	sp, #28
    71ac:	bd30      	pop	{r4, r5, pc}
		ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    71ae:	2208      	movs	r2, #8
    71b0:	a904      	add	r1, sp, #16
    71b2:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    71b6:	f000 f813 	bl	71e0 <nm_read_block>
		if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    71ba:	4604      	mov	r4, r0
    71bc:	2800      	cmp	r0, #0
    71be:	d1f3      	bne.n	71a8 <nmi_get_mac_address+0x48>
		u32RegValue = strgp.u32Mac_efuse_mib;
    71c0:	9804      	ldr	r0, [sp, #16]
    71c2:	e7e3      	b.n	718c <nmi_get_mac_address+0x2c>
    71c4:	000c0008 	.word	0x000c0008

000071c8 <nm_bus_iface_init>:
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    71c8:	f7fe be9c 	b.w	5f04 <nm_bus_init>

000071cc <nm_bus_iface_deinit>:
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    71cc:	f7fe bf66 	b.w	609c <nm_bus_deinit>

000071d0 <nm_bus_reset>:
sint8 nm_bus_reset(void)
{
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    71d0:	f000 bb36 	b.w	7840 <nm_spi_reset>

000071d4 <nm_read_reg>:
uint32 nm_read_reg(uint32 u32Addr)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    71d4:	f000 bb8e 	b.w	78f4 <nm_spi_read_reg>

000071d8 <nm_read_reg_with_ret>:
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    71d8:	f000 bb96 	b.w	7908 <nm_spi_read_reg_with_ret>

000071dc <nm_write_reg>:
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    71dc:	f000 bb9e 	b.w	791c <nm_spi_write_reg>

000071e0 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    71e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    71e4:	4b11      	ldr	r3, [pc, #68]	; (722c <nm_read_block+0x4c>)
    71e6:	881d      	ldrh	r5, [r3, #0]
    71e8:	3d08      	subs	r5, #8
    71ea:	b2ad      	uxth	r5, r5
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    71ec:	4295      	cmp	r5, r2
{
    71ee:	4616      	mov	r6, r2
    71f0:	4689      	mov	r9, r1
		if(u32Sz <= u16MaxTrxSz)
    71f2:	4604      	mov	r4, r0
    71f4:	d213      	bcs.n	721e <nm_read_block+0x3e>
    71f6:	eba1 0800 	sub.w	r8, r1, r0
    71fa:	1a2f      	subs	r7, r5, r0
    71fc:	e001      	b.n	7202 <nm_read_block+0x22>
    71fe:	42b5      	cmp	r5, r6
    7200:	d20c      	bcs.n	721c <nm_read_block+0x3c>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    7202:	eb08 0104 	add.w	r1, r8, r4
    7206:	4620      	mov	r0, r4
    7208:	462a      	mov	r2, r5
    720a:	f000 fb91 	bl	7930 <nm_spi_read_block>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
			u32Sz -= u16MaxTrxSz;
    720e:	1b76      	subs	r6, r6, r5
			off += u16MaxTrxSz;
    7210:	193b      	adds	r3, r7, r4
			u32Addr += u16MaxTrxSz;
    7212:	442c      	add	r4, r5
			if(M2M_SUCCESS != s8Ret) break;
    7214:	2800      	cmp	r0, #0
    7216:	d0f2      	beq.n	71fe <nm_read_block+0x1e>
		}
	}

	return s8Ret;
}
    7218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    721c:	4499      	add	r9, r3
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    721e:	b2b2      	uxth	r2, r6
    7220:	4649      	mov	r1, r9
    7222:	4620      	mov	r0, r4
}
    7224:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    7228:	f000 bb82 	b.w	7930 <nm_spi_read_block>
    722c:	1fff0ca4 	.word	0x1fff0ca4

00007230 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    7230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    7234:	4b11      	ldr	r3, [pc, #68]	; (727c <nm_write_block+0x4c>)
    7236:	881d      	ldrh	r5, [r3, #0]
    7238:	3d08      	subs	r5, #8
    723a:	b2ad      	uxth	r5, r5
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    723c:	4295      	cmp	r5, r2
{
    723e:	4616      	mov	r6, r2
    7240:	4689      	mov	r9, r1
		if(u32Sz <= u16MaxTrxSz)
    7242:	4604      	mov	r4, r0
    7244:	d213      	bcs.n	726e <nm_write_block+0x3e>
    7246:	eba1 0800 	sub.w	r8, r1, r0
    724a:	1a2f      	subs	r7, r5, r0
    724c:	e001      	b.n	7252 <nm_write_block+0x22>
    724e:	42b5      	cmp	r5, r6
    7250:	d20c      	bcs.n	726c <nm_write_block+0x3c>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    7252:	eb08 0104 	add.w	r1, r8, r4
    7256:	4620      	mov	r0, r4
    7258:	462a      	mov	r2, r5
    725a:	f000 fbbb 	bl	79d4 <nm_spi_write_block>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
			u32Sz -= u16MaxTrxSz;
    725e:	1b76      	subs	r6, r6, r5
			off += u16MaxTrxSz;
    7260:	193b      	adds	r3, r7, r4
			u32Addr += u16MaxTrxSz;
    7262:	442c      	add	r4, r5
			if(M2M_SUCCESS != s8Ret) break;
    7264:	2800      	cmp	r0, #0
    7266:	d0f2      	beq.n	724e <nm_write_block+0x1e>
		}
	}

	return s8Ret;
}
    7268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    726c:	4499      	add	r9, r3
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    726e:	b2b2      	uxth	r2, r6
    7270:	4649      	mov	r1, r9
    7272:	4620      	mov	r0, r4
}
    7274:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    7278:	f000 bbac 	b.w	79d4 <nm_spi_write_block>
    727c:	1fff0ca4 	.word	0x1fff0ca4

00007280 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
    7280:	b530      	push	{r4, r5, lr}
    7282:	b083      	sub	sp, #12
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    7284:	2300      	movs	r3, #0
{
    7286:	4604      	mov	r4, r0
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
    7288:	a901      	add	r1, sp, #4
    728a:	4828      	ldr	r0, [pc, #160]	; (732c <nm_get_firmware_info+0xac>)
	uint32	reg = 0;
    728c:	9301      	str	r3, [sp, #4]
	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
    728e:	f7ff ffa3 	bl	71d8 <nm_read_reg_with_ret>
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
    7292:	9b01      	ldr	r3, [sp, #4]
    7294:	4a26      	ldr	r2, [pc, #152]	; (7330 <nm_get_firmware_info+0xb0>)
    7296:	4293      	cmp	r3, r2
    7298:	d03f      	beq.n	731a <nm_get_firmware_info+0x9a>
    729a:	4605      	mov	r5, r0
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
    729c:	f3c3 5203 	ubfx	r2, r3, #20, #4
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
    72a0:	0e19      	lsrs	r1, r3, #24
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
    72a2:	7222      	strb	r2, [r4, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
    72a4:	f3c3 2207 	ubfx	r2, r3, #8, #8
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
    72a8:	71e1      	strb	r1, [r4, #7]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
    72aa:	7122      	strb	r2, [r4, #4]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
    72ac:	f3c3 4103 	ubfx	r1, r3, #16, #4
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
    72b0:	f3c3 1203 	ubfx	r2, r3, #4, #4
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
    72b4:	f003 030f 	and.w	r3, r3, #15
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
    72b8:	7261      	strb	r1, [r4, #9]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
    72ba:	7162      	strb	r2, [r4, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
    72bc:	71a3      	strb	r3, [r4, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
    72be:	f7ff fd57 	bl	6d70 <nmi_get_chipid>
	M2mRev->u16FirmwareSvnNum = 0;
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
    72c2:	79a3      	ldrb	r3, [r4, #6]
    72c4:	7921      	ldrb	r1, [r4, #4]
#ifdef ARDUINO
	nmdrv_firm_ver  = curr_firm_ver;
#endif
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
    72c6:	7a62      	ldrb	r2, [r4, #9]
    72c8:	f894 c008 	ldrb.w	ip, [r4, #8]
	M2mRev->u32Chipid	= nmi_get_chipid();
    72cc:	6020      	str	r0, [r4, #0]
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
    72ce:	f003 030f 	and.w	r3, r3, #15
    72d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	M2mRev->u16FirmwareSvnNum = 0;
    72d6:	2100      	movs	r1, #0
    72d8:	8421      	strh	r1, [r4, #32]
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
    72da:	7961      	ldrb	r1, [r4, #5]
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
    72dc:	79e0      	ldrb	r0, [r4, #7]
    72de:	f002 020f 	and.w	r2, r2, #15
    72e2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
    72e6:	0109      	lsls	r1, r1, #4
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
    72e8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    72ec:	fa5f fc8c 	uxtb.w	ip, ip
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
    72f0:	b2c9      	uxtb	r1, r1
    72f2:	430b      	orrs	r3, r1
	if(curr_drv_ver <  min_req_drv_ver) {
    72f4:	ea42 020c 	orr.w	r2, r2, ip
    72f8:	f241 3152 	movw	r1, #4946	; 0x1352
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
    72fc:	428a      	cmp	r2, r1
	}
	if(curr_drv_ver >  curr_firm_ver) {
    72fe:	f241 3151 	movw	r1, #4945	; 0x1351
		ret = M2M_ERR_FW_VER_MISMATCH;
    7302:	bf88      	it	hi
    7304:	f06f 050c 	mvnhi.w	r5, #12
	nmdrv_firm_ver  = curr_firm_ver;
    7308:	4a0a      	ldr	r2, [pc, #40]	; (7334 <nm_get_firmware_info+0xb4>)
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
    730a:	428b      	cmp	r3, r1
	}
	return ret;
}
    730c:	bf8c      	ite	hi
    730e:	4628      	movhi	r0, r5
    7310:	f06f 000c 	mvnls.w	r0, #12
	nmdrv_firm_ver  = curr_firm_ver;
    7314:	6013      	str	r3, [r2, #0]
}
    7316:	b003      	add	sp, #12
    7318:	bd30      	pop	{r4, r5, pc}
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
    731a:	a901      	add	r1, sp, #4
    731c:	f241 0048 	movw	r0, #4168	; 0x1048
    7320:	f7ff ff5a 	bl	71d8 <nm_read_reg_with_ret>
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
    7324:	9b01      	ldr	r3, [sp, #4]
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
    7326:	4605      	mov	r5, r0
    7328:	e7b8      	b.n	729c <nm_get_firmware_info+0x1c>
    732a:	bf00      	nop
    732c:	000207ac 	.word	0x000207ac
    7330:	d75dc1c3 	.word	0xd75dc1c3
    7334:	1fff7780 	.word	0x1fff7780

00007338 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    7338:	b510      	push	{r4, lr}
    733a:	b084      	sub	sp, #16
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    733c:	2100      	movs	r1, #0
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    733e:	e9cd 1102 	strd	r1, r1, [sp, #8]
	uint32	reg = 0;
    7342:	9101      	str	r1, [sp, #4]
	if (pstrRev != NULL)
    7344:	2800      	cmp	r0, #0
    7346:	d041      	beq.n	73cc <nm_get_firmware_full_info+0x94>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    7348:	2228      	movs	r2, #40	; 0x28
    734a:	4604      	mov	r4, r0
    734c:	f7fe fec0 	bl	60d0 <m2m_memset>
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    7350:	4823      	ldr	r0, [pc, #140]	; (73e0 <nm_get_firmware_full_info+0xa8>)
    7352:	a901      	add	r1, sp, #4
    7354:	f7ff ff40 	bl	71d8 <nm_read_reg_with_ret>
		if(ret == M2M_SUCCESS)
    7358:	2800      	cmp	r0, #0
    735a:	d138      	bne.n	73ce <nm_get_firmware_full_info+0x96>
		{
			if(reg != 0)
    735c:	9801      	ldr	r0, [sp, #4]
    735e:	2800      	cmp	r0, #0
    7360:	d03a      	beq.n	73d8 <nm_get_firmware_full_info+0xa0>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    7362:	2208      	movs	r2, #8
    7364:	eb0d 0102 	add.w	r1, sp, r2
    7368:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    736c:	f7ff ff38 	bl	71e0 <nm_read_block>
				if(ret == M2M_SUCCESS)
    7370:	bb68      	cbnz	r0, 73ce <nm_get_firmware_full_info+0x96>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    7372:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    7376:	9001      	str	r0, [sp, #4]
					if(reg != 0)
    7378:	b370      	cbz	r0, 73d8 <nm_get_firmware_full_info+0xa0>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    737a:	2228      	movs	r2, #40	; 0x28
    737c:	4621      	mov	r1, r4
    737e:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
    7382:	f7ff ff2d 	bl	71e0 <nm_read_block>
						if(ret == M2M_SUCCESS)
    7386:	bb10      	cbnz	r0, 73ce <nm_get_firmware_full_info+0x96>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    7388:	79a3      	ldrb	r3, [r4, #6]
    738a:	7960      	ldrb	r0, [r4, #5]
    738c:	f894 e004 	ldrb.w	lr, [r4, #4]
#ifdef ARDUINO
							nmdrv_firm_ver  = curr_firm_ver;
#endif
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    7390:	7a62      	ldrb	r2, [r4, #9]
    7392:	7a21      	ldrb	r1, [r4, #8]
    7394:	f894 c007 	ldrb.w	ip, [r4, #7]
							nmdrv_firm_ver  = curr_firm_ver;
    7398:	4c12      	ldr	r4, [pc, #72]	; (73e4 <nm_get_firmware_full_info+0xac>)
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    739a:	f003 030f 	and.w	r3, r3, #15
    739e:	0100      	lsls	r0, r0, #4
    73a0:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    73a4:	b2c0      	uxtb	r0, r0
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    73a6:	f002 020f 	and.w	r2, r2, #15
    73aa:	0109      	lsls	r1, r1, #4
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    73ac:	4303      	orrs	r3, r0
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    73ae:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    73b2:	b2c9      	uxtb	r1, r1
							nmdrv_firm_ver  = curr_firm_ver;
    73b4:	6023      	str	r3, [r4, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    73b6:	430a      	orrs	r2, r1
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    73b8:	b173      	cbz	r3, 73d8 <nm_get_firmware_full_info+0xa0>
    73ba:	b16a      	cbz	r2, 73d8 <nm_get_firmware_full_info+0xa0>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    73bc:	f241 3152 	movw	r1, #4946	; 0x1352
    73c0:	428a      	cmp	r2, r1
    73c2:	d806      	bhi.n	73d2 <nm_get_firmware_full_info+0x9a>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    73c4:	f241 3251 	movw	r2, #4945	; 0x1351
    73c8:	4293      	cmp	r3, r2
    73ca:	d902      	bls.n	73d2 <nm_get_firmware_full_info+0x9a>
	sint8	ret = M2M_SUCCESS;
    73cc:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    73ce:	b004      	add	sp, #16
    73d0:	bd10      	pop	{r4, pc}
								ret = M2M_ERR_FW_VER_MISMATCH;
    73d2:	f06f 000c 	mvn.w	r0, #12
    73d6:	e7fa      	b.n	73ce <nm_get_firmware_full_info+0x96>
				ret = M2M_ERR_FAIL;
    73d8:	f06f 000b 	mvn.w	r0, #11
    73dc:	e7f7      	b.n	73ce <nm_get_firmware_full_info+0x96>
    73de:	bf00      	nop
    73e0:	000c0008 	.word	0x000c0008
    73e4:	1fff7780 	.word	0x1fff7780

000073e8 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    73e8:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    73ea:	2800      	cmp	r0, #0
    73ec:	d037      	beq.n	745e <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    73ee:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    73f0:	1e6b      	subs	r3, r5, #1
			u8Mode = M2M_WIFI_MODE_NORMAL;
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    73f2:	2b03      	cmp	r3, #3
    73f4:	bf88      	it	hi
    73f6:	2501      	movhi	r5, #1
	}
	
	ret = nm_bus_iface_init(NULL);
    73f8:	2000      	movs	r0, #0
    73fa:	f7ff fee5 	bl	71c8 <nm_bus_iface_init>
	if (M2M_SUCCESS != ret) {
    73fe:	4604      	mov	r4, r0
    7400:	b108      	cbz	r0, 7406 <nm_drv_init+0x1e>
	return ret;
ERR2:
	nm_bus_iface_deinit();
ERR1:
	return ret;
}
    7402:	4620      	mov	r0, r4
    7404:	bd38      	pop	{r3, r4, r5, pc}
	if ((REV(GET_CHIPID()) & 0xff0) != REV_3A0 && (REV(GET_CHIPID()) & 0xff0) != REV_B0) {
    7406:	f7ff fcb3 	bl	6d70 <nmi_get_chipid>
    740a:	f400 607f 	and.w	r0, r0, #4080	; 0xff0
    740e:	f5b0 7f68 	cmp.w	r0, #928	; 0x3a0
    7412:	d00c      	beq.n	742e <nm_drv_init+0x46>
    7414:	f7ff fcac 	bl	6d70 <nmi_get_chipid>
    7418:	f400 607f 	and.w	r0, r0, #4080	; 0xff0
    741c:	f5b0 7f2c 	cmp.w	r0, #688	; 0x2b0
    7420:	d005      	beq.n	742e <nm_drv_init+0x46>
		ret = M2M_ERR_INVALID;
    7422:	f06f 040f 	mvn.w	r4, #15
	nm_bus_iface_deinit();
    7426:	f7ff fed1 	bl	71cc <nm_bus_iface_deinit>
}
    742a:	4620      	mov	r0, r4
    742c:	bd38      	pop	{r3, r4, r5, pc}
	nm_spi_init();
    742e:	f000 fa17 	bl	7860 <nm_spi_init>
	ret = wait_for_bootrom(u8Mode);
    7432:	4628      	mov	r0, r5
    7434:	f7ff fd64 	bl	6f00 <wait_for_bootrom>
	if (M2M_SUCCESS != ret) {
    7438:	4604      	mov	r4, r0
    743a:	2800      	cmp	r0, #0
    743c:	d1f3      	bne.n	7426 <nm_drv_init+0x3e>
	ret = wait_for_firmware_start(u8Mode);
    743e:	4628      	mov	r0, r5
    7440:	f7ff fe00 	bl	7044 <wait_for_firmware_start>
	if (M2M_SUCCESS != ret) {
    7444:	4604      	mov	r4, r0
    7446:	2800      	cmp	r0, #0
    7448:	d1ed      	bne.n	7426 <nm_drv_init+0x3e>
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    744a:	3d02      	subs	r5, #2
    744c:	b2ed      	uxtb	r5, r5
    744e:	2d01      	cmp	r5, #1
    7450:	d9d7      	bls.n	7402 <nm_drv_init+0x1a>
	ret = enable_interrupts();
    7452:	f7ff fc63 	bl	6d1c <enable_interrupts>
	if (M2M_SUCCESS != ret) {
    7456:	2800      	cmp	r0, #0
    7458:	d0d3      	beq.n	7402 <nm_drv_init+0x1a>
    745a:	4604      	mov	r4, r0
    745c:	e7e3      	b.n	7426 <nm_drv_init+0x3e>
		u8Mode = M2M_WIFI_MODE_NORMAL;
    745e:	2501      	movs	r5, #1
    7460:	e7ca      	b.n	73f8 <nm_drv_init+0x10>
    7462:	bf00      	nop

00007464 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    7464:	b510      	push	{r4, lr}
#ifdef ARDUINO
	(void)arg; // Silence "unused" warning
#endif
	sint8 ret;

	ret = chip_deinit();
    7466:	f7ff fe29 	bl	70bc <chip_deinit>
	if (M2M_SUCCESS != ret) {
    746a:	4604      	mov	r4, r0
    746c:	b108      	cbz	r0, 7472 <nm_drv_deinit+0xe>
	nm_spi_deinit();
#endif

ERR1:
	return ret;
}
    746e:	4620      	mov	r0, r4
    7470:	bd10      	pop	{r4, pc}
	ret = spi_flash_enable(0);
    7472:	f000 ff9b 	bl	83ac <spi_flash_enable>
	if (M2M_SUCCESS != ret) {
    7476:	4604      	mov	r4, r0
    7478:	2800      	cmp	r0, #0
    747a:	d1f8      	bne.n	746e <nm_drv_deinit+0xa>
	ret = nm_bus_iface_deinit();
    747c:	f7ff fea6 	bl	71cc <nm_bus_iface_deinit>
	if (M2M_SUCCESS != ret) {
    7480:	4604      	mov	r4, r0
    7482:	2800      	cmp	r0, #0
    7484:	d1f3      	bne.n	746e <nm_drv_deinit+0xa>
	nm_spi_deinit();
    7486:	f000 fa2f 	bl	78e8 <nm_spi_deinit>
}
    748a:	4620      	mov	r0, r4
    748c:	bd10      	pop	{r4, pc}
    748e:	bf00      	nop

00007490 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    7490:	b530      	push	{r4, r5, lr}
    7492:	b087      	sub	sp, #28
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
	switch (cmd) {
    7494:	f1a0 04c3 	sub.w	r4, r0, #195	; 0xc3
{
    7498:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
	bc[0] = cmd;
    749c:	f88d 0000 	strb.w	r0, [sp]
	switch (cmd) {
    74a0:	2c0c      	cmp	r4, #12
    74a2:	d83e      	bhi.n	7522 <spi_cmd+0x92>
    74a4:	e8df f004 	tbb	[pc, r4]
    74a8:	0707517e 	.word	0x0707517e
    74ac:	60734040 	.word	0x60734040
    74b0:	3d3d3d3d 	.word	0x3d3d3d3d
    74b4:	69          	.byte	0x69
    74b5:	00          	.byte	0x00
		bc[2] = (uint8)adr;
		bc[3] = 0x00;
		len = 5;
		break;
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    74b6:	2300      	movs	r3, #0
    74b8:	f88d 3001 	strb.w	r3, [sp, #1]
		bc[2] = 0x00;
    74bc:	f8ad 3002 	strh.w	r3, [sp, #2]
		bc[3] = 0x00;
		len = 5;
    74c0:	f04f 0c05 	mov.w	ip, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    74c4:	4b43      	ldr	r3, [pc, #268]	; (75d4 <spi_cmd+0x144>)
    74c6:	781b      	ldrb	r3, [r3, #0]
    74c8:	bb2b      	cbnz	r3, 7516 <spi_cmd+0x86>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    74ca:	f1ad 0302 	sub.w	r3, sp, #2
    74ce:	466d      	mov	r5, sp
    74d0:	eb03 010c 	add.w	r1, r3, ip
    74d4:	4c40      	ldr	r4, [pc, #256]	; (75d8 <spi_cmd+0x148>)
    74d6:	f10c 3eff 	add.w	lr, ip, #4294967295
	while (len--)
    74da:	462a      	mov	r2, r5
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    74dc:	237f      	movs	r3, #127	; 0x7f
    74de:	e001      	b.n	74e4 <spi_cmd+0x54>
		crc = crc7_byte(crc, *buffer++);
    74e0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
	return crc7_syndrome_table[(crc << 1) ^ data];
    74e4:	ea80 0043 	eor.w	r0, r0, r3, lsl #1
	while (len--)
    74e8:	4291      	cmp	r1, r2
	return crc7_syndrome_table[(crc << 1) ^ data];
    74ea:	5c23      	ldrb	r3, [r4, r0]
	while (len--)
    74ec:	d1f8      	bne.n	74e0 <spi_cmd+0x50>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    74ee:	f10e 0218 	add.w	r2, lr, #24
    74f2:	446a      	add	r2, sp
    74f4:	005b      	lsls	r3, r3, #1
    74f6:	f802 3c18 	strb.w	r3, [r2, #-24]
	spi.pu8OutBuf = NULL;
    74fa:	2300      	movs	r3, #0
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    74fc:	a903      	add	r1, sp, #12
    74fe:	2003      	movs	r0, #3
	spi.pu8InBuf = b;
    7500:	9503      	str	r5, [sp, #12]
	spi.pu8OutBuf = NULL;
    7502:	9304      	str	r3, [sp, #16]
		else
			len-=1;

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    7504:	f8ad c014 	strh.w	ip, [sp, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7508:	f7fe fd14 	bl	5f34 <nm_bus_ioctl>
		result = N_FAIL;
    750c:	fab0 f080 	clz	r0, r0
    7510:	0940      	lsrs	r0, r0, #5
			result = N_FAIL;
		}
	}

	return result;
}
    7512:	b007      	add	sp, #28
    7514:	bd30      	pop	{r4, r5, pc}
			len-=1;
    7516:	f10c 3cff 	add.w	ip, ip, #4294967295
    751a:	fa5f fc8c 	uxtb.w	ip, ip
    751e:	466d      	mov	r5, sp
    7520:	e7eb      	b.n	74fa <spi_cmd+0x6a>
	switch (cmd) {
    7522:	2000      	movs	r0, #0
}
    7524:	b007      	add	sp, #28
    7526:	bd30      	pop	{r4, r5, pc}
		bc[1] = (uint8)(adr >> 16);
    7528:	0c0a      	lsrs	r2, r1, #16
		bc[4] = (uint8)(sz >> 16);
    752a:	2400      	movs	r4, #0
		bc[2] = (uint8)(adr >> 8);
    752c:	ba49      	rev16	r1, r1
		bc[1] = (uint8)(adr >> 16);
    752e:	f88d 2001 	strb.w	r2, [sp, #1]
		bc[5] = (uint8)(sz >> 8);
    7532:	0a1a      	lsrs	r2, r3, #8
		bc[2] = (uint8)(adr >> 8);
    7534:	f8ad 1002 	strh.w	r1, [sp, #2]
		bc[4] = (uint8)(sz >> 16);
    7538:	f88d 4004 	strb.w	r4, [sp, #4]
		bc[5] = (uint8)(sz >> 8);
    753c:	f88d 2005 	strb.w	r2, [sp, #5]
		bc[6] = (uint8)(sz);
    7540:	f88d 3006 	strb.w	r3, [sp, #6]
		len = 8;
    7544:	f04f 0c08 	mov.w	ip, #8
    7548:	e7bc      	b.n	74c4 <spi_cmd+0x34>
		bc[1] = (uint8)(adr >> 8);
    754a:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
    754e:	b10d      	cbz	r5, 7554 <spi_cmd+0xc4>
    7550:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7554:	f88d 3001 	strb.w	r3, [sp, #1]
		bc[3] = 0x00;
    7558:	2300      	movs	r3, #0
		bc[2] = (uint8)adr;
    755a:	f88d 1002 	strb.w	r1, [sp, #2]
		bc[3] = 0x00;
    755e:	f88d 3003 	strb.w	r3, [sp, #3]
		len = 5;
    7562:	f04f 0c05 	mov.w	ip, #5
    7566:	e7ad      	b.n	74c4 <spi_cmd+0x34>
		bc[1] = (uint8)(adr >> 16);
    7568:	0c0b      	lsrs	r3, r1, #16
		bc[2] = (uint8)(adr >> 8);
    756a:	ba49      	rev16	r1, r1
		bc[1] = (uint8)(adr >> 16);
    756c:	f88d 3001 	strb.w	r3, [sp, #1]
		bc[2] = (uint8)(adr >> 8);
    7570:	f8ad 1002 	strh.w	r1, [sp, #2]
		len = 5;
    7574:	f04f 0c05 	mov.w	ip, #5
    7578:	e7a4      	b.n	74c4 <spi_cmd+0x34>
		bc[1] = 0xff;
    757a:	22ff      	movs	r2, #255	; 0xff
		bc[2] = 0xff;
    757c:	f64f 73ff 	movw	r3, #65535	; 0xffff
		bc[1] = 0xff;
    7580:	f88d 2001 	strb.w	r2, [sp, #1]
		bc[2] = 0xff;
    7584:	f8ad 3002 	strh.w	r3, [sp, #2]
		len = 5;
    7588:	f04f 0c05 	mov.w	ip, #5
    758c:	e79a      	b.n	74c4 <spi_cmd+0x34>
		bc[1] = (uint8)(adr >> 16);
    758e:	0c0b      	lsrs	r3, r1, #16
    7590:	ba12      	rev	r2, r2
		bc[2] = (uint8)(adr >> 8);
    7592:	ba49      	rev16	r1, r1
		bc[1] = (uint8)(adr >> 16);
    7594:	f88d 3001 	strb.w	r3, [sp, #1]
		bc[2] = (uint8)(adr >> 8);
    7598:	f8ad 1002 	strh.w	r1, [sp, #2]
		bc[4] = (uint8)(u32data >> 24);
    759c:	9201      	str	r2, [sp, #4]
		len = 9;
    759e:	f04f 0c09 	mov.w	ip, #9
    75a2:	e78f      	b.n	74c4 <spi_cmd+0x34>
		bc[1] = (uint8)(adr >> 8);
    75a4:	f3c1 2307 	ubfx	r3, r1, #8, #8
		if(clockless)  bc[1] |= (1 << 7);
    75a8:	b10d      	cbz	r5, 75ae <spi_cmd+0x11e>
    75aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    75ae:	f88d 3001 	strb.w	r3, [sp, #1]
		bc[3] = (uint8)(u32data >> 24);
    75b2:	0e13      	lsrs	r3, r2, #24
		bc[4] = (uint8)(u32data >> 16);
    75b4:	0c14      	lsrs	r4, r2, #16
		bc[3] = (uint8)(u32data >> 24);
    75b6:	f88d 3003 	strb.w	r3, [sp, #3]
		bc[5] = (uint8)(u32data >> 8);
    75ba:	0a13      	lsrs	r3, r2, #8
		bc[2] = (uint8)(adr);
    75bc:	f88d 1002 	strb.w	r1, [sp, #2]
		bc[4] = (uint8)(u32data >> 16);
    75c0:	f88d 4004 	strb.w	r4, [sp, #4]
		bc[5] = (uint8)(u32data >> 8);
    75c4:	f88d 3005 	strb.w	r3, [sp, #5]
		bc[6] = (uint8)(u32data);
    75c8:	f88d 2006 	strb.w	r2, [sp, #6]
		len = 8;
    75cc:	f04f 0c08 	mov.w	ip, #8
    75d0:	e778      	b.n	74c4 <spi_cmd+0x34>
    75d2:	bf00      	nop
    75d4:	1fff7784 	.word	0x1fff7784
    75d8:	00011ed0 	.word	0x00011ed0

000075dc <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    75dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    75e0:	f100 023d 	add.w	r2, r0, #61	; 0x3d
    75e4:	b2d2      	uxtb	r2, r2
    75e6:	f241 030c 	movw	r3, #4108	; 0x100c
    75ea:	40d3      	lsrs	r3, r2
    75ec:	07db      	lsls	r3, r3, #31
{
    75ee:	b085      	sub	sp, #20
    75f0:	4607      	mov	r7, r0
	if ((cmd == CMD_RESET) ||
    75f2:	d432      	bmi.n	765a <spi_cmd_rsp+0x7e>
    75f4:	f10d 0503 	add.w	r5, sp, #3
    75f8:	ae01      	add	r6, sp, #4
{
    75fa:	240b      	movs	r4, #11
	spi.pu8InBuf = NULL;
    75fc:	f04f 0900 	mov.w	r9, #0
	spi.u16Sz = sz;
    7600:	f04f 0801 	mov.w	r8, #1
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7604:	4631      	mov	r1, r6
    7606:	2003      	movs	r0, #3
	spi.pu8InBuf = NULL;
    7608:	f8cd 9004 	str.w	r9, [sp, #4]
	spi.pu8OutBuf = b;
    760c:	9502      	str	r5, [sp, #8]
	spi.u16Sz = sz;
    760e:	f8ad 800c 	strh.w	r8, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7612:	f7fe fc8f 	bl	5f34 <nm_bus_ioctl>
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    7616:	1e63      	subs	r3, r4, #1
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    7618:	bb70      	cbnz	r0, 7678 <spi_cmd_rsp+0x9c>
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    761a:	f89d 2003 	ldrb.w	r2, [sp, #3]
    761e:	42ba      	cmp	r2, r7
    7620:	d002      	beq.n	7628 <spi_cmd_rsp+0x4c>
    7622:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    7626:	d1ed      	bne.n	7604 <spi_cmd_rsp+0x28>
    7628:	240b      	movs	r4, #11
	spi.pu8InBuf = NULL;
    762a:	f04f 0800 	mov.w	r8, #0
	spi.u16Sz = sz;
    762e:	2701      	movs	r7, #1
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7630:	4631      	mov	r1, r6
    7632:	2003      	movs	r0, #3
	spi.pu8InBuf = NULL;
    7634:	f8cd 8004 	str.w	r8, [sp, #4]
	spi.pu8OutBuf = b;
    7638:	9502      	str	r5, [sp, #8]
	spi.u16Sz = sz;
    763a:	f8ad 700c 	strh.w	r7, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    763e:	f7fe fc79 	bl	5f34 <nm_bus_ioctl>
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    7642:	1e63      	subs	r3, r4, #1
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    7644:	b9c0      	cbnz	r0, 7678 <spi_cmd_rsp+0x9c>
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    7646:	f89d 2003 	ldrb.w	r2, [sp, #3]
    764a:	b112      	cbz	r2, 7652 <spi_cmd_rsp+0x76>
    764c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    7650:	d1ee      	bne.n	7630 <spi_cmd_rsp+0x54>
	sint8 result = N_OK;
    7652:	2001      	movs	r0, #1

_fail_:

	return result;
}
    7654:	b005      	add	sp, #20
    7656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    765a:	ae01      	add	r6, sp, #4
	spi.pu8InBuf = NULL;
    765c:	2200      	movs	r2, #0
	spi.pu8OutBuf = b;
    765e:	f10d 0503 	add.w	r5, sp, #3
	spi.u16Sz = sz;
    7662:	2301      	movs	r3, #1
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7664:	4631      	mov	r1, r6
    7666:	2003      	movs	r0, #3
	spi.pu8InBuf = NULL;
    7668:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    766a:	9502      	str	r5, [sp, #8]
	spi.u16Sz = sz;
    766c:	f8ad 300c 	strh.w	r3, [sp, #12]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7670:	f7fe fc60 	bl	5f34 <nm_bus_ioctl>
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    7674:	2800      	cmp	r0, #0
    7676:	d0c0      	beq.n	75fa <spi_cmd_rsp+0x1e>
			result = N_FAIL;
    7678:	2000      	movs	r0, #0
}
    767a:	b005      	add	sp, #20
    767c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00007680 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    7680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7684:	b089      	sub	sp, #36	; 0x24
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    7686:	f04f 0800 	mov.w	r8, #0
{
    768a:	4682      	mov	sl, r0
    768c:	460f      	mov	r7, r1
    768e:	9201      	str	r2, [sp, #4]
    7690:	f10d 060f 	add.w	r6, sp, #15
	spi.pu8InBuf = NULL;
    7694:	4645      	mov	r5, r8
	do {
		if (sz <= DATA_PKT_SZ)
    7696:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
    769a:	46b9      	mov	r9, r7
			nbytes = DATA_PKT_SZ;

		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
    769c:	f04f 0b0a 	mov.w	fp, #10
    76a0:	bf28      	it	cs
    76a2:	f44f 5900 	movcs.w	r9, #8192	; 0x2000
	spi.u16Sz = sz;
    76a6:	2401      	movs	r4, #1
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    76a8:	a905      	add	r1, sp, #20
    76aa:	2003      	movs	r0, #3
	spi.pu8InBuf = NULL;
    76ac:	9505      	str	r5, [sp, #20]
	spi.pu8OutBuf = b;
    76ae:	9606      	str	r6, [sp, #24]
	spi.u16Sz = sz;
    76b0:	f8ad 401c 	strh.w	r4, [sp, #28]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    76b4:	f7fe fc3e 	bl	5f34 <nm_bus_ioctl>
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);
    76b8:	f10b 3cff 	add.w	ip, fp, #4294967295
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    76bc:	4603      	mov	r3, r0
    76be:	b948      	cbnz	r0, 76d4 <spi_data_read+0x54>
			if (((rsp >> 4) & 0xf) == 0xf)
    76c0:	f89d 100f 	ldrb.w	r1, [sp, #15]
    76c4:	0909      	lsrs	r1, r1, #4
    76c6:	290f      	cmp	r1, #15
    76c8:	d008      	beq.n	76dc <spi_data_read+0x5c>
    76ca:	fa0f fb8c 	sxth.w	fp, ip
		} while (retry--);
    76ce:	f1bb 3fff 	cmp.w	fp, #4294967295
    76d2:	d1e9      	bne.n	76a8 <spi_data_read+0x28>
		retry = SPI_RESP_RETRY_COUNT;
    76d4:	2000      	movs	r0, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    76d6:	b009      	add	sp, #36	; 0x24
    76d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (retry <= 0) {
    76dc:	f1bb 0f00 	cmp.w	fp, #0
    76e0:	d0f8      	beq.n	76d4 <spi_data_read+0x54>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    76e2:	eb0a 0208 	add.w	r2, sl, r8
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    76e6:	a905      	add	r1, sp, #20
    76e8:	2003      	movs	r0, #3
	spi.pu8InBuf = NULL;
    76ea:	9305      	str	r3, [sp, #20]
	spi.pu8OutBuf = b;
    76ec:	9206      	str	r2, [sp, #24]
	spi.u16Sz = sz;
    76ee:	f8ad 901c 	strh.w	r9, [sp, #28]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    76f2:	f7fe fc1f 	bl	5f34 <nm_bus_ioctl>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    76f6:	2800      	cmp	r0, #0
    76f8:	d1ec      	bne.n	76d4 <spi_data_read+0x54>
			if (!gu8Crc_off) {
    76fa:	4b0f      	ldr	r3, [pc, #60]	; (7738 <spi_data_read+0xb8>)
    76fc:	9a01      	ldr	r2, [sp, #4]
    76fe:	781b      	ldrb	r3, [r3, #0]
    7700:	4313      	orrs	r3, r2
    7702:	d00b      	beq.n	771c <spi_data_read+0x9c>
		sz -= nbytes;
    7704:	eba7 0709 	sub.w	r7, r7, r9
		ix += nbytes;
    7708:	44c8      	add	r8, r9
		sz -= nbytes;
    770a:	b2bf      	uxth	r7, r7
		ix += nbytes;
    770c:	fa0f f888 	sxth.w	r8, r8
	} while (sz);
    7710:	2f00      	cmp	r7, #0
    7712:	d1c0      	bne.n	7696 <spi_data_read+0x16>
    7714:	2001      	movs	r0, #1
}
    7716:	b009      	add	sp, #36	; 0x24
    7718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	spi.pu8InBuf = NULL;
    771c:	9305      	str	r3, [sp, #20]
	spi.pu8OutBuf = b;
    771e:	ab04      	add	r3, sp, #16
    7720:	9306      	str	r3, [sp, #24]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7722:	a905      	add	r1, sp, #20
	spi.u16Sz = sz;
    7724:	2302      	movs	r3, #2
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7726:	2003      	movs	r0, #3
	spi.u16Sz = sz;
    7728:	f8ad 301c 	strh.w	r3, [sp, #28]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    772c:	f7fe fc02 	bl	5f34 <nm_bus_ioctl>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    7730:	2800      	cmp	r0, #0
    7732:	d0e7      	beq.n	7704 <spi_data_read+0x84>
    7734:	e7ce      	b.n	76d4 <spi_data_read+0x54>
    7736:	bf00      	nop
    7738:	1fff7784 	.word	0x1fff7784

0000773c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    773c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7740:	2830      	cmp	r0, #48	; 0x30
    7742:	b082      	sub	sp, #8
    7744:	4606      	mov	r6, r0
    7746:	4688      	mov	r8, r1
    7748:	bf95      	itete	ls
    774a:	27c3      	movls	r7, #195	; 0xc3
    774c:	27c9      	movhi	r7, #201	; 0xc9
    774e:	f04f 0901 	movls.w	r9, #1
    7752:	f04f 0900 	movhi.w	r9, #0
    7756:	250a      	movs	r5, #10
#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    7758:	f04f 0a00 	mov.w	sl, #0
    775c:	e014      	b.n	7788 <spi_write_reg+0x4c>
		nm_bsp_sleep(1);
    775e:	2001      	movs	r0, #1
    7760:	f7fe fb9e 	bl	5ea0 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    7764:	2300      	movs	r3, #0
    7766:	461a      	mov	r2, r3
    7768:	4619      	mov	r1, r3
    776a:	f8cd a000 	str.w	sl, [sp]
    776e:	20cf      	movs	r0, #207	; 0xcf
    7770:	f7ff fe8e 	bl	7490 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    7774:	20cf      	movs	r0, #207	; 0xcf
    7776:	f7ff ff31 	bl	75dc <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
		nm_bsp_sleep(1);
		retry--;
		if(retry) goto _RETRY_;
    777a:	3d01      	subs	r5, #1
		nm_bsp_sleep(1);
    777c:	2001      	movs	r0, #1
    777e:	f7fe fb8f 	bl	5ea0 <nm_bsp_sleep>
		if(retry) goto _RETRY_;
    7782:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    7786:	d010      	beq.n	77aa <spi_write_reg+0x6e>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    7788:	2304      	movs	r3, #4
    778a:	4642      	mov	r2, r8
    778c:	4631      	mov	r1, r6
    778e:	f8cd 9000 	str.w	r9, [sp]
    7792:	4638      	mov	r0, r7
    7794:	f7ff fe7c 	bl	7490 <spi_cmd>
	if (result != N_OK) {
    7798:	2801      	cmp	r0, #1
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    779a:	4604      	mov	r4, r0
	if (result != N_OK) {
    779c:	d1df      	bne.n	775e <spi_write_reg+0x22>
	result = spi_cmd_rsp(cmd);
    779e:	4638      	mov	r0, r7
    77a0:	f7ff ff1c 	bl	75dc <spi_cmd_rsp>
	if (result != N_OK) {
    77a4:	2801      	cmp	r0, #1
	result = spi_cmd_rsp(cmd);
    77a6:	4604      	mov	r4, r0
	if (result != N_OK) {
    77a8:	d1d9      	bne.n	775e <spi_write_reg+0x22>
	}

	return result;
}
    77aa:	4620      	mov	r0, r4
    77ac:	b002      	add	sp, #8
    77ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    77b2:	bf00      	nop

000077b4 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    77b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    77b8:	28ff      	cmp	r0, #255	; 0xff
    77ba:	b084      	sub	sp, #16
    77bc:	4605      	mov	r5, r0
    77be:	4689      	mov	r9, r1
    77c0:	bf95      	itete	ls
    77c2:	26c4      	movls	r6, #196	; 0xc4
    77c4:	26ca      	movhi	r6, #202	; 0xca
    77c6:	2701      	movls	r7, #1
    77c8:	2700      	movhi	r7, #0
    77ca:	f04f 0a0a 	mov.w	sl, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    77ce:	f04f 0800 	mov.w	r8, #0
    77d2:	e015      	b.n	7800 <spi_read_reg+0x4c>
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    77d4:	2001      	movs	r0, #1
    77d6:	f7fe fb63 	bl	5ea0 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    77da:	2300      	movs	r3, #0
    77dc:	461a      	mov	r2, r3
    77de:	4619      	mov	r1, r3
    77e0:	f8cd 8000 	str.w	r8, [sp]
    77e4:	20cf      	movs	r0, #207	; 0xcf
    77e6:	f7ff fe53 	bl	7490 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    77ea:	20cf      	movs	r0, #207	; 0xcf
    77ec:	f7ff fef6 	bl	75dc <spi_cmd_rsp>
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
		nm_bsp_sleep(1);
    77f0:	2001      	movs	r0, #1
    77f2:	f7fe fb55 	bl	5ea0 <nm_bsp_sleep>
		retry--;
		if(retry) goto _RETRY_;
    77f6:	f10a 33ff 	add.w	r3, sl, #4294967295
    77fa:	f013 0aff 	ands.w	sl, r3, #255	; 0xff
    77fe:	d01a      	beq.n	7836 <spi_read_reg+0x82>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    7800:	2304      	movs	r3, #4
    7802:	2200      	movs	r2, #0
    7804:	4629      	mov	r1, r5
    7806:	9700      	str	r7, [sp, #0]
    7808:	4630      	mov	r0, r6
    780a:	f7ff fe41 	bl	7490 <spi_cmd>
	if (result != N_OK) {
    780e:	2801      	cmp	r0, #1
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    7810:	4604      	mov	r4, r0
	if (result != N_OK) {
    7812:	d1df      	bne.n	77d4 <spi_read_reg+0x20>
	result = spi_cmd_rsp(cmd);
    7814:	4630      	mov	r0, r6
    7816:	f7ff fee1 	bl	75dc <spi_cmd_rsp>
	if (result != N_OK) {
    781a:	2801      	cmp	r0, #1
	result = spi_cmd_rsp(cmd);
    781c:	4604      	mov	r4, r0
	if (result != N_OK) {
    781e:	d1d9      	bne.n	77d4 <spi_read_reg+0x20>
	result = spi_data_read(&tmp[0], 4, clockless);
    7820:	463a      	mov	r2, r7
    7822:	2104      	movs	r1, #4
    7824:	a803      	add	r0, sp, #12
    7826:	f7ff ff2b 	bl	7680 <spi_data_read>
	if (result != N_OK) {
    782a:	2801      	cmp	r0, #1
	result = spi_data_read(&tmp[0], 4, clockless);
    782c:	4604      	mov	r4, r0
	if (result != N_OK) {
    782e:	d1d1      	bne.n	77d4 <spi_read_reg+0x20>
	*u32data = tmp[0] |
    7830:	9b03      	ldr	r3, [sp, #12]
    7832:	f8c9 3000 	str.w	r3, [r9]
	}
		
	return result;
}
    7836:	4620      	mov	r0, r4
    7838:	b004      	add	sp, #16
    783a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    783e:	bf00      	nop

00007840 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    7840:	b510      	push	{r4, lr}
    7842:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    7844:	2400      	movs	r4, #0
    7846:	4623      	mov	r3, r4
    7848:	4622      	mov	r2, r4
    784a:	4621      	mov	r1, r4
    784c:	9400      	str	r4, [sp, #0]
    784e:	20cf      	movs	r0, #207	; 0xcf
    7850:	f7ff fe1e 	bl	7490 <spi_cmd>
	spi_cmd_rsp(CMD_RESET);
    7854:	20cf      	movs	r0, #207	; 0xcf
    7856:	f7ff fec1 	bl	75dc <spi_cmd_rsp>
	return M2M_SUCCESS;
}
    785a:	4620      	mov	r0, r4
    785c:	b002      	add	sp, #8
    785e:	bd10      	pop	{r4, pc}

00007860 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    7860:	b510      	push	{r4, lr}
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    7862:	4c20      	ldr	r4, [pc, #128]	; (78e4 <nm_spi_init+0x84>)
{
    7864:	b084      	sub	sp, #16
	uint32 reg = 0;
    7866:	2300      	movs	r3, #0

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    7868:	a902      	add	r1, sp, #8
    786a:	f64e 0024 	movw	r0, #59428	; 0xe824
	uint32 reg = 0;
    786e:	9302      	str	r3, [sp, #8]
	gu8Crc_off = 0;
    7870:	7023      	strb	r3, [r4, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    7872:	f7ff ff9f 	bl	77b4 <spi_read_reg>
    7876:	b338      	cbz	r0, 78c8 <nm_spi_init+0x68>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
			return 0;
		}
	}
	if(gu8Crc_off == 0)
    7878:	7823      	ldrb	r3, [r4, #0]
    787a:	b1b3      	cbz	r3, 78aa <nm_spi_init+0x4a>
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    787c:	a901      	add	r1, sp, #4
    787e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    7882:	f7ff ff97 	bl	77b4 <spi_read_reg>
    7886:	b348      	cbz	r0, 78dc <nm_spi_init+0x7c>
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    7888:	a903      	add	r1, sp, #12
    788a:	f64e 0024 	movw	r0, #59428	; 0xe824
    788e:	f7ff ff91 	bl	77b4 <spi_read_reg>

	return u32Val;
    7892:	9903      	ldr	r1, [sp, #12]
	val32 &= ~(0x7 << 4);
    7894:	f021 0170 	bic.w	r1, r1, #112	; 0x70
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    7898:	f64e 0024 	movw	r0, #59428	; 0xe824
    789c:	f041 0150 	orr.w	r1, r1, #80	; 0x50
    78a0:	f7ff ff4c 	bl	773c <spi_write_reg>
	return M2M_SUCCESS;
    78a4:	2000      	movs	r0, #0
}
    78a6:	b004      	add	sp, #16
    78a8:	bd10      	pop	{r4, pc}
		reg &= ~0x70;
    78aa:	9902      	ldr	r1, [sp, #8]
    78ac:	f021 017c 	bic.w	r1, r1, #124	; 0x7c
		reg |= (0x5 << 4);
    78b0:	f041 0150 	orr.w	r1, r1, #80	; 0x50
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    78b4:	f64e 0024 	movw	r0, #59428	; 0xe824
		reg |= (0x5 << 4);
    78b8:	9102      	str	r1, [sp, #8]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    78ba:	f7ff ff3f 	bl	773c <spi_write_reg>
    78be:	2800      	cmp	r0, #0
    78c0:	d0f0      	beq.n	78a4 <nm_spi_init+0x44>
		gu8Crc_off = 1;
    78c2:	2301      	movs	r3, #1
    78c4:	7023      	strb	r3, [r4, #0]
    78c6:	e7d9      	b.n	787c <nm_spi_init+0x1c>
		gu8Crc_off = 1;
    78c8:	2301      	movs	r3, #1
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    78ca:	a902      	add	r1, sp, #8
    78cc:	f64e 0024 	movw	r0, #59428	; 0xe824
		gu8Crc_off = 1;
    78d0:	7023      	strb	r3, [r4, #0]
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    78d2:	f7ff ff6f 	bl	77b4 <spi_read_reg>
    78d6:	2800      	cmp	r0, #0
    78d8:	d1ce      	bne.n	7878 <nm_spi_init+0x18>
    78da:	e7e3      	b.n	78a4 <nm_spi_init+0x44>
		return M2M_ERR_BUS_FAIL;
    78dc:	f06f 0005 	mvn.w	r0, #5
    78e0:	e7e1      	b.n	78a6 <nm_spi_init+0x46>
    78e2:	bf00      	nop
    78e4:	1fff7784 	.word	0x1fff7784

000078e8 <nm_spi_deinit>:
	gu8Crc_off = 0;
    78e8:	4b01      	ldr	r3, [pc, #4]	; (78f0 <nm_spi_deinit+0x8>)
    78ea:	2000      	movs	r0, #0
    78ec:	7018      	strb	r0, [r3, #0]
}
    78ee:	4770      	bx	lr
    78f0:	1fff7784 	.word	0x1fff7784

000078f4 <nm_spi_read_reg>:
{
    78f4:	b500      	push	{lr}
    78f6:	b083      	sub	sp, #12
	spi_read_reg(u32Addr, &u32Val);
    78f8:	a901      	add	r1, sp, #4
    78fa:	f7ff ff5b 	bl	77b4 <spi_read_reg>
}
    78fe:	9801      	ldr	r0, [sp, #4]
    7900:	b003      	add	sp, #12
    7902:	f85d fb04 	ldr.w	pc, [sp], #4
    7906:	bf00      	nop

00007908 <nm_spi_read_reg_with_ret>:
{
    7908:	b508      	push	{r3, lr}
	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    790a:	f7ff ff53 	bl	77b4 <spi_read_reg>
	else s8Ret = M2M_ERR_BUS_FAIL;
    790e:	2801      	cmp	r0, #1
}
    7910:	bf14      	ite	ne
    7912:	f06f 0005 	mvnne.w	r0, #5
    7916:	2000      	moveq	r0, #0
    7918:	bd08      	pop	{r3, pc}
    791a:	bf00      	nop

0000791c <nm_spi_write_reg>:
{
    791c:	b508      	push	{r3, lr}
	s8Ret = spi_write_reg(u32Addr, u32Val);
    791e:	f7ff ff0d 	bl	773c <spi_write_reg>

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    7922:	2801      	cmp	r0, #1

	return s8Ret;
}
    7924:	bf14      	ite	ne
    7926:	f06f 0005 	mvnne.w	r0, #5
    792a:	2000      	moveq	r0, #0
    792c:	bd08      	pop	{r3, pc}
    792e:	bf00      	nop

00007930 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    7930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8 single_byte_workaround = 0;
    7934:	f04f 0800 	mov.w	r8, #0
{
    7938:	b085      	sub	sp, #20
    793a:	4607      	mov	r7, r0
    793c:	4689      	mov	r9, r1
    793e:	4615      	mov	r5, r2
    7940:	240a      	movs	r4, #10
	result = spi_cmd(cmd, addr, 0, size,0);
    7942:	4646      	mov	r6, r8
    7944:	e013      	b.n	796e <nm_spi_read_block+0x3e>
		nm_bsp_sleep(1);
    7946:	2001      	movs	r0, #1
    7948:	f7fe faaa 	bl	5ea0 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    794c:	2300      	movs	r3, #0
    794e:	461a      	mov	r2, r3
    7950:	4619      	mov	r1, r3
    7952:	9600      	str	r6, [sp, #0]
    7954:	20cf      	movs	r0, #207	; 0xcf
    7956:	f7ff fd9b 	bl	7490 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    795a:	20cf      	movs	r0, #207	; 0xcf
    795c:	f7ff fe3e 	bl	75dc <spi_cmd_rsp>
		nm_bsp_sleep(1);
    7960:	2001      	movs	r0, #1
    7962:	f7fe fa9d 	bl	5ea0 <nm_bsp_sleep>
		if(retry) goto _RETRY_;
    7966:	1e63      	subs	r3, r4, #1
    7968:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    796c:	d027      	beq.n	79be <nm_spi_read_block+0x8e>
	if (size == 1)
    796e:	2d01      	cmp	r5, #1
    7970:	bf0c      	ite	eq
    7972:	2302      	moveq	r3, #2
	result = spi_cmd(cmd, addr, 0, size,0);
    7974:	462b      	movne	r3, r5
    7976:	f04f 0200 	mov.w	r2, #0
    797a:	f04f 00c8 	mov.w	r0, #200	; 0xc8
    797e:	4639      	mov	r1, r7
    7980:	9600      	str	r6, [sp, #0]
		single_byte_workaround = 1;
    7982:	bf04      	itt	eq
    7984:	46a8      	moveq	r8, r5
		size = 2;
    7986:	461d      	moveq	r5, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    7988:	f7ff fd82 	bl	7490 <spi_cmd>
	if (result != N_OK) {
    798c:	2801      	cmp	r0, #1
    798e:	d1da      	bne.n	7946 <nm_spi_read_block+0x16>
	result = spi_cmd_rsp(cmd);
    7990:	20c8      	movs	r0, #200	; 0xc8
    7992:	f7ff fe23 	bl	75dc <spi_cmd_rsp>
	if (result != N_OK) {
    7996:	2801      	cmp	r0, #1
    7998:	d1d5      	bne.n	7946 <nm_spi_read_block+0x16>
		result = spi_data_read(tmp, size,0);
    799a:	2200      	movs	r2, #0
	if (single_byte_workaround)
    799c:	f1b8 0f00 	cmp.w	r8, #0
    79a0:	d012      	beq.n	79c8 <nm_spi_read_block+0x98>
		result = spi_data_read(tmp, size,0);
    79a2:	4629      	mov	r1, r5
    79a4:	a803      	add	r0, sp, #12
    79a6:	f7ff fe6b 	bl	7680 <spi_data_read>
		buf[0] = tmp[0];
    79aa:	f89d 300c 	ldrb.w	r3, [sp, #12]
    79ae:	f889 3000 	strb.w	r3, [r9]
	if (result != N_OK) {
    79b2:	2801      	cmp	r0, #1
    79b4:	d1c7      	bne.n	7946 <nm_spi_read_block+0x16>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    79b6:	2000      	movs	r0, #0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    79b8:	b005      	add	sp, #20
    79ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    79be:	f06f 0005 	mvn.w	r0, #5
}
    79c2:	b005      	add	sp, #20
    79c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		result = spi_data_read(buf, size,0);
    79c8:	4642      	mov	r2, r8
    79ca:	4629      	mov	r1, r5
    79cc:	4648      	mov	r0, r9
    79ce:	f7ff fe57 	bl	7680 <spi_data_read>
    79d2:	e7ee      	b.n	79b2 <nm_spi_read_block+0x82>

000079d4 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    79d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    79d8:	4681      	mov	r9, r0
    79da:	b089      	sub	sp, #36	; 0x24
    79dc:	468b      	mov	fp, r1
    79de:	4617      	mov	r7, r2
    79e0:	260a      	movs	r6, #10
    79e2:	e014      	b.n	7a0e <nm_spi_write_block+0x3a>
		nm_bsp_sleep(1);
    79e4:	2001      	movs	r0, #1
    79e6:	f7fe fa5b 	bl	5ea0 <nm_bsp_sleep>
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    79ea:	2300      	movs	r3, #0
    79ec:	461a      	mov	r2, r3
    79ee:	4619      	mov	r1, r3
    79f0:	9300      	str	r3, [sp, #0]
    79f2:	20cf      	movs	r0, #207	; 0xcf
    79f4:	f7ff fd4c 	bl	7490 <spi_cmd>
		spi_cmd_rsp(CMD_RESET);
    79f8:	20cf      	movs	r0, #207	; 0xcf
    79fa:	f7ff fdef 	bl	75dc <spi_cmd_rsp>
		if(retry) goto _RETRY_;
    79fe:	3e01      	subs	r6, #1
		nm_bsp_sleep(1);
    7a00:	2001      	movs	r0, #1
    7a02:	f7fe fa4d 	bl	5ea0 <nm_bsp_sleep>
		if(retry) goto _RETRY_;
    7a06:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    7a0a:	f000 8084 	beq.w	7b16 <nm_spi_write_block+0x142>
	if (size == 1)
    7a0e:	2f01      	cmp	r7, #1
    7a10:	bf08      	it	eq
    7a12:	2702      	moveq	r7, #2
	result = spi_cmd(cmd, addr, 0, size,0);
    7a14:	2400      	movs	r4, #0
		size = 2;
    7a16:	463b      	mov	r3, r7
	result = spi_cmd(cmd, addr, 0, size,0);
    7a18:	9400      	str	r4, [sp, #0]
    7a1a:	4622      	mov	r2, r4
    7a1c:	4649      	mov	r1, r9
    7a1e:	20c7      	movs	r0, #199	; 0xc7
    7a20:	f7ff fd36 	bl	7490 <spi_cmd>
	if (result != N_OK) {
    7a24:	2801      	cmp	r0, #1
    7a26:	d1dd      	bne.n	79e4 <nm_spi_write_block+0x10>
	result = spi_cmd_rsp(cmd);
    7a28:	20c7      	movs	r0, #199	; 0xc7
    7a2a:	f7ff fdd7 	bl	75dc <spi_cmd_rsp>
	if (result != N_OK) {
    7a2e:	2801      	cmp	r0, #1
	result = spi_cmd_rsp(cmd);
    7a30:	4680      	mov	r8, r0
	if (result != N_OK) {
    7a32:	d1d7      	bne.n	79e4 <nm_spi_write_block+0x10>
	uint8 cmd, order, crc[2] = {0};
    7a34:	f8ad 4010 	strh.w	r4, [sp, #16]
	spi.pu8OutBuf = NULL;
    7a38:	463d      	mov	r5, r7
    7a3a:	e029      	b.n	7a90 <nm_spi_write_block+0xbc>
			if (sz <= DATA_PKT_SZ)
    7a3c:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
    7a40:	bf94      	ite	ls
    7a42:	23f3      	movls	r3, #243	; 0xf3
    7a44:	23f1      	movhi	r3, #241	; 0xf1
		cmd |= order;
    7a46:	f88d 300f 	strb.w	r3, [sp, #15]
	spi.pu8InBuf = b;
    7a4a:	f10d 030f 	add.w	r3, sp, #15
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7a4e:	a905      	add	r1, sp, #20
	spi.pu8InBuf = b;
    7a50:	9305      	str	r3, [sp, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7a52:	2003      	movs	r0, #3
	spi.pu8OutBuf = NULL;
    7a54:	2300      	movs	r3, #0
    7a56:	9306      	str	r3, [sp, #24]
	spi.u16Sz = sz;
    7a58:	f8ad 801c 	strh.w	r8, [sp, #28]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7a5c:	f7fe fa6a 	bl	5f34 <nm_bus_ioctl>
    7a60:	4603      	mov	r3, r0
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    7a62:	eb0b 0204 	add.w	r2, fp, r4
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7a66:	a905      	add	r1, sp, #20
    7a68:	2003      	movs	r0, #3
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    7a6a:	2b00      	cmp	r3, #0
    7a6c:	d1ba      	bne.n	79e4 <nm_spi_write_block+0x10>
	spi.pu8InBuf = b;
    7a6e:	9205      	str	r2, [sp, #20]
	spi.pu8OutBuf = NULL;
    7a70:	9306      	str	r3, [sp, #24]
	spi.u16Sz = sz;
    7a72:	f8ad a01c 	strh.w	sl, [sp, #28]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7a76:	f7fe fa5d 	bl	5f34 <nm_bus_ioctl>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    7a7a:	2800      	cmp	r0, #0
    7a7c:	d1b2      	bne.n	79e4 <nm_spi_write_block+0x10>
		if (!gu8Crc_off) {
    7a7e:	4b2a      	ldr	r3, [pc, #168]	; (7b28 <nm_spi_write_block+0x154>)
    7a80:	781b      	ldrb	r3, [r3, #0]
    7a82:	b1ab      	cbz	r3, 7ab0 <nm_spi_write_block+0xdc>
		sz -= nbytes;
    7a84:	eba5 050a 	sub.w	r5, r5, sl
		ix += nbytes;
    7a88:	4454      	add	r4, sl
		sz -= nbytes;
    7a8a:	b2ad      	uxth	r5, r5
		ix += nbytes;
    7a8c:	b224      	sxth	r4, r4
	} while (sz);
    7a8e:	b31d      	cbz	r5, 7ad8 <nm_spi_write_block+0x104>
			if (sz <= DATA_PKT_SZ)
    7a90:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
    7a94:	46aa      	mov	sl, r5
    7a96:	bf28      	it	cs
    7a98:	f44f 5a00 	movcs.w	sl, #8192	; 0x2000
    7a9c:	fa1f fa8a 	uxth.w	sl, sl
		if (ix == 0)  {
    7aa0:	2c00      	cmp	r4, #0
    7aa2:	d0cb      	beq.n	7a3c <nm_spi_write_block+0x68>
			if (sz <= DATA_PKT_SZ)
    7aa4:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
    7aa8:	bf94      	ite	ls
    7aaa:	23f3      	movls	r3, #243	; 0xf3
    7aac:	23f2      	movhi	r3, #242	; 0xf2
    7aae:	e7ca      	b.n	7a46 <nm_spi_write_block+0x72>
	spi.pu8OutBuf = NULL;
    7ab0:	9306      	str	r3, [sp, #24]
	spi.u16Sz = sz;
    7ab2:	f04f 0302 	mov.w	r3, #2
    7ab6:	f8ad 301c 	strh.w	r3, [sp, #28]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7aba:	a905      	add	r1, sp, #20
	spi.pu8InBuf = b;
    7abc:	ab04      	add	r3, sp, #16
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7abe:	2003      	movs	r0, #3
	spi.pu8InBuf = b;
    7ac0:	9305      	str	r3, [sp, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7ac2:	f7fe fa37 	bl	5f34 <nm_bus_ioctl>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    7ac6:	2800      	cmp	r0, #0
    7ac8:	d18c      	bne.n	79e4 <nm_spi_write_block+0x10>
		sz -= nbytes;
    7aca:	eba5 050a 	sub.w	r5, r5, sl
		ix += nbytes;
    7ace:	4454      	add	r4, sl
		sz -= nbytes;
    7ad0:	b2ad      	uxth	r5, r5
		ix += nbytes;
    7ad2:	b224      	sxth	r4, r4
	} while (sz);
    7ad4:	2d00      	cmp	r5, #0
    7ad6:	d1db      	bne.n	7a90 <nm_spi_write_block+0xbc>
    if (!gu8Crc_off)
    7ad8:	4b13      	ldr	r3, [pc, #76]	; (7b28 <nm_spi_write_block+0x154>)
    7ada:	781b      	ldrb	r3, [r3, #0]
    7adc:	b303      	cbz	r3, 7b20 <nm_spi_write_block+0x14c>
    7ade:	2303      	movs	r3, #3
		len = 3;
    7ae0:	461c      	mov	r4, r3
	spi.u16Sz = sz;
    7ae2:	f8ad 301c 	strh.w	r3, [sp, #28]
	spi.pu8InBuf = NULL;
    7ae6:	2300      	movs	r3, #0
    7ae8:	9305      	str	r3, [sp, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7aea:	a905      	add	r1, sp, #20
	spi.pu8OutBuf = b;
    7aec:	ab04      	add	r3, sp, #16
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7aee:	2003      	movs	r0, #3
	spi.pu8OutBuf = b;
    7af0:	9306      	str	r3, [sp, #24]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7af2:	f7fe fa1f 	bl	5f34 <nm_bus_ioctl>
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    7af6:	2800      	cmp	r0, #0
    7af8:	f47f af74 	bne.w	79e4 <nm_spi_write_block+0x10>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    7afc:	f104 0320 	add.w	r3, r4, #32
    7b00:	446b      	add	r3, sp
    7b02:	f813 2c11 	ldrb.w	r2, [r3, #-17]
    7b06:	2a00      	cmp	r2, #0
    7b08:	f47f af6c 	bne.w	79e4 <nm_spi_write_block+0x10>
    7b0c:	f813 3c12 	ldrb.w	r3, [r3, #-18]
    7b10:	2bc3      	cmp	r3, #195	; 0xc3
    7b12:	d002      	beq.n	7b1a <nm_spi_write_block+0x146>
    7b14:	e766      	b.n	79e4 <nm_spi_write_block+0x10>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    7b16:	f06f 0005 	mvn.w	r0, #5

	return s8Ret;
}
    7b1a:	b009      	add	sp, #36	; 0x24
    7b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7b20:	2302      	movs	r3, #2
		len = 2;
    7b22:	461c      	mov	r4, r3
    7b24:	e7dd      	b.n	7ae2 <nm_spi_write_block+0x10e>
    7b26:	bf00      	nop
    7b28:	1fff7784 	.word	0x1fff7784

00007b2c <m2m_ip_cb>:
*********************************************************************/
#ifdef ARDUINO
extern uint8 hif_receive_blocked;
#endif
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    7b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b2e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    7b32:	b097      	sub	sp, #92	; 0x5c
    7b34:	4614      	mov	r4, r2
    7b36:	2b13      	cmp	r3, #19
    7b38:	d829      	bhi.n	7b8e <m2m_ip_cb+0x62>
    7b3a:	e8df f013 	tbh	[pc, r3, lsl #1]
    7b3e:	0014      	.short	0x0014
    7b40:	00e400cb 	.word	0x00e400cb
    7b44:	0058007e 	.word	0x0058007e
    7b48:	0058002a 	.word	0x0058002a
    7b4c:	0028002a 	.word	0x0028002a
    7b50:	007e00a0 	.word	0x007e00a0
    7b54:	002a0058 	.word	0x002a0058
    7b58:	00280028 	.word	0x00280028
    7b5c:	00280028 	.word	0x00280028
    7b60:	002800b3 	.word	0x002800b3
    7b64:	0014      	.short	0x0014
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    7b66:	2300      	movs	r3, #0
    7b68:	2204      	movs	r2, #4
    7b6a:	a905      	add	r1, sp, #20
    7b6c:	4620      	mov	r0, r4
    7b6e:	f7fe fce3 	bl	6538 <hif_receive>
    7b72:	b960      	cbnz	r0, 7b8e <m2m_ip_cb+0x62>
		{
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
    7b74:	4b97      	ldr	r3, [pc, #604]	; (7dd4 <m2m_ip_cb+0x2a8>)
			strBind.status = strBindReply.s8Status;
    7b76:	f89d 1015 	ldrb.w	r1, [sp, #21]
			if(gpfAppSocketCb)
    7b7a:	681a      	ldr	r2, [r3, #0]
			strBind.status = strBindReply.s8Status;
    7b7c:	f88d 1004 	strb.w	r1, [sp, #4]
			if(gpfAppSocketCb)
    7b80:	b12a      	cbz	r2, 7b8e <m2m_ip_cb+0x62>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    7b82:	681b      	ldr	r3, [r3, #0]
    7b84:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    7b88:	aa01      	add	r2, sp, #4
    7b8a:	2101      	movs	r1, #1
    7b8c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    7b8e:	b017      	add	sp, #92	; 0x5c
    7b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    7b92:	2848      	cmp	r0, #72	; 0x48
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    7b94:	f04f 0210 	mov.w	r2, #16
    7b98:	460d      	mov	r5, r1
    7b9a:	f04f 0300 	mov.w	r3, #0
    7b9e:	a901      	add	r1, sp, #4
    7ba0:	4620      	mov	r0, r4
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    7ba2:	bf14      	ite	ne
    7ba4:	2606      	movne	r6, #6
    7ba6:	2609      	moveq	r6, #9
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    7ba8:	f7fe fcc6 	bl	6538 <hif_receive>
    7bac:	4602      	mov	r2, r0
    7bae:	2800      	cmp	r0, #0
    7bb0:	d1ed      	bne.n	7b8e <m2m_ip_cb+0x62>
			sock			= strRecvReply.sock;
    7bb2:	f99d c010 	ldrsb.w	ip, [sp, #16]
			gastrSockets[sock].bIsRecvPending = 0;
    7bb6:	4b88      	ldr	r3, [pc, #544]	; (7dd8 <m2m_ip_cb+0x2ac>)
			u16SessionID = strRecvReply.u16SessionID;
    7bb8:	f8bd e012 	ldrh.w	lr, [sp, #18]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    7bbc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    7bc0:	f8ad 101e 	strh.w	r1, [sp, #30]
			gastrSockets[sock].bIsRecvPending = 0;
    7bc4:	eb03 130c 	add.w	r3, r3, ip, lsl #4
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    7bc8:	9902      	ldr	r1, [sp, #8]
			gastrSockets[sock].bIsRecvPending = 0;
    7bca:	7318      	strb	r0, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    7bcc:	88db      	ldrh	r3, [r3, #6]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    7bce:	9108      	str	r1, [sp, #32]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    7bd0:	b29b      	uxth	r3, r3
    7bd2:	4573      	cmp	r3, lr
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    7bd4:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    7bd8:	f8bd 700e 	ldrh.w	r7, [sp, #14]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    7bdc:	f000 80d9 	beq.w	7d92 <m2m_ip_cb+0x266>
				if(u16ReadSize < u16BufferSize)
    7be0:	2d10      	cmp	r5, #16
    7be2:	d9d4      	bls.n	7b8e <m2m_ip_cb+0x62>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    7be4:	2301      	movs	r3, #1
    7be6:	4601      	mov	r1, r0
    7be8:	f7fe fca6 	bl	6538 <hif_receive>
	{
    7bec:	e7cf      	b.n	7b8e <m2m_ip_cb+0x62>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    7bee:	2847      	cmp	r0, #71	; 0x47
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    7bf0:	f04f 0208 	mov.w	r2, #8
    7bf4:	4620      	mov	r0, r4
    7bf6:	f04f 0300 	mov.w	r3, #0
    7bfa:	a905      	add	r1, sp, #20
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    7bfc:	bf14      	ite	ne
    7bfe:	2407      	movne	r4, #7
    7c00:	4614      	moveq	r4, r2
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    7c02:	f7fe fc99 	bl	6538 <hif_receive>
    7c06:	2800      	cmp	r0, #0
    7c08:	d1c1      	bne.n	7b8e <m2m_ip_cb+0x62>
			sock = strReply.sock;
    7c0a:	f99d 0014 	ldrsb.w	r0, [sp, #20]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    7c0e:	4b72      	ldr	r3, [pc, #456]	; (7dd8 <m2m_ip_cb+0x2ac>)
			u16SessionID = strReply.u16SessionID;
    7c10:	f8bd 2018 	ldrh.w	r2, [sp, #24]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    7c14:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    7c18:	f8ad 1004 	strh.w	r1, [sp, #4]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    7c1c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    7c20:	88db      	ldrh	r3, [r3, #6]
    7c22:	b29b      	uxth	r3, r3
    7c24:	4293      	cmp	r3, r2
    7c26:	d1b2      	bne.n	7b8e <m2m_ip_cb+0x62>
				if(gpfAppSocketCb)
    7c28:	4b6a      	ldr	r3, [pc, #424]	; (7dd4 <m2m_ip_cb+0x2a8>)
    7c2a:	681a      	ldr	r2, [r3, #0]
    7c2c:	2a00      	cmp	r2, #0
    7c2e:	d0ae      	beq.n	7b8e <m2m_ip_cb+0x62>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    7c30:	681b      	ldr	r3, [r3, #0]
    7c32:	aa01      	add	r2, sp, #4
    7c34:	4621      	mov	r1, r4
    7c36:	4798      	blx	r3
	{
    7c38:	e7a9      	b.n	7b8e <m2m_ip_cb+0x62>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    7c3a:	2300      	movs	r3, #0
    7c3c:	2204      	movs	r2, #4
    7c3e:	a905      	add	r1, sp, #20
    7c40:	4620      	mov	r0, r4
    7c42:	f7fe fc79 	bl	6538 <hif_receive>
    7c46:	2800      	cmp	r0, #0
    7c48:	d1a1      	bne.n	7b8e <m2m_ip_cb+0x62>
			strConnMsg.s8Error	= strConnectReply.s8Error;
    7c4a:	f99d 3015 	ldrsb.w	r3, [sp, #21]
			strConnMsg.sock		= strConnectReply.sock;
    7c4e:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    7c52:	f88d 0004 	strb.w	r0, [sp, #4]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    7c56:	f88d 3005 	strb.w	r3, [sp, #5]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    7c5a:	b93b      	cbnz	r3, 7c6c <m2m_ip_cb+0x140>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    7c5c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    7c60:	4a5d      	ldr	r2, [pc, #372]	; (7dd8 <m2m_ip_cb+0x2ac>)
    7c62:	3b08      	subs	r3, #8
    7c64:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    7c68:	b29b      	uxth	r3, r3
    7c6a:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    7c6c:	4b59      	ldr	r3, [pc, #356]	; (7dd4 <m2m_ip_cb+0x2a8>)
    7c6e:	681a      	ldr	r2, [r3, #0]
    7c70:	2a00      	cmp	r2, #0
    7c72:	d08c      	beq.n	7b8e <m2m_ip_cb+0x62>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    7c74:	681b      	ldr	r3, [r3, #0]
    7c76:	aa01      	add	r2, sp, #4
    7c78:	2105      	movs	r1, #5
    7c7a:	4798      	blx	r3
	{
    7c7c:	e787      	b.n	7b8e <m2m_ip_cb+0x62>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    7c7e:	2300      	movs	r3, #0
    7c80:	2244      	movs	r2, #68	; 0x44
    7c82:	a905      	add	r1, sp, #20
    7c84:	4620      	mov	r0, r4
    7c86:	f7fe fc57 	bl	6538 <hif_receive>
    7c8a:	2800      	cmp	r0, #0
    7c8c:	f47f af7f 	bne.w	7b8e <m2m_ip_cb+0x62>
			if(gpfAppResolveCb)
    7c90:	4b52      	ldr	r3, [pc, #328]	; (7ddc <m2m_ip_cb+0x2b0>)
    7c92:	681a      	ldr	r2, [r3, #0]
    7c94:	2a00      	cmp	r2, #0
    7c96:	f43f af7a 	beq.w	7b8e <m2m_ip_cb+0x62>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    7c9a:	681b      	ldr	r3, [r3, #0]
    7c9c:	9915      	ldr	r1, [sp, #84]	; 0x54
    7c9e:	a805      	add	r0, sp, #20
    7ca0:	4798      	blx	r3
    7ca2:	e774      	b.n	7b8e <m2m_ip_cb+0x62>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    7ca4:	2214      	movs	r2, #20
    7ca6:	2301      	movs	r3, #1
    7ca8:	eb0d 0102 	add.w	r1, sp, r2
    7cac:	4620      	mov	r0, r4
    7cae:	f7fe fc43 	bl	6538 <hif_receive>
    7cb2:	2800      	cmp	r0, #0
    7cb4:	f47f af6b 	bne.w	7b8e <m2m_ip_cb+0x62>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))(uintptr_t)strPingReply.u32CmdPrivate;
    7cb8:	4b49      	ldr	r3, [pc, #292]	; (7de0 <m2m_ip_cb+0x2b4>)
    7cba:	9a06      	ldr	r2, [sp, #24]
    7cbc:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    7cbe:	681a      	ldr	r2, [r3, #0]
    7cc0:	2a00      	cmp	r2, #0
    7cc2:	f43f af64 	beq.w	7b8e <m2m_ip_cb+0x62>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    7cc6:	681b      	ldr	r3, [r3, #0]
    7cc8:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    7ccc:	9907      	ldr	r1, [sp, #28]
    7cce:	9805      	ldr	r0, [sp, #20]
    7cd0:	4798      	blx	r3
}
    7cd2:	e75c      	b.n	7b8e <m2m_ip_cb+0x62>
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    7cd4:	2300      	movs	r3, #0
    7cd6:	2204      	movs	r2, #4
    7cd8:	a905      	add	r1, sp, #20
    7cda:	4620      	mov	r0, r4
    7cdc:	f7fe fc2c 	bl	6538 <hif_receive>
    7ce0:	2800      	cmp	r0, #0
    7ce2:	f47f af54 	bne.w	7b8e <m2m_ip_cb+0x62>
			if(gpfAppSocketCb)
    7ce6:	4b3b      	ldr	r3, [pc, #236]	; (7dd4 <m2m_ip_cb+0x2a8>)
			strListen.status = strListenReply.s8Status;
    7ce8:	f89d 1015 	ldrb.w	r1, [sp, #21]
			if(gpfAppSocketCb)
    7cec:	681a      	ldr	r2, [r3, #0]
			strListen.status = strListenReply.s8Status;
    7cee:	f88d 1004 	strb.w	r1, [sp, #4]
			if(gpfAppSocketCb)
    7cf2:	2a00      	cmp	r2, #0
    7cf4:	f43f af4b 	beq.w	7b8e <m2m_ip_cb+0x62>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    7cf8:	681b      	ldr	r3, [r3, #0]
    7cfa:	f99d 0014 	ldrsb.w	r0, [sp, #20]
    7cfe:	aa01      	add	r2, sp, #4
    7d00:	2102      	movs	r1, #2
    7d02:	4798      	blx	r3
    7d04:	e743      	b.n	7b8e <m2m_ip_cb+0x62>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    7d06:	2300      	movs	r3, #0
    7d08:	220c      	movs	r2, #12
    7d0a:	a901      	add	r1, sp, #4
    7d0c:	4620      	mov	r0, r4
    7d0e:	f7fe fc13 	bl	6538 <hif_receive>
    7d12:	2800      	cmp	r0, #0
    7d14:	f47f af3b 	bne.w	7b8e <m2m_ip_cb+0x62>
			if(strAcceptReply.sConnectedSock >= 0)
    7d18:	f99d 300d 	ldrsb.w	r3, [sp, #13]
    7d1c:	2b00      	cmp	r3, #0
    7d1e:	db21      	blt.n	7d64 <m2m_ip_cb+0x238>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    7d20:	4a2d      	ldr	r2, [pc, #180]	; (7dd8 <m2m_ip_cb+0x2ac>)
    7d22:	f99d 100c 	ldrsb.w	r1, [sp, #12]
    7d26:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    7d2a:	eb02 1003 	add.w	r0, r2, r3, lsl #4
    7d2e:	7ac9      	ldrb	r1, [r1, #11]
    7d30:	b2c9      	uxtb	r1, r1
    7d32:	72c1      	strb	r1, [r0, #11]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    7d34:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    7d38:	3908      	subs	r1, #8
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    7d3a:	2501      	movs	r5, #1
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    7d3c:	b289      	uxth	r1, r1
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    7d3e:	7285      	strb	r5, [r0, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    7d40:	8101      	strh	r1, [r0, #8]
				++gu16SessionID;
    7d42:	4928      	ldr	r1, [pc, #160]	; (7de4 <m2m_ip_cb+0x2b8>)
    7d44:	8808      	ldrh	r0, [r1, #0]
    7d46:	4428      	add	r0, r5
    7d48:	b280      	uxth	r0, r0
    7d4a:	8008      	strh	r0, [r1, #0]
				if(gu16SessionID == 0)
    7d4c:	8808      	ldrh	r0, [r1, #0]
    7d4e:	b280      	uxth	r0, r0
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    7d50:	011c      	lsls	r4, r3, #4
				if(gu16SessionID == 0)
    7d52:	b918      	cbnz	r0, 7d5c <m2m_ip_cb+0x230>
					++gu16SessionID;
    7d54:	8808      	ldrh	r0, [r1, #0]
    7d56:	4428      	add	r0, r5
    7d58:	b280      	uxth	r0, r0
    7d5a:	8008      	strh	r0, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    7d5c:	8809      	ldrh	r1, [r1, #0]
    7d5e:	4422      	add	r2, r4
    7d60:	b289      	uxth	r1, r1
    7d62:	80d1      	strh	r1, [r2, #6]
			if(gpfAppSocketCb)
    7d64:	4a1b      	ldr	r2, [pc, #108]	; (7dd4 <m2m_ip_cb+0x2a8>)
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    7d66:	f8bd 4006 	ldrh.w	r4, [sp, #6]
			if(gpfAppSocketCb)
    7d6a:	6811      	ldr	r1, [r2, #0]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    7d6c:	9802      	ldr	r0, [sp, #8]
			strAccept.sock = strAcceptReply.sConnectedSock;
    7d6e:	f88d 3014 	strb.w	r3, [sp, #20]
			strAccept.strAddr.sin_family		= AF_INET;
    7d72:	2502      	movs	r5, #2
    7d74:	f8ad 5018 	strh.w	r5, [sp, #24]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    7d78:	f8ad 401a 	strh.w	r4, [sp, #26]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    7d7c:	9007      	str	r0, [sp, #28]
			if(gpfAppSocketCb)
    7d7e:	2900      	cmp	r1, #0
    7d80:	f43f af05 	beq.w	7b8e <m2m_ip_cb+0x62>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    7d84:	6813      	ldr	r3, [r2, #0]
    7d86:	f99d 000c 	ldrsb.w	r0, [sp, #12]
    7d8a:	aa05      	add	r2, sp, #20
    7d8c:	2104      	movs	r1, #4
    7d8e:	4798      	blx	r3
    7d90:	e6fd      	b.n	7b8e <m2m_ip_cb+0x62>
				if((s16RecvStatus > 0) && (s16RecvStatus < (sint32)u16BufferSize))
    7d92:	2900      	cmp	r1, #0
    7d94:	dd15      	ble.n	7dc2 <m2m_ip_cb+0x296>
    7d96:	42a9      	cmp	r1, r5
    7d98:	da13      	bge.n	7dc2 <m2m_ip_cb+0x296>
					if(gpfAppSocketCb) {
    7d9a:	4b0e      	ldr	r3, [pc, #56]	; (7dd4 <m2m_ip_cb+0x2a8>)
					strRecvMsg.s16BufferSize = s16RecvStatus;
    7d9c:	f8ad 1018 	strh.w	r1, [sp, #24]
					if(gpfAppSocketCb) {
    7da0:	681a      	ldr	r2, [r3, #0]
					hif_receive_blocked = 1;
    7da2:	4911      	ldr	r1, [pc, #68]	; (7de8 <m2m_ip_cb+0x2bc>)
					strRecvMsg.u16RemainingSize = 0;
    7da4:	f8ad 001a 	strh.w	r0, [sp, #26]
					u32Address += u16DataOffset;
    7da8:	4427      	add	r7, r4
					hif_receive_blocked = 1;
    7daa:	2001      	movs	r0, #1
					strRecvMsg.pu8Buffer = u32Address;
    7dac:	9705      	str	r7, [sp, #20]
					hif_receive_blocked = 1;
    7dae:	7008      	strb	r0, [r1, #0]
					if(gpfAppSocketCb) {
    7db0:	2a00      	cmp	r2, #0
    7db2:	f43f aeec 	beq.w	7b8e <m2m_ip_cb+0x62>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    7db6:	681b      	ldr	r3, [r3, #0]
    7db8:	aa05      	add	r2, sp, #20
    7dba:	4631      	mov	r1, r6
    7dbc:	4660      	mov	r0, ip
    7dbe:	4798      	blx	r3
    7dc0:	e6e5      	b.n	7b8e <m2m_ip_cb+0x62>
					if(gpfAppSocketCb)
    7dc2:	4b04      	ldr	r3, [pc, #16]	; (7dd4 <m2m_ip_cb+0x2a8>)
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    7dc4:	f8ad 1018 	strh.w	r1, [sp, #24]
					if(gpfAppSocketCb)
    7dc8:	681a      	ldr	r2, [r3, #0]
					strRecvMsg.pu8Buffer		= 0;
    7dca:	2000      	movs	r0, #0
    7dcc:	9005      	str	r0, [sp, #20]
					if(gpfAppSocketCb)
    7dce:	2a00      	cmp	r2, #0
    7dd0:	d1f1      	bne.n	7db6 <m2m_ip_cb+0x28a>
    7dd2:	e6dc      	b.n	7b8e <m2m_ip_cb+0x62>
    7dd4:	1fff7844 	.word	0x1fff7844
    7dd8:	1fff7788 	.word	0x1fff7788
    7ddc:	1fff7840 	.word	0x1fff7840
    7de0:	1fff783c 	.word	0x1fff783c
    7de4:	1fff7848 	.word	0x1fff7848
    7de8:	1fff7770 	.word	0x1fff7770

00007dec <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    7dec:	b538      	push	{r3, r4, r5, lr}
	if(gbSocketInit == 0)
    7dee:	4c0a      	ldr	r4, [pc, #40]	; (7e18 <socketInit+0x2c>)
    7df0:	7823      	ldrb	r3, [r4, #0]
    7df2:	b103      	cbz	r3, 7df6 <socketInit+0xa>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    7df4:	bd38      	pop	{r3, r4, r5, pc}
    7df6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    7dfa:	22b0      	movs	r2, #176	; 0xb0
    7dfc:	4807      	ldr	r0, [pc, #28]	; (7e1c <socketInit+0x30>)
    7dfe:	4629      	mov	r1, r5
    7e00:	f7fe f966 	bl	60d0 <m2m_memset>
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    7e04:	4906      	ldr	r1, [pc, #24]	; (7e20 <socketInit+0x34>)
    7e06:	2002      	movs	r0, #2
    7e08:	f7fe fbbe 	bl	6588 <hif_register_cb>
		gu16SessionID	= 0;
    7e0c:	4b05      	ldr	r3, [pc, #20]	; (7e24 <socketInit+0x38>)
		gbSocketInit	= 1;
    7e0e:	2201      	movs	r2, #1
    7e10:	7022      	strb	r2, [r4, #0]
		gu16SessionID	= 0;
    7e12:	801d      	strh	r5, [r3, #0]
}
    7e14:	bd38      	pop	{r3, r4, r5, pc}
    7e16:	bf00      	nop
    7e18:	1fff7838 	.word	0x1fff7838
    7e1c:	1fff7788 	.word	0x1fff7788
    7e20:	00007b2d 	.word	0x00007b2d
    7e24:	1fff7848 	.word	0x1fff7848

00007e28 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    7e28:	4a02      	ldr	r2, [pc, #8]	; (7e34 <registerSocketCallback+0xc>)
	gpfAppResolveCb = pfAppResolveCb;
    7e2a:	4b03      	ldr	r3, [pc, #12]	; (7e38 <registerSocketCallback+0x10>)
	gpfAppSocketCb = pfAppSocketCb;
    7e2c:	6010      	str	r0, [r2, #0]
	gpfAppResolveCb = pfAppResolveCb;
    7e2e:	6019      	str	r1, [r3, #0]
}
    7e30:	4770      	bx	lr
    7e32:	bf00      	nop
    7e34:	1fff7844 	.word	0x1fff7844
    7e38:	1fff7840 	.word	0x1fff7840

00007e3c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    7e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    7e40:	2802      	cmp	r0, #2
{
    7e42:	b086      	sub	sp, #24
	if(u16Domain == AF_INET)
    7e44:	d117      	bne.n	7e76 <socket+0x3a>
	{
		if(u8Type == SOCK_STREAM)
    7e46:	2901      	cmp	r1, #1
    7e48:	4614      	mov	r4, r2
    7e4a:	d01a      	beq.n	7e82 <socket+0x46>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    7e4c:	2902      	cmp	r1, #2
    7e4e:	d112      	bne.n	7e76 <socket+0x3a>
    7e50:	4936      	ldr	r1, [pc, #216]	; (7f2c <socket+0xf0>)
    7e52:	4f37      	ldr	r7, [pc, #220]	; (7f30 <socket+0xf4>)
    7e54:	2204      	movs	r2, #4
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
			{
				u8SockID		= u8NextUdpSock;
    7e56:	7808      	ldrb	r0, [r1, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    7e58:	780d      	ldrb	r5, [r1, #0]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    7e5a:	780b      	ldrb	r3, [r1, #0]
    7e5c:	3301      	adds	r3, #1
    7e5e:	f003 0303 	and.w	r3, r3, #3
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    7e62:	eb07 1505 	add.w	r5, r7, r5, lsl #4
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    7e66:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    7e68:	7aae      	ldrb	r6, [r5, #10]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    7e6a:	1e53      	subs	r3, r2, #1
				u8SockID		= u8NextUdpSock;
    7e6c:	b2c0      	uxtb	r0, r0
				if(!pstrSock->bIsUsed)
    7e6e:	b35e      	cbz	r6, 7ec8 <socket+0x8c>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    7e70:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
    7e74:	d1ef      	bne.n	7e56 <socket+0x1a>
	SOCKET					sock = -1;
    7e76:	f04f 36ff 	mov.w	r6, #4294967295
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    7e7a:	4630      	mov	r0, r6
    7e7c:	b006      	add	sp, #24
    7e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e82:	4d2c      	ldr	r5, [pc, #176]	; (7f34 <socket+0xf8>)
    7e84:	4e2c      	ldr	r6, [pc, #176]	; (7f38 <socket+0xfc>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    7e86:	4f2d      	ldr	r7, [pc, #180]	; (7f3c <socket+0x100>)
    7e88:	2207      	movs	r2, #7
				u8SockID	= u8NextTcpSock;
    7e8a:	7828      	ldrb	r0, [r5, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
    7e8c:	f895 c000 	ldrb.w	ip, [r5]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    7e90:	782b      	ldrb	r3, [r5, #0]
    7e92:	3301      	adds	r3, #1
    7e94:	fba7 8103 	umull	r8, r1, r7, r3
    7e98:	eba3 0801 	sub.w	r8, r3, r1
    7e9c:	eb01 0158 	add.w	r1, r1, r8, lsr #1
    7ea0:	0889      	lsrs	r1, r1, #2
    7ea2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    7ea6:	1a5b      	subs	r3, r3, r1
				if(!pstrSock->bIsUsed)
    7ea8:	eb06 1e0c 	add.w	lr, r6, ip, lsl #4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    7eac:	b2db      	uxtb	r3, r3
    7eae:	702b      	strb	r3, [r5, #0]
				if(!pstrSock->bIsUsed)
    7eb0:	f89e 300a 	ldrb.w	r3, [lr, #10]
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    7eb4:	3a01      	subs	r2, #1
				u8SockID	= u8NextTcpSock;
    7eb6:	b2c0      	uxtb	r0, r0
				pstrSock	= &gastrSockets[u8NextTcpSock];
    7eb8:	fa5f fc8c 	uxtb.w	ip, ip
				if(!pstrSock->bIsUsed)
    7ebc:	2b00      	cmp	r3, #0
    7ebe:	d031      	beq.n	7f24 <socket+0xe8>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    7ec0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    7ec4:	d1e1      	bne.n	7e8a <socket+0x4e>
    7ec6:	e7d6      	b.n	7e76 <socket+0x3a>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    7ec8:	3007      	adds	r0, #7
    7eca:	b246      	sxtb	r6, r0
		if(sock >= 0)
    7ecc:	2e00      	cmp	r6, #0
    7ece:	dbd4      	blt.n	7e7a <socket+0x3e>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    7ed0:	2210      	movs	r2, #16
    7ed2:	2100      	movs	r1, #0
    7ed4:	4628      	mov	r0, r5
    7ed6:	f7fe f8fb 	bl	60d0 <m2m_memset>
			++gu16SessionID;
    7eda:	4a19      	ldr	r2, [pc, #100]	; (7f40 <socket+0x104>)
			pstrSock->bIsUsed = 1;
    7edc:	2301      	movs	r3, #1
    7ede:	72ab      	strb	r3, [r5, #10]
			++gu16SessionID;
    7ee0:	8813      	ldrh	r3, [r2, #0]
    7ee2:	3301      	adds	r3, #1
    7ee4:	b29b      	uxth	r3, r3
    7ee6:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    7ee8:	8813      	ldrh	r3, [r2, #0]
    7eea:	b29b      	uxth	r3, r3
    7eec:	b91b      	cbnz	r3, 7ef6 <socket+0xba>
				++gu16SessionID;
    7eee:	8813      	ldrh	r3, [r2, #0]
    7ef0:	3301      	adds	r3, #1
    7ef2:	b29b      	uxth	r3, r3
    7ef4:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    7ef6:	8813      	ldrh	r3, [r2, #0]
    7ef8:	b29b      	uxth	r3, r3
    7efa:	80eb      	strh	r3, [r5, #6]
			if(u8Flags & SOCKET_FLAGS_SSL)
    7efc:	07e3      	lsls	r3, r4, #31
    7efe:	d5bc      	bpl.n	7e7a <socket+0x3e>
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    7f00:	2300      	movs	r3, #0
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    7f02:	2121      	movs	r1, #33	; 0x21
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    7f04:	9302      	str	r3, [sp, #8]
    7f06:	9301      	str	r3, [sp, #4]
    7f08:	9300      	str	r3, [sp, #0]
    7f0a:	aa05      	add	r2, sp, #20
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    7f0c:	72e9      	strb	r1, [r5, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    7f0e:	2304      	movs	r3, #4
    7f10:	2150      	movs	r1, #80	; 0x50
    7f12:	2002      	movs	r0, #2
				strSSLCreate.sslSock = sock;
    7f14:	f88d 6014 	strb.w	r6, [sp, #20]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    7f18:	f7fe f954 	bl	61c4 <hif_send>
}
    7f1c:	4630      	mov	r0, r6
    7f1e:	b006      	add	sp, #24
    7f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pstrSock	= &gastrSockets[u8NextTcpSock];
    7f24:	eb06 150c 	add.w	r5, r6, ip, lsl #4
					sock = (SOCKET)u8SockID;
    7f28:	b246      	sxtb	r6, r0
					break;
    7f2a:	e7cf      	b.n	7ecc <socket+0x90>
    7f2c:	1fff784b 	.word	0x1fff784b
    7f30:	1fff77f8 	.word	0x1fff77f8
    7f34:	1fff784a 	.word	0x1fff784a
    7f38:	1fff7788 	.word	0x1fff7788
    7f3c:	24924925 	.word	0x24924925
    7f40:	1fff7848 	.word	0x1fff7848

00007f44 <bind>:
		5 June 2012
*********************************************************************/
sint8 bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    7f44:	b369      	cbz	r1, 7fa2 <bind+0x5e>
    7f46:	2800      	cmp	r0, #0
    7f48:	db2b      	blt.n	7fa2 <bind+0x5e>
{
    7f4a:	b530      	push	{r4, r5, lr}
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    7f4c:	4c16      	ldr	r4, [pc, #88]	; (7fa8 <bind+0x64>)
    7f4e:	eb04 1400 	add.w	r4, r4, r0, lsl #4
{
    7f52:	b089      	sub	sp, #36	; 0x24
	if((pstrAddr != NULL) && (sock >= 0) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    7f54:	7aa3      	ldrb	r3, [r4, #10]
    7f56:	2b01      	cmp	r3, #1
    7f58:	d120      	bne.n	7f9c <bind+0x58>
    7f5a:	b1fa      	cbz	r2, 7f9c <bind+0x58>
	{
		tstrBindCmd			strBind;
		uint8				u8CMD = SOCKET_CMD_BIND;
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    7f5c:	7ae3      	ldrb	r3, [r4, #11]
		{
			u8CMD = SOCKET_CMD_SSL_BIND;
		}

		/* Build the bind request. */
		strBind.sock = sock;
    7f5e:	f88d 001c 	strb.w	r0, [sp, #28]
			u8CMD = SOCKET_CMD_SSL_BIND;
    7f62:	f013 0f01 	tst.w	r3, #1
		m2m_memcpy((uint8 *)&strBind.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    7f66:	f04f 0208 	mov.w	r2, #8
    7f6a:	a805      	add	r0, sp, #20
			u8CMD = SOCKET_CMD_SSL_BIND;
    7f6c:	bf0c      	ite	eq
    7f6e:	2541      	moveq	r5, #65	; 0x41
    7f70:	2554      	movne	r5, #84	; 0x54
		m2m_memcpy((uint8 *)&strBind.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    7f72:	f7fe f8a3 	bl	60bc <m2m_memcpy>
		strBind.u16SessionID		= gastrSockets[sock].u16SessionID;
		
		/* Send the request. */
		s8Ret = SOCKET_REQUEST(u8CMD, (uint8*)&strBind,sizeof(tstrBindCmd) , NULL , 0, 0);
    7f76:	2300      	movs	r3, #0
		strBind.u16SessionID		= gastrSockets[sock].u16SessionID;
    7f78:	88e4      	ldrh	r4, [r4, #6]
		s8Ret = SOCKET_REQUEST(u8CMD, (uint8*)&strBind,sizeof(tstrBindCmd) , NULL , 0, 0);
    7f7a:	9302      	str	r3, [sp, #8]
    7f7c:	9301      	str	r3, [sp, #4]
    7f7e:	9300      	str	r3, [sp, #0]
    7f80:	aa05      	add	r2, sp, #20
    7f82:	230c      	movs	r3, #12
    7f84:	4629      	mov	r1, r5
    7f86:	2002      	movs	r0, #2
		strBind.u16SessionID		= gastrSockets[sock].u16SessionID;
    7f88:	f8ad 401e 	strh.w	r4, [sp, #30]
		s8Ret = SOCKET_REQUEST(u8CMD, (uint8*)&strBind,sizeof(tstrBindCmd) , NULL , 0, 0);
    7f8c:	f7fe f91a 	bl	61c4 <hif_send>
		if(s8Ret != SOCK_ERR_NO_ERROR)
		{
			s8Ret = SOCK_ERR_INVALID;
    7f90:	2800      	cmp	r0, #0
    7f92:	bf18      	it	ne
    7f94:	f06f 0008 	mvnne.w	r0, #8
		}
	}
	return s8Ret;
}
    7f98:	b009      	add	sp, #36	; 0x24
    7f9a:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    7f9c:	f06f 0005 	mvn.w	r0, #5
    7fa0:	e7fa      	b.n	7f98 <bind+0x54>
    7fa2:	f06f 0005 	mvn.w	r0, #5
}
    7fa6:	4770      	bx	lr
    7fa8:	1fff7788 	.word	0x1fff7788

00007fac <send>:
#ifdef ARDUINO
	(void)flags; // Silence "unused" warning
#endif
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    7fac:	2800      	cmp	r0, #0
    7fae:	db3a      	blt.n	8026 <send+0x7a>
{
    7fb0:	b510      	push	{r4, lr}
    7fb2:	460c      	mov	r4, r1
    7fb4:	b088      	sub	sp, #32
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    7fb6:	2900      	cmp	r1, #0
    7fb8:	d032      	beq.n	8020 <send+0x74>
    7fba:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    7fbe:	d82f      	bhi.n	8020 <send+0x74>
    7fc0:	4b1a      	ldr	r3, [pc, #104]	; (802c <send+0x80>)
    7fc2:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    7fc6:	7a99      	ldrb	r1, [r3, #10]
    7fc8:	2901      	cmp	r1, #1
    7fca:	d129      	bne.n	8020 <send+0x74>
		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    7fcc:	88d9      	ldrh	r1, [r3, #6]
    7fce:	f8ad 101c 	strh.w	r1, [sp, #28]

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    7fd2:	7ad9      	ldrb	r1, [r3, #11]
		strSend.sock			= sock;
    7fd4:	f88d 0010 	strb.w	r0, [sp, #16]
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    7fd8:	2807      	cmp	r0, #7
    7fda:	bfb4      	ite	lt
    7fdc:	2050      	movlt	r0, #80	; 0x50
    7fde:	2044      	movge	r0, #68	; 0x44
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    7fe0:	07c9      	lsls	r1, r1, #31
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    7fe2:	f8ad 2012 	strh.w	r2, [sp, #18]
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    7fe6:	d410      	bmi.n	800a <send+0x5e>
    7fe8:	21c5      	movs	r1, #197	; 0xc5
				u16DataOffset	= SSL_TX_PACKET_OFFSET;
			}
#endif
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    7fea:	2310      	movs	r3, #16
    7fec:	9002      	str	r0, [sp, #8]
    7fee:	9201      	str	r2, [sp, #4]
    7ff0:	9400      	str	r4, [sp, #0]
    7ff2:	eb0d 0203 	add.w	r2, sp, r3
    7ff6:	2002      	movs	r0, #2
    7ff8:	f7fe f8e4 	bl	61c4 <hif_send>
		if(s16Ret != SOCK_ERR_NO_ERROR)
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    7ffc:	2800      	cmp	r0, #0
    7ffe:	bf0c      	ite	eq
    8000:	2000      	moveq	r0, #0
    8002:	f06f 000d 	mvnne.w	r0, #13
		}
	}
	return s16Ret;
}
    8006:	b008      	add	sp, #32
    8008:	bd10      	pop	{r4, pc}
			if (nmdrv_firm_ver < M2M_MAKE_VERSION(19, 4, 0)) {
    800a:	4909      	ldr	r1, [pc, #36]	; (8030 <send+0x84>)
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    800c:	8918      	ldrh	r0, [r3, #8]
			if (nmdrv_firm_ver < M2M_MAKE_VERSION(19, 4, 0)) {
    800e:	680b      	ldr	r3, [r1, #0]
    8010:	f5b3 5f9a 	cmp.w	r3, #4928	; 0x1340
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    8014:	b280      	uxth	r0, r0
			if (nmdrv_firm_ver < M2M_MAKE_VERSION(19, 4, 0)) {
    8016:	f04f 01cc 	mov.w	r1, #204	; 0xcc
    801a:	bf38      	it	cc
    801c:	2055      	movcc	r0, #85	; 0x55
    801e:	e7e4      	b.n	7fea <send+0x3e>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    8020:	f06f 0005 	mvn.w	r0, #5
    8024:	e7ef      	b.n	8006 <send+0x5a>
    8026:	f06f 0005 	mvn.w	r0, #5
}
    802a:	4770      	bx	lr
    802c:	1fff7788 	.word	0x1fff7788
    8030:	1fff7780 	.word	0x1fff7780

00008034 <sendto>:

Date
		4 June 2012
*********************************************************************/
sint16 sendto(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags, struct sockaddr *pstrDestAddr, uint8 u8AddrLen)
{
    8034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8038:	b088      	sub	sp, #32
	(void)flags;
	(void)u8AddrLen;
#endif
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    803a:	1e04      	subs	r4, r0, #0
{
    803c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    8040:	db37      	blt.n	80b2 <sendto+0x7e>
    8042:	460f      	mov	r7, r1
    8044:	2900      	cmp	r1, #0
    8046:	d034      	beq.n	80b2 <sendto+0x7e>
    8048:	f5b2 6faf 	cmp.w	r2, #1400	; 0x578
    804c:	4615      	mov	r5, r2
    804e:	d830      	bhi.n	80b2 <sendto+0x7e>
    8050:	4e1a      	ldr	r6, [pc, #104]	; (80bc <sendto+0x88>)
    8052:	eb06 1604 	add.w	r6, r6, r4, lsl #4
    8056:	7ab3      	ldrb	r3, [r6, #10]
    8058:	2b01      	cmp	r3, #1
    805a:	d12a      	bne.n	80b2 <sendto+0x7e>
	{
		if(gastrSockets[sock].bIsUsed)
    805c:	7ab3      	ldrb	r3, [r6, #10]
    805e:	b343      	cbz	r3, 80b2 <sendto+0x7e>
		{
			tstrSendCmd	strSendTo;

			m2m_memset((uint8*)&strSendTo, 0, sizeof(tstrSendCmd));
    8060:	2210      	movs	r2, #16
    8062:	2100      	movs	r1, #0
    8064:	eb0d 0002 	add.w	r0, sp, r2
    8068:	f7fe f832 	bl	60d0 <m2m_memset>

			strSendTo.sock			= sock;
			strSendTo.u16DataSize	= NM_BSP_B_L_16(u16SendLength);
			strSendTo.u16SessionID	= gastrSockets[sock].u16SessionID;
    806c:	88f3      	ldrh	r3, [r6, #6]
			strSendTo.sock			= sock;
    806e:	f88d 4010 	strb.w	r4, [sp, #16]
			strSendTo.u16DataSize	= NM_BSP_B_L_16(u16SendLength);
    8072:	f8ad 5012 	strh.w	r5, [sp, #18]
			strSendTo.u16SessionID	= gastrSockets[sock].u16SessionID;
    8076:	f8ad 301c 	strh.w	r3, [sp, #28]
			
			if(pstrDestAddr != NULL)
    807a:	f1b8 0f00 	cmp.w	r8, #0
    807e:	d005      	beq.n	808c <sendto+0x58>
				struct sockaddr_in	*pstrAddr;
				pstrAddr = (void*)pstrDestAddr;

				strSendTo.strAddr.u16Family	= pstrAddr->sin_family;
				strSendTo.strAddr.u16Port	= pstrAddr->sin_port;
				strSendTo.strAddr.u32IPAddr	= pstrAddr->sin_addr.s_addr;
    8080:	f8d8 3004 	ldr.w	r3, [r8, #4]
    8084:	9306      	str	r3, [sp, #24]
				strSendTo.strAddr.u16Family	= pstrAddr->sin_family;
    8086:	f8d8 3000 	ldr.w	r3, [r8]
    808a:	9305      	str	r3, [sp, #20]
			}
			s16Ret = SOCKET_REQUEST(SOCKET_CMD_SENDTO|M2M_REQ_DATA_PKT, (uint8*)&strSendTo,  sizeof(tstrSendCmd),
    808c:	2344      	movs	r3, #68	; 0x44
    808e:	9302      	str	r3, [sp, #8]
    8090:	2310      	movs	r3, #16
    8092:	9501      	str	r5, [sp, #4]
    8094:	9700      	str	r7, [sp, #0]
    8096:	eb0d 0203 	add.w	r2, sp, r3
    809a:	21c7      	movs	r1, #199	; 0xc7
    809c:	2002      	movs	r0, #2
    809e:	f7fe f891 	bl	61c4 <hif_send>
				pvSendBuffer, u16SendLength, UDP_TX_PACKET_OFFSET);

			if(s16Ret != SOCK_ERR_NO_ERROR)
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    80a2:	2800      	cmp	r0, #0
    80a4:	bf0c      	ite	eq
    80a6:	2000      	moveq	r0, #0
    80a8:	f06f 000d 	mvnne.w	r0, #13
			}
		}
	}
	return s16Ret;
}
    80ac:	b008      	add	sp, #32
    80ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    80b2:	f06f 0005 	mvn.w	r0, #5
}
    80b6:	b008      	add	sp, #32
    80b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80bc:	1fff7788 	.word	0x1fff7788

000080c0 <recv>:
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
#ifdef ARDUINO
	if((sock >= 0) && /*(pvRecvBuf != NULL) && (u16BufLen != 0) &&*/ (gastrSockets[sock].bIsUsed == 1))
    80c0:	2800      	cmp	r0, #0
    80c2:	db3e      	blt.n	8142 <recv+0x82>
{
    80c4:	b570      	push	{r4, r5, r6, lr}
	if((sock >= 0) && /*(pvRecvBuf != NULL) && (u16BufLen != 0) &&*/ (gastrSockets[sock].bIsUsed == 1))
    80c6:	4d20      	ldr	r5, [pc, #128]	; (8148 <recv+0x88>)
    80c8:	eb05 1c00 	add.w	ip, r5, r0, lsl #4
    80cc:	461c      	mov	r4, r3
    80ce:	f89c 300a 	ldrb.w	r3, [ip, #10]
    80d2:	2b01      	cmp	r3, #1
{
    80d4:	b086      	sub	sp, #24
	if((sock >= 0) && /*(pvRecvBuf != NULL) && (u16BufLen != 0) &&*/ (gastrSockets[sock].bIsUsed == 1))
    80d6:	ea4f 1e00 	mov.w	lr, r0, lsl #4
    80da:	b2de      	uxtb	r6, r3
    80dc:	d12e      	bne.n	813c <recv+0x7c>
#else
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
#endif
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    80de:	f845 100e 	str.w	r1, [r5, lr]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    80e2:	f8ac 2004 	strh.w	r2, [ip, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    80e6:	f89c 300c 	ldrb.w	r3, [ip, #12]
    80ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    80ee:	b113      	cbz	r3, 80f6 <recv+0x36>
		s16Ret = SOCK_ERR_NO_ERROR;
    80f0:	2000      	movs	r0, #0
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
}
    80f2:	b006      	add	sp, #24
    80f4:	bd70      	pop	{r4, r5, r6, pc}
			gastrSockets[sock].bIsRecvPending = 1;
    80f6:	f88c 600c 	strb.w	r6, [ip, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    80fa:	f89c 300b 	ldrb.w	r3, [ip, #11]
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    80fe:	9202      	str	r2, [sp, #8]
				u8Cmd = SOCKET_CMD_SSL_RECV;
    8100:	f013 0f01 	tst.w	r3, #1
    8104:	bf0c      	ite	eq
    8106:	2146      	moveq	r1, #70	; 0x46
    8108:	214d      	movne	r1, #77	; 0x4d
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    810a:	2c00      	cmp	r4, #0
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    810c:	f8bc 5006 	ldrh.w	r5, [ip, #6]
			strRecv.sock = sock;
    8110:	f88d 0014 	strb.w	r0, [sp, #20]
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    8114:	bf08      	it	eq
    8116:	f04f 34ff 	moveq.w	r4, #4294967295
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    811a:	9201      	str	r2, [sp, #4]
    811c:	9200      	str	r2, [sp, #0]
    811e:	2308      	movs	r3, #8
    8120:	aa04      	add	r2, sp, #16
    8122:	2002      	movs	r0, #2
    8124:	9404      	str	r4, [sp, #16]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    8126:	f8ad 5016 	strh.w	r5, [sp, #22]
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    812a:	f7fe f84b 	bl	61c4 <hif_send>
				s16Ret = SOCK_ERR_BUFFER_FULL;
    812e:	2800      	cmp	r0, #0
    8130:	bf0c      	ite	eq
    8132:	2000      	moveq	r0, #0
    8134:	f06f 000d 	mvnne.w	r0, #13
}
    8138:	b006      	add	sp, #24
    813a:	bd70      	pop	{r4, r5, r6, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    813c:	f06f 0005 	mvn.w	r0, #5
    8140:	e7d7      	b.n	80f2 <recv+0x32>
    8142:	f06f 0005 	mvn.w	r0, #5
}
    8146:	4770      	bx	lr
    8148:	1fff7788 	.word	0x1fff7788

0000814c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    814c:	b5f0      	push	{r4, r5, r6, r7, lr}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    814e:	1e04      	subs	r4, r0, #0
{
    8150:	b087      	sub	sp, #28
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    8152:	db28      	blt.n	81a6 <close+0x5a>
    8154:	4f15      	ldr	r7, [pc, #84]	; (81ac <close+0x60>)
    8156:	eb07 1304 	add.w	r3, r7, r4, lsl #4
    815a:	7a9a      	ldrb	r2, [r3, #10]
    815c:	2a01      	cmp	r2, #1
    815e:	d122      	bne.n	81a6 <close+0x5a>
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
		
		gastrSockets[sock].bIsUsed = 0;
    8160:	2600      	movs	r6, #0
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    8162:	88da      	ldrh	r2, [r3, #6]
		gastrSockets[sock].bIsUsed = 0;
    8164:	729e      	strb	r6, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    8166:	80de      	strh	r6, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    8168:	7adb      	ldrb	r3, [r3, #11]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    816a:	f8ad 2016 	strh.w	r2, [sp, #22]
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    816e:	f013 0f01 	tst.w	r3, #1
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    8172:	bf0c      	ite	eq
    8174:	2149      	moveq	r1, #73	; 0x49
    8176:	214e      	movne	r1, #78	; 0x4e
    8178:	aa05      	add	r2, sp, #20
    817a:	9602      	str	r6, [sp, #8]
    817c:	9601      	str	r6, [sp, #4]
    817e:	9600      	str	r6, [sp, #0]
    8180:	2304      	movs	r3, #4
    8182:	2002      	movs	r0, #2
		strclose.sock = sock; 
    8184:	f88d 4014 	strb.w	r4, [sp, #20]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    8188:	f7fe f81c 	bl	61c4 <hif_send>
		if(s8Ret != SOCK_ERR_NO_ERROR)
		{
			s8Ret = SOCK_ERR_INVALID;
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    818c:	2210      	movs	r2, #16
			s8Ret = SOCK_ERR_INVALID;
    818e:	1e05      	subs	r5, r0, #0
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    8190:	4631      	mov	r1, r6
    8192:	eb07 1004 	add.w	r0, r7, r4, lsl #4
			s8Ret = SOCK_ERR_INVALID;
    8196:	bf18      	it	ne
    8198:	f06f 0508 	mvnne.w	r5, #8
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    819c:	f7fd ff98 	bl	60d0 <m2m_memset>
	}
	return s8Ret;
}
    81a0:	4628      	mov	r0, r5
    81a2:	b007      	add	sp, #28
    81a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    81a6:	f06f 0505 	mvn.w	r5, #5
    81aa:	e7f9      	b.n	81a0 <close+0x54>
    81ac:	1fff7788 	.word	0x1fff7788

000081b0 <recvfrom>:
*********************************************************************/
sint16 recvfrom(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_NO_ERROR;
#ifdef ARDUINO
	if((sock >= 0) && /*(pvRecvBuf != NULL) && (u16BufLen != 0) &&*/ (gastrSockets[sock].bIsUsed == 1))
    81b0:	2800      	cmp	r0, #0
    81b2:	db3c      	blt.n	822e <recvfrom+0x7e>
{
    81b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if((sock >= 0) && /*(pvRecvBuf != NULL) && (u16BufLen != 0) &&*/ (gastrSockets[sock].bIsUsed == 1))
    81b6:	4c1f      	ldr	r4, [pc, #124]	; (8234 <recvfrom+0x84>)
    81b8:	eb04 1c00 	add.w	ip, r4, r0, lsl #4
{
    81bc:	b087      	sub	sp, #28
	if((sock >= 0) && /*(pvRecvBuf != NULL) && (u16BufLen != 0) &&*/ (gastrSockets[sock].bIsUsed == 1))
    81be:	f89c e00a 	ldrb.w	lr, [ip, #10]
    81c2:	f1be 0f01 	cmp.w	lr, #1
    81c6:	ea4f 1600 	mov.w	r6, r0, lsl #4
    81ca:	fa5f f78e 	uxtb.w	r7, lr
    81ce:	d12b      	bne.n	8228 <recvfrom+0x78>
#else
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
#endif
	{
		if(gastrSockets[sock].bIsUsed)
    81d0:	461d      	mov	r5, r3
    81d2:	f89c 300a 	ldrb.w	r3, [ip, #10]
    81d6:	b323      	cbz	r3, 8222 <recvfrom+0x72>
		{
			s16Ret = SOCK_ERR_NO_ERROR;
			gastrSockets[sock].pu8UserBuffer = (uint8*)pvRecvBuf;
    81d8:	51a1      	str	r1, [r4, r6]
			gastrSockets[sock].u16UserBufferSize = u16BufLen;
    81da:	f8ac 2004 	strh.w	r2, [ip, #4]

			if(!gastrSockets[sock].bIsRecvPending)
    81de:	f89c 300c 	ldrb.w	r3, [ip, #12]
    81e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    81e6:	b9e3      	cbnz	r3, 8222 <recvfrom+0x72>
			{
				tstrRecvCmd	strRecv;

				gastrSockets[sock].bIsRecvPending = 1;
    81e8:	f88c 700c 	strb.w	r7, [ip, #12]
				if(u32Timeoutmsec == 0)
					strRecv.u32Timeoutmsec = 0xFFFFFFFF;
				else
					strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
				strRecv.sock = sock;
				strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    81ec:	f8bc 1006 	ldrh.w	r1, [ip, #6]
				strRecv.sock = sock;
    81f0:	f88d 0014 	strb.w	r0, [sp, #20]
					strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    81f4:	2d00      	cmp	r5, #0
    81f6:	bf08      	it	eq
    81f8:	f04f 35ff 	moveq.w	r5, #4294967295
				
				s16Ret = SOCKET_REQUEST(SOCKET_CMD_RECVFROM, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    81fc:	9202      	str	r2, [sp, #8]
    81fe:	9201      	str	r2, [sp, #4]
    8200:	9200      	str	r2, [sp, #0]
				strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    8202:	f8ad 1016 	strh.w	r1, [sp, #22]
				s16Ret = SOCKET_REQUEST(SOCKET_CMD_RECVFROM, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    8206:	2308      	movs	r3, #8
    8208:	aa04      	add	r2, sp, #16
    820a:	2148      	movs	r1, #72	; 0x48
    820c:	2002      	movs	r0, #2
    820e:	9504      	str	r5, [sp, #16]
    8210:	f7fd ffd8 	bl	61c4 <hif_send>
				if(s16Ret != SOCK_ERR_NO_ERROR)
				{
					s16Ret = SOCK_ERR_BUFFER_FULL;
    8214:	2800      	cmp	r0, #0
    8216:	bf0c      	ite	eq
    8218:	2000      	moveq	r0, #0
    821a:	f06f 000d 	mvnne.w	r0, #13
	else
	{
		s16Ret = SOCK_ERR_INVALID_ARG;
	}
	return s16Ret;
}
    821e:	b007      	add	sp, #28
    8220:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sint16	s16Ret = SOCK_ERR_NO_ERROR;
    8222:	2000      	movs	r0, #0
}
    8224:	b007      	add	sp, #28
    8226:	bdf0      	pop	{r4, r5, r6, r7, pc}
		s16Ret = SOCK_ERR_INVALID_ARG;
    8228:	f06f 0005 	mvn.w	r0, #5
    822c:	e7fa      	b.n	8224 <recvfrom+0x74>
    822e:	f06f 0005 	mvn.w	r0, #5
}
    8232:	4770      	bx	lr
    8234:	1fff7788 	.word	0x1fff7788

00008238 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    8238:	b510      	push	{r4, lr}
    823a:	b084      	sub	sp, #16
    823c:	4604      	mov	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    823e:	f7fd ff4b 	bl	60d8 <m2m_strlen>
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    8242:	b2c0      	uxtb	r0, r0
    8244:	2840      	cmp	r0, #64	; 0x40
    8246:	d80b      	bhi.n	8260 <gethostbyname+0x28>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    8248:	2200      	movs	r2, #0
    824a:	9202      	str	r2, [sp, #8]
    824c:	9201      	str	r2, [sp, #4]
    824e:	9200      	str	r2, [sp, #0]
    8250:	1c43      	adds	r3, r0, #1
    8252:	4622      	mov	r2, r4
    8254:	214a      	movs	r1, #74	; 0x4a
    8256:	2002      	movs	r0, #2
    8258:	f7fd ffb4 	bl	61c4 <hif_send>
	}
	return s8Err;
}
    825c:	b004      	add	sp, #16
    825e:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    8260:	f06f 0005 	mvn.w	r0, #5
    8264:	e7fa      	b.n	825c <gethostbyname+0x24>
    8266:	bf00      	nop

00008268 <setsockopt>:
Date
		9 September 2014
*********************************************************************/
sint8 setsockopt(SOCKET sock, uint8  u8Level, uint8  option_name,
       const void *option_value, uint16 u16OptionLen)
{
    8268:	b570      	push	{r4, r5, r6, lr}
    826a:	b096      	sub	sp, #88	; 0x58
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0)  && (option_value != NULL)  && (gastrSockets[sock].bIsUsed == 1))
    826c:	2800      	cmp	r0, #0
{
    826e:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
	if((sock >= 0)  && (option_value != NULL)  && (gastrSockets[sock].bIsUsed == 1))
    8272:	db76      	blt.n	8362 <setsockopt+0xfa>
    8274:	2b00      	cmp	r3, #0
    8276:	d074      	beq.n	8362 <setsockopt+0xfa>
    8278:	4e4b      	ldr	r6, [pc, #300]	; (83a8 <setsockopt+0x140>)
    827a:	eb06 1c00 	add.w	ip, r6, r0, lsl #4
    827e:	ea4f 1e00 	mov.w	lr, r0, lsl #4
    8282:	f89c 400a 	ldrb.w	r4, [ip, #10]
    8286:	2c01      	cmp	r4, #1
    8288:	d16b      	bne.n	8362 <setsockopt+0xfa>
	{
		if(u8Level == SOL_SSL_SOCKET)
    828a:	2902      	cmp	r1, #2
    828c:	d019      	beq.n	82c2 <setsockopt+0x5a>
			strSetSockOpt.u8Option=option_name;
			strSetSockOpt.sock = sock; 
			strSetSockOpt.u32OptionValue = *(uint32*)option_value;
			strSetSockOpt.u16SessionID		= gastrSockets[sock].u16SessionID;

			s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strSetSockOpt, sizeof(tstrSetSocketOptCmd), NULL,0, 0);
    828e:	2400      	movs	r4, #0
			strSetSockOpt.u32OptionValue = *(uint32*)option_value;
    8290:	681d      	ldr	r5, [r3, #0]
			strSetSockOpt.u16SessionID		= gastrSockets[sock].u16SessionID;
    8292:	f8bc c006 	ldrh.w	ip, [ip, #6]
			strSetSockOpt.u8Option=option_name;
    8296:	f88d 2015 	strb.w	r2, [sp, #21]
			strSetSockOpt.sock = sock; 
    829a:	f88d 0014 	strb.w	r0, [sp, #20]
			s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strSetSockOpt, sizeof(tstrSetSocketOptCmd), NULL,0, 0);
    829e:	9402      	str	r4, [sp, #8]
    82a0:	9401      	str	r4, [sp, #4]
    82a2:	9400      	str	r4, [sp, #0]
    82a4:	2308      	movs	r3, #8
    82a6:	aa04      	add	r2, sp, #16
    82a8:	214f      	movs	r1, #79	; 0x4f
    82aa:	2002      	movs	r0, #2
			strSetSockOpt.u32OptionValue = *(uint32*)option_value;
    82ac:	9504      	str	r5, [sp, #16]
			strSetSockOpt.u16SessionID		= gastrSockets[sock].u16SessionID;
    82ae:	f8ad c016 	strh.w	ip, [sp, #22]
			s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strSetSockOpt, sizeof(tstrSetSocketOptCmd), NULL,0, 0);
    82b2:	f7fd ff87 	bl	61c4 <hif_send>
			if(s8Ret != SOCK_ERR_NO_ERROR)
			{
				s8Ret = SOCK_ERR_INVALID;
    82b6:	2800      	cmp	r0, #0
    82b8:	bf18      	it	ne
    82ba:	f06f 0008 	mvnne.w	r0, #8
			}
		}
	}
	return s8Ret;	
}
    82be:	b016      	add	sp, #88	; 0x58
    82c0:	bd70      	pop	{r4, r5, r6, pc}
	if(sock < TCP_SOCK_MAX)
    82c2:	2806      	cmp	r0, #6
    82c4:	dc4d      	bgt.n	8362 <setsockopt+0xfa>
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    82c6:	f89c 400b 	ldrb.w	r4, [ip, #11]
    82ca:	07e1      	lsls	r1, r4, #31
    82cc:	d549      	bpl.n	8362 <setsockopt+0xfa>
			if(u8Opt == SO_SSL_BYPASS_X509_VERIF)
    82ce:	3a01      	subs	r2, #1
    82d0:	2a03      	cmp	r2, #3
    82d2:	d846      	bhi.n	8362 <setsockopt+0xfa>
    82d4:	e8df f002 	tbb	[pc, r2]
    82d8:	020e1a3a 	.word	0x020e1a3a
				if(optVal)
    82dc:	6818      	ldr	r0, [r3, #0]
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_CHECK_SNI;
    82de:	44b6      	add	lr, r6
				if(optVal)
    82e0:	2800      	cmp	r0, #0
    82e2:	d04f      	beq.n	8384 <setsockopt+0x11c>
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_CHECK_SNI;
    82e4:	f89e 300b 	ldrb.w	r3, [lr, #11]
    82e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
				s8Ret = SOCK_ERR_NO_ERROR;
    82ec:	2000      	movs	r0, #0
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_CHECK_SNI;
    82ee:	f88e 300b 	strb.w	r3, [lr, #11]
    82f2:	e7e4      	b.n	82be <setsockopt+0x56>
				if(optVal)
    82f4:	6818      	ldr	r0, [r3, #0]
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_CACHE_SESSION;
    82f6:	44b6      	add	lr, r6
				if(optVal)
    82f8:	2800      	cmp	r0, #0
    82fa:	d03c      	beq.n	8376 <setsockopt+0x10e>
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_CACHE_SESSION;
    82fc:	f89e 300b 	ldrb.w	r3, [lr, #11]
    8300:	f043 0310 	orr.w	r3, r3, #16
				s8Ret = SOCK_ERR_NO_ERROR;
    8304:	2000      	movs	r0, #0
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_CACHE_SESSION;
    8306:	f88e 300b 	strb.w	r3, [lr, #11]
    830a:	e7d8      	b.n	82be <setsockopt+0x56>
				if(u16OptLen < HOSTNAME_MAX_SIZE)
    830c:	2d3f      	cmp	r5, #63	; 0x3f
    830e:	d828      	bhi.n	8362 <setsockopt+0xfa>
					strCmd.u16SessionID	= gastrSockets[sock].u16SessionID;
    8310:	eb06 020e 	add.w	r2, r6, lr
					m2m_memcpy(strCmd.au8OptVal, pu8SNI, HOSTNAME_MAX_SIZE);
    8314:	4619      	mov	r1, r3
					strCmd.u16SessionID	= gastrSockets[sock].u16SessionID;
    8316:	88d2      	ldrh	r2, [r2, #6]
					strCmd.sock			= sock;
    8318:	f88d 0010 	strb.w	r0, [sp, #16]
					if(SOCKET_REQUEST(SOCKET_CMD_SSL_SET_SOCK_OPT, (uint8*)&strCmd, sizeof(tstrSSLSetSockOptCmd),
    831c:	2400      	movs	r4, #0
					strCmd.u8Option		= u8Opt;
    831e:	2602      	movs	r6, #2
					strCmd.u16SessionID	= gastrSockets[sock].u16SessionID;
    8320:	f8ad 2012 	strh.w	r2, [sp, #18]
					m2m_memcpy(strCmd.au8OptVal, pu8SNI, HOSTNAME_MAX_SIZE);
    8324:	a806      	add	r0, sp, #24
    8326:	2240      	movs	r2, #64	; 0x40
					strCmd.u8Option		= u8Opt;
    8328:	f88d 6011 	strb.w	r6, [sp, #17]
					strCmd.u32OptLen	= u16OptLen;
    832c:	9505      	str	r5, [sp, #20]
					m2m_memcpy(strCmd.au8OptVal, pu8SNI, HOSTNAME_MAX_SIZE);
    832e:	f7fd fec5 	bl	60bc <m2m_memcpy>
					if(SOCKET_REQUEST(SOCKET_CMD_SSL_SET_SOCK_OPT, (uint8*)&strCmd, sizeof(tstrSSLSetSockOptCmd),
    8332:	9402      	str	r4, [sp, #8]
    8334:	9401      	str	r4, [sp, #4]
    8336:	9400      	str	r4, [sp, #0]
    8338:	2348      	movs	r3, #72	; 0x48
    833a:	aa04      	add	r2, sp, #16
    833c:	2151      	movs	r1, #81	; 0x51
    833e:	4630      	mov	r0, r6
    8340:	f7fd ff40 	bl	61c4 <hif_send>
    8344:	3003      	adds	r0, #3
    8346:	d024      	beq.n	8392 <setsockopt+0x12a>
					s8Ret = SOCK_ERR_NO_ERROR;
    8348:	2000      	movs	r0, #0
    834a:	e7b8      	b.n	82be <setsockopt+0x56>
				if(optVal)
    834c:	6818      	ldr	r0, [r3, #0]
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_BYPASS_X509;
    834e:	44b6      	add	lr, r6
				if(optVal)
    8350:	b150      	cbz	r0, 8368 <setsockopt+0x100>
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_BYPASS_X509;
    8352:	f89e 300b 	ldrb.w	r3, [lr, #11]
    8356:	f043 0302 	orr.w	r3, r3, #2
				s8Ret = SOCK_ERR_NO_ERROR;
    835a:	2000      	movs	r0, #0
					gastrSockets[sock].u8SSLFlags |= SSL_FLAGS_BYPASS_X509;
    835c:	f88e 300b 	strb.w	r3, [lr, #11]
    8360:	e7ad      	b.n	82be <setsockopt+0x56>
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    8362:	f06f 0005 	mvn.w	r0, #5
    8366:	e7aa      	b.n	82be <setsockopt+0x56>
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_BYPASS_X509;
    8368:	f89e 300b 	ldrb.w	r3, [lr, #11]
    836c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    8370:	f88e 300b 	strb.w	r3, [lr, #11]
    8374:	e7a3      	b.n	82be <setsockopt+0x56>
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_CACHE_SESSION;
    8376:	f89e 300b 	ldrb.w	r3, [lr, #11]
    837a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    837e:	f88e 300b 	strb.w	r3, [lr, #11]
    8382:	e79c      	b.n	82be <setsockopt+0x56>
					gastrSockets[sock].u8SSLFlags &= ~SSL_FLAGS_CHECK_SNI;
    8384:	f89e 300b 	ldrb.w	r3, [lr, #11]
    8388:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
    838c:	f88e 300b 	strb.w	r3, [lr, #11]
    8390:	e795      	b.n	82be <setsockopt+0x56>
						s8Ret = SOCKET_REQUEST(SOCKET_CMD_SSL_SET_SOCK_OPT | M2M_REQ_DATA_PKT, 
    8392:	9402      	str	r4, [sp, #8]
    8394:	9401      	str	r4, [sp, #4]
    8396:	9400      	str	r4, [sp, #0]
    8398:	2348      	movs	r3, #72	; 0x48
    839a:	aa04      	add	r2, sp, #16
    839c:	21d1      	movs	r1, #209	; 0xd1
    839e:	4630      	mov	r0, r6
    83a0:	f7fd ff10 	bl	61c4 <hif_send>
    83a4:	e7d0      	b.n	8348 <setsockopt+0xe0>
    83a6:	bf00      	nop
    83a8:	1fff7788 	.word	0x1fff7788

000083ac <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    83ac:	b530      	push	{r4, r5, lr}
    83ae:	b083      	sub	sp, #12
    83b0:	4605      	mov	r5, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    83b2:	f7fe fcdd 	bl	6d70 <nmi_get_chipid>
    83b6:	f3c0 030b 	ubfx	r3, r0, #0, #12
    83ba:	f5b3 7f68 	cmp.w	r3, #928	; 0x3a0
    83be:	d203      	bcs.n	83c8 <spi_flash_enable+0x1c>
	sint8 s8Ret = M2M_SUCCESS;
    83c0:	2400      	movs	r4, #0
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    83c2:	4620      	mov	r0, r4
    83c4:	b003      	add	sp, #12
    83c6:	bd30      	pop	{r4, r5, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    83c8:	a901      	add	r1, sp, #4
    83ca:	f241 4010 	movw	r0, #5136	; 0x1410
    83ce:	f7fe ff03 	bl	71d8 <nm_read_reg_with_ret>
		if(s8Ret != M2M_SUCCESS) {
    83d2:	4604      	mov	r4, r0
    83d4:	2800      	cmp	r0, #0
    83d6:	d1f4      	bne.n	83c2 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    83d8:	9901      	ldr	r1, [sp, #4]
    83da:	f021 61ee 	bic.w	r1, r1, #124780544	; 0x7700000
    83de:	f421 21ee 	bic.w	r1, r1, #487424	; 0x77000
		u32Val |= ((0x1111ul) << 12);
    83e2:	f041 7188 	orr.w	r1, r1, #17825792	; 0x1100000
    83e6:	f441 3188 	orr.w	r1, r1, #69632	; 0x11000
		nm_write_reg(0x1410, u32Val);
    83ea:	f241 4010 	movw	r0, #5136	; 0x1410
		u32Val |= ((0x1111ul) << 12);
    83ee:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    83f0:	f7fe fef4 	bl	71dc <nm_write_reg>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    83f4:	4821      	ldr	r0, [pc, #132]	; (847c <spi_flash_enable+0xd0>)
    83f6:	4621      	mov	r1, r4
		if(enable) {
    83f8:	b335      	cbz	r5, 8448 <spi_flash_enable+0x9c>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    83fa:	f7fe feef 	bl	71dc <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    83fe:	21ab      	movs	r1, #171	; 0xab
    8400:	481f      	ldr	r0, [pc, #124]	; (8480 <spi_flash_enable+0xd4>)
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    8402:	4d20      	ldr	r5, [pc, #128]	; (8484 <spi_flash_enable+0xd8>)
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    8404:	f7fe feea 	bl	71dc <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    8408:	2101      	movs	r1, #1
    840a:	481f      	ldr	r0, [pc, #124]	; (8488 <spi_flash_enable+0xdc>)
    840c:	f7fe fee6 	bl	71dc <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    8410:	4621      	mov	r1, r4
    8412:	481e      	ldr	r0, [pc, #120]	; (848c <spi_flash_enable+0xe0>)
    8414:	f7fe fee2 	bl	71dc <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    8418:	481d      	ldr	r0, [pc, #116]	; (8490 <spi_flash_enable+0xe4>)
    841a:	2181      	movs	r1, #129	; 0x81
    841c:	f7fe fede 	bl	71dc <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    8420:	4628      	mov	r0, r5
    8422:	f7fe fed7 	bl	71d4 <nm_read_reg>
    8426:	2801      	cmp	r0, #1
    8428:	d1fa      	bne.n	8420 <spi_flash_enable+0x74>
		u32Val &= ~((0x7777ul) << 12);
    842a:	9901      	ldr	r1, [sp, #4]
    842c:	f021 61ee 	bic.w	r1, r1, #124780544	; 0x7700000
    8430:	f421 21ee 	bic.w	r1, r1, #487424	; 0x77000
		u32Val |= ((0x0010ul) << 12);
    8434:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		nm_write_reg(0x1410, u32Val);
    8438:	f241 4010 	movw	r0, #5136	; 0x1410
		u32Val |= ((0x0010ul) << 12);
    843c:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    843e:	f7fe fecd 	bl	71dc <nm_write_reg>
}
    8442:	4620      	mov	r0, r4
    8444:	b003      	add	sp, #12
    8446:	bd30      	pop	{r4, r5, pc}
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    8448:	f7fe fec8 	bl	71dc <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    844c:	21b9      	movs	r1, #185	; 0xb9
    844e:	480c      	ldr	r0, [pc, #48]	; (8480 <spi_flash_enable+0xd4>)
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    8450:	4d0c      	ldr	r5, [pc, #48]	; (8484 <spi_flash_enable+0xd8>)
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    8452:	f7fe fec3 	bl	71dc <nm_write_reg>
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    8456:	2101      	movs	r1, #1
    8458:	480b      	ldr	r0, [pc, #44]	; (8488 <spi_flash_enable+0xdc>)
    845a:	f7fe febf 	bl	71dc <nm_write_reg>
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    845e:	4621      	mov	r1, r4
    8460:	480a      	ldr	r0, [pc, #40]	; (848c <spi_flash_enable+0xe0>)
    8462:	f7fe febb 	bl	71dc <nm_write_reg>
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    8466:	480a      	ldr	r0, [pc, #40]	; (8490 <spi_flash_enable+0xe4>)
    8468:	2181      	movs	r1, #129	; 0x81
    846a:	f7fe feb7 	bl	71dc <nm_write_reg>
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    846e:	4628      	mov	r0, r5
    8470:	f7fe feb0 	bl	71d4 <nm_read_reg>
    8474:	2801      	cmp	r0, #1
    8476:	d1fa      	bne.n	846e <spi_flash_enable+0xc2>
    8478:	e7d7      	b.n	842a <spi_flash_enable+0x7e>
    847a:	bf00      	nop
    847c:	00010208 	.word	0x00010208
    8480:	0001020c 	.word	0x0001020c
    8484:	00010218 	.word	0x00010218
    8488:	00010214 	.word	0x00010214
    848c:	0001021c 	.word	0x0001021c
    8490:	00010204 	.word	0x00010204

00008494 <WiFiSocketClass::~WiFiSocketClass()>:
	}
}

WiFiSocketClass::~WiFiSocketClass()
{
}
    8494:	4770      	bx	lr
    8496:	bf00      	nop

00008498 <WiFiSocketClass::~WiFiSocketClass()>:
WiFiSocketClass::~WiFiSocketClass()
    8498:	b510      	push	{r4, lr}
}
    849a:	f44f 711b 	mov.w	r1, #620	; 0x26c
WiFiSocketClass::~WiFiSocketClass()
    849e:	4604      	mov	r4, r0
}
    84a0:	f000 fe80 	bl	91a4 <operator delete(void*, unsigned int)>
    84a4:	4620      	mov	r0, r4
    84a6:	bd10      	pop	{r4, pc}

000084a8 <WiFiSocketClass::WiFiSocketClass()>:
WiFiSocketClass::WiFiSocketClass()
    84a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    84ac:	4604      	mov	r4, r0
    84ae:	4b0f      	ldr	r3, [pc, #60]	; (84ec <WiFiSocketClass::WiFiSocketClass()+0x44>)
    84b0:	f844 3b2c 	str.w	r3, [r4], #44
    84b4:	4680      	mov	r8, r0
    84b6:	f500 7725 	add.w	r7, r0, #660	; 0x294
		_info[i].state = SOCKET_STATE_INVALID;
    84ba:	2500      	movs	r5, #0
		_info[i].parent = -1;
    84bc:	26ff      	movs	r6, #255	; 0xff
		_info[i].state = SOCKET_STATE_INVALID;
    84be:	f804 5c28 	strb.w	r5, [r4, #-40]
		_info[i].parent = -1;
    84c2:	f804 6c27 	strb.w	r6, [r4, #-39]
		_info[i].recvMsg.s16BufferSize = 0;
    84c6:	f824 5c20 	strh.w	r5, [r4, #-32]
		_info[i].buffer.data = NULL;
    84ca:	f844 5c0c 	str.w	r5, [r4, #-12]
		_info[i].buffer.head = NULL;
    84ce:	f844 5c08 	str.w	r5, [r4, #-8]
		_info[i].buffer.length = 0;
    84d2:	f844 5c04 	str.w	r5, [r4, #-4]
		memset(&_info[i]._lastSendtoAddr, 0x00, sizeof(_info[i]._lastSendtoAddr));
    84d6:	4620      	mov	r0, r4
    84d8:	2210      	movs	r2, #16
    84da:	2100      	movs	r1, #0
	for (int i = 0; i < MAX_SOCKET; i++) {
    84dc:	3438      	adds	r4, #56	; 0x38
		memset(&_info[i]._lastSendtoAddr, 0x00, sizeof(_info[i]._lastSendtoAddr));
    84de:	f003 fbfb 	bl	bcd8 <memset>
	for (int i = 0; i < MAX_SOCKET; i++) {
    84e2:	42bc      	cmp	r4, r7
    84e4:	d1eb      	bne.n	84be <WiFiSocketClass::WiFiSocketClass()+0x16>
}
    84e6:	4640      	mov	r0, r8
    84e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    84ec:	00011fd8 	.word	0x00011fd8

000084f0 <WiFiSocketClass::create(unsigned short, unsigned char, unsigned char)>:

SOCKET WiFiSocketClass::create(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    84f0:	b510      	push	{r4, lr}
    84f2:	460c      	mov	r4, r1
    84f4:	4684      	mov	ip, r0
    84f6:	4611      	mov	r1, r2
	SOCKET sock = socket(u16Domain, u8Type, u8Flags);
    84f8:	4620      	mov	r0, r4
    84fa:	461a      	mov	r2, r3
{
    84fc:	4664      	mov	r4, ip
	SOCKET sock = socket(u16Domain, u8Type, u8Flags);
    84fe:	f7ff fc9d 	bl	7e3c <socket>

	if (sock >= 0) {
    8502:	2800      	cmp	r0, #0
    8504:	db08      	blt.n	8518 <WiFiSocketClass::create(unsigned short, unsigned char, unsigned char)+0x28>
		_info[sock].state = SOCKET_STATE_IDLE;
    8506:	b203      	sxth	r3, r0
    8508:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    850c:	eb04 0cc3 	add.w	ip, r4, r3, lsl #3
    8510:	f64f 7301 	movw	r3, #65281	; 0xff01
    8514:	f8ac 3004 	strh.w	r3, [ip, #4]
		_info[sock].parent = -1;
	}

	return sock;
}
    8518:	bd10      	pop	{r4, pc}
    851a:	bf00      	nop

0000851c <WiFiSocketClass::bind(signed char, sockaddr*, unsigned char)>:

sint8 WiFiSocketClass::bind(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    851c:	b5f0      	push	{r4, r5, r6, r7, lr}
    851e:	460d      	mov	r5, r1
    8520:	b083      	sub	sp, #12
    8522:	4611      	mov	r1, r2
    8524:	4604      	mov	r4, r0
	if (::bind(sock, pstrAddr, u8AddrLen) < 0) {
    8526:	461a      	mov	r2, r3
    8528:	4628      	mov	r0, r5
    852a:	f7ff fd0b 	bl	7f44 <bind>
    852e:	2800      	cmp	r0, #0
    8530:	db26      	blt.n	8580 <WiFiSocketClass::bind(signed char, sockaddr*, unsigned char)+0x64>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8532:	4e19      	ldr	r6, [pc, #100]	; (8598 <WiFiSocketClass::bind(signed char, sockaddr*, unsigned char)+0x7c>)
    8534:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    8538:	6832      	ldr	r2, [r6, #0]
    853a:	9200      	str	r2, [sp, #0]
    853c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
		return 0;
	}

	_info[sock].state = SOCKET_STATE_BINDING;
    8540:	2304      	movs	r3, #4
	return ret;
    8542:	9f00      	ldr	r7, [sp, #0]
    8544:	7123      	strb	r3, [r4, #4]

	unsigned long start = millis();

	while (_info[sock].state == SOCKET_STATE_BINDING && millis() - start < 2000) {
    8546:	e004      	b.n	8552 <WiFiSocketClass::bind(signed char, sockaddr*, unsigned char)+0x36>
		m2m_wifi_handle_events(NULL);
    8548:	f7fe fa7e 	bl	6a48 <m2m_wifi_handle_events>
	while (_info[sock].state == SOCKET_STATE_BINDING && millis() - start < 2000) {
    854c:	7923      	ldrb	r3, [r4, #4]
    854e:	2b04      	cmp	r3, #4
    8550:	d10d      	bne.n	856e <WiFiSocketClass::bind(signed char, sockaddr*, unsigned char)+0x52>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8552:	6833      	ldr	r3, [r6, #0]
    8554:	9301      	str	r3, [sp, #4]
	return ret;
    8556:	9b01      	ldr	r3, [sp, #4]
    8558:	1bdb      	subs	r3, r3, r7
    855a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
		m2m_wifi_handle_events(NULL);
    855e:	f04f 0000 	mov.w	r0, #0
	while (_info[sock].state == SOCKET_STATE_BINDING && millis() - start < 2000) {
    8562:	d3f1      	bcc.n	8548 <WiFiSocketClass::bind(signed char, sockaddr*, unsigned char)+0x2c>
	}

	if (_info[sock].state != SOCKET_STATE_BOUND) {
		_info[sock].state = SOCKET_STATE_IDLE;
    8564:	2301      	movs	r3, #1
		return 0;
    8566:	2000      	movs	r0, #0
		_info[sock].state = SOCKET_STATE_IDLE;
    8568:	7123      	strb	r3, [r4, #4]
		// UDP
		recvfrom(sock, NULL, 0, 0);
	}

	return 1;
}
    856a:	b003      	add	sp, #12
    856c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (_info[sock].state != SOCKET_STATE_BOUND) {
    856e:	2b05      	cmp	r3, #5
    8570:	d1f8      	bne.n	8564 <WiFiSocketClass::bind(signed char, sockaddr*, unsigned char)+0x48>
	_info[sock].recvMsg.s16BufferSize = 0;
    8572:	2300      	movs	r3, #0
	if (sock < TCP_SOCK_MAX) {
    8574:	2d06      	cmp	r5, #6
	_info[sock].recvMsg.s16BufferSize = 0;
    8576:	81a3      	strh	r3, [r4, #12]
	if (sock < TCP_SOCK_MAX) {
    8578:	dc05      	bgt.n	8586 <WiFiSocketClass::bind(signed char, sockaddr*, unsigned char)+0x6a>
	return 1;
    857a:	2001      	movs	r0, #1
}
    857c:	b003      	add	sp, #12
    857e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
    8580:	2000      	movs	r0, #0
}
    8582:	b003      	add	sp, #12
    8584:	bdf0      	pop	{r4, r5, r6, r7, pc}
		recvfrom(sock, NULL, 0, 0);
    8586:	461a      	mov	r2, r3
    8588:	4619      	mov	r1, r3
    858a:	4628      	mov	r0, r5
    858c:	f7ff fe10 	bl	81b0 <recvfrom>
	return 1;
    8590:	2001      	movs	r0, #1
}
    8592:	b003      	add	sp, #12
    8594:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8596:	bf00      	nop
    8598:	1fff7ae4 	.word	0x1fff7ae4

0000859c <WiFiSocketClass::setopt(signed char, unsigned char, unsigned char, void const*, unsigned short)>:

	return 1;
}

sint8 WiFiSocketClass::setopt(SOCKET socket, uint8 u8Level, uint8 option_name, const void *option_value, uint16 u16OptionLen)
{
    859c:	b410      	push	{r4}
    859e:	9c01      	ldr	r4, [sp, #4]
    85a0:	4608      	mov	r0, r1
    85a2:	4611      	mov	r1, r2
    85a4:	461a      	mov	r2, r3
    85a6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	return setsockopt(socket, u8Level, option_name, option_value, u16OptionLen);
    85aa:	9301      	str	r3, [sp, #4]
    85ac:	4623      	mov	r3, r4
}
    85ae:	f85d 4b04 	ldr.w	r4, [sp], #4
	return setsockopt(socket, u8Level, option_name, option_value, u16OptionLen);
    85b2:	f7ff be59 	b.w	8268 <setsockopt>
    85b6:	bf00      	nop

000085b8 <WiFiSocketClass::bound(signed char)>:

	return (_info[sock].state == SOCKET_STATE_LISTENING);
}

uint8 WiFiSocketClass::bound(SOCKET sock)
{
    85b8:	b538      	push	{r3, r4, r5, lr}
    85ba:	460c      	mov	r4, r1
    85bc:	4605      	mov	r5, r0
	m2m_wifi_handle_events(NULL);

	return (_info[sock].state == SOCKET_STATE_BOUND);
    85be:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    85c2:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
	m2m_wifi_handle_events(NULL);
    85c6:	2000      	movs	r0, #0
    85c8:	f7fe fa3e 	bl	6a48 <m2m_wifi_handle_events>
	return (_info[sock].state == SOCKET_STATE_BOUND);
    85cc:	7928      	ldrb	r0, [r5, #4]
}
    85ce:	f1a0 0005 	sub.w	r0, r0, #5
    85d2:	fab0 f080 	clz	r0, r0
    85d6:	0940      	lsrs	r0, r0, #5
    85d8:	bd38      	pop	{r3, r4, r5, pc}
    85da:	bf00      	nop

000085dc <WiFiSocketClass::available(signed char)>:

int WiFiSocketClass::available(SOCKET sock)
{
    85dc:	b538      	push	{r3, r4, r5, lr}
    85de:	4605      	mov	r5, r0
    85e0:	460c      	mov	r4, r1
	m2m_wifi_handle_events(NULL);
    85e2:	2000      	movs	r0, #0
    85e4:	f7fe fa30 	bl	6a48 <m2m_wifi_handle_events>

	if (_info[sock].state != SOCKET_STATE_CONNECTED && _info[sock].state != SOCKET_STATE_BOUND) {
    85e8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    85ec:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    85f0:	791a      	ldrb	r2, [r3, #4]
    85f2:	2a03      	cmp	r2, #3
    85f4:	d003      	beq.n	85fe <WiFiSocketClass::available(signed char)+0x22>
    85f6:	2a05      	cmp	r2, #5
    85f8:	d001      	beq.n	85fe <WiFiSocketClass::available(signed char)+0x22>
		return 0;
    85fa:	2000      	movs	r0, #0
	}

	return (_info[sock].buffer.length + _info[sock].recvMsg.s16BufferSize);
}
    85fc:	bd38      	pop	{r3, r4, r5, pc}
	return (_info[sock].buffer.length + _info[sock].recvMsg.s16BufferSize);
    85fe:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    8602:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
    8606:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
    860a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    860c:	4418      	add	r0, r3
}
    860e:	bd38      	pop	{r3, r4, r5, pc}

00008610 <WiFiSocketClass::remoteIP(signed char)>:
	return bytesRead;
}

IPAddress WiFiSocketClass::remoteIP(SOCKET sock)
{
	return _info[sock].recvMsg.strRemoteAddr.sin_addr.s_addr;
    8610:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    8614:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    8618:	694a      	ldr	r2, [r1, #20]
	IPAddress(uint32_t address) {
    861a:	4902      	ldr	r1, [pc, #8]	; (8624 <WiFiSocketClass::remoteIP(signed char)+0x14>)
		_address.dword = address;
    861c:	e9c0 1200 	strd	r1, r2, [r0]
}
    8620:	4770      	bx	lr
    8622:	bf00      	nop
    8624:	00011fec 	.word	0x00011fec

00008628 <WiFiSocketClass::remotePort(signed char)>:

uint16_t WiFiSocketClass::remotePort(SOCKET sock)
{
	return _info[sock].recvMsg.strRemoteAddr.sin_port;
    8628:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    862c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
    8630:	8a40      	ldrh	r0, [r0, #18]
    8632:	4770      	bx	lr

00008634 <WiFiSocketClass::sendto(signed char, void*, unsigned short, unsigned short, sockaddr*, unsigned char)>:

	return size;
}

sint16 WiFiSocketClass::sendto(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags, struct sockaddr *pstrDestAddr, uint8 u8AddrLen)
{
    8634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8638:	460d      	mov	r5, r1
    863a:	4604      	mov	r4, r0
	m2m_wifi_handle_events(NULL);
    863c:	2000      	movs	r0, #0
{
    863e:	461f      	mov	r7, r3
    8640:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    8644:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    8648:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    864c:	4616      	mov	r6, r2
	m2m_wifi_handle_events(NULL);
    864e:	f7fe f9fb 	bl	6a48 <m2m_wifi_handle_events>

	if (_info[sock].state != SOCKET_STATE_BOUND) {
    8652:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    8656:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    865a:	791b      	ldrb	r3, [r3, #4]
    865c:	2b05      	cmp	r3, #5
    865e:	d122      	bne.n	86a6 <WiFiSocketClass::sendto(signed char, void*, unsigned short, unsigned short, sockaddr*, unsigned char)+0x72>
		return -1;
	}

	if (memcmp(&_info[sock]._lastSendtoAddr, pstrDestAddr, sizeof(_info[sock]._lastSendtoAddr)) != 0) {
    8660:	2338      	movs	r3, #56	; 0x38
    8662:	fb03 4405 	mla	r4, r3, r5, r4
    8666:	342c      	adds	r4, #44	; 0x2c
    8668:	2210      	movs	r2, #16
    866a:	4641      	mov	r1, r8
    866c:	4620      	mov	r0, r4
    866e:	f003 fa87 	bl	bb80 <memcmp>
    8672:	b180      	cbz	r0, 8696 <WiFiSocketClass::sendto(signed char, void*, unsigned short, unsigned short, sockaddr*, unsigned char)+0x62>
		memcpy(&_info[sock]._lastSendtoAddr, pstrDestAddr, sizeof(_info[sock]._lastSendtoAddr));
    8674:	4641      	mov	r1, r8
    8676:	4620      	mov	r0, r4
    8678:	2210      	movs	r2, #16
    867a:	f000 fc37 	bl	8eec <memcpy>

		return ::sendto(sock, pvSendBuffer, u16SendLength, flags, pstrDestAddr, u8AddrLen);
    867e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    8682:	f8cd 8020 	str.w	r8, [sp, #32]
    8686:	464b      	mov	r3, r9
    8688:	463a      	mov	r2, r7
    868a:	4631      	mov	r1, r6
    868c:	4628      	mov	r0, r5
	} else {
		return ::send(sock, pvSendBuffer, u16SendLength, 0);
	}	
}
    868e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return ::sendto(sock, pvSendBuffer, u16SendLength, flags, pstrDestAddr, u8AddrLen);
    8692:	f7ff bccf 	b.w	8034 <sendto>
		return ::send(sock, pvSendBuffer, u16SendLength, 0);
    8696:	4603      	mov	r3, r0
    8698:	463a      	mov	r2, r7
    869a:	4631      	mov	r1, r6
    869c:	4628      	mov	r0, r5
}
    869e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return ::send(sock, pvSendBuffer, u16SendLength, 0);
    86a2:	f7ff bc83 	b.w	7fac <send>
}
    86a6:	f04f 30ff 	mov.w	r0, #4294967295
    86aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    86ae:	bf00      	nop

000086b0 <WiFiSocketClass::close(signed char)>:

sint8 WiFiSocketClass::close(SOCKET sock)
{
    86b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86b4:	460c      	mov	r4, r1
    86b6:	4680      	mov	r8, r0
    86b8:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
    86bc:	eb08 07c6 	add.w	r7, r8, r6, lsl #3
	m2m_wifi_handle_events(NULL);
    86c0:	2000      	movs	r0, #0
    86c2:	f7fe f9c1 	bl	6a48 <m2m_wifi_handle_events>

	if (_info[sock].state == SOCKET_STATE_CONNECTED || _info[sock].state == SOCKET_STATE_BOUND) {
    86c6:	793b      	ldrb	r3, [r7, #4]
    86c8:	2b03      	cmp	r3, #3
    86ca:	ea4f 06c6 	mov.w	r6, r6, lsl #3
    86ce:	d020      	beq.n	8712 <WiFiSocketClass::close(signed char)+0x62>
    86d0:	2b05      	cmp	r3, #5
    86d2:	d01e      	beq.n	8712 <WiFiSocketClass::close(signed char)+0x62>
			// flush any data not processed
			hif_receive(0, NULL, 0, 1);
		}
	}

	_info[sock].state = SOCKET_STATE_INVALID;
    86d4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
    86d8:	80bb      	strh	r3, [r7, #4]
	_info[sock].parent = -1;

	if (_info[sock].buffer.data != NULL) {
    86da:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    86de:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    86e2:	00e5      	lsls	r5, r4, #3
    86e4:	6a18      	ldr	r0, [r3, #32]
    86e6:	b108      	cbz	r0, 86ec <WiFiSocketClass::close(signed char)+0x3c>
		free(_info[sock].buffer.data);
    86e8:	f002 fbd8 	bl	ae9c <free>
	}
	_info[sock].buffer.data = NULL;
    86ec:	1b2b      	subs	r3, r5, r4
    86ee:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    86f2:	2100      	movs	r1, #0
	_info[sock].buffer.head = NULL;
	_info[sock].buffer.length = 0;
	_info[sock].recvMsg.s16BufferSize = 0;
	memset(&_info[sock]._lastSendtoAddr, 0x00, sizeof(_info[sock]._lastSendtoAddr));
    86f4:	362c      	adds	r6, #44	; 0x2c
    86f6:	eb08 0006 	add.w	r0, r8, r6
	_info[sock].buffer.data = NULL;
    86fa:	6219      	str	r1, [r3, #32]
	_info[sock].buffer.head = NULL;
    86fc:	6259      	str	r1, [r3, #36]	; 0x24
	_info[sock].buffer.length = 0;
    86fe:	6299      	str	r1, [r3, #40]	; 0x28
	memset(&_info[sock]._lastSendtoAddr, 0x00, sizeof(_info[sock]._lastSendtoAddr));
    8700:	2210      	movs	r2, #16
	_info[sock].recvMsg.s16BufferSize = 0;
    8702:	81b9      	strh	r1, [r7, #12]
	memset(&_info[sock]._lastSendtoAddr, 0x00, sizeof(_info[sock]._lastSendtoAddr));
    8704:	f003 fae8 	bl	bcd8 <memset>

	return ::close(sock);
    8708:	4620      	mov	r0, r4
}
    870a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return ::close(sock);
    870e:	f7ff bd1d 	b.w	814c <close>
		if (_info[sock].recvMsg.s16BufferSize > 0) {
    8712:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
    8716:	2b00      	cmp	r3, #0
    8718:	dddc      	ble.n	86d4 <WiFiSocketClass::close(signed char)+0x24>
			_info[sock].recvMsg.s16BufferSize = 0;
    871a:	2200      	movs	r2, #0
    871c:	81ba      	strh	r2, [r7, #12]
			hif_receive(0, NULL, 0, 1);
    871e:	2301      	movs	r3, #1
    8720:	4611      	mov	r1, r2
    8722:	4610      	mov	r0, r2
    8724:	f7fd ff08 	bl	6538 <hif_receive>
    8728:	e7d4      	b.n	86d4 <WiFiSocketClass::close(signed char)+0x24>
    872a:	bf00      	nop

0000872c <WiFiSocketClass::fillRecvBuffer(signed char)>:
			break;
	}
}

int WiFiSocketClass::fillRecvBuffer(SOCKET sock)
{
    872c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (_info[sock].buffer.data == NULL) {
    8730:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
    8734:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
{
    8738:	460c      	mov	r4, r1
	if (_info[sock].buffer.data == NULL) {
    873a:	ea4f 08c1 	mov.w	r8, r1, lsl #3
    873e:	6a31      	ldr	r1, [r6, #32]
{
    8740:	4605      	mov	r5, r0
	if (_info[sock].buffer.data == NULL) {
    8742:	b359      	cbz	r1, 879c <WiFiSocketClass::fillRecvBuffer(signed char)+0x70>
		_info[sock].buffer.data = (uint8_t*)malloc(SOCKET_BUFFER_SIZE);
		_info[sock].buffer.head = _info[sock].buffer.data;
		_info[sock].buffer.length = 0;
	}

	int size = _info[sock].recvMsg.s16BufferSize;
    8744:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
    8748:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
    874c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
		size = SOCKET_BUFFER_SIZE;
	}

	uint8 lastTransfer = ((sint16)size == _info[sock].recvMsg.s16BufferSize);

	if (hif_receive(_info[sock].recvMsg.pu8Buffer, _info[sock].buffer.data, (sint16)size, lastTransfer) != M2M_SUCCESS) {
    8750:	68b0      	ldr	r0, [r6, #8]
    8752:	f5b3 6fb8 	cmp.w	r3, #1472	; 0x5c0
    8756:	461f      	mov	r7, r3
    8758:	bfa8      	it	ge
    875a:	f44f 67b8 	movge.w	r7, #1472	; 0x5c0
    875e:	fa1f f987 	uxth.w	r9, r7
    8762:	f5b3 6fb8 	cmp.w	r3, #1472	; 0x5c0
    8766:	bfcc      	ite	gt
    8768:	2300      	movgt	r3, #0
    876a:	2301      	movle	r3, #1
    876c:	464a      	mov	r2, r9
    876e:	f7fd fee3 	bl	6538 <hif_receive>
    8772:	b980      	cbnz	r0, 8796 <WiFiSocketClass::fillRecvBuffer(signed char)+0x6a>
		return 0;
	}

	_info[sock].buffer.head = _info[sock].buffer.data;
    8774:	eba8 0804 	sub.w	r8, r8, r4
    8778:	eb05 05c8 	add.w	r5, r5, r8, lsl #3
	_info[sock].buffer.length = size;
	_info[sock].recvMsg.pu8Buffer += size;
	_info[sock].recvMsg.s16BufferSize -= size;

	return 1;
    877c:	2001      	movs	r0, #1
	_info[sock].buffer.head = _info[sock].buffer.data;
    877e:	6a2b      	ldr	r3, [r5, #32]
    8780:	626b      	str	r3, [r5, #36]	; 0x24
	_info[sock].buffer.length = size;
    8782:	62af      	str	r7, [r5, #40]	; 0x28
	_info[sock].recvMsg.pu8Buffer += size;
    8784:	68b2      	ldr	r2, [r6, #8]
	_info[sock].recvMsg.s16BufferSize -= size;
    8786:	89b3      	ldrh	r3, [r6, #12]
	_info[sock].recvMsg.pu8Buffer += size;
    8788:	443a      	add	r2, r7
	_info[sock].recvMsg.s16BufferSize -= size;
    878a:	eba3 0309 	sub.w	r3, r3, r9
	_info[sock].recvMsg.pu8Buffer += size;
    878e:	60b2      	str	r2, [r6, #8]
	_info[sock].recvMsg.s16BufferSize -= size;
    8790:	81b3      	strh	r3, [r6, #12]
}
    8792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
    8796:	2000      	movs	r0, #0
}
    8798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		_info[sock].buffer.data = (uint8_t*)malloc(SOCKET_BUFFER_SIZE);
    879c:	f44f 60b8 	mov.w	r0, #1472	; 0x5c0
    87a0:	f002 fb74 	bl	ae8c <malloc>
		_info[sock].buffer.length = 0;
    87a4:	2300      	movs	r3, #0
		_info[sock].buffer.data = (uint8_t*)malloc(SOCKET_BUFFER_SIZE);
    87a6:	4601      	mov	r1, r0
    87a8:	6230      	str	r0, [r6, #32]
		_info[sock].buffer.head = _info[sock].buffer.data;
    87aa:	6270      	str	r0, [r6, #36]	; 0x24
		_info[sock].buffer.length = 0;
    87ac:	62b3      	str	r3, [r6, #40]	; 0x28
    87ae:	e7c9      	b.n	8744 <WiFiSocketClass::fillRecvBuffer(signed char)+0x18>

000087b0 <WiFiSocketClass::peek(signed char)>:
{
    87b0:	b570      	push	{r4, r5, r6, lr}
    87b2:	460c      	mov	r4, r1
    87b4:	4605      	mov	r5, r0
    87b6:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
    87ba:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
	m2m_wifi_handle_events(NULL);
    87be:	2000      	movs	r0, #0
    87c0:	f7fe f942 	bl	6a48 <m2m_wifi_handle_events>
	if (_info[sock].state != SOCKET_STATE_CONNECTED && _info[sock].state != SOCKET_STATE_BOUND) {
    87c4:	7933      	ldrb	r3, [r6, #4]
    87c6:	2b03      	cmp	r3, #3
    87c8:	d001      	beq.n	87ce <WiFiSocketClass::peek(signed char)+0x1e>
    87ca:	2b05      	cmp	r3, #5
    87cc:	d120      	bne.n	8810 <WiFiSocketClass::peek(signed char)+0x60>
	m2m_wifi_handle_events(NULL);
    87ce:	2000      	movs	r0, #0
    87d0:	f7fe f93a 	bl	6a48 <m2m_wifi_handle_events>
	if (_info[sock].state != SOCKET_STATE_CONNECTED && _info[sock].state != SOCKET_STATE_BOUND) {
    87d4:	7933      	ldrb	r3, [r6, #4]
    87d6:	2b03      	cmp	r3, #3
    87d8:	d001      	beq.n	87de <WiFiSocketClass::peek(signed char)+0x2e>
    87da:	2b05      	cmp	r3, #5
    87dc:	d118      	bne.n	8810 <WiFiSocketClass::peek(signed char)+0x60>
	return (_info[sock].buffer.length + _info[sock].recvMsg.s16BufferSize);
    87de:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    87e2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    87e6:	f9b6 200c 	ldrsh.w	r2, [r6, #12]
    87ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (available(sock) == 0) {
    87ec:	42da      	cmn	r2, r3
	return (_info[sock].buffer.length + _info[sock].recvMsg.s16BufferSize);
    87ee:	ea4f 06c4 	mov.w	r6, r4, lsl #3
	if (available(sock) == 0) {
    87f2:	d00d      	beq.n	8810 <WiFiSocketClass::peek(signed char)+0x60>
	if (_info[sock].buffer.length == 0 && _info[sock].recvMsg.s16BufferSize) {
    87f4:	b903      	cbnz	r3, 87f8 <WiFiSocketClass::peek(signed char)+0x48>
    87f6:	b92a      	cbnz	r2, 8804 <WiFiSocketClass::peek(signed char)+0x54>
	return *_info[sock].buffer.head;
    87f8:	1b33      	subs	r3, r6, r4
    87fa:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    87fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8800:	7818      	ldrb	r0, [r3, #0]
}
    8802:	bd70      	pop	{r4, r5, r6, pc}
		if (!fillRecvBuffer(sock)) {
    8804:	4621      	mov	r1, r4
    8806:	4628      	mov	r0, r5
    8808:	f7ff ff90 	bl	872c <WiFiSocketClass::fillRecvBuffer(signed char)>
    880c:	2800      	cmp	r0, #0
    880e:	d1f3      	bne.n	87f8 <WiFiSocketClass::peek(signed char)+0x48>
		return -1;
    8810:	f04f 30ff 	mov.w	r0, #4294967295
}
    8814:	bd70      	pop	{r4, r5, r6, pc}
    8816:	bf00      	nop

00008818 <WiFiSocketClass::read(signed char, unsigned char*, unsigned int)>:
{
    8818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    881c:	4689      	mov	r9, r1
    881e:	4682      	mov	sl, r0
    8820:	ebc9 08c9 	rsb	r8, r9, r9, lsl #3
    8824:	eb0a 08c8 	add.w	r8, sl, r8, lsl #3
    8828:	b083      	sub	sp, #12
	m2m_wifi_handle_events(NULL);
    882a:	2000      	movs	r0, #0
{
    882c:	4693      	mov	fp, r2
    882e:	461e      	mov	r6, r3
	m2m_wifi_handle_events(NULL);
    8830:	f7fe f90a 	bl	6a48 <m2m_wifi_handle_events>
	if (_info[sock].state != SOCKET_STATE_CONNECTED && _info[sock].state != SOCKET_STATE_BOUND) {
    8834:	f898 2004 	ldrb.w	r2, [r8, #4]
    8838:	2a03      	cmp	r2, #3
    883a:	d006      	beq.n	884a <WiFiSocketClass::read(signed char, unsigned char*, unsigned int)+0x32>
    883c:	2a05      	cmp	r2, #5
    883e:	d004      	beq.n	884a <WiFiSocketClass::read(signed char, unsigned char*, unsigned int)+0x32>
		return 0;
    8840:	2700      	movs	r7, #0
}
    8842:	4638      	mov	r0, r7
    8844:	b003      	add	sp, #12
    8846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	m2m_wifi_handle_events(NULL);
    884a:	2000      	movs	r0, #0
    884c:	f7fe f8fc 	bl	6a48 <m2m_wifi_handle_events>
	if (_info[sock].state != SOCKET_STATE_CONNECTED && _info[sock].state != SOCKET_STATE_BOUND) {
    8850:	f898 2004 	ldrb.w	r2, [r8, #4]
    8854:	2a03      	cmp	r2, #3
    8856:	d001      	beq.n	885c <WiFiSocketClass::read(signed char, unsigned char*, unsigned int)+0x44>
    8858:	2a05      	cmp	r2, #5
    885a:	d1f1      	bne.n	8840 <WiFiSocketClass::read(signed char, unsigned char*, unsigned int)+0x28>
	return (_info[sock].buffer.length + _info[sock].recvMsg.s16BufferSize);
    885c:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
    8860:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
    8864:	f9b8 100c 	ldrsh.w	r1, [r8, #12]
    8868:	6a92      	ldr	r2, [r2, #40]	; 0x28
    886a:	4411      	add	r1, r2
    886c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
	if (avail <= 0) {
    8870:	2900      	cmp	r1, #0
	return (_info[sock].buffer.length + _info[sock].recvMsg.s16BufferSize);
    8872:	9301      	str	r3, [sp, #4]
	if (avail <= 0) {
    8874:	dde4      	ble.n	8840 <WiFiSocketClass::read(signed char, unsigned char*, unsigned int)+0x28>
	if ((int)size > avail) {
    8876:	428e      	cmp	r6, r1
    8878:	dd38      	ble.n	88ec <WiFiSocketClass::read(signed char, unsigned char*, unsigned int)+0xd4>
		size = avail;
    887a:	460e      	mov	r6, r1
	if (_info[sock].buffer.length == 0 && _info[sock].recvMsg.s16BufferSize == 0) {
    887c:	9b01      	ldr	r3, [sp, #4]
    887e:	eba3 0509 	sub.w	r5, r3, r9
    8882:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
{
    8886:	2700      	movs	r7, #0
		if (_info[sock].buffer.length == 0 && _info[sock].recvMsg.s16BufferSize) {
    8888:	b912      	cbnz	r2, 8890 <WiFiSocketClass::read(signed char, unsigned char*, unsigned int)+0x78>
    888a:	f9b8 100c 	ldrsh.w	r1, [r8, #12]
    888e:	bb31      	cbnz	r1, 88de <WiFiSocketClass::read(signed char, unsigned char*, unsigned int)+0xc6>
		if (toCopy > _info[sock].buffer.length) {
    8890:	42b2      	cmp	r2, r6
    8892:	bfa8      	it	ge
    8894:	4632      	movge	r2, r6
		memcpy(buf, _info[sock].buffer.head, toCopy);
    8896:	6a69      	ldr	r1, [r5, #36]	; 0x24
    8898:	4658      	mov	r0, fp
    889a:	4614      	mov	r4, r2
    889c:	f000 fb26 	bl	8eec <memcpy>
		_info[sock].buffer.head += toCopy;
    88a0:	6a69      	ldr	r1, [r5, #36]	; 0x24
		_info[sock].buffer.length -= toCopy;
    88a2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
		_info[sock].buffer.head += toCopy;
    88a4:	4421      	add	r1, r4
		_info[sock].buffer.length -= toCopy;
    88a6:	1b12      	subs	r2, r2, r4
	while (size) {
    88a8:	1b36      	subs	r6, r6, r4
		_info[sock].buffer.head += toCopy;
    88aa:	6269      	str	r1, [r5, #36]	; 0x24
		_info[sock].buffer.length -= toCopy;
    88ac:	62aa      	str	r2, [r5, #40]	; 0x28
		buf += toCopy;
    88ae:	44a3      	add	fp, r4
		bytesRead += toCopy;
    88b0:	4427      	add	r7, r4
	while (size) {
    88b2:	d1e9      	bne.n	8888 <WiFiSocketClass::read(signed char, unsigned char*, unsigned int)+0x70>
	if (_info[sock].buffer.length == 0 && _info[sock].recvMsg.s16BufferSize == 0) {
    88b4:	2a00      	cmp	r2, #0
    88b6:	d1c4      	bne.n	8842 <WiFiSocketClass::read(signed char, unsigned char*, unsigned int)+0x2a>
    88b8:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
    88bc:	2b00      	cmp	r3, #0
    88be:	d1c0      	bne.n	8842 <WiFiSocketClass::read(signed char, unsigned char*, unsigned int)+0x2a>
		if (sock < TCP_SOCK_MAX) {
    88c0:	f1b9 0f06 	cmp.w	r9, #6
			recv(sock, NULL, 0, 0);
    88c4:	4613      	mov	r3, r2
    88c6:	4611      	mov	r1, r2
    88c8:	4648      	mov	r0, r9
		if (sock < TCP_SOCK_MAX) {
    88ca:	dc1b      	bgt.n	8904 <WiFiSocketClass::read(signed char, unsigned char*, unsigned int)+0xec>
			recv(sock, NULL, 0, 0);
    88cc:	f7ff fbf8 	bl	80c0 <recv>
		m2m_wifi_handle_events(NULL);
    88d0:	2000      	movs	r0, #0
    88d2:	f7fe f8b9 	bl	6a48 <m2m_wifi_handle_events>
}
    88d6:	4638      	mov	r0, r7
    88d8:	b003      	add	sp, #12
    88da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!fillRecvBuffer(sock)) {
    88de:	4649      	mov	r1, r9
    88e0:	4650      	mov	r0, sl
    88e2:	f7ff ff23 	bl	872c <WiFiSocketClass::fillRecvBuffer(signed char)>
    88e6:	b128      	cbz	r0, 88f4 <WiFiSocketClass::read(signed char, unsigned char*, unsigned int)+0xdc>
	if (_info[sock].buffer.length == 0 && _info[sock].recvMsg.s16BufferSize == 0) {
    88e8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    88ea:	e7d1      	b.n	8890 <WiFiSocketClass::read(signed char, unsigned char*, unsigned int)+0x78>
	while (size) {
    88ec:	2e00      	cmp	r6, #0
    88ee:	d1c5      	bne.n	887c <WiFiSocketClass::read(signed char, unsigned char*, unsigned int)+0x64>
    88f0:	4637      	mov	r7, r6
    88f2:	e7df      	b.n	88b4 <WiFiSocketClass::read(signed char, unsigned char*, unsigned int)+0x9c>
	if (_info[sock].buffer.length == 0 && _info[sock].recvMsg.s16BufferSize == 0) {
    88f4:	9b01      	ldr	r3, [sp, #4]
    88f6:	eba3 0b09 	sub.w	fp, r3, r9
    88fa:	eb0a 0acb 	add.w	sl, sl, fp, lsl #3
    88fe:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
    8902:	e7d7      	b.n	88b4 <WiFiSocketClass::read(signed char, unsigned char*, unsigned int)+0x9c>
			recvfrom(sock, NULL, 0, 0);
    8904:	f7ff fc54 	bl	81b0 <recvfrom>
    8908:	e7e2      	b.n	88d0 <WiFiSocketClass::read(signed char, unsigned char*, unsigned int)+0xb8>
    890a:	bf00      	nop

0000890c <WiFiSocketClass::handleEvent(signed char, unsigned char, void*)>:
	switch (u8Msg) {
    890c:	3a01      	subs	r2, #1
{
    890e:	b570      	push	{r4, r5, r6, lr}
    8910:	4605      	mov	r5, r0
    8912:	460c      	mov	r4, r1
    8914:	461e      	mov	r6, r3
	switch (u8Msg) {
    8916:	2a08      	cmp	r2, #8
    8918:	d808      	bhi.n	892c <WiFiSocketClass::handleEvent(signed char, unsigned char, void*)+0x20>
    891a:	e8df f002 	tbb	[pc, r2]
    891e:	5b30      	.short	0x5b30
    8920:	08683d07 	.word	0x08683d07
    8924:	0707      	.short	0x0707
    8926:	08          	.byte	0x08
    8927:	00          	.byte	0x00
				_info[sock].state = SOCKET_STATE_IDLE;
    8928:	2301      	movs	r3, #1
    892a:	7123      	strb	r3, [r4, #4]
}
    892c:	bd70      	pop	{r4, r5, r6, pc}
			m2m_periph_gpio_set_val(M2M_PERIPH_GPIO16, 0);
    892e:	2100      	movs	r1, #0
    8930:	2005      	movs	r0, #5
    8932:	f7fd fe6b 	bl	660c <m2m_periph_gpio_set_val>
			m2m_periph_gpio_set_val(M2M_PERIPH_GPIO5, 0);
    8936:	2100      	movs	r1, #0
    8938:	2002      	movs	r0, #2
    893a:	f7fd fe67 	bl	660c <m2m_periph_gpio_set_val>
			if (pstrRecvMsg->s16BufferSize <= 0) {
    893e:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
    8942:	2900      	cmp	r1, #0
    8944:	dd73      	ble.n	8a2e <WiFiSocketClass::handleEvent(signed char, unsigned char, void*)+0x122>
			} else if (_info[sock].state == SOCKET_STATE_CONNECTED || _info[sock].state == SOCKET_STATE_BOUND) {
    8946:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
    894a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
    894e:	7910      	ldrb	r0, [r2, #4]
    8950:	2803      	cmp	r0, #3
    8952:	d001      	beq.n	8958 <WiFiSocketClass::handleEvent(signed char, unsigned char, void*)+0x4c>
    8954:	2805      	cmp	r0, #5
    8956:	d163      	bne.n	8a20 <WiFiSocketClass::handleEvent(signed char, unsigned char, void*)+0x114>
				_info[sock].recvMsg.pu8Buffer = pstrRecvMsg->pu8Buffer;
    8958:	6830      	ldr	r0, [r6, #0]
    895a:	6090      	str	r0, [r2, #8]
				if (sock < TCP_SOCK_MAX) {
    895c:	2c06      	cmp	r4, #6
				_info[sock].recvMsg.s16BufferSize = pstrRecvMsg->s16BufferSize;
    895e:	8191      	strh	r1, [r2, #12]
				if (sock < TCP_SOCK_MAX) {
    8960:	dc52      	bgt.n	8a08 <WiFiSocketClass::handleEvent(signed char, unsigned char, void*)+0xfc>
				fillRecvBuffer(sock);
    8962:	4621      	mov	r1, r4
    8964:	4628      	mov	r0, r5
    8966:	f7ff fee1 	bl	872c <WiFiSocketClass::fillRecvBuffer(signed char)>
			m2m_periph_gpio_set_val(M2M_PERIPH_GPIO16, 1);
    896a:	2101      	movs	r1, #1
    896c:	2005      	movs	r0, #5
    896e:	f7fd fe4d 	bl	660c <m2m_periph_gpio_set_val>
}
    8972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			m2m_periph_gpio_set_val(M2M_PERIPH_GPIO5, 1);
    8976:	2101      	movs	r1, #1
    8978:	2002      	movs	r0, #2
    897a:	f7fd be47 	b.w	660c <m2m_periph_gpio_set_val>
				_info[sock].state = SOCKET_STATE_BOUND;
    897e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    8982:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
			if (pstrBind && pstrBind->status == 0) {
    8986:	2b00      	cmp	r3, #0
    8988:	d0ce      	beq.n	8928 <WiFiSocketClass::handleEvent(signed char, unsigned char, void*)+0x1c>
    898a:	f993 3000 	ldrsb.w	r3, [r3]
    898e:	2b00      	cmp	r3, #0
    8990:	d1ca      	bne.n	8928 <WiFiSocketClass::handleEvent(signed char, unsigned char, void*)+0x1c>
				_info[sock].state = SOCKET_STATE_BOUND;
    8992:	2305      	movs	r3, #5
    8994:	7123      	strb	r3, [r4, #4]
}
    8996:	bd70      	pop	{r4, r5, r6, pc}
			if (pstrAccept && pstrAccept->sock > -1) {
    8998:	2b00      	cmp	r3, #0
    899a:	d0c7      	beq.n	892c <WiFiSocketClass::handleEvent(signed char, unsigned char, void*)+0x20>
    899c:	f993 2000 	ldrsb.w	r2, [r3]
    89a0:	2a00      	cmp	r2, #0
    89a2:	dbc3      	blt.n	892c <WiFiSocketClass::handleEvent(signed char, unsigned char, void*)+0x20>
				_info[pstrAccept->sock].state = SOCKET_STATE_ACCEPTED;
    89a4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    89a8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    89ac:	2108      	movs	r1, #8
    89ae:	7111      	strb	r1, [r2, #4]
				_info[pstrAccept->sock].parent = sock;
    89b0:	f993 2000 	ldrsb.w	r2, [r3]
    89b4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    89b8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    89bc:	7154      	strb	r4, [r2, #5]
				_info[pstrAccept->sock].recvMsg.strRemoteAddr = pstrAccept->strAddr;
    89be:	f913 4b04 	ldrsb.w	r4, [r3], #4
    89c2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    89c6:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
    89ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    89cc:	3410      	adds	r4, #16
    89ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
    89d2:	bd70      	pop	{r4, r5, r6, pc}
				_info[sock].state = SOCKET_STATE_LISTENING;
    89d4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    89d8:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
			if (pstrListen && pstrListen->status == 0) {
    89dc:	2b00      	cmp	r3, #0
    89de:	d0a3      	beq.n	8928 <WiFiSocketClass::handleEvent(signed char, unsigned char, void*)+0x1c>
    89e0:	f993 3000 	ldrsb.w	r3, [r3]
    89e4:	2b00      	cmp	r3, #0
    89e6:	d19f      	bne.n	8928 <WiFiSocketClass::handleEvent(signed char, unsigned char, void*)+0x1c>
				_info[sock].state = SOCKET_STATE_LISTENING;
    89e8:	2307      	movs	r3, #7
    89ea:	7123      	strb	r3, [r4, #4]
}
    89ec:	bd70      	pop	{r4, r5, r6, pc}
				_info[sock].state = SOCKET_STATE_CONNECTED;
    89ee:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    89f2:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
			if (pstrConnect && pstrConnect->s8Error >= 0) {
    89f6:	2b00      	cmp	r3, #0
    89f8:	d096      	beq.n	8928 <WiFiSocketClass::handleEvent(signed char, unsigned char, void*)+0x1c>
    89fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
    89fe:	2b00      	cmp	r3, #0
    8a00:	db92      	blt.n	8928 <WiFiSocketClass::handleEvent(signed char, unsigned char, void*)+0x1c>
				_info[sock].state = SOCKET_STATE_CONNECTED;
    8a02:	2303      	movs	r3, #3
    8a04:	7123      	strb	r3, [r4, #4]
}
    8a06:	bd70      	pop	{r4, r5, r6, pc}
					_info[sock].recvMsg.strRemoteAddr = pstrRecvMsg->strRemoteAddr;
    8a08:	f106 0308 	add.w	r3, r6, #8
    8a0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    8a0e:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
    8a12:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
    8a16:	f10c 0c10 	add.w	ip, ip, #16
    8a1a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    8a1e:	e7a0      	b.n	8962 <WiFiSocketClass::handleEvent(signed char, unsigned char, void*)+0x56>
				hif_receive(0, NULL, 0, 1);
    8a20:	2200      	movs	r2, #0
    8a22:	2301      	movs	r3, #1
    8a24:	4611      	mov	r1, r2
    8a26:	4610      	mov	r0, r2
    8a28:	f7fd fd86 	bl	6538 <hif_receive>
    8a2c:	e79d      	b.n	896a <WiFiSocketClass::handleEvent(signed char, unsigned char, void*)+0x5e>
				close(sock);
    8a2e:	4621      	mov	r1, r4
    8a30:	4628      	mov	r0, r5
    8a32:	f7ff fe3d 	bl	86b0 <WiFiSocketClass::close(signed char)>
    8a36:	e798      	b.n	896a <WiFiSocketClass::handleEvent(signed char, unsigned char, void*)+0x5e>

00008a38 <WiFiSocketClass::eventCallback(signed char, unsigned char, void*)>:
{
    8a38:	4684      	mov	ip, r0
    8a3a:	4613      	mov	r3, r2
	WiFiSocket.handleEvent(sock, u8Msg, pvMsg);
    8a3c:	4802      	ldr	r0, [pc, #8]	; (8a48 <WiFiSocketClass::eventCallback(signed char, unsigned char, void*)+0x10>)
    8a3e:	460a      	mov	r2, r1
    8a40:	4661      	mov	r1, ip
    8a42:	f7ff bf63 	b.w	890c <WiFiSocketClass::handleEvent(signed char, unsigned char, void*)>
    8a46:	bf00      	nop
    8a48:	1fff784c 	.word	0x1fff784c

00008a4c <_GLOBAL__sub_I__ZN15WiFiSocketClassC2Ev>:

WiFiSocketClass WiFiSocket;
    8a4c:	b510      	push	{r4, lr}
    8a4e:	4c05      	ldr	r4, [pc, #20]	; (8a64 <_GLOBAL__sub_I__ZN15WiFiSocketClassC2Ev+0x18>)
    8a50:	4620      	mov	r0, r4
    8a52:	f7ff fd29 	bl	84a8 <WiFiSocketClass::WiFiSocketClass()>
    8a56:	4620      	mov	r0, r4
    8a58:	4a03      	ldr	r2, [pc, #12]	; (8a68 <_GLOBAL__sub_I__ZN15WiFiSocketClassC2Ev+0x1c>)
    8a5a:	4904      	ldr	r1, [pc, #16]	; (8a6c <_GLOBAL__sub_I__ZN15WiFiSocketClassC2Ev+0x20>)
    8a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8a60:	f001 bda2 	b.w	a5a8 <__aeabi_atexit>
    8a64:	1fff784c 	.word	0x1fff784c
    8a68:	1fff0834 	.word	0x1fff0834
    8a6c:	00008495 	.word	0x00008495

00008a70 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    8a70:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8a72:	4d23      	ldr	r5, [pc, #140]	; (8b00 <now()+0x90>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    8a74:	4e23      	ldr	r6, [pc, #140]	; (8b04 <now()+0x94>)
    8a76:	682b      	ldr	r3, [r5, #0]
    8a78:	6832      	ldr	r2, [r6, #0]
    8a7a:	4f23      	ldr	r7, [pc, #140]	; (8b08 <now()+0x98>)
time_t now() {
    8a7c:	b083      	sub	sp, #12
    8a7e:	9300      	str	r3, [sp, #0]
	return ret;
    8a80:	9b00      	ldr	r3, [sp, #0]
  while (millis() - prevMillis >= 1000) {
    8a82:	1a9b      	subs	r3, r3, r2
    8a84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    8a88:	d337      	bcc.n	8afa <now()+0x8a>
    8a8a:	6839      	ldr	r1, [r7, #0]
    8a8c:	3101      	adds	r1, #1
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8a8e:	682c      	ldr	r4, [r5, #0]
    8a90:	9400      	str	r4, [sp, #0]
	return ret;
    8a92:	9b00      	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    8a94:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
  while (millis() - prevMillis >= 1000) {
    8a98:	1a9b      	subs	r3, r3, r2
    8a9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    8a9e:	4608      	mov	r0, r1
    8aa0:	f101 0101 	add.w	r1, r1, #1
    8aa4:	d2f3      	bcs.n	8a8e <now()+0x1e>
    8aa6:	6032      	str	r2, [r6, #0]
    8aa8:	6038      	str	r0, [r7, #0]
    8aaa:	9400      	str	r4, [sp, #0]
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    8aac:	4c17      	ldr	r4, [pc, #92]	; (8b0c <now()+0x9c>)
    8aae:	6823      	ldr	r3, [r4, #0]
    8ab0:	4283      	cmp	r3, r0
    8ab2:	d811      	bhi.n	8ad8 <now()+0x68>
    if (getTimePtr != 0) {
    8ab4:	4b16      	ldr	r3, [pc, #88]	; (8b10 <now()+0xa0>)
    8ab6:	681b      	ldr	r3, [r3, #0]
    8ab8:	b173      	cbz	r3, 8ad8 <now()+0x68>
      time_t t = getTimePtr();
    8aba:	4798      	blx	r3
      if (t != 0) {
    8abc:	4301      	orrs	r1, r0
    8abe:	d00e      	beq.n	8ade <now()+0x6e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8ac0:	682b      	ldr	r3, [r5, #0]
    8ac2:	9301      	str	r3, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    8ac4:	4b13      	ldr	r3, [pc, #76]	; (8b14 <now()+0xa4>)
	return ret;
    8ac6:	9a01      	ldr	r2, [sp, #4]
    8ac8:	681b      	ldr	r3, [r3, #0]
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    8aca:	6032      	str	r2, [r6, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    8acc:	4403      	add	r3, r0
    8ace:	6023      	str	r3, [r4, #0]
  Status = timeSet;
    8ad0:	4b11      	ldr	r3, [pc, #68]	; (8b18 <now()+0xa8>)
  sysTime = (uint32_t)t;  
    8ad2:	6038      	str	r0, [r7, #0]
  Status = timeSet;
    8ad4:	2202      	movs	r2, #2
    8ad6:	701a      	strb	r2, [r3, #0]
}
    8ad8:	2100      	movs	r1, #0
    8ada:	b003      	add	sp, #12
    8adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    8ade:	490e      	ldr	r1, [pc, #56]	; (8b18 <now()+0xa8>)
        nextSyncTime = sysTime + syncInterval;
    8ae0:	4a0c      	ldr	r2, [pc, #48]	; (8b14 <now()+0xa4>)
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    8ae2:	780b      	ldrb	r3, [r1, #0]
        nextSyncTime = sysTime + syncInterval;
    8ae4:	6838      	ldr	r0, [r7, #0]
    8ae6:	6812      	ldr	r2, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    8ae8:	3b00      	subs	r3, #0
    8aea:	bf18      	it	ne
    8aec:	2301      	movne	r3, #1
        nextSyncTime = sysTime + syncInterval;
    8aee:	4402      	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    8af0:	700b      	strb	r3, [r1, #0]
}
    8af2:	2100      	movs	r1, #0
        nextSyncTime = sysTime + syncInterval;
    8af4:	6022      	str	r2, [r4, #0]
}
    8af6:	b003      	add	sp, #12
    8af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8afa:	6838      	ldr	r0, [r7, #0]
    8afc:	e7d6      	b.n	8aac <now()+0x3c>
    8afe:	bf00      	nop
    8b00:	1fff7ae4 	.word	0x1fff7ae4
    8b04:	1fff7ab8 	.word	0x1fff7ab8
    8b08:	1fff7ac4 	.word	0x1fff7ac4
    8b0c:	1fff7abc 	.word	0x1fff7abc
    8b10:	1fff7ac8 	.word	0x1fff7ac8
    8b14:	1fff0ca8 	.word	0x1fff0ca8
    8b18:	1fff7ac0 	.word	0x1fff7ac0

00008b1c <setSyncProvider(long long (*)())>:
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
  nextSyncTime = sysTime;
    8b1c:	4a03      	ldr	r2, [pc, #12]	; (8b2c <setSyncProvider(long long (*)())+0x10>)
  getTimePtr = getTimeFunction;  
    8b1e:	4904      	ldr	r1, [pc, #16]	; (8b30 <setSyncProvider(long long (*)())+0x14>)
  nextSyncTime = sysTime;
    8b20:	4b04      	ldr	r3, [pc, #16]	; (8b34 <setSyncProvider(long long (*)())+0x18>)
    8b22:	6812      	ldr	r2, [r2, #0]
  getTimePtr = getTimeFunction;  
    8b24:	6008      	str	r0, [r1, #0]
  nextSyncTime = sysTime;
    8b26:	601a      	str	r2, [r3, #0]
  now(); // this will sync the clock
    8b28:	f7ff bfa2 	b.w	8a70 <now()>
    8b2c:	1fff7ac4 	.word	0x1fff7ac4
    8b30:	1fff7ac8 	.word	0x1fff7ac8
    8b34:	1fff7abc 	.word	0x1fff7abc

00008b38 <setSyncInterval(long long)>:
}

void setSyncInterval(time_t interval){ // set the number of seconds between re-sync
  syncInterval = (uint32_t)interval;
  nextSyncTime = sysTime + syncInterval;
    8b38:	4b03      	ldr	r3, [pc, #12]	; (8b48 <setSyncInterval(long long)+0x10>)
  syncInterval = (uint32_t)interval;
    8b3a:	4904      	ldr	r1, [pc, #16]	; (8b4c <setSyncInterval(long long)+0x14>)
  nextSyncTime = sysTime + syncInterval;
    8b3c:	681b      	ldr	r3, [r3, #0]
    8b3e:	4a04      	ldr	r2, [pc, #16]	; (8b50 <setSyncInterval(long long)+0x18>)
  syncInterval = (uint32_t)interval;
    8b40:	6008      	str	r0, [r1, #0]
  nextSyncTime = sysTime + syncInterval;
    8b42:	4403      	add	r3, r0
    8b44:	6013      	str	r3, [r2, #0]
}
    8b46:	4770      	bx	lr
    8b48:	1fff7ac4 	.word	0x1fff7ac4
    8b4c:	1fff0ca8 	.word	0x1fff0ca8
    8b50:	1fff7abc 	.word	0x1fff7abc

00008b54 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    8b54:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    8b58:	b672      	cpsid	i
extern const uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;

void EventResponder::triggerEventNotImmediate()
{
	bool irq = disableInterrupts();
	if (_triggered == false) {
    8b5a:	7f43      	ldrb	r3, [r0, #29]
    8b5c:	b95b      	cbnz	r3, 8b76 <EventResponder::triggerEventNotImmediate()+0x22>
		// not already triggered
		if (_type == EventTypeYield) {
    8b5e:	7f01      	ldrb	r1, [r0, #28]
    8b60:	2901      	cmp	r1, #1
{
    8b62:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    8b64:	d00b      	beq.n	8b7e <EventResponder::triggerEventNotImmediate()+0x2a>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    8b66:	2903      	cmp	r1, #3
    8b68:	d013      	beq.n	8b92 <EventResponder::triggerEventNotImmediate()+0x3e>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    8b6a:	2301      	movs	r3, #1
    8b6c:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    8b6e:	b902      	cbnz	r2, 8b72 <EventResponder::triggerEventNotImmediate()+0x1e>
    8b70:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    8b72:	bc30      	pop	{r4, r5}
    8b74:	4770      	bx	lr
    8b76:	b90a      	cbnz	r2, 8b7c <EventResponder::triggerEventNotImmediate()+0x28>
    8b78:	b662      	cpsie	i
    8b7a:	4770      	bx	lr
    8b7c:	4770      	bx	lr
			if (firstYield == nullptr) {
    8b7e:	4c12      	ldr	r4, [pc, #72]	; (8bc8 <EventResponder::triggerEventNotImmediate()+0x74>)
    8b80:	6821      	ldr	r1, [r4, #0]
    8b82:	b1b1      	cbz	r1, 8bb2 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    8b84:	4911      	ldr	r1, [pc, #68]	; (8bcc <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    8b86:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    8b88:	680b      	ldr	r3, [r1, #0]
    8b8a:	6183      	str	r3, [r0, #24]
				lastYield = this;
    8b8c:	6008      	str	r0, [r1, #0]
				_prev->_next = this;
    8b8e:	6158      	str	r0, [r3, #20]
				lastYield = this;
    8b90:	e7eb      	b.n	8b6a <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    8b92:	4d0f      	ldr	r5, [pc, #60]	; (8bd0 <EventResponder::triggerEventNotImmediate()+0x7c>)
    8b94:	490f      	ldr	r1, [pc, #60]	; (8bd4 <EventResponder::triggerEventNotImmediate()+0x80>)
    8b96:	682c      	ldr	r4, [r5, #0]
    8b98:	b18c      	cbz	r4, 8bbe <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    8b9a:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    8b9c:	680b      	ldr	r3, [r1, #0]
    8b9e:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    8ba0:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    8ba2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8ba6:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    8baa:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    8bac:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    8bb0:	e7db      	b.n	8b6a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    8bb2:	4b06      	ldr	r3, [pc, #24]	; (8bcc <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    8bb4:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    8bb6:	6181      	str	r1, [r0, #24]
				firstYield = this;
    8bb8:	6020      	str	r0, [r4, #0]
				lastYield = this;
    8bba:	6018      	str	r0, [r3, #0]
    8bbc:	e7d5      	b.n	8b6a <EventResponder::triggerEventNotImmediate()+0x16>
				_next = nullptr;
    8bbe:	6144      	str	r4, [r0, #20]
				_prev = nullptr;
    8bc0:	6184      	str	r4, [r0, #24]
				firstInterrupt = this;
    8bc2:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    8bc4:	e7ed      	b.n	8ba2 <EventResponder::triggerEventNotImmediate()+0x4e>
    8bc6:	bf00      	nop
    8bc8:	1fff7acc 	.word	0x1fff7acc
    8bcc:	1fff7adc 	.word	0x1fff7adc
    8bd0:	1fff7ad4 	.word	0x1fff7ad4
    8bd4:	1fff7ad0 	.word	0x1fff7ad0

00008bd8 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    8bd8:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    8bda:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    8bde:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    8be0:	4c0c      	ldr	r4, [pc, #48]	; (8c14 <EventResponder::runFromInterrupt()+0x3c>)
    8be2:	6820      	ldr	r0, [r4, #0]
		if (first) {
    8be4:	b180      	cbz	r0, 8c08 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    8be6:	4e0c      	ldr	r6, [pc, #48]	; (8c18 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    8be8:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    8bea:	6943      	ldr	r3, [r0, #20]
    8bec:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    8bee:	b173      	cbz	r3, 8c0e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    8bf0:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    8bf2:	b902      	cbnz	r2, 8bf6 <EventResponder::runFromInterrupt()+0x1e>
    8bf4:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    8bf6:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    8bf8:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    8bfa:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    8bfc:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    8c00:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    8c02:	6820      	ldr	r0, [r4, #0]
		if (first) {
    8c04:	2800      	cmp	r0, #0
    8c06:	d1f0      	bne.n	8bea <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    8c08:	b902      	cbnz	r2, 8c0c <EventResponder::runFromInterrupt()+0x34>
    8c0a:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    8c0c:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    8c0e:	6033      	str	r3, [r6, #0]
    8c10:	e7ef      	b.n	8bf2 <EventResponder::runFromInterrupt()+0x1a>
    8c12:	bf00      	nop
    8c14:	1fff7ad4 	.word	0x1fff7ad4
    8c18:	1fff7ad0 	.word	0x1fff7ad0

00008c1c <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    8c1c:	f7ff bfdc 	b.w	8bd8 <EventResponder::runFromInterrupt()>

00008c20 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    8c20:	4a02      	ldr	r2, [pc, #8]	; (8c2c <systick_isr+0xc>)
    8c22:	6813      	ldr	r3, [r2, #0]
    8c24:	3301      	adds	r3, #1
    8c26:	6013      	str	r3, [r2, #0]
}
    8c28:	4770      	bx	lr
    8c2a:	bf00      	nop
    8c2c:	1fff7ae4 	.word	0x1fff7ae4

00008c30 <IPAddress::printTo(Print&) const>:

#include <Arduino.h>
#include "IPAddress.h"

size_t IPAddress::printTo(Print& p) const
{
    8c30:	b570      	push	{r4, r5, r6, lr}
    8c32:	4604      	mov	r4, r0
    8c34:	460d      	mov	r5, r1
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    8c36:	1dc6      	adds	r6, r0, #7
    8c38:	f814 1f04 	ldrb.w	r1, [r4, #4]!
    8c3c:	2300      	movs	r3, #0
    8c3e:	220a      	movs	r2, #10
    8c40:	4628      	mov	r0, r5
    8c42:	f000 f8d7 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	int i=0;
	while (1) {
		p.print(_address.bytes[i], DEC);
		if (++i >= 4) return 4;
		p.write('.');
    8c46:	682b      	ldr	r3, [r5, #0]
    8c48:	212e      	movs	r1, #46	; 0x2e
    8c4a:	681b      	ldr	r3, [r3, #0]
    8c4c:	4628      	mov	r0, r5
    8c4e:	4798      	blx	r3
    8c50:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    8c54:	2300      	movs	r3, #0
    8c56:	220a      	movs	r2, #10
    8c58:	4628      	mov	r0, r5
    8c5a:	f000 f8cb 	bl	8df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
		if (++i >= 4) return 4;
    8c5e:	42b4      	cmp	r4, r6
    8c60:	d1f1      	bne.n	8c46 <IPAddress::printTo(Print&) const+0x16>
	}
}
    8c62:	2004      	movs	r0, #4
    8c64:	bd70      	pop	{r4, r5, r6, pc}
    8c66:	bf00      	nop

00008c68 <IPAddress::fromString(char const*)>:
bool IPAddress::fromString(const char *address)
{
	unsigned int acc = 0; // Accumulator
	unsigned int dots = 0;

	while (*address) {
    8c68:	780b      	ldrb	r3, [r1, #0]
    8c6a:	b353      	cbz	r3, 8cc2 <IPAddress::fromString(char const*)+0x5a>
{
    8c6c:	b510      	push	{r4, lr}
	unsigned int dots = 0;
    8c6e:	f04f 0e00 	mov.w	lr, #0
	unsigned int acc = 0; // Accumulator
    8c72:	4672      	mov	r2, lr
    8c74:	e006      	b.n	8c84 <IPAddress::fromString(char const*)+0x1c>
		char c = *address++;
		if (c >= '0' && c <= '9') {
			acc = acc * 10 + (c - '0');
    8c76:	f1ac 0230 	sub.w	r2, ip, #48	; 0x30
			if (acc > 255) {
    8c7a:	2aff      	cmp	r2, #255	; 0xff
    8c7c:	d81f      	bhi.n	8cbe <IPAddress::fromString(char const*)+0x56>
	while (*address) {
    8c7e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    8c82:	b1b3      	cbz	r3, 8cb2 <IPAddress::fromString(char const*)+0x4a>
		if (c >= '0' && c <= '9') {
    8c84:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
			acc = acc * 10 + (c - '0');
    8c88:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (c >= '0' && c <= '9') {
    8c8c:	2c09      	cmp	r4, #9
			acc = acc * 10 + (c - '0');
    8c8e:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
		if (c >= '0' && c <= '9') {
    8c92:	d9f0      	bls.n	8c76 <IPAddress::fromString(char const*)+0xe>
				// Value out of [0..255] range
				return false;
			}
		} else if (c == '.') {
    8c94:	2b2e      	cmp	r3, #46	; 0x2e
    8c96:	d112      	bne.n	8cbe <IPAddress::fromString(char const*)+0x56>
			if (dots == 3) {
    8c98:	f1be 0f03 	cmp.w	lr, #3
    8c9c:	d00f      	beq.n	8cbe <IPAddress::fromString(char const*)+0x56>
				// Too much dots (there must be 3 dots)
				return false;
			}
			_address.bytes[dots++] = acc;
    8c9e:	eb00 030e 	add.w	r3, r0, lr
    8ca2:	f10e 0e01 	add.w	lr, lr, #1
    8ca6:	711a      	strb	r2, [r3, #4]
	while (*address) {
    8ca8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
			acc = 0;
    8cac:	2200      	movs	r2, #0
	while (*address) {
    8cae:	2b00      	cmp	r3, #0
    8cb0:	d1e8      	bne.n	8c84 <IPAddress::fromString(char const*)+0x1c>
		} else {
			// Invalid char
			return false;
		}
	}
	if (dots != 3) {
    8cb2:	f1be 0f03 	cmp.w	lr, #3
    8cb6:	d102      	bne.n	8cbe <IPAddress::fromString(char const*)+0x56>
		// Too few dots (there must be 3 dots)
		return false;
	}
	_address.bytes[3] = acc;
    8cb8:	71c2      	strb	r2, [r0, #7]
	return true;
    8cba:	2001      	movs	r0, #1
}
    8cbc:	bd10      	pop	{r4, pc}
		return false;
    8cbe:	2000      	movs	r0, #0
}
    8cc0:	bd10      	pop	{r4, pc}
		return false;
    8cc2:	2000      	movs	r0, #0
}
    8cc4:	4770      	bx	lr
    8cc6:	bf00      	nop

00008cc8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
        return write(p, sizeof(buf) - (p - buf));
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    8cc8:	b570      	push	{r4, r5, r6, lr}
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    8cca:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    8ccc:	b08a      	sub	sp, #40	; 0x28
		base = 10;
    8cce:	bf08      	it	eq
    8cd0:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    8cd2:	b3a1      	cbz	r1, 8d3e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x76>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    8cd4:	f04f 0e21 	mov.w	lr, #33	; 0x21
    8cd8:	e002      	b.n	8ce0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    8cda:	fa5f fe86 	uxtb.w	lr, r6
			n /= base;
    8cde:	4629      	mov	r1, r5
			digit = n % base;
    8ce0:	fbb1 f5f2 	udiv	r5, r1, r2
    8ce4:	fb02 1415 	mls	r4, r2, r5, r1
    8ce8:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8cec:	2c09      	cmp	r4, #9
    8cee:	f10c 0430 	add.w	r4, ip, #48	; 0x30
    8cf2:	bf98      	it	ls
    8cf4:	fa5f fc84 	uxtbls.w	ip, r4
    8cf8:	f10e 0428 	add.w	r4, lr, #40	; 0x28
    8cfc:	bf88      	it	hi
    8cfe:	f10c 0c37 	addhi.w	ip, ip, #55	; 0x37
    8d02:	446c      	add	r4, sp
    8d04:	bf88      	it	hi
    8d06:	fa5f fc8c 	uxtbhi.w	ip, ip
			if (n == 0) break;
    8d0a:	4291      	cmp	r1, r2
			i--;
    8d0c:	f10e 36ff 	add.w	r6, lr, #4294967295
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8d10:	f804 cc24 	strb.w	ip, [r4, #-36]
			if (n == 0) break;
    8d14:	d2e1      	bcs.n	8cda <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    8d16:	b14b      	cbz	r3, 8d2c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x64>
		i--;
    8d18:	f10e 3eff 	add.w	lr, lr, #4294967295
    8d1c:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    8d20:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    8d24:	446b      	add	r3, sp
    8d26:	222d      	movs	r2, #45	; 0x2d
    8d28:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    8d2c:	6803      	ldr	r3, [r0, #0]
    8d2e:	a901      	add	r1, sp, #4
    8d30:	685b      	ldr	r3, [r3, #4]
    8d32:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    8d36:	4471      	add	r1, lr
    8d38:	4798      	blx	r3
}
    8d3a:	b00a      	add	sp, #40	; 0x28
    8d3c:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    8d3e:	2230      	movs	r2, #48	; 0x30
    8d40:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    8d44:	f04f 0e21 	mov.w	lr, #33	; 0x21
    8d48:	e7e5      	b.n	8d16 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4e>
    8d4a:	bf00      	nop

00008d4c <Print::print(String const&)>:
{
    8d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	String(double num, unsigned char digits=2) : String((float)num, digits) {}
	~String(void);

	// memory management
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
    8d50:	688c      	ldr	r4, [r1, #8]
    8d52:	b08a      	sub	sp, #40	; 0x28
	while (len > 0) {
    8d54:	b1dc      	cbz	r4, 8d8e <Print::print(String const&)+0x42>
	unsigned int index = 0;
    8d56:	2500      	movs	r5, #0
    8d58:	4688      	mov	r8, r1
    8d5a:	4606      	mov	r6, r0
	size_t count = 0;
    8d5c:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    8d5e:	462b      	mov	r3, r5
    8d60:	2221      	movs	r2, #33	; 0x21
    8d62:	a901      	add	r1, sp, #4
    8d64:	4640      	mov	r0, r8
    8d66:	f000 f89f 	bl	8ea8 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		count += write(buffer, nbytes);
    8d6a:	6833      	ldr	r3, [r6, #0]
    8d6c:	2c20      	cmp	r4, #32
    8d6e:	4622      	mov	r2, r4
    8d70:	685b      	ldr	r3, [r3, #4]
    8d72:	bf28      	it	cs
    8d74:	2220      	movcs	r2, #32
    8d76:	a901      	add	r1, sp, #4
    8d78:	4630      	mov	r0, r6
		index += nbytes;
    8d7a:	4415      	add	r5, r2
		len -= nbytes;
    8d7c:	1aa4      	subs	r4, r4, r2
		count += write(buffer, nbytes);
    8d7e:	4798      	blx	r3
    8d80:	4407      	add	r7, r0
	while (len > 0) {
    8d82:	2c00      	cmp	r4, #0
    8d84:	d1eb      	bne.n	8d5e <Print::print(String const&)+0x12>
}
    8d86:	4638      	mov	r0, r7
    8d88:	b00a      	add	sp, #40	; 0x28
    8d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
    8d8e:	4627      	mov	r7, r4
}
    8d90:	4638      	mov	r0, r7
    8d92:	b00a      	add	sp, #40	; 0x28
    8d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008d98 <Print::print(long)>:
	if (n < 0) {
    8d98:	2900      	cmp	r1, #0
		n = -n;
    8d9a:	bfba      	itte	lt
    8d9c:	4249      	neglt	r1, r1
		sign = '-';
    8d9e:	232d      	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    8da0:	2300      	movge	r3, #0
	if (base == 0) {
    8da2:	220a      	movs	r2, #10
    8da4:	f7ff bf90 	b.w	8cc8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

00008da8 <Print::println()>:
{
    8da8:	b500      	push	{lr}
	return write(buf, 2);
    8daa:	6803      	ldr	r3, [r0, #0]
{
    8dac:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    8dae:	f640 220d 	movw	r2, #2573	; 0xa0d
    8db2:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    8db6:	685b      	ldr	r3, [r3, #4]
    8db8:	2202      	movs	r2, #2
    8dba:	a901      	add	r1, sp, #4
    8dbc:	4798      	blx	r3
}
    8dbe:	b003      	add	sp, #12
    8dc0:	f85d fb04 	ldr.w	pc, [sp], #4

00008dc4 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    8dc4:	4b03      	ldr	r3, [pc, #12]	; (8dd4 <_write+0x10>)
    8dc6:	2802      	cmp	r0, #2
    8dc8:	bf88      	it	hi
    8dca:	4603      	movhi	r3, r0
    8dcc:	4618      	mov	r0, r3
    8dce:	681b      	ldr	r3, [r3, #0]
    8dd0:	685b      	ldr	r3, [r3, #4]
    8dd2:	4718      	bx	r3
    8dd4:	1fff0e64 	.word	0x1fff0e64

00008dd8 <Print::printf(char const*, ...)>:
{
    8dd8:	b40e      	push	{r1, r2, r3}
    8dda:	b500      	push	{lr}
    8ddc:	b082      	sub	sp, #8
    8dde:	aa03      	add	r2, sp, #12
    8de0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
    8de4:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    8de6:	f002 fe8b 	bl	bb00 <vdprintf>
}
    8dea:	b002      	add	sp, #8
    8dec:	f85d eb04 	ldr.w	lr, [sp], #4
    8df0:	b003      	add	sp, #12
    8df2:	4770      	bx	lr

00008df4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    8df4:	b932      	cbnz	r2, 8e04 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x10>
		return write((uint8_t)n);
    8df6:	6803      	ldr	r3, [r0, #0]
{
    8df8:	b500      	push	{lr}
		return write((uint8_t)n);
    8dfa:	681b      	ldr	r3, [r3, #0]
}
    8dfc:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    8e00:	b2c9      	uxtb	r1, r1
    8e02:	4718      	bx	r3
    8e04:	f7ff bf60 	b.w	8cc8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

00008e08 <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    8e08:	b510      	push	{r4, lr}
    8e0a:	4604      	mov	r4, r0
{
	free(buffer);
    8e0c:	6800      	ldr	r0, [r0, #0]
    8e0e:	f002 f845 	bl	ae9c <free>
}
    8e12:	4620      	mov	r0, r4
    8e14:	bd10      	pop	{r4, pc}
    8e16:	bf00      	nop

00008e18 <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    8e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8e1a:	4604      	mov	r4, r0
	if (length == 0) {
    8e1c:	4615      	mov	r5, r2
    8e1e:	b932      	cbnz	r2, 8e2e <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    8e20:	6803      	ldr	r3, [r0, #0]
    8e22:	b103      	cbz	r3, 8e26 <String::copy(char const*, unsigned int)+0xe>
    8e24:	701a      	strb	r2, [r3, #0]
		len = 0;
    8e26:	2300      	movs	r3, #0
    8e28:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    8e2a:	4620      	mov	r0, r4
    8e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
    8e2e:	6843      	ldr	r3, [r0, #4]
    8e30:	429a      	cmp	r2, r3
    8e32:	460e      	mov	r6, r1
    8e34:	d91c      	bls.n	8e70 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    8e36:	6800      	ldr	r0, [r0, #0]
    8e38:	1c51      	adds	r1, r2, #1
    8e3a:	f002 faf3 	bl	b424 <realloc>
	if (newbuffer) {
    8e3e:	4607      	mov	r7, r0
    8e40:	b160      	cbz	r0, 8e5c <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
    8e42:	68a3      	ldr	r3, [r4, #8]
		buffer = newbuffer;
    8e44:	6020      	str	r0, [r4, #0]
		capacity = maxStrLen;
    8e46:	6065      	str	r5, [r4, #4]
		if (len == 0) buffer[0] = 0;
    8e48:	b90b      	cbnz	r3, 8e4e <String::copy(char const*, unsigned int)+0x36>
    8e4a:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
    8e4c:	6827      	ldr	r7, [r4, #0]
	len = length;
    8e4e:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    8e50:	4631      	mov	r1, r6
    8e52:	4638      	mov	r0, r7
    8e54:	f003 f862 	bl	bf1c <strcpy>
}
    8e58:	4620      	mov	r0, r4
    8e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
    8e5c:	6820      	ldr	r0, [r4, #0]
    8e5e:	b110      	cbz	r0, 8e66 <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
    8e60:	f002 f81c 	bl	ae9c <free>
			buffer = NULL;
    8e64:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
    8e66:	2300      	movs	r3, #0
    8e68:	6063      	str	r3, [r4, #4]
    8e6a:	60a3      	str	r3, [r4, #8]
}
    8e6c:	4620      	mov	r0, r4
    8e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
    8e70:	6807      	ldr	r7, [r0, #0]
	len = length;
    8e72:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    8e74:	4631      	mov	r1, r6
    8e76:	4638      	mov	r0, r7
    8e78:	f003 f850 	bl	bf1c <strcpy>
	return *this;
    8e7c:	e7ec      	b.n	8e58 <String::copy(char const*, unsigned int)+0x40>
    8e7e:	bf00      	nop

00008e80 <String::String(char const*)>:
String::String(const char *cstr)
    8e80:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
    8e82:	2300      	movs	r3, #0
String::String(const char *cstr)
    8e84:	4604      	mov	r4, r0
	buffer = NULL;
    8e86:	6003      	str	r3, [r0, #0]
	capacity = 0;
    8e88:	6043      	str	r3, [r0, #4]
	len = 0;
    8e8a:	6083      	str	r3, [r0, #8]
	flags = 0;
    8e8c:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
    8e8e:	b141      	cbz	r1, 8ea2 <String::String(char const*)+0x22>
    8e90:	4608      	mov	r0, r1
    8e92:	460d      	mov	r5, r1
    8e94:	f003 f8b4 	bl	c000 <strlen>
    8e98:	4629      	mov	r1, r5
    8e9a:	4602      	mov	r2, r0
    8e9c:	4620      	mov	r0, r4
    8e9e:	f7ff ffbb 	bl	8e18 <String::copy(char const*, unsigned int)>
}
    8ea2:	4620      	mov	r0, r4
    8ea4:	bd38      	pop	{r3, r4, r5, pc}
    8ea6:	bf00      	nop

00008ea8 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    8ea8:	b1ba      	cbz	r2, 8eda <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x32>
{
    8eaa:	b538      	push	{r3, r4, r5, lr}
    8eac:	460c      	mov	r4, r1
	if (!bufsize || !buf) return;
    8eae:	b121      	cbz	r1, 8eba <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x12>
	if (index >= len) {
    8eb0:	6885      	ldr	r5, [r0, #8]
    8eb2:	429d      	cmp	r5, r3
    8eb4:	d802      	bhi.n	8ebc <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x14>
		buf[0] = 0;
    8eb6:	2300      	movs	r3, #0
    8eb8:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    8eba:	bd38      	pop	{r3, r4, r5, pc}
	if (n > len - index) n = len - index;
    8ebc:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
    8ebe:	f102 3cff 	add.w	ip, r2, #4294967295
	strncpy((char *)buf, buffer + index, n);
    8ec2:	6801      	ldr	r1, [r0, #0]
    8ec4:	4565      	cmp	r5, ip
    8ec6:	bf28      	it	cs
    8ec8:	4665      	movcs	r5, ip
    8eca:	4419      	add	r1, r3
    8ecc:	462a      	mov	r2, r5
    8ece:	4620      	mov	r0, r4
    8ed0:	f002 ff54 	bl	bd7c <strncpy>
	buf[n] = 0;
    8ed4:	2300      	movs	r3, #0
    8ed6:	5563      	strb	r3, [r4, r5]
}
    8ed8:	bd38      	pop	{r3, r4, r5, pc}
    8eda:	4770      	bx	lr

00008edc <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    8edc:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    8ede:	f7fa fb31 	bl	3544 <setup>
	while (1) {
		loop();
    8ee2:	f7fb fe0f 	bl	4b04 <loop>
		yield();
    8ee6:	f001 fa45 	bl	a374 <yield>
	while (1) {
    8eea:	e7fa      	b.n	8ee2 <main+0x6>

00008eec <memcpy>:
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
#else
	push	{r0}
    8eec:	b401      	push	{r0}
#endif
	orr	r3, r1, r0
    8eee:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    8ef2:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    8ef6:	d16f      	bne.n	8fd8 <memcpy+0xec>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8ef8:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    8efa:	d341      	bcc.n	8f80 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8efc:	f851 3b04 	ldr.w	r3, [r1], #4
    8f00:	f840 3b04 	str.w	r3, [r0], #4
    8f04:	f851 3b04 	ldr.w	r3, [r1], #4
    8f08:	f840 3b04 	str.w	r3, [r0], #4
    8f0c:	f851 3b04 	ldr.w	r3, [r1], #4
    8f10:	f840 3b04 	str.w	r3, [r0], #4
    8f14:	f851 3b04 	ldr.w	r3, [r1], #4
    8f18:	f840 3b04 	str.w	r3, [r0], #4
    8f1c:	f851 3b04 	ldr.w	r3, [r1], #4
    8f20:	f840 3b04 	str.w	r3, [r0], #4
    8f24:	f851 3b04 	ldr.w	r3, [r1], #4
    8f28:	f840 3b04 	str.w	r3, [r0], #4
    8f2c:	f851 3b04 	ldr.w	r3, [r1], #4
    8f30:	f840 3b04 	str.w	r3, [r0], #4
    8f34:	f851 3b04 	ldr.w	r3, [r1], #4
    8f38:	f840 3b04 	str.w	r3, [r0], #4
    8f3c:	f851 3b04 	ldr.w	r3, [r1], #4
    8f40:	f840 3b04 	str.w	r3, [r0], #4
    8f44:	f851 3b04 	ldr.w	r3, [r1], #4
    8f48:	f840 3b04 	str.w	r3, [r0], #4
    8f4c:	f851 3b04 	ldr.w	r3, [r1], #4
    8f50:	f840 3b04 	str.w	r3, [r0], #4
    8f54:	f851 3b04 	ldr.w	r3, [r1], #4
    8f58:	f840 3b04 	str.w	r3, [r0], #4
    8f5c:	f851 3b04 	ldr.w	r3, [r1], #4
    8f60:	f840 3b04 	str.w	r3, [r0], #4
    8f64:	f851 3b04 	ldr.w	r3, [r1], #4
    8f68:	f840 3b04 	str.w	r3, [r0], #4
    8f6c:	f851 3b04 	ldr.w	r3, [r1], #4
    8f70:	f840 3b04 	str.w	r3, [r0], #4
    8f74:	f851 3b04 	ldr.w	r3, [r1], #4
    8f78:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8f7c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    8f7e:	d2bd      	bcs.n	8efc <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8f80:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    8f82:	d311      	bcc.n	8fa8 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8f84:	f851 3b04 	ldr.w	r3, [r1], #4
    8f88:	f840 3b04 	str.w	r3, [r0], #4
    8f8c:	f851 3b04 	ldr.w	r3, [r1], #4
    8f90:	f840 3b04 	str.w	r3, [r0], #4
    8f94:	f851 3b04 	ldr.w	r3, [r1], #4
    8f98:	f840 3b04 	str.w	r3, [r0], #4
    8f9c:	f851 3b04 	ldr.w	r3, [r1], #4
    8fa0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    8fa4:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    8fa6:	d2ed      	bcs.n	8f84 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    8fa8:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    8faa:	d305      	bcc.n	8fb8 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    8fac:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8fb0:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    8fb4:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    8fb6:	d2f9      	bcs.n	8fac <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    8fb8:	3204      	adds	r2, #4
	beq	.Ldone
    8fba:	d00a      	beq.n	8fd2 <memcpy+0xe6>

	lsls	r2, r2, #31
    8fbc:	07d2      	lsls	r2, r2, #31
	itt ne
    8fbe:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    8fc0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8fc4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    8fc8:	d303      	bcc.n	8fd2 <memcpy+0xe6>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
	strh	r3, [r0]
#else
	ldrb	r3, [r1]
    8fca:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    8fcc:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    8fce:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    8fd0:	7043      	strb	r3, [r0, #1]

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    8fd2:	bc01      	pop	{r0}
#endif
	bx	lr
    8fd4:	4770      	bx	lr
    8fd6:	bf00      	nop
	beq	.Ldst_aligned
#else
	/* if len < 12, misalignment adjustment has more overhead than
	just byte-to-byte copy.  Also, len must >=8 to guarantee code
	afterward work correctly.  */
	cmp	r2, #12
    8fd8:	2a0c      	cmp	r2, #12
	blo	.Lbyte_copy
    8fda:	d34a      	bcc.n	9072 <memcpy+0x186>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    8fdc:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    8fe0:	d011      	beq.n	9006 <memcpy+0x11a>

	rsb	r3, #4
    8fe2:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    8fe6:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    8fe8:	07db      	lsls	r3, r3, #31
	itt ne
    8fea:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    8fec:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8ff0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    8ff4:	d307      	bcc.n	9006 <memcpy+0x11a>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
	strh    r3, [r0], #2
	b	.Ldst_aligned
#else
	ldrb    r3, [r1], #1
    8ff6:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    8ffa:	f800 3b01 	strb.w	r3, [r0], #1
	ldrb    r3, [r1], #1
    8ffe:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9002:	f800 3b01 	strb.w	r3, [r0], #1
	/* Now that dst is aligned */
.Ldst_aligned:
	/* if r1 is aligned now, it means r0/r1 has the same misalignment,
	and they are both aligned now.  Go aligned copy.  */
	ands	r3, r1, #3
    9006:	f011 0303 	ands.w	r3, r1, #3
	beq	.Lbig_block
    900a:	f43f af75 	beq.w	8ef8 <memcpy+0xc>

	/* dst is aligned, but src isn't.  Misaligned copy.  */

	push	{r4, r5}
    900e:	b430      	push	{r4, r5}
	subs	r2, #4
    9010:	3a04      	subs	r2, #4

	/* Backward r1 by misaligned bytes, to make r1 aligned.
	Since we need to restore r1 to unaligned address after the loop,
	we need keep the offset bytes to ip and sub it from r1 afterward.  */
	subs	r1, r3
    9012:	1ac9      	subs	r1, r1, r3
	rsb	ip, r3, #4
    9014:	f1c3 0c04 	rsb	ip, r3, #4

	/* Pre-load on word */
	ldr	r4, [r1], #4
    9018:	f851 4b04 	ldr.w	r4, [r1], #4

	cmp	r3, #2
    901c:	2b02      	cmp	r3, #2
	beq	.Lmisaligned_copy_2_2
    901e:	d019      	beq.n	9054 <memcpy+0x168>
	cmp	r3, #3
    9020:	2b03      	cmp	r3, #3
	beq	.Lmisaligned_copy_3_1
    9022:	d00b      	beq.n	903c <memcpy+0x150>
	subs	r2, #4
	bhs	1b
	.endm

.Lmisaligned_copy_1_3:
	mis_src_copy shift=8
    9024:	0a24      	lsrs	r4, r4, #8
    9026:	f851 3b04 	ldr.w	r3, [r1], #4
    902a:	061d      	lsls	r5, r3, #24
    902c:	ea44 0405 	orr.w	r4, r4, r5
    9030:	f840 4b04 	str.w	r4, [r0], #4
    9034:	461c      	mov	r4, r3
    9036:	3a04      	subs	r2, #4
    9038:	d2f4      	bcs.n	9024 <memcpy+0x138>
	b	.Lsrc_misaligned_tail
    903a:	e016      	b.n	906a <memcpy+0x17e>

.Lmisaligned_copy_3_1:
	mis_src_copy shift=24
    903c:	0e24      	lsrs	r4, r4, #24
    903e:	f851 3b04 	ldr.w	r3, [r1], #4
    9042:	021d      	lsls	r5, r3, #8
    9044:	ea44 0405 	orr.w	r4, r4, r5
    9048:	f840 4b04 	str.w	r4, [r0], #4
    904c:	461c      	mov	r4, r3
    904e:	3a04      	subs	r2, #4
    9050:	d2f4      	bcs.n	903c <memcpy+0x150>
	b	.Lsrc_misaligned_tail
    9052:	e00a      	b.n	906a <memcpy+0x17e>

.Lmisaligned_copy_2_2:
	/* For 2_2 misalignment, ldr is still faster than 2 x ldrh.  */
	mis_src_copy shift=16
    9054:	0c24      	lsrs	r4, r4, #16
    9056:	f851 3b04 	ldr.w	r3, [r1], #4
    905a:	041d      	lsls	r5, r3, #16
    905c:	ea44 0405 	orr.w	r4, r4, r5
    9060:	f840 4b04 	str.w	r4, [r0], #4
    9064:	461c      	mov	r4, r3
    9066:	3a04      	subs	r2, #4
    9068:	d2f4      	bcs.n	9054 <memcpy+0x168>

.Lsrc_misaligned_tail:
	adds	r2, #4
    906a:	3204      	adds	r2, #4
	subs	r1, ip
    906c:	ebb1 010c 	subs.w	r1, r1, ip
	pop	{r4, r5}
    9070:	bc30      	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9072:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    9074:	d3a0      	bcc.n	8fb8 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9076:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    9078:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    907c:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9080:	d2f9      	bcs.n	9076 <memcpy+0x18a>

	ldrb	r3, [r1]
    9082:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9084:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9086:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9088:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    908a:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    908c:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    908e:	bc01      	pop	{r0}
#endif
	bx	lr
    9090:	4770      	bx	lr
    9092:	bf00      	nop

00009094 <fault_isr>:
{
    9094:	b508      	push	{r3, lr}
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    9096:	4c0f      	ldr	r4, [pc, #60]	; (90d4 <fault_isr+0x40>)
    9098:	6b63      	ldr	r3, [r4, #52]	; 0x34
    909a:	0358      	lsls	r0, r3, #13
    909c:	d40d      	bmi.n	90ba <fault_isr+0x26>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    909e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    90a0:	0559      	lsls	r1, r3, #21
    90a2:	d40f      	bmi.n	90c4 <fault_isr+0x30>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    90a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    90a6:	051a      	lsls	r2, r3, #20
    90a8:	d411      	bmi.n	90ce <fault_isr+0x3a>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    90aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    90ac:	04db      	lsls	r3, r3, #19
    90ae:	d5f3      	bpl.n	9098 <fault_isr+0x4>
    90b0:	f000 f812 	bl	90d8 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    90b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    90b6:	0358      	lsls	r0, r3, #13
    90b8:	d5f1      	bpl.n	909e <fault_isr+0xa>
    90ba:	f000 fb79 	bl	97b0 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    90be:	6b63      	ldr	r3, [r4, #52]	; 0x34
    90c0:	0559      	lsls	r1, r3, #21
    90c2:	d5ef      	bpl.n	90a4 <fault_isr+0x10>
    90c4:	f000 f808 	bl	90d8 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    90c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    90ca:	051a      	lsls	r2, r3, #20
    90cc:	d5ed      	bpl.n	90aa <fault_isr+0x16>
    90ce:	f000 f803 	bl	90d8 <unused_isr>
    90d2:	e7ea      	b.n	90aa <fault_isr+0x16>
    90d4:	40048000 	.word	0x40048000

000090d8 <unused_isr>:
{
    90d8:	b508      	push	{r3, lr}
	fault_isr();
    90da:	f7ff ffdb 	bl	9094 <fault_isr>
    90de:	bf00      	nop

000090e0 <startup_early_hook>:
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    90e0:	4b01      	ldr	r3, [pc, #4]	; (90e8 <startup_early_hook+0x8>)
    90e2:	2210      	movs	r2, #16
    90e4:	801a      	strh	r2, [r3, #0]
}
    90e6:	4770      	bx	lr
    90e8:	40052000 	.word	0x40052000

000090ec <startup_late_hook>:
static void startup_default_late_hook(void) {}
    90ec:	4770      	bx	lr
    90ee:	bf00      	nop

000090f0 <_sbrk>:
__attribute__((weak))
void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    90f0:	490b      	ldr	r1, [pc, #44]	; (9120 <_sbrk+0x30>)
    90f2:	680a      	ldr	r2, [r1, #0]
	if (incr != 0) {
    90f4:	b148      	cbz	r0, 910a <_sbrk+0x1a>
{
    90f6:	b508      	push	{r3, lr}
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    90f8:	46ec      	mov	ip, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    90fa:	1813      	adds	r3, r2, r0
    90fc:	f5ac 5000 	sub.w	r0, ip, #8192	; 0x2000
    9100:	4283      	cmp	r3, r0
    9102:	d204      	bcs.n	910e <_sbrk+0x1e>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    9104:	600b      	str	r3, [r1, #0]
	}
	return prev;
}
    9106:	4610      	mov	r0, r2
    9108:	bd08      	pop	{r3, pc}
    910a:	4610      	mov	r0, r2
    910c:	4770      	bx	lr
			errno = ENOMEM;
    910e:	f002 fed3 	bl	beb8 <__errno>
    9112:	230c      	movs	r3, #12
			return (void *)-1;
    9114:	f04f 32ff 	mov.w	r2, #4294967295
			errno = ENOMEM;
    9118:	6003      	str	r3, [r0, #0]
}
    911a:	4610      	mov	r0, r2
    911c:	bd08      	pop	{r3, pc}
    911e:	bf00      	nop
    9120:	1fff0cac 	.word	0x1fff0cac

00009124 <_read>:

__attribute__((weak)) 
int _read(int file, char *ptr, int len)
{
	return 0;
}
    9124:	2000      	movs	r0, #0
    9126:	4770      	bx	lr

00009128 <_close>:

__attribute__((weak)) 
int _close(int fd)
{
	return -1;
}
    9128:	f04f 30ff 	mov.w	r0, #4294967295
    912c:	4770      	bx	lr
    912e:	bf00      	nop

00009130 <_fstat>:
#include <sys/stat.h>

__attribute__((weak)) 
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    9130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9134:	604b      	str	r3, [r1, #4]
	return 0;
}
    9136:	2000      	movs	r0, #0
    9138:	4770      	bx	lr
    913a:	bf00      	nop

0000913c <_isatty>:

__attribute__((weak)) 
int _isatty(int fd)
{
	return 1;
}
    913c:	2001      	movs	r0, #1
    913e:	4770      	bx	lr

00009140 <_lseek>:

__attribute__((weak)) 
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    9140:	f04f 30ff 	mov.w	r0, #4294967295
    9144:	4770      	bx	lr
    9146:	bf00      	nop

00009148 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) ;
    9148:	e7fe      	b.n	9148 <abort>
    914a:	Address 0x0000914a is out of bounds.


0000914c <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    914c:	4b07      	ldr	r3, [pc, #28]	; (916c <kinetis_hsrun_disable+0x20>)
    914e:	78da      	ldrb	r2, [r3, #3]
    9150:	2a80      	cmp	r2, #128	; 0x80
    9152:	d001      	beq.n	9158 <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    9154:	2000      	movs	r0, #0
}
    9156:	4770      	bx	lr
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    9158:	4905      	ldr	r1, [pc, #20]	; (9170 <kinetis_hsrun_disable+0x24>)
    915a:	4806      	ldr	r0, [pc, #24]	; (9174 <kinetis_hsrun_disable+0x28>)
    915c:	6448      	str	r0, [r1, #68]	; 0x44
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    915e:	2200      	movs	r2, #0
    9160:	705a      	strb	r2, [r3, #1]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    9162:	78da      	ldrb	r2, [r3, #3]
    9164:	2a80      	cmp	r2, #128	; 0x80
    9166:	d0fc      	beq.n	9162 <kinetis_hsrun_disable+0x16>
		return 1;
    9168:	2001      	movs	r0, #1
    916a:	4770      	bx	lr
    916c:	4007e000 	.word	0x4007e000
    9170:	40048000 	.word	0x40048000
    9174:	22280000 	.word	0x22280000

00009178 <kinetis_hsrun_enable>:

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    9178:	4b07      	ldr	r3, [pc, #28]	; (9198 <kinetis_hsrun_enable+0x20>)
    917a:	78da      	ldrb	r2, [r3, #3]
    917c:	2a01      	cmp	r2, #1
    917e:	d001      	beq.n	9184 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    9180:	2000      	movs	r0, #0
}
    9182:	4770      	bx	lr
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    9184:	2260      	movs	r2, #96	; 0x60
    9186:	705a      	strb	r2, [r3, #1]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    9188:	78da      	ldrb	r2, [r3, #3]
    918a:	2a80      	cmp	r2, #128	; 0x80
    918c:	d1fc      	bne.n	9188 <kinetis_hsrun_enable+0x10>
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    918e:	4b03      	ldr	r3, [pc, #12]	; (919c <kinetis_hsrun_enable+0x24>)
    9190:	4a03      	ldr	r2, [pc, #12]	; (91a0 <kinetis_hsrun_enable+0x28>)
    9192:	645a      	str	r2, [r3, #68]	; 0x44
		return 1;
    9194:	2001      	movs	r0, #1
    9196:	4770      	bx	lr
    9198:	4007e000 	.word	0x4007e000
    919c:	40048000 	.word	0x40048000
    91a0:	02060000 	.word	0x02060000

000091a4 <operator delete(void*, unsigned int)>:
  free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
  free(ptr);
    91a4:	f001 be7a 	b.w	ae9c <free>

000091a8 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    91a8:	f101 3cff 	add.w	ip, r1, #4294967295
{
    91ac:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    91ae:	4665      	mov	r5, ip
	int i=0, j;
    91b0:	2400      	movs	r4, #0
    91b2:	e001      	b.n	91b8 <ultoa+0x10>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
    91b4:	4670      	mov	r0, lr
		if (val == 0) break;
		i++;
    91b6:	3401      	adds	r4, #1
		digit = val % radix;
    91b8:	fbb0 fef2 	udiv	lr, r0, r2
    91bc:	fb02 031e 	mls	r3, r2, lr, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    91c0:	2b09      	cmp	r3, #9
    91c2:	f103 0630 	add.w	r6, r3, #48	; 0x30
    91c6:	bf8a      	itet	hi
    91c8:	3337      	addhi	r3, #55	; 0x37
    91ca:	b2f3      	uxtbls	r3, r6
    91cc:	b2db      	uxtbhi	r3, r3
		if (val == 0) break;
    91ce:	4290      	cmp	r0, r2
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    91d0:	f805 3f01 	strb.w	r3, [r5, #1]!
		if (val == 0) break;
    91d4:	d2ee      	bcs.n	91b4 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    91d6:	1c63      	adds	r3, r4, #1
    91d8:	2200      	movs	r2, #0
    91da:	54ca      	strb	r2, [r1, r3]
    91dc:	18c8      	adds	r0, r1, r3
	for (j=0; j < i; j++, i--) {
    91de:	b17c      	cbz	r4, 9200 <ultoa+0x58>
		t = buf[j];
    91e0:	4662      	mov	r2, ip
    91e2:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    91e6:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
    91ea:	f88c e000 	strb.w	lr, [ip]
	for (j=0; j < i; j++, i--) {
    91ee:	eba1 030c 	sub.w	r3, r1, ip
    91f2:	3202      	adds	r2, #2
    91f4:	3b01      	subs	r3, #1
    91f6:	1a52      	subs	r2, r2, r1
    91f8:	4423      	add	r3, r4
    91fa:	429a      	cmp	r2, r3
		buf[i] = t;
    91fc:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    91fe:	dbef      	blt.n	91e0 <ultoa+0x38>
	}
	return buf;
}
    9200:	4608      	mov	r0, r1
    9202:	bd70      	pop	{r4, r5, r6, pc}

00009204 <dummy_isr>:
	{((volatile uint8_t *)&CORE_PIN26_PORTREG + (CORE_PIN26_BIT >> 3)), &CORE_PIN26_CONFIG, (1<<(CORE_PIN26_BIT & 7))}
};

#endif

static void dummy_isr() {};
    9204:	4770      	bx	lr
    9206:	bf00      	nop

00009208 <attachInterrupt>:
void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    9208:	283f      	cmp	r0, #63	; 0x3f
    920a:	d835      	bhi.n	9278 <attachInterrupt+0x70>
	switch (mode) {
    920c:	2a04      	cmp	r2, #4
    920e:	d833      	bhi.n	9278 <attachInterrupt+0x70>
{
    9210:	b430      	push	{r4, r5}
	  case FALLING:	mask = 0x0A; break;
	  case LOW:	mask = 0x08; break;
	  case HIGH:	mask = 0x0C; break;
	  default: return;
	}
	mask = (mask << 16) | 0x01000000;
    9212:	4b2a      	ldr	r3, [pc, #168]	; (92bc <attachInterrupt+0xb4>)
	config = portConfigRegister(pin);
    9214:	4d2a      	ldr	r5, [pc, #168]	; (92c0 <attachInterrupt+0xb8>)
	mask = (mask << 16) | 0x01000000;
    9216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	config = portConfigRegister(pin);
    921a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
	mask = (mask << 16) | 0x01000000;
    921e:	041b      	lsls	r3, r3, #16
	config = portConfigRegister(pin);
    9220:	6854      	ldr	r4, [r2, #4]
	if ((*config & 0x00000700) == 0) {
    9222:	6822      	ldr	r2, [r4, #0]
    9224:	f412 62e0 	ands.w	r2, r2, #1792	; 0x700
    9228:	d039      	beq.n	929e <attachInterrupt+0x96>
	_VectorsRam[irq + 16] = function;
    922a:	4a26      	ldr	r2, [pc, #152]	; (92c4 <attachInterrupt+0xbc>)
    922c:	4826      	ldr	r0, [pc, #152]	; (92c8 <attachInterrupt+0xc0>)
    922e:	f8c2 012c 	str.w	r0, [r2, #300]	; 0x12c
    9232:	4826      	ldr	r0, [pc, #152]	; (92cc <attachInterrupt+0xc4>)
    9234:	f8c2 0130 	str.w	r0, [r2, #304]	; 0x130
    9238:	4825      	ldr	r0, [pc, #148]	; (92d0 <attachInterrupt+0xc8>)
    923a:	f8c2 0134 	str.w	r0, [r2, #308]	; 0x134
    923e:	4825      	ldr	r0, [pc, #148]	; (92d4 <attachInterrupt+0xcc>)
    9240:	f8c2 0138 	str.w	r0, [r2, #312]	; 0x138
    9244:	4824      	ldr	r0, [pc, #144]	; (92d8 <attachInterrupt+0xd0>)
    9246:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    924a:	f104 4240 	add.w	r2, r4, #3221225472	; 0xc0000000
    924e:	f5a2 2092 	sub.w	r0, r2, #299008	; 0x49000
    9252:	287c      	cmp	r0, #124	; 0x7c
    9254:	d811      	bhi.n	927a <attachInterrupt+0x72>
    9256:	4821      	ldr	r0, [pc, #132]	; (92dc <attachInterrupt+0xd4>)
	attachInterruptVector(IRQ_PORTD, port_D_isr);
	attachInterruptVector(IRQ_PORTE, port_E_isr);
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
    9258:	b672      	cpsid	i
	cfg = *config;
    925a:	6822      	ldr	r2, [r4, #0]
	cfg &= ~0x000F0000;		// disable any previous interrupt
    925c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
	*config = cfg;
    9260:	6022      	str	r2, [r4, #0]
    9262:	4313      	orrs	r3, r2
	return (v % 128) / 4;
    9264:	f3c4 0284 	ubfx	r2, r4, #2, #5
	isr_table[pin_index] = function;	// set the function pointer
	cfg |= mask;
    9268:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	isr_table[pin_index] = function;	// set the function pointer
    926c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	*config = cfg;			// enable the new interrupt
    9270:	6023      	str	r3, [r4, #0]
	__enable_irq();
    9272:	b662      	cpsie	i
	intFunc[pin] = function;	// set the function pointer
	cfg |= mask;
	*config = cfg;			// enable the new interrupt
	__enable_irq();
#endif
}
    9274:	bc30      	pop	{r4, r5}
    9276:	4770      	bx	lr
    9278:	4770      	bx	lr
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    927a:	f5a2 2094 	sub.w	r0, r2, #303104	; 0x4a000
    927e:	287c      	cmp	r0, #124	; 0x7c
    9280:	d915      	bls.n	92ae <attachInterrupt+0xa6>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    9282:	f5a2 2096 	sub.w	r0, r2, #307200	; 0x4b000
    9286:	287c      	cmp	r0, #124	; 0x7c
    9288:	d913      	bls.n	92b2 <attachInterrupt+0xaa>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    928a:	f5a2 2098 	sub.w	r0, r2, #311296	; 0x4c000
    928e:	287c      	cmp	r0, #124	; 0x7c
    9290:	d911      	bls.n	92b6 <attachInterrupt+0xae>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    9292:	f5a2 229a 	sub.w	r2, r2, #315392	; 0x4d000
    9296:	2a7c      	cmp	r2, #124	; 0x7c
    9298:	d8ec      	bhi.n	9274 <attachInterrupt+0x6c>
    929a:	4811      	ldr	r0, [pc, #68]	; (92e0 <attachInterrupt+0xd8>)
    929c:	e7dc      	b.n	9258 <attachInterrupt+0x50>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    929e:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
    92a2:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    92a6:	f44f 7280 	mov.w	r2, #256	; 0x100
    92aa:	6022      	str	r2, [r4, #0]
    92ac:	e7bd      	b.n	922a <attachInterrupt+0x22>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    92ae:	480d      	ldr	r0, [pc, #52]	; (92e4 <attachInterrupt+0xdc>)
    92b0:	e7d2      	b.n	9258 <attachInterrupt+0x50>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    92b2:	480d      	ldr	r0, [pc, #52]	; (92e8 <attachInterrupt+0xe0>)
    92b4:	e7d0      	b.n	9258 <attachInterrupt+0x50>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    92b6:	480d      	ldr	r0, [pc, #52]	; (92ec <attachInterrupt+0xe4>)
    92b8:	e7ce      	b.n	9258 <attachInterrupt+0x50>
    92ba:	bf00      	nop
    92bc:	00011ff0 	.word	0x00011ff0
    92c0:	00012004 	.word	0x00012004
    92c4:	1fff0200 	.word	0x1fff0200
    92c8:	1fff0801 	.word	0x1fff0801
    92cc:	1fff07cd 	.word	0x1fff07cd
    92d0:	1fff0799 	.word	0x1fff0799
    92d4:	1fff0765 	.word	0x1fff0765
    92d8:	1fff0731 	.word	0x1fff0731
    92dc:	1fff0cb0 	.word	0x1fff0cb0
    92e0:	1fff0df8 	.word	0x1fff0df8
    92e4:	1fff0d28 	.word	0x1fff0d28
    92e8:	1fff0d88 	.word	0x1fff0d88
    92ec:	1fff0db8 	.word	0x1fff0db8

000092f0 <detachInterrupt>:
	config = portConfigRegister(pin);
    92f0:	4b1b      	ldr	r3, [pc, #108]	; (9360 <detachInterrupt+0x70>)
    92f2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    92f6:	6842      	ldr	r2, [r0, #4]
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    92f8:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
    92fc:	f5a3 2192 	sub.w	r1, r3, #299008	; 0x49000
    9300:	297c      	cmp	r1, #124	; 0x7c
    9302:	d905      	bls.n	9310 <detachInterrupt+0x20>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    9304:	f5a3 2194 	sub.w	r1, r3, #303104	; 0x4a000
    9308:	297c      	cmp	r1, #124	; 0x7c
    930a:	d815      	bhi.n	9338 <detachInterrupt+0x48>
    930c:	4915      	ldr	r1, [pc, #84]	; (9364 <detachInterrupt+0x74>)
    930e:	e000      	b.n	9312 <detachInterrupt+0x22>
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    9310:	4915      	ldr	r1, [pc, #84]	; (9368 <detachInterrupt+0x78>)
{
    9312:	b410      	push	{r4}
	__disable_irq();
    9314:	b672      	cpsid	i
	*config = ((*config & ~0x000F0000) | 0x01000000);
    9316:	6813      	ldr	r3, [r2, #0]
	isr_table[pin_index] = dummy_isr;
    9318:	4c14      	ldr	r4, [pc, #80]	; (936c <detachInterrupt+0x7c>)
	*config = ((*config & ~0x000F0000) | 0x01000000);
    931a:	f023 7387 	bic.w	r3, r3, #17694720	; 0x10e0000
	return (v % 128) / 4;
    931e:	f3c2 0084 	ubfx	r0, r2, #2, #5
	*config = ((*config & ~0x000F0000) | 0x01000000);
    9322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    9326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    932a:	6013      	str	r3, [r2, #0]
	isr_table[pin_index] = dummy_isr;
    932c:	f841 4020 	str.w	r4, [r1, r0, lsl #2]
	__enable_irq();
    9330:	b662      	cpsie	i
}
    9332:	f85d 4b04 	ldr.w	r4, [sp], #4
    9336:	4770      	bx	lr
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    9338:	f5a3 2196 	sub.w	r1, r3, #307200	; 0x4b000
    933c:	297c      	cmp	r1, #124	; 0x7c
    933e:	d909      	bls.n	9354 <detachInterrupt+0x64>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    9340:	f5a3 2198 	sub.w	r1, r3, #311296	; 0x4c000
    9344:	297c      	cmp	r1, #124	; 0x7c
    9346:	d907      	bls.n	9358 <detachInterrupt+0x68>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    9348:	f5a3 239a 	sub.w	r3, r3, #315392	; 0x4d000
    934c:	2b7c      	cmp	r3, #124	; 0x7c
    934e:	d805      	bhi.n	935c <detachInterrupt+0x6c>
    9350:	4907      	ldr	r1, [pc, #28]	; (9370 <detachInterrupt+0x80>)
    9352:	e7de      	b.n	9312 <detachInterrupt+0x22>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    9354:	4907      	ldr	r1, [pc, #28]	; (9374 <detachInterrupt+0x84>)
    9356:	e7dc      	b.n	9312 <detachInterrupt+0x22>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    9358:	4907      	ldr	r1, [pc, #28]	; (9378 <detachInterrupt+0x88>)
    935a:	e7da      	b.n	9312 <detachInterrupt+0x22>
    935c:	4770      	bx	lr
    935e:	bf00      	nop
    9360:	00012004 	.word	0x00012004
    9364:	1fff0d28 	.word	0x1fff0d28
    9368:	1fff0cb0 	.word	0x1fff0cb0
    936c:	00009205 	.word	0x00009205
    9370:	1fff0df8 	.word	0x1fff0df8
    9374:	1fff0d88 	.word	0x1fff0d88
    9378:	1fff0db8 	.word	0x1fff0db8

0000937c <rtc_set>:
	RTC_SR = 0;
    937c:	4b03      	ldr	r3, [pc, #12]	; (938c <rtc_set+0x10>)
    937e:	2200      	movs	r2, #0
	RTC_SR = RTC_SR_TCE;
    9380:	2110      	movs	r1, #16
	RTC_SR = 0;
    9382:	615a      	str	r2, [r3, #20]
	RTC_TPR = 0;
    9384:	605a      	str	r2, [r3, #4]
	RTC_TSR = t;
    9386:	6018      	str	r0, [r3, #0]
	RTC_SR = RTC_SR_TCE;
    9388:	6159      	str	r1, [r3, #20]
}
    938a:	4770      	bx	lr
    938c:	4003d000 	.word	0x4003d000

00009390 <startup_middle_hook>:
static void startup_default_middle_hook(void) {}
    9390:	4770      	bx	lr
    9392:	bf00      	nop

00009394 <_init_Teensyduino_internal_>:
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    9394:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
{
    9398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    939c:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
    93a0:	f8cc 8104 	str.w	r8, [ip, #260]	; 0x104
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    93a4:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
    93a8:	f8cc 8104 	str.w	r8, [ip, #260]	; 0x104
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    93ac:	f04f 5800 	mov.w	r8, #536870912	; 0x20000000
    93b0:	f8cc 8104 	str.w	r8, [ip, #260]	; 0x104
	FTM3_C0SC = 0x28;
    93b4:	4a2f      	ldr	r2, [pc, #188]	; (9474 <_init_Teensyduino_internal_+0xe0>)
	FTM0_CNT = 0;
    93b6:	4930      	ldr	r1, [pc, #192]	; (9478 <_init_Teensyduino_internal_+0xe4>)
	FTM2_CNT = 0;
    93b8:	4c30      	ldr	r4, [pc, #192]	; (947c <_init_Teensyduino_internal_+0xe8>)
	FTM1_CNT = 0;
    93ba:	4d31      	ldr	r5, [pc, #196]	; (9480 <_init_Teensyduino_internal_+0xec>)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    93bc:	4e31      	ldr	r6, [pc, #196]	; (9484 <_init_Teensyduino_internal_+0xf0>)
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    93be:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    93c2:	f8cc 8104 	str.w	r8, [ip, #260]	; 0x104
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    93c6:	2328      	movs	r3, #40	; 0x28
	FTM0_CNT = 0;
    93c8:	2000      	movs	r0, #0
	FTM0_MOD = DEFAULT_FTM_MOD;
    93ca:	f64e 7eff 	movw	lr, #61439	; 0xefff
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    93ce:	2709      	movs	r7, #9
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    93d0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
    93d4:	f8cc 8104 	str.w	r8, [ip, #260]	; 0x104
	FTM0_CNT = 0;
    93d8:	6048      	str	r0, [r1, #4]
	FTM0_MOD = DEFAULT_FTM_MOD;
    93da:	f8c1 e008 	str.w	lr, [r1, #8]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    93de:	60cb      	str	r3, [r1, #12]
	FTM0_C1SC = 0x28;
    93e0:	614b      	str	r3, [r1, #20]
	FTM0_C2SC = 0x28;
    93e2:	61cb      	str	r3, [r1, #28]
	FTM0_C3SC = 0x28;
    93e4:	624b      	str	r3, [r1, #36]	; 0x24
	FTM0_C4SC = 0x28;
    93e6:	62cb      	str	r3, [r1, #44]	; 0x2c
	FTM0_C5SC = 0x28;
    93e8:	634b      	str	r3, [r1, #52]	; 0x34
	FTM0_C6SC = 0x28;
    93ea:	63cb      	str	r3, [r1, #60]	; 0x3c
	FTM0_C7SC = 0x28;
    93ec:	644b      	str	r3, [r1, #68]	; 0x44
	FTM3_C0SC = 0x28;
    93ee:	60d3      	str	r3, [r2, #12]
	FTM3_C1SC = 0x28;
    93f0:	6153      	str	r3, [r2, #20]
	FTM3_C2SC = 0x28;
    93f2:	61d3      	str	r3, [r2, #28]
	FTM3_C3SC = 0x28;
    93f4:	6253      	str	r3, [r2, #36]	; 0x24
	FTM3_C4SC = 0x28;
    93f6:	62d3      	str	r3, [r2, #44]	; 0x2c
	FTM3_C5SC = 0x28;
    93f8:	6353      	str	r3, [r2, #52]	; 0x34
	FTM3_C6SC = 0x28;
    93fa:	63d3      	str	r3, [r2, #60]	; 0x3c
	FTM3_C7SC = 0x28;
    93fc:	6453      	str	r3, [r2, #68]	; 0x44
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    93fe:	600f      	str	r7, [r1, #0]
	FTM1_CNT = 0;
    9400:	6068      	str	r0, [r5, #4]
	FTM1_MOD = DEFAULT_FTM_MOD;
    9402:	f8c5 e008 	str.w	lr, [r5, #8]
	FTM1_C0SC = 0x28;
    9406:	60eb      	str	r3, [r5, #12]
	FTM1_C1SC = 0x28;
    9408:	616b      	str	r3, [r5, #20]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    940a:	602f      	str	r7, [r5, #0]
	FTM2_CNT = 0;
    940c:	6060      	str	r0, [r4, #4]
	FTM2_MOD = DEFAULT_FTM_MOD;
    940e:	f8c4 e008 	str.w	lr, [r4, #8]
	FTM2_C0SC = 0x28;
    9412:	60e3      	str	r3, [r4, #12]
	FTM2_C1SC = 0x28;
    9414:	6163      	str	r3, [r4, #20]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9416:	6027      	str	r7, [r4, #0]
	FTM3_CNT = 0;
    9418:	6050      	str	r0, [r2, #4]
	FTM3_MOD = DEFAULT_FTM_MOD;
    941a:	f8c2 e008 	str.w	lr, [r2, #8]
	FTM3_C0SC = 0x28;
    941e:	60d3      	str	r3, [r2, #12]
	FTM3_C1SC = 0x28;
    9420:	6153      	str	r3, [r2, #20]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9422:	6017      	str	r7, [r2, #0]
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    9424:	6af1      	ldr	r1, [r6, #44]	; 0x2c
    9426:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    942a:	62f1      	str	r1, [r6, #44]	; 0x2c
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    942c:	6871      	ldr	r1, [r6, #4]
	TPM1_CNT = 0;
    942e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    9432:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    9436:	6071      	str	r1, [r6, #4]
	TPM1_MOD = 32767;
    9438:	f647 74ff 	movw	r4, #32767	; 0x7fff
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    943c:	2108      	movs	r1, #8
	TPM1_CNT = 0;
    943e:	6050      	str	r0, [r2, #4]
{
    9440:	b082      	sub	sp, #8
	TPM1_MOD = 32767;
    9442:	6094      	str	r4, [r2, #8]
	TPM1_C0SC = 0x28;
    9444:	60d3      	str	r3, [r2, #12]
	TPM1_C1SC = 0x28;
    9446:	6153      	str	r3, [r2, #20]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    9448:	6011      	str	r1, [r2, #0]
	analog_init();
    944a:	f001 f80b 	bl	a464 <analog_init>
	startup_middle_hook();
    944e:	f7ff ff9f 	bl	9390 <startup_middle_hook>
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    9452:	4c0d      	ldr	r4, [pc, #52]	; (9488 <_init_Teensyduino_internal_+0xf4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9454:	6823      	ldr	r3, [r4, #0]
    9456:	9300      	str	r3, [sp, #0]
	return ret;
    9458:	9b00      	ldr	r3, [sp, #0]
    945a:	2b13      	cmp	r3, #19
    945c:	d9fa      	bls.n	9454 <_init_Teensyduino_internal_+0xc0>
	usb_init();
    945e:	f000 fd61 	bl	9f24 <usb_init>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9462:	6823      	ldr	r3, [r4, #0]
    9464:	9301      	str	r3, [sp, #4]
	return ret;
    9466:	9b01      	ldr	r3, [sp, #4]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    9468:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    946c:	d3f9      	bcc.n	9462 <_init_Teensyduino_internal_+0xce>
}
    946e:	b002      	add	sp, #8
    9470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9474:	400b9000 	.word	0x400b9000
    9478:	40038000 	.word	0x40038000
    947c:	400b8000 	.word	0x400b8000
    9480:	40039000 	.word	0x40039000
    9484:	40048000 	.word	0x40048000
    9488:	1fff7ae4 	.word	0x1fff7ae4

0000948c <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    948c:	283f      	cmp	r0, #63	; 0x3f
    948e:	d818      	bhi.n	94c2 <digitalWrite+0x36>
{
    9490:	b410      	push	{r4}
	if (*portModeRegister(pin)) {
    9492:	4b12      	ldr	r3, [pc, #72]	; (94dc <digitalWrite+0x50>)
    9494:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    9498:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    949c:	b134      	cbz	r4, 94ac <digitalWrite+0x20>
			*portSetRegister(pin) = 1;
    949e:	2301      	movs	r3, #1
		if (val) {
    94a0:	b981      	cbnz	r1, 94c4 <digitalWrite+0x38>
			*portClearRegister(pin) = 1;
    94a2:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    94a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    94aa:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    94ac:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    94b0:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    94b2:	681a      	ldr	r2, [r3, #0]
		if (val) {
    94b4:	b159      	cbz	r1, 94ce <digitalWrite+0x42>
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    94b6:	f042 0203 	orr.w	r2, r2, #3
}
    94ba:	f85d 4b04 	ldr.w	r4, [sp], #4
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    94be:	601a      	str	r2, [r3, #0]
}
    94c0:	4770      	bx	lr
    94c2:	4770      	bx	lr
			*portSetRegister(pin) = 1;
    94c4:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
}
    94c8:	f85d 4b04 	ldr.w	r4, [sp], #4
    94cc:	4770      	bx	lr
			*config &= ~(PORT_PCR_PE);
    94ce:	f022 0202 	bic.w	r2, r2, #2
}
    94d2:	f85d 4b04 	ldr.w	r4, [sp], #4
			*config &= ~(PORT_PCR_PE);
    94d6:	601a      	str	r2, [r3, #0]
}
    94d8:	4770      	bx	lr
    94da:	bf00      	nop
    94dc:	00012004 	.word	0x00012004

000094e0 <pinMode>:
	if (pin >= CORE_NUM_DIGITAL) return;
    94e0:	283f      	cmp	r0, #63	; 0x3f
    94e2:	d820      	bhi.n	9526 <pinMode+0x46>
	config = portConfigRegister(pin);
    94e4:	4a1b      	ldr	r2, [pc, #108]	; (9554 <pinMode+0x74>)
    94e6:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    94ea:	2901      	cmp	r1, #1
	config = portConfigRegister(pin);
    94ec:	685b      	ldr	r3, [r3, #4]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    94ee:	d00f      	beq.n	9510 <pinMode+0x30>
    94f0:	2904      	cmp	r1, #4
    94f2:	d01d      	beq.n	9530 <pinMode+0x50>
		*portModeRegister(pin) = 0;
    94f4:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    94f8:	2200      	movs	r2, #0
    94fa:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
		if (mode == INPUT) {
    94fe:	b199      	cbz	r1, 9528 <pinMode+0x48>
		} else if (mode == INPUT_PULLUP) {
    9500:	2902      	cmp	r1, #2
    9502:	d022      	beq.n	954a <pinMode+0x6a>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    9504:	2903      	cmp	r1, #3
    9506:	d10d      	bne.n	9524 <pinMode+0x44>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    9508:	f44f 7281 	mov.w	r2, #258	; 0x102
    950c:	601a      	str	r2, [r3, #0]
    950e:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    9510:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9514:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    9518:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    951c:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    951e:	681a      	ldr	r2, [r3, #0]
    9520:	f022 0220 	bic.w	r2, r2, #32
    9524:	601a      	str	r2, [r3, #0]
		} else { // INPUT_DISABLE
			*config = 0;
		}
	}
}
    9526:	4770      	bx	lr
			*config = PORT_PCR_MUX(1);
    9528:	f44f 7280 	mov.w	r2, #256	; 0x100
    952c:	601a      	str	r2, [r3, #0]
    952e:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    9530:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9534:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    9538:	2001      	movs	r0, #1
    953a:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    953e:	601a      	str	r2, [r3, #0]
		    *config |= PORT_PCR_ODE;
    9540:	681a      	ldr	r2, [r3, #0]
    9542:	f042 0220 	orr.w	r2, r2, #32
    9546:	601a      	str	r2, [r3, #0]
    9548:	4770      	bx	lr
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    954a:	f240 1203 	movw	r2, #259	; 0x103
    954e:	601a      	str	r2, [r3, #0]
    9550:	4770      	bx	lr
    9552:	bf00      	nop
    9554:	00012004 	.word	0x00012004

00009558 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9558:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    955a:	490e      	ldr	r1, [pc, #56]	; (9594 <micros+0x3c>)
	current = SYST_CVR;
    955c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    9560:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    9562:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9564:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    9568:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    956a:	0152      	lsls	r2, r2, #5
    956c:	d502      	bpl.n	9574 <micros+0x1c>
    956e:	2b32      	cmp	r3, #50	; 0x32
    9570:	bf88      	it	hi
    9572:	3001      	addhi	r0, #1
	current = ((F_CPU / 1000) - 1) - current;
    9574:	f5c3 332f 	rsb	r3, r3, #179200	; 0x2bc00
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9578:	4a07      	ldr	r2, [pc, #28]	; (9598 <micros+0x40>)
	current = ((F_CPU / 1000) - 1) - current;
    957a:	f203 331f 	addw	r3, r3, #799	; 0x31f
	return count * 1000 + current / (F_CPU / 1000000);
    957e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9582:	089b      	lsrs	r3, r3, #2
    9584:	fba2 2303 	umull	r2, r3, r2, r3
    9588:	fb01 f000 	mul.w	r0, r1, r0
}
    958c:	eb00 0093 	add.w	r0, r0, r3, lsr #2
    9590:	4770      	bx	lr
    9592:	bf00      	nop
    9594:	1fff7ae4 	.word	0x1fff7ae4
    9598:	16c16c17 	.word	0x16c16c17

0000959c <delay>:

void delay(uint32_t ms)
{
    959c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    95a0:	4604      	mov	r4, r0
	__disable_irq();
    95a2:	b672      	cpsid	i
	count = systick_millis_count;
    95a4:	4f21      	ldr	r7, [pc, #132]	; (962c <delay+0x90>)
	current = SYST_CVR;
    95a6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    95aa:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    95ac:	683d      	ldr	r5, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    95ae:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    95b2:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    95b4:	0152      	lsls	r2, r2, #5
    95b6:	d502      	bpl.n	95be <delay+0x22>
    95b8:	2b32      	cmp	r3, #50	; 0x32
    95ba:	bf88      	it	hi
    95bc:	3501      	addhi	r5, #1
	uint32_t start = micros();

	if (ms > 0) {
    95be:	b90c      	cbnz	r4, 95c4 <delay+0x28>
				start += 1000;
			}
			yield();
		}
	}
}
    95c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	current = ((F_CPU / 1000) - 1) - current;
    95c4:	f8df 9068 	ldr.w	r9, [pc, #104]	; 9630 <delay+0x94>
	return count * 1000 + current / (F_CPU / 1000000);
    95c8:	f8df 8068 	ldr.w	r8, [pc, #104]	; 9634 <delay+0x98>
	current = ((F_CPU / 1000) - 1) - current;
    95cc:	eba9 0303 	sub.w	r3, r9, r3
	return count * 1000 + current / (F_CPU / 1000000);
    95d0:	089b      	lsrs	r3, r3, #2
    95d2:	fba8 2303 	umull	r2, r3, r8, r3
    95d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    95da:	fb02 f505 	mul.w	r5, r2, r5
    95de:	eb05 0593 	add.w	r5, r5, r3, lsr #2
	current = SYST_CVR;
    95e2:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
	__disable_irq();
    95e6:	b672      	cpsid	i
	current = SYST_CVR;
    95e8:	69b1      	ldr	r1, [r6, #24]
	count = systick_millis_count;
    95ea:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    95ec:	f8d6 cd04 	ldr.w	ip, [r6, #3332]	; 0xd04
	__enable_irq();
    95f0:	b662      	cpsie	i
	current = ((F_CPU / 1000) - 1) - current;
    95f2:	eba9 0301 	sub.w	r3, r9, r1
	return count * 1000 + current / (F_CPU / 1000000);
    95f6:	089b      	lsrs	r3, r3, #2
    95f8:	fba8 0303 	umull	r0, r3, r8, r3
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    95fc:	f01c 6f80 	tst.w	ip, #67108864	; 0x4000000
			while ((micros() - start) >= 1000) {
    9600:	ebc5 0393 	rsb	r3, r5, r3, lsr #2
	return count * 1000 + current / (F_CPU / 1000000);
    9604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9608:	d002      	beq.n	9610 <delay+0x74>
    960a:	2932      	cmp	r1, #50	; 0x32
    960c:	bf88      	it	hi
    960e:	3201      	addhi	r2, #1
			while ((micros() - start) >= 1000) {
    9610:	fb00 3302 	mla	r3, r0, r2, r3
    9614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    9618:	d304      	bcc.n	9624 <delay+0x88>
				if (ms == 0) return;
    961a:	3c01      	subs	r4, #1
    961c:	d0d0      	beq.n	95c0 <delay+0x24>
				start += 1000;
    961e:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
    9622:	e7e0      	b.n	95e6 <delay+0x4a>
			yield();
    9624:	f000 fea6 	bl	a374 <yield>
			while ((micros() - start) >= 1000) {
    9628:	e7dd      	b.n	95e6 <delay+0x4a>
    962a:	bf00      	nop
    962c:	1fff7ae4 	.word	0x1fff7ae4
    9630:	0002bf1f 	.word	0x0002bf1f
    9634:	16c16c17 	.word	0x16c16c17

00009638 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    9638:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    963a:	2b03      	cmp	r3, #3
    963c:	d816      	bhi.n	966c <usb_rx+0x34>
	__disable_irq();
    963e:	b672      	cpsid	i
	ret = rx_first[endpoint];
    9640:	490b      	ldr	r1, [pc, #44]	; (9670 <usb_rx+0x38>)
    9642:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    9646:	b178      	cbz	r0, 9668 <usb_rx+0x30>
{
    9648:	b430      	push	{r4, r5}
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    964a:	4c0a      	ldr	r4, [pc, #40]	; (9674 <usb_rx+0x3c>)
    964c:	f8b0 c000 	ldrh.w	ip, [r0]
    9650:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
		rx_first[endpoint] = ret->next;
    9654:	6845      	ldr	r5, [r0, #4]
    9656:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    965a:	eba2 020c 	sub.w	r2, r2, ip
    965e:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    9662:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    9664:	bc30      	pop	{r4, r5}
    9666:	4770      	bx	lr
	__enable_irq();
    9668:	b662      	cpsie	i
}
    966a:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    966c:	2000      	movs	r0, #0
    966e:	4770      	bx	lr
    9670:	1fff7b78 	.word	0x1fff7b78
    9674:	1fff7bc8 	.word	0x1fff7bc8

00009678 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    9678:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    967a:	2803      	cmp	r0, #3
    967c:	d80b      	bhi.n	9696 <usb_tx_packet_count+0x1e>
	__disable_irq();
    967e:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    9680:	4b07      	ldr	r3, [pc, #28]	; (96a0 <usb_tx_packet_count+0x28>)
    9682:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    9686:	b143      	cbz	r3, 969a <usb_tx_packet_count+0x22>
	uint32_t count=0;
    9688:	2000      	movs	r0, #0
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    968a:	685b      	ldr	r3, [r3, #4]
    968c:	3001      	adds	r0, #1
    968e:	2b00      	cmp	r3, #0
    9690:	d1fb      	bne.n	968a <usb_tx_packet_count+0x12>
	__enable_irq();
    9692:	b662      	cpsie	i
	return count;
    9694:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return 0;
    9696:	2000      	movs	r0, #0
}
    9698:	4770      	bx	lr
	uint32_t count=0;
    969a:	4618      	mov	r0, r3
    969c:	e7f9      	b.n	9692 <usb_tx_packet_count+0x1a>
    969e:	bf00      	nop
    96a0:	1fff7ba0 	.word	0x1fff7ba0

000096a4 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    96a4:	b410      	push	{r4}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    96a6:	b672      	cpsid	i
	cfg = usb_endpoint_config_table;
    96a8:	4a1a      	ldr	r2, [pc, #104]	; (9714 <usb_rx_memory+0x70>)
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    96aa:	4c1b      	ldr	r4, [pc, #108]	; (9718 <usb_rx_memory+0x74>)
	__disable_irq();
    96ac:	2304      	movs	r3, #4
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    96ae:	f812 1b01 	ldrb.w	r1, [r2], #1
    96b2:	0709      	lsls	r1, r1, #28
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    96b4:	f043 0c01 	orr.w	ip, r3, #1
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    96b8:	d505      	bpl.n	96c6 <usb_rx_memory+0x22>
			if (table[index(i, RX, EVEN)].desc == 0) {
    96ba:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
    96be:	b169      	cbz	r1, 96dc <usb_rx_memory+0x38>
			if (table[index(i, RX, ODD)].desc == 0) {
    96c0:	f854 103c 	ldr.w	r1, [r4, ip, lsl #3]
    96c4:	b1c9      	cbz	r1, 96fa <usb_rx_memory+0x56>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    96c6:	3304      	adds	r3, #4
    96c8:	2b14      	cmp	r3, #20
    96ca:	d1f0      	bne.n	96ae <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    96cc:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    96ce:	4b13      	ldr	r3, [pc, #76]	; (971c <usb_rx_memory+0x78>)
    96d0:	2200      	movs	r2, #0
    96d2:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    96d4:	f85d 4b04 	ldr.w	r4, [sp], #4
	usb_free(packet);
    96d8:	f000 bcae 	b.w	a038 <usb_free>
				usb_rx_memory_needed--;
    96dc:	490f      	ldr	r1, [pc, #60]	; (971c <usb_rx_memory+0x78>)
				table[index(i, RX, EVEN)].addr = packet->buf;
    96de:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    96e2:	3008      	adds	r0, #8
    96e4:	6050      	str	r0, [r2, #4]
				usb_rx_memory_needed--;
    96e6:	780a      	ldrb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    96e8:	480d      	ldr	r0, [pc, #52]	; (9720 <usb_rx_memory+0x7c>)
    96ea:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
				usb_rx_memory_needed--;
    96ee:	3a01      	subs	r2, #1
    96f0:	700a      	strb	r2, [r1, #0]
				__enable_irq();
    96f2:	b662      	cpsie	i
}
    96f4:	f85d 4b04 	ldr.w	r4, [sp], #4
    96f8:	4770      	bx	lr
				usb_rx_memory_needed--;
    96fa:	4a08      	ldr	r2, [pc, #32]	; (971c <usb_rx_memory+0x78>)
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    96fc:	4909      	ldr	r1, [pc, #36]	; (9724 <usb_rx_memory+0x80>)
				table[index(i, RX, ODD)].addr = packet->buf;
    96fe:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
    9702:	3008      	adds	r0, #8
    9704:	6058      	str	r0, [r3, #4]
				usb_rx_memory_needed--;
    9706:	7813      	ldrb	r3, [r2, #0]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9708:	f844 103c 	str.w	r1, [r4, ip, lsl #3]
				usb_rx_memory_needed--;
    970c:	3b01      	subs	r3, #1
    970e:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    9710:	b662      	cpsie	i
				return;
    9712:	e7ef      	b.n	96f4 <usb_rx_memory+0x50>
    9714:	00012280 	.word	0x00012280
    9718:	1fff0000 	.word	0x1fff0000
    971c:	1fff7bd0 	.word	0x1fff7bd0
    9720:	00400088 	.word	0x00400088
    9724:	004000c8 	.word	0x004000c8

00009728 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    9728:	1e42      	subs	r2, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    972a:	2a03      	cmp	r2, #3
    972c:	d80e      	bhi.n	974c <usb_tx+0x24>
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    972e:	4b1c      	ldr	r3, [pc, #112]	; (97a0 <usb_tx+0x78>)
    9730:	0140      	lsls	r0, r0, #5
    9732:	f040 0010 	orr.w	r0, r0, #16
{
    9736:	b410      	push	{r4}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    9738:	4403      	add	r3, r0
	__disable_irq();
    973a:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    973c:	4c19      	ldr	r4, [pc, #100]	; (97a4 <usb_tx+0x7c>)
    973e:	5ca0      	ldrb	r0, [r4, r2]
    9740:	2803      	cmp	r0, #3
    9742:	d81d      	bhi.n	9780 <usb_tx+0x58>
    9744:	e8df f000 	tbb	[pc, r0]
    9748:	19031614 	.word	0x19031614
    974c:	4770      	bx	lr
    974e:	2005      	movs	r0, #5
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    9750:	54a0      	strb	r0, [r4, r2]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9752:	f013 0f08 	tst.w	r3, #8
    9756:	8808      	ldrh	r0, [r1, #0]
    9758:	bf14      	ite	ne
    975a:	22c8      	movne	r2, #200	; 0xc8
    975c:	2288      	moveq	r2, #136	; 0x88
	b->addr = packet->buf;
    975e:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9760:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
	b->addr = packet->buf;
    9764:	6059      	str	r1, [r3, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    9766:	601a      	str	r2, [r3, #0]
	__enable_irq();
    9768:	b662      	cpsie	i
}
    976a:	f85d 4b04 	ldr.w	r4, [sp], #4
    976e:	4770      	bx	lr
		next = TX_STATE_ODD_FREE;
    9770:	2003      	movs	r0, #3
    9772:	e7ed      	b.n	9750 <usb_tx+0x28>
		b++;
    9774:	3308      	adds	r3, #8
		next = TX_STATE_EVEN_FREE;
    9776:	2002      	movs	r0, #2
		break;
    9778:	e7ea      	b.n	9750 <usb_tx+0x28>
		b++;
    977a:	3308      	adds	r3, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    977c:	2004      	movs	r0, #4
		break;
    977e:	e7e7      	b.n	9750 <usb_tx+0x28>
		if (tx_first[endpoint] == NULL) {
    9780:	4b09      	ldr	r3, [pc, #36]	; (97a8 <usb_tx+0x80>)
    9782:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    9786:	b138      	cbz	r0, 9798 <usb_tx+0x70>
			tx_last[endpoint]->next = packet;
    9788:	4b08      	ldr	r3, [pc, #32]	; (97ac <usb_tx+0x84>)
    978a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    978e:	6041      	str	r1, [r0, #4]
		tx_last[endpoint] = packet;
    9790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		__enable_irq();
    9794:	b662      	cpsie	i
		return;
    9796:	e7e8      	b.n	976a <usb_tx+0x42>
			tx_first[endpoint] = packet;
    9798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    979c:	4b03      	ldr	r3, [pc, #12]	; (97ac <usb_tx+0x84>)
    979e:	e7f7      	b.n	9790 <usb_tx+0x68>
    97a0:	1fff0000 	.word	0x1fff0000
    97a4:	1fff7bc0 	.word	0x1fff7bc0
    97a8:	1fff7ba0 	.word	0x1fff7ba0
    97ac:	1fff7bb0 	.word	0x1fff7bb0

000097b0 <usb_isr>:
}



void usb_isr(void)
{
    97b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    97b4:	f8df a30c 	ldr.w	sl, [pc, #780]	; 9ac4 <usb_isr+0x314>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    97b8:	f8df b30c 	ldr.w	fp, [pc, #780]	; 9ac8 <usb_isr+0x318>
{
    97bc:	b085      	sub	sp, #20
    97be:	e03d      	b.n	983c <usb_isr+0x8c>
			bdt_t *b = stat2bufferdescriptor(stat);
    97c0:	4db0      	ldr	r5, [pc, #704]	; (9a84 <usb_isr+0x2d4>)
    97c2:	089e      	lsrs	r6, r3, #2
    97c4:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
			endpoint--;	// endpoint is index to zero-based arrays
    97c8:	3a01      	subs	r2, #1
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    97ca:	6879      	ldr	r1, [r7, #4]
			if (stat & 0x08) { // transmit
    97cc:	f013 0308 	ands.w	r3, r3, #8
			endpoint--;	// endpoint is index to zero-based arrays
    97d0:	b2d4      	uxtb	r4, r2
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    97d2:	f1a1 0008 	sub.w	r0, r1, #8
			if (stat & 0x08) { // transmit
    97d6:	f040 80b8 	bne.w	994a <usb_isr+0x19a>
				packet->len = b->desc >> 16;
    97da:	f855 2036 	ldr.w	r2, [r5, r6, lsl #3]
    97de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
				if (packet->len > 0) {
    97e2:	0c12      	lsrs	r2, r2, #16
				packet->len = b->desc >> 16;
    97e4:	f821 cc08 	strh.w	ip, [r1, #-8]
				if (packet->len > 0) {
    97e8:	f000 80a7 	beq.w	993a <usb_isr+0x18a>
					packet->index = 0;
    97ec:	f821 3c06 	strh.w	r3, [r1, #-6]
					packet->next = NULL;
    97f0:	f841 3c04 	str.w	r3, [r1, #-4]
					if (rx_first[endpoint] == NULL) {
    97f4:	4ba4      	ldr	r3, [pc, #656]	; (9a88 <usb_isr+0x2d8>)
    97f6:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    97fa:	2a00      	cmp	r2, #0
    97fc:	f000 8201 	beq.w	9c02 <usb_isr+0x452>
						rx_last[endpoint]->next = packet;
    9800:	4ba2      	ldr	r3, [pc, #648]	; (9a8c <usb_isr+0x2dc>)
    9802:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    9806:	6050      	str	r0, [r2, #4]
					rx_last[endpoint] = packet;
    9808:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    980c:	4ba0      	ldr	r3, [pc, #640]	; (9a90 <usb_isr+0x2e0>)
    980e:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
    9812:	4494      	add	ip, r2
    9814:	f823 c014 	strh.w	ip, [r3, r4, lsl #1]
					packet = usb_malloc();
    9818:	f000 fbee 	bl	9ff8 <usb_malloc>
					if (packet) {
    981c:	2800      	cmp	r0, #0
    981e:	f000 81e9 	beq.w	9bf4 <usb_isr+0x444>
						b->desc = BDT_DESC(64,
    9822:	f017 0f08 	tst.w	r7, #8
    9826:	4b9b      	ldr	r3, [pc, #620]	; (9a94 <usb_isr+0x2e4>)
						b->addr = packet->buf;
    9828:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    982c:	bf18      	it	ne
    982e:	465b      	movne	r3, fp
						b->addr = packet->buf;
    9830:	6078      	str	r0, [r7, #4]
						b->desc = BDT_DESC(64,
    9832:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    9836:	2308      	movs	r3, #8
    9838:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	status = USB0_ISTAT;
    983c:	f89a 3080 	ldrb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    9840:	0759      	lsls	r1, r3, #29
	status = USB0_ISTAT;
    9842:	b2dc      	uxtb	r4, r3
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    9844:	d51b      	bpl.n	987e <usb_isr+0xce>
		if (usb_configuration) {
    9846:	4b94      	ldr	r3, [pc, #592]	; (9a98 <usb_isr+0x2e8>)
    9848:	781b      	ldrb	r3, [r3, #0]
    984a:	b1ab      	cbz	r3, 9878 <usb_isr+0xc8>
			t = usb_reboot_timer;
    984c:	4993      	ldr	r1, [pc, #588]	; (9a9c <usb_isr+0x2ec>)
    984e:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    9850:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    9854:	b12a      	cbz	r2, 9862 <usb_isr+0xb2>
				usb_reboot_timer = --t;
    9856:	3b01      	subs	r3, #1
    9858:	b2db      	uxtb	r3, r3
    985a:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    985c:	2b00      	cmp	r3, #0
    985e:	f000 8346 	beq.w	9eee <usb_isr+0x73e>
			t = usb_cdc_transmit_flush_timer;
    9862:	498f      	ldr	r1, [pc, #572]	; (9aa0 <usb_isr+0x2f0>)
    9864:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    9866:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    986a:	b12a      	cbz	r2, 9878 <usb_isr+0xc8>
				usb_cdc_transmit_flush_timer = --t;
    986c:	3b01      	subs	r3, #1
    986e:	b2db      	uxtb	r3, r3
    9870:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    9872:	2b00      	cmp	r3, #0
    9874:	f000 81eb 	beq.w	9c4e <usb_isr+0x49e>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    9878:	2304      	movs	r3, #4
    987a:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    987e:	f014 0208 	ands.w	r2, r4, #8
    9882:	f000 81cc 	beq.w	9c1e <usb_isr+0x46e>
		stat = USB0_STAT;
    9886:	f89a 2090 	ldrb.w	r2, [sl, #144]	; 0x90
    988a:	b2d3      	uxtb	r3, r2
		if (endpoint == 0) {
    988c:	0912      	lsrs	r2, r2, #4
    988e:	d197      	bne.n	97c0 <usb_isr+0x10>
	b = stat2bufferdescriptor(stat);
    9890:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 9a84 <usb_isr+0x2d4>
    9894:	089b      	lsrs	r3, r3, #2
    9896:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
	pid = BDT_PID(b->desc);
    989a:	f859 0033 	ldr.w	r0, [r9, r3, lsl #3]
	buf = b->addr;
    989e:	6864      	ldr	r4, [r4, #4]
	pid = BDT_PID(b->desc);
    98a0:	f3c0 0083 	ubfx	r0, r0, #2, #4
	switch (pid) {
    98a4:	2809      	cmp	r0, #9
    98a6:	d07c      	beq.n	99a2 <usb_isr+0x1f2>
    98a8:	d80f      	bhi.n	98ca <usb_isr+0x11a>
    98aa:	3801      	subs	r0, #1
    98ac:	2801      	cmp	r0, #1
    98ae:	d808      	bhi.n	98c2 <usb_isr+0x112>
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    98b0:	4a7c      	ldr	r2, [pc, #496]	; (9aa4 <usb_isr+0x2f4>)
    98b2:	8815      	ldrh	r5, [r2, #0]
    98b4:	f242 0021 	movw	r0, #8225	; 0x2021
    98b8:	4285      	cmp	r5, r0
    98ba:	f000 81fb 	beq.w	9cb4 <usb_isr+0x504>
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    98be:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    98c2:	2301      	movs	r3, #1
    98c4:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
}
    98c8:	e7b5      	b.n	9836 <usb_isr+0x86>
	switch (pid) {
    98ca:	280d      	cmp	r0, #13
    98cc:	d1f9      	bne.n	98c2 <usb_isr+0x112>
		setup.word2 = *(uint32_t *)(buf + 4);
    98ce:	e9d4 0700 	ldrd	r0, r7, [r4]
		ep0_tx_ptr = NULL;
    98d2:	4d75      	ldr	r5, [pc, #468]	; (9aa8 <usb_isr+0x2f8>)
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    98d4:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
		setup.word1 = *(uint32_t *)(buf);
    98d8:	4e72      	ldr	r6, [pc, #456]	; (9aa4 <usb_isr+0x2f4>)
		ep0_tx_data_toggle = 1;
    98da:	4c74      	ldr	r4, [pc, #464]	; (9aac <usb_isr+0x2fc>)
		table[index(0, TX, EVEN)].desc = 0;
    98dc:	f8c9 2010 	str.w	r2, [r9, #16]
    98e0:	b283      	uxth	r3, r0
	switch (setup.wRequestAndType) {
    98e2:	f240 6c81 	movw	ip, #1665	; 0x681
		table[index(0, TX, ODD)].desc = 0;
    98e6:	f8c9 2018 	str.w	r2, [r9, #24]
		ep0_tx_ptr = NULL;
    98ea:	602a      	str	r2, [r5, #0]
	switch (setup.wRequestAndType) {
    98ec:	4563      	cmp	r3, ip
		ep0_tx_data_toggle = 1;
    98ee:	f04f 0201 	mov.w	r2, #1
		setup.word2 = *(uint32_t *)(buf + 4);
    98f2:	e9c6 0700 	strd	r0, r7, [r6]
		ep0_tx_data_toggle = 1;
    98f6:	7022      	strb	r2, [r4, #0]
	switch (setup.wRequestAndType) {
    98f8:	f200 80ff 	bhi.w	9afa <usb_isr+0x34a>
    98fc:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
    9900:	f080 82cb 	bcs.w	9e9a <usb_isr+0x6ea>
    9904:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    9908:	f000 8226 	beq.w	9d58 <usb_isr+0x5a8>
    990c:	f240 80de 	bls.w	9acc <usb_isr+0x31c>
    9910:	f240 3202 	movw	r2, #770	; 0x302
    9914:	4293      	cmp	r3, r2
    9916:	d17b      	bne.n	9a10 <usb_isr+0x260>
		i = setup.wIndex & 0x7F;
    9918:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    991c:	2f04      	cmp	r7, #4
    991e:	f200 8108 	bhi.w	9b32 <usb_isr+0x382>
    9922:	0c02      	lsrs	r2, r0, #16
    9924:	f040 8105 	bne.w	9b32 <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    9928:	4961      	ldr	r1, [pc, #388]	; (9ab0 <usb_isr+0x300>)
    992a:	f811 3027 	ldrb.w	r3, [r1, r7, lsl #2]
    992e:	f043 0302 	orr.w	r3, r3, #2
    9932:	f801 3027 	strb.w	r3, [r1, r7, lsl #2]
	const uint8_t *data = NULL;
    9936:	4613      	mov	r3, r2
		break;
    9938:	e070      	b.n	9a1c <usb_isr+0x26c>
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    993a:	f017 0f08 	tst.w	r7, #8
    993e:	4b55      	ldr	r3, [pc, #340]	; (9a94 <usb_isr+0x2e4>)
    9940:	bf18      	it	ne
    9942:	465b      	movne	r3, fp
    9944:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    9948:	e775      	b.n	9836 <usb_isr+0x86>
				usb_free(packet);
    994a:	f000 fb75 	bl	a038 <usb_free>
				packet = tx_first[endpoint];
    994e:	4959      	ldr	r1, [pc, #356]	; (9ab4 <usb_isr+0x304>)
					switch (tx_state[endpoint]) {
    9950:	4a59      	ldr	r2, [pc, #356]	; (9ab8 <usb_isr+0x308>)
				packet = tx_first[endpoint];
    9952:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
				if (packet) {
    9956:	2b00      	cmp	r3, #0
    9958:	f000 8157 	beq.w	9c0a <usb_isr+0x45a>
					tx_first[endpoint] = packet->next;
    995c:	6858      	ldr	r0, [r3, #4]
    995e:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
					switch (tx_state[endpoint]) {
    9962:	5d11      	ldrb	r1, [r2, r4]
					b->addr = packet->buf;
    9964:	f103 0008 	add.w	r0, r3, #8
    9968:	6078      	str	r0, [r7, #4]
					switch (tx_state[endpoint]) {
    996a:	2903      	cmp	r1, #3
    996c:	d805      	bhi.n	997a <usb_isr+0x1ca>
    996e:	e8df f001 	tbb	[pc, r1]
    9972:	0f12      	.short	0x0f12
    9974:	0215      	.short	0x0215
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    9976:	2104      	movs	r1, #4
    9978:	5511      	strb	r1, [r2, r4]
					b->desc = BDT_DESC(packet->len,
    997a:	881a      	ldrh	r2, [r3, #0]
    997c:	f017 0f08 	tst.w	r7, #8
    9980:	bf14      	ite	ne
    9982:	23c8      	movne	r3, #200	; 0xc8
    9984:	2388      	moveq	r3, #136	; 0x88
    9986:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    998a:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    998e:	e752      	b.n	9836 <usb_isr+0x86>
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    9990:	2102      	movs	r1, #2
    9992:	5511      	strb	r1, [r2, r4]
						break;
    9994:	e7f1      	b.n	997a <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    9996:	2103      	movs	r1, #3
    9998:	5511      	strb	r1, [r2, r4]
						break;
    999a:	e7ee      	b.n	997a <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    999c:	2105      	movs	r1, #5
    999e:	5511      	strb	r1, [r2, r4]
						break;
    99a0:	e7eb      	b.n	997a <usb_isr+0x1ca>
		data = ep0_tx_ptr;
    99a2:	4d41      	ldr	r5, [pc, #260]	; (9aa8 <usb_isr+0x2f8>)
    99a4:	682a      	ldr	r2, [r5, #0]
		if (data) {
    99a6:	b33a      	cbz	r2, 99f8 <usb_isr+0x248>
			size = ep0_tx_len;
    99a8:	4944      	ldr	r1, [pc, #272]	; (9abc <usb_isr+0x30c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    99aa:	4c40      	ldr	r4, [pc, #256]	; (9aac <usb_isr+0x2fc>)
			size = ep0_tx_len;
    99ac:	880f      	ldrh	r7, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    99ae:	4844      	ldr	r0, [pc, #272]	; (9ac0 <usb_isr+0x310>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    99b0:	f894 e000 	ldrb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    99b4:	7806      	ldrb	r6, [r0, #0]
    99b6:	2f40      	cmp	r7, #64	; 0x40
    99b8:	463b      	mov	r3, r7
    99ba:	bf28      	it	cs
    99bc:	2340      	movcs	r3, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    99be:	f1be 0f00 	cmp.w	lr, #0
	ep0_tx_data_toggle ^= 1;
    99c2:	f08e 0e01 	eor.w	lr, lr, #1
    99c6:	f884 e000 	strb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    99ca:	f046 0402 	orr.w	r4, r6, #2
	ep0_tx_bdt_bank ^= 1;
    99ce:	f086 0601 	eor.w	r6, r6, #1
    99d2:	7006      	strb	r6, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    99d4:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
    99d8:	6042      	str	r2, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    99da:	bf14      	ite	ne
    99dc:	20c8      	movne	r0, #200	; 0xc8
    99de:	2088      	moveq	r0, #136	; 0x88
    99e0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
			data += size;
    99e4:	441a      	add	r2, r3
			ep0_tx_len -= size;
    99e6:	1afb      	subs	r3, r7, r3
    99e8:	b29b      	uxth	r3, r3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    99ea:	f849 0034 	str.w	r0, [r9, r4, lsl #3]
			ep0_tx_len -= size;
    99ee:	800b      	strh	r3, [r1, #0]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    99f0:	2b00      	cmp	r3, #0
    99f2:	f000 8136 	beq.w	9c62 <usb_isr+0x4b2>
    99f6:	602a      	str	r2, [r5, #0]
		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    99f8:	4b2a      	ldr	r3, [pc, #168]	; (9aa4 <usb_isr+0x2f4>)
    99fa:	881a      	ldrh	r2, [r3, #0]
    99fc:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    9a00:	f47f af5f 	bne.w	98c2 <usb_isr+0x112>
			USB0_ADDR = setup.wValue;
    9a04:	789a      	ldrb	r2, [r3, #2]
    9a06:	f88a 2098 	strb.w	r2, [sl, #152]	; 0x98
			setup.bRequest = 0;
    9a0a:	2200      	movs	r2, #0
    9a0c:	705a      	strb	r2, [r3, #1]
			USB0_ADDR = setup.wValue;
    9a0e:	e758      	b.n	98c2 <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    9a10:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    9a14:	f040 808d 	bne.w	9b32 <usb_isr+0x382>
	uint32_t datalen = 0;
    9a18:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    9a1a:	4613      	mov	r3, r2
	if (datalen > setup.wLength) datalen = setup.wLength;
    9a1c:	f8b6 c006 	ldrh.w	ip, [r6, #6]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9a20:	4827      	ldr	r0, [pc, #156]	; (9ac0 <usb_isr+0x310>)
    9a22:	4594      	cmp	ip, r2
    9a24:	bf28      	it	cs
    9a26:	4694      	movcs	ip, r2
	if (size > EP0_SIZE) size = EP0_SIZE;
    9a28:	4667      	mov	r7, ip
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9a2a:	7802      	ldrb	r2, [r0, #0]
    9a2c:	2f40      	cmp	r7, #64	; 0x40
    9a2e:	bf28      	it	cs
    9a30:	2740      	movcs	r7, #64	; 0x40
    9a32:	f042 0e02 	orr.w	lr, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9a36:	043e      	lsls	r6, r7, #16
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9a38:	eb09 08ce 	add.w	r8, r9, lr, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9a3c:	f046 06c8 	orr.w	r6, r6, #200	; 0xc8
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9a40:	f8c8 3004 	str.w	r3, [r8, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9a44:	f849 603e 	str.w	r6, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    9a48:	2600      	movs	r6, #0
	data += size;
    9a4a:	443b      	add	r3, r7
	ep0_tx_data_toggle ^= 1;
    9a4c:	7026      	strb	r6, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    9a4e:	ebbc 0707 	subs.w	r7, ip, r7
	ep0_tx_bdt_bank ^= 1;
    9a52:	f082 0601 	eor.w	r6, r2, #1
    9a56:	7006      	strb	r6, [r0, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    9a58:	f040 8111 	bne.w	9c7e <usb_isr+0x4ce>
    9a5c:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
    9a60:	f04f 0501 	mov.w	r5, #1
    9a64:	d909      	bls.n	9a7a <usb_isr+0x2ca>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9a66:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    9a6a:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9a6c:	eb09 02c6 	add.w	r2, r9, r6, lsl #3
	ep0_tx_data_toggle ^= 1;
    9a70:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9a72:	6053      	str	r3, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9a74:	2388      	movs	r3, #136	; 0x88
    9a76:	f849 3036 	str.w	r3, [r9, r6, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9a7a:	2301      	movs	r3, #1
    9a7c:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    9a80:	e71f      	b.n	98c2 <usb_isr+0x112>
    9a82:	bf00      	nop
    9a84:	1fff0000 	.word	0x1fff0000
    9a88:	1fff7b78 	.word	0x1fff7b78
    9a8c:	1fff7b88 	.word	0x1fff7b88
    9a90:	1fff7bc8 	.word	0x1fff7bc8
    9a94:	00400088 	.word	0x00400088
    9a98:	1fff7bc4 	.word	0x1fff7bc4
    9a9c:	1fff7bc5 	.word	0x1fff7bc5
    9aa0:	1fff7bf0 	.word	0x1fff7bf0
    9aa4:	1fff7b98 	.word	0x1fff7b98
    9aa8:	1fff7b6c 	.word	0x1fff7b6c
    9aac:	1fff7b69 	.word	0x1fff7b69
    9ab0:	400720c0 	.word	0x400720c0
    9ab4:	1fff7ba0 	.word	0x1fff7ba0
    9ab8:	1fff7bc0 	.word	0x1fff7bc0
    9abc:	1fff7b6a 	.word	0x1fff7b6a
    9ac0:	1fff7b68 	.word	0x1fff7b68
    9ac4:	40072000 	.word	0x40072000
    9ac8:	004000c8 	.word	0x004000c8
	switch (setup.wRequestAndType) {
    9acc:	2b80      	cmp	r3, #128	; 0x80
    9ace:	f000 818b 	beq.w	9de8 <usb_isr+0x638>
    9ad2:	2b82      	cmp	r3, #130	; 0x82
    9ad4:	d12d      	bne.n	9b32 <usb_isr+0x382>
		i = setup.wIndex & 0x7F;
    9ad6:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS) {
    9ada:	2f04      	cmp	r7, #4
    9adc:	d829      	bhi.n	9b32 <usb_isr+0x382>
		reply_buffer[0] = 0;
    9ade:	4aa7      	ldr	r2, [pc, #668]	; (9d7c <usb_isr+0x5cc>)
    9ae0:	2300      	movs	r3, #0
    9ae2:	8013      	strh	r3, [r2, #0]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    9ae4:	4ba6      	ldr	r3, [pc, #664]	; (9d80 <usb_isr+0x5d0>)
    9ae6:	f813 3027 	ldrb.w	r3, [r3, r7, lsl #2]
    9aea:	079f      	lsls	r7, r3, #30
    9aec:	f140 81fc 	bpl.w	9ee8 <usb_isr+0x738>
    9af0:	2301      	movs	r3, #1
    9af2:	7013      	strb	r3, [r2, #0]
		data = reply_buffer;
    9af4:	4ba1      	ldr	r3, [pc, #644]	; (9d7c <usb_isr+0x5cc>)
		datalen = 2;
    9af6:	2202      	movs	r2, #2
    9af8:	e790      	b.n	9a1c <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    9afa:	f242 0c21 	movw	ip, #8225	; 0x2021
    9afe:	4563      	cmp	r3, ip
    9b00:	d0bb      	beq.n	9a7a <usb_isr+0x2ca>
    9b02:	d91d      	bls.n	9b40 <usb_isr+0x390>
    9b04:	f242 2221 	movw	r2, #8737	; 0x2221
    9b08:	4293      	cmp	r3, r2
    9b0a:	d10d      	bne.n	9b28 <usb_isr+0x378>
		switch (setup.wIndex) {
    9b0c:	b2bf      	uxth	r7, r7
    9b0e:	2f00      	cmp	r7, #0
    9b10:	d182      	bne.n	9a18 <usb_isr+0x268>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9b12:	4b9c      	ldr	r3, [pc, #624]	; (9d84 <usb_isr+0x5d4>)
    9b14:	681a      	ldr	r2, [r3, #0]
    9b16:	4b9c      	ldr	r3, [pc, #624]	; (9d88 <usb_isr+0x5d8>)
    9b18:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    9b1a:	4b9c      	ldr	r3, [pc, #624]	; (9d8c <usb_isr+0x5dc>)
    9b1c:	f3c0 4007 	ubfx	r0, r0, #16, #8
	uint32_t datalen = 0;
    9b20:	2200      	movs	r2, #0
			usb_cdc_line_rtsdtr = setup.wValue;
    9b22:	7018      	strb	r0, [r3, #0]
	const uint8_t *data = NULL;
    9b24:	4613      	mov	r3, r2
			break;
    9b26:	e779      	b.n	9a1c <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    9b28:	f242 3221 	movw	r2, #8993	; 0x2321
    9b2c:	4293      	cmp	r3, r2
    9b2e:	f43f af73 	beq.w	9a18 <usb_isr+0x268>
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9b32:	230f      	movs	r3, #15
    9b34:	f88a 30c0 	strb.w	r3, [sl, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9b38:	2301      	movs	r3, #1
    9b3a:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    9b3e:	e6c0      	b.n	98c2 <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    9b40:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    9b44:	f000 814a 	beq.w	9ddc <usb_isr+0x62c>
    9b48:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    9b4c:	d1f1      	bne.n	9b32 <usb_isr+0x382>
		usb_configuration = setup.wValue;
    9b4e:	4b90      	ldr	r3, [pc, #576]	; (9d90 <usb_isr+0x5e0>)
    9b50:	f3c0 4007 	ubfx	r0, r0, #16, #8
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    9b54:	2504      	movs	r5, #4
		usb_configuration = setup.wValue;
    9b56:	7018      	strb	r0, [r3, #0]
			if (table[i].desc & BDT_OWN) {
    9b58:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    9b5c:	061a      	lsls	r2, r3, #24
    9b5e:	d406      	bmi.n	9b6e <usb_isr+0x3be>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    9b60:	3501      	adds	r5, #1
    9b62:	2d14      	cmp	r5, #20
    9b64:	d00c      	beq.n	9b80 <usb_isr+0x3d0>
			if (table[i].desc & BDT_OWN) {
    9b66:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    9b6a:	061a      	lsls	r2, r3, #24
    9b6c:	d5f8      	bpl.n	9b60 <usb_isr+0x3b0>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    9b6e:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    9b72:	3501      	adds	r5, #1
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    9b74:	6858      	ldr	r0, [r3, #4]
    9b76:	3808      	subs	r0, #8
    9b78:	f000 fa5e 	bl	a038 <usb_free>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    9b7c:	2d14      	cmp	r5, #20
    9b7e:	d1f2      	bne.n	9b66 <usb_isr+0x3b6>
    9b80:	4a84      	ldr	r2, [pc, #528]	; (9d94 <usb_isr+0x5e4>)
    9b82:	4b85      	ldr	r3, [pc, #532]	; (9d98 <usb_isr+0x5e8>)
    9b84:	9202      	str	r2, [sp, #8]
    9b86:	4a85      	ldr	r2, [pc, #532]	; (9d9c <usb_isr+0x5ec>)
    9b88:	9201      	str	r2, [sp, #4]
    9b8a:	4e85      	ldr	r6, [pc, #532]	; (9da0 <usb_isr+0x5f0>)
    9b8c:	4a85      	ldr	r2, [pc, #532]	; (9da4 <usb_isr+0x5f4>)
    9b8e:	f8df 8248 	ldr.w	r8, [pc, #584]	; 9dd8 <usb_isr+0x628>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9b92:	9403      	str	r4, [sp, #12]
    9b94:	9200      	str	r2, [sp, #0]
			rx_first[i] = NULL;
    9b96:	2500      	movs	r5, #0
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9b98:	461c      	mov	r4, r3
			p = rx_first[i];
    9b9a:	f856 7b04 	ldr.w	r7, [r6], #4
			while (p) {
    9b9e:	b12f      	cbz	r7, 9bac <usb_isr+0x3fc>
				n = p->next;
    9ba0:	4638      	mov	r0, r7
    9ba2:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    9ba4:	f000 fa48 	bl	a038 <usb_free>
			while (p) {
    9ba8:	2f00      	cmp	r7, #0
    9baa:	d1f9      	bne.n	9ba0 <usb_isr+0x3f0>
			rx_last[i] = NULL;
    9bac:	9b00      	ldr	r3, [sp, #0]
			p = tx_first[i];
    9bae:	f8d8 7000 	ldr.w	r7, [r8]
			rx_last[i] = NULL;
    9bb2:	f843 5b04 	str.w	r5, [r3], #4
			rx_first[i] = NULL;
    9bb6:	f846 5c04 	str.w	r5, [r6, #-4]
			rx_last[i] = NULL;
    9bba:	9300      	str	r3, [sp, #0]
			while (p) {
    9bbc:	b12f      	cbz	r7, 9bca <usb_isr+0x41a>
				n = p->next;
    9bbe:	4638      	mov	r0, r7
    9bc0:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    9bc2:	f000 fa39 	bl	a038 <usb_free>
			while (p) {
    9bc6:	2f00      	cmp	r7, #0
    9bc8:	d1f9      	bne.n	9bbe <usb_isr+0x40e>
			tx_last[i] = NULL;
    9bca:	9b02      	ldr	r3, [sp, #8]
			tx_first[i] = NULL;
    9bcc:	f848 5b04 	str.w	r5, [r8], #4
			tx_last[i] = NULL;
    9bd0:	f843 5b04 	str.w	r5, [r3], #4
    9bd4:	9302      	str	r3, [sp, #8]
			usb_rx_byte_count_data[i] = 0;
    9bd6:	9b01      	ldr	r3, [sp, #4]
    9bd8:	f823 5b02 	strh.w	r5, [r3], #2
    9bdc:	9301      	str	r3, [sp, #4]
			switch (tx_state[i]) {
    9bde:	7823      	ldrb	r3, [r4, #0]
    9be0:	3b02      	subs	r3, #2
    9be2:	2b03      	cmp	r3, #3
    9be4:	f200 8109 	bhi.w	9dfa <usb_isr+0x64a>
    9be8:	e8df f013 	tbh	[pc, r3, lsl #1]
    9bec:	0104013f 	.word	0x0104013f
    9bf0:	0104013f 	.word	0x0104013f
						usb_rx_memory_needed++;
    9bf4:	4a6c      	ldr	r2, [pc, #432]	; (9da8 <usb_isr+0x5f8>)
						b->desc = 0;
    9bf6:	f845 0036 	str.w	r0, [r5, r6, lsl #3]
						usb_rx_memory_needed++;
    9bfa:	7813      	ldrb	r3, [r2, #0]
    9bfc:	3301      	adds	r3, #1
    9bfe:	7013      	strb	r3, [r2, #0]
    9c00:	e619      	b.n	9836 <usb_isr+0x86>
						rx_first[endpoint] = packet;
    9c02:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    9c06:	4b67      	ldr	r3, [pc, #412]	; (9da4 <usb_isr+0x5f4>)
    9c08:	e5fe      	b.n	9808 <usb_isr+0x58>
					switch (tx_state[endpoint]) {
    9c0a:	5d11      	ldrb	r1, [r2, r4]
    9c0c:	2902      	cmp	r1, #2
    9c0e:	d026      	beq.n	9c5e <usb_isr+0x4ae>
    9c10:	f67f ae11 	bls.w	9836 <usb_isr+0x86>
    9c14:	2903      	cmp	r1, #3
    9c16:	d11d      	bne.n	9c54 <usb_isr+0x4a4>
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9c18:	2301      	movs	r3, #1
    9c1a:	5513      	strb	r3, [r2, r4]
						break;
    9c1c:	e60b      	b.n	9836 <usb_isr+0x86>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    9c1e:	07e0      	lsls	r0, r4, #31
    9c20:	d46e      	bmi.n	9d00 <usb_isr+0x550>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    9c22:	0621      	lsls	r1, r4, #24
    9c24:	d421      	bmi.n	9c6a <usb_isr+0x4ba>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    9c26:	07a2      	lsls	r2, r4, #30
    9c28:	d508      	bpl.n	9c3c <usb_isr+0x48c>
		uint8_t err = USB0_ERRSTAT;
    9c2a:	4b60      	ldr	r3, [pc, #384]	; (9dac <usb_isr+0x5fc>)
    9c2c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    9c30:	2102      	movs	r1, #2
		uint8_t err = USB0_ERRSTAT;
    9c32:	b2d2      	uxtb	r2, r2
		USB0_ERRSTAT = err;
    9c34:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		USB0_ISTAT = USB_ISTAT_ERROR;
    9c38:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    9c3c:	06e3      	lsls	r3, r4, #27
    9c3e:	d503      	bpl.n	9c48 <usb_isr+0x498>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    9c40:	4b5a      	ldr	r3, [pc, #360]	; (9dac <usb_isr+0x5fc>)
    9c42:	2210      	movs	r2, #16
    9c44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

}
    9c48:	b005      	add	sp, #20
    9c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (t == 0) usb_serial_flush_callback();
    9c4e:	f000 fb6d 	bl	a32c <usb_serial_flush_callback>
    9c52:	e611      	b.n	9878 <usb_isr+0xc8>
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    9c54:	f017 0f08 	tst.w	r7, #8
    9c58:	bf14      	ite	ne
    9c5a:	2303      	movne	r3, #3
    9c5c:	2302      	moveq	r3, #2
    9c5e:	5513      	strb	r3, [r2, r4]
						break;
    9c60:	e5e9      	b.n	9836 <usb_isr+0x86>
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    9c62:	2f3f      	cmp	r7, #63	; 0x3f
    9c64:	bf98      	it	ls
    9c66:	2200      	movls	r2, #0
    9c68:	e6c5      	b.n	99f6 <usb_isr+0x246>
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9c6a:	4b50      	ldr	r3, [pc, #320]	; (9dac <usb_isr+0x5fc>)
		USB0_ISTAT = USB_ISTAT_STALL;
    9c6c:	2280      	movs	r2, #128	; 0x80
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9c6e:	210d      	movs	r1, #13
    9c70:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
		USB0_ISTAT = USB_ISTAT_STALL;
    9c74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    9c78:	07a2      	lsls	r2, r4, #30
    9c7a:	d5df      	bpl.n	9c3c <usb_isr+0x48c>
    9c7c:	e7d5      	b.n	9c2a <usb_isr+0x47a>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9c7e:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    9c82:	7002      	strb	r2, [r0, #0]
    9c84:	2f40      	cmp	r7, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9c86:	eb09 00c6 	add.w	r0, r9, r6, lsl #3
    9c8a:	463a      	mov	r2, r7
    9c8c:	bf28      	it	cs
    9c8e:	2240      	movcs	r2, #64	; 0x40
    9c90:	6043      	str	r3, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9c92:	0410      	lsls	r0, r2, #16
	data += size;
    9c94:	4413      	add	r3, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9c96:	f040 0088 	orr.w	r0, r0, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    9c9a:	2101      	movs	r1, #1
	if (datalen == 0 && size < EP0_SIZE) return;
    9c9c:	1aba      	subs	r2, r7, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9c9e:	f849 0036 	str.w	r0, [r9, r6, lsl #3]
	ep0_tx_data_toggle ^= 1;
    9ca2:	7021      	strb	r1, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    9ca4:	d055      	beq.n	9d52 <usb_isr+0x5a2>
	ep0_tx_ptr = data;
    9ca6:	602b      	str	r3, [r5, #0]
	ep0_tx_len = datalen;
    9ca8:	4b41      	ldr	r3, [pc, #260]	; (9db0 <usb_isr+0x600>)
    9caa:	801a      	strh	r2, [r3, #0]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9cac:	2301      	movs	r3, #1
    9cae:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    9cb2:	e606      	b.n	98c2 <usb_isr+0x112>
			switch (setup.wIndex) {
    9cb4:	8892      	ldrh	r2, [r2, #4]
    9cb6:	b95a      	cbnz	r2, 9cd0 <usb_isr+0x520>
    9cb8:	4a3e      	ldr	r2, [pc, #248]	; (9db4 <usb_isr+0x604>)
    9cba:	1de5      	adds	r5, r4, #7
					*dst++ = *buf++;
    9cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
    9cc0:	f802 1f01 	strb.w	r1, [r2, #1]!
				for (i=0; i<7; i++) {
    9cc4:	42ac      	cmp	r4, r5
    9cc6:	d1f9      	bne.n	9cbc <usb_isr+0x50c>
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9cc8:	4a3b      	ldr	r2, [pc, #236]	; (9db8 <usb_isr+0x608>)
    9cca:	6812      	ldr	r2, [r2, #0]
    9ccc:	2a86      	cmp	r2, #134	; 0x86
    9cce:	d03c      	beq.n	9d4a <usb_isr+0x59a>
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9cd0:	4c3a      	ldr	r4, [pc, #232]	; (9dbc <usb_isr+0x60c>)
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9cd2:	483b      	ldr	r0, [pc, #236]	; (9dc0 <usb_isr+0x610>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9cd4:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9cd6:	7802      	ldrb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9cd8:	2d00      	cmp	r5, #0
	ep0_tx_data_toggle ^= 1;
    9cda:	f085 0501 	eor.w	r5, r5, #1
    9cde:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9ce0:	f042 0402 	orr.w	r4, r2, #2
	ep0_tx_bdt_bank ^= 1;
    9ce4:	f082 0201 	eor.w	r2, r2, #1
    9ce8:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9cea:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
    9cee:	f04f 0000 	mov.w	r0, #0
    9cf2:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9cf4:	bf14      	ite	ne
    9cf6:	22c8      	movne	r2, #200	; 0xc8
    9cf8:	2288      	moveq	r2, #136	; 0x88
    9cfa:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
}
    9cfe:	e5de      	b.n	98be <usb_isr+0x10e>
		USB0_CTL = USB_CTL_ODDRST;
    9d00:	4b2a      	ldr	r3, [pc, #168]	; (9dac <usb_isr+0x5fc>)
		ep0_tx_bdt_bank = 0;
    9d02:	482f      	ldr	r0, [pc, #188]	; (9dc0 <usb_isr+0x610>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    9d04:	492f      	ldr	r1, [pc, #188]	; (9dc4 <usb_isr+0x614>)
    9d06:	4c30      	ldr	r4, [pc, #192]	; (9dc8 <usb_isr+0x618>)
		USB0_CTL = USB_CTL_ODDRST;
    9d08:	2502      	movs	r5, #2
    9d0a:	f883 5094 	strb.w	r5, [r3, #148]	; 0x94
		ep0_tx_bdt_bank = 0;
    9d0e:	7002      	strb	r2, [r0, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    9d10:	482e      	ldr	r0, [pc, #184]	; (9dcc <usb_isr+0x61c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    9d12:	600c      	str	r4, [r1, #0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    9d14:	4d2e      	ldr	r5, [pc, #184]	; (9dd0 <usb_isr+0x620>)
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    9d16:	6048      	str	r0, [r1, #4]
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    9d18:	608c      	str	r4, [r1, #8]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9d1a:	240d      	movs	r4, #13
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    9d1c:	60cd      	str	r5, [r1, #12]
		USB0_ERRSTAT = 0xFF;
    9d1e:	20ff      	movs	r0, #255	; 0xff
		table[index(0, TX, EVEN)].desc = 0;
    9d20:	610a      	str	r2, [r1, #16]
		table[index(0, TX, ODD)].desc = 0;
    9d22:	618a      	str	r2, [r1, #24]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    9d24:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN;
    9d28:	2101      	movs	r1, #1
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    9d2a:	249f      	movs	r4, #159	; 0x9f
		USB0_ERRSTAT = 0xFF;
    9d2c:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
		USB0_ISTAT = 0xFF;
    9d30:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
		USB0_ADDR = 0;
    9d34:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		USB0_ERREN = 0xFF;
    9d38:	f883 008c 	strb.w	r0, [r3, #140]	; 0x8c
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    9d3c:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
		USB0_CTL = USB_CTL_USBENSOFEN;
    9d40:	f883 1094 	strb.w	r1, [r3, #148]	; 0x94
}
    9d44:	b005      	add	sp, #20
    9d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    9d4a:	4a22      	ldr	r2, [pc, #136]	; (9dd4 <usb_isr+0x624>)
    9d4c:	200f      	movs	r0, #15
    9d4e:	7010      	strb	r0, [r2, #0]
    9d50:	e7be      	b.n	9cd0 <usb_isr+0x520>
	if (datalen == 0 && size < EP0_SIZE) return;
    9d52:	2f3f      	cmp	r7, #63	; 0x3f
    9d54:	d8a7      	bhi.n	9ca6 <usb_isr+0x4f6>
    9d56:	e690      	b.n	9a7a <usb_isr+0x2ca>
		i = setup.wIndex & 0x7F;
    9d58:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    9d5c:	2f04      	cmp	r7, #4
    9d5e:	f63f aee8 	bhi.w	9b32 <usb_isr+0x382>
    9d62:	0c00      	lsrs	r0, r0, #16
    9d64:	f47f aee5 	bne.w	9b32 <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    9d68:	4a05      	ldr	r2, [pc, #20]	; (9d80 <usb_isr+0x5d0>)
    9d6a:	f812 3027 	ldrb.w	r3, [r2, r7, lsl #2]
    9d6e:	f023 0302 	bic.w	r3, r3, #2
    9d72:	f802 3027 	strb.w	r3, [r2, r7, lsl #2]
	uint32_t datalen = 0;
    9d76:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    9d78:	4613      	mov	r3, r2
		break;
    9d7a:	e64f      	b.n	9a1c <usb_isr+0x26c>
    9d7c:	1fff7b70 	.word	0x1fff7b70
    9d80:	400720c0 	.word	0x400720c0
    9d84:	1fff7ae4 	.word	0x1fff7ae4
    9d88:	1fff7bec 	.word	0x1fff7bec
    9d8c:	1fff7be8 	.word	0x1fff7be8
    9d90:	1fff7bc4 	.word	0x1fff7bc4
    9d94:	1fff7bb0 	.word	0x1fff7bb0
    9d98:	1fff7bc0 	.word	0x1fff7bc0
    9d9c:	1fff7bc8 	.word	0x1fff7bc8
    9da0:	1fff7b78 	.word	0x1fff7b78
    9da4:	1fff7b88 	.word	0x1fff7b88
    9da8:	1fff7bd0 	.word	0x1fff7bd0
    9dac:	40072000 	.word	0x40072000
    9db0:	1fff7b6a 	.word	0x1fff7b6a
    9db4:	1fff7bdf 	.word	0x1fff7bdf
    9db8:	1fff7be0 	.word	0x1fff7be0
    9dbc:	1fff7b69 	.word	0x1fff7b69
    9dc0:	1fff7b68 	.word	0x1fff7b68
    9dc4:	1fff0000 	.word	0x1fff0000
    9dc8:	00400088 	.word	0x00400088
    9dcc:	1fff7ae8 	.word	0x1fff7ae8
    9dd0:	1fff7b28 	.word	0x1fff7b28
    9dd4:	1fff7bc5 	.word	0x1fff7bc5
    9dd8:	1fff7ba0 	.word	0x1fff7ba0
		reply_buffer[0] = usb_configuration;
    9ddc:	4b48      	ldr	r3, [pc, #288]	; (9f00 <usb_isr+0x750>)
    9dde:	4949      	ldr	r1, [pc, #292]	; (9f04 <usb_isr+0x754>)
    9de0:	781b      	ldrb	r3, [r3, #0]
    9de2:	700b      	strb	r3, [r1, #0]
		data = reply_buffer;
    9de4:	460b      	mov	r3, r1
		break;
    9de6:	e619      	b.n	9a1c <usb_isr+0x26c>
		reply_buffer[0] = 0;
    9de8:	4a46      	ldr	r2, [pc, #280]	; (9f04 <usb_isr+0x754>)
    9dea:	2300      	movs	r3, #0
    9dec:	8013      	strh	r3, [r2, #0]
		data = reply_buffer;
    9dee:	4b45      	ldr	r3, [pc, #276]	; (9f04 <usb_isr+0x754>)
		datalen = 2;
    9df0:	2202      	movs	r2, #2
		break;
    9df2:	e613      	b.n	9a1c <usb_isr+0x26c>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    9df4:	f04f 0301 	mov.w	r3, #1
    9df8:	7023      	strb	r3, [r4, #0]
		for (i=0; i < NUM_ENDPOINTS; i++) {
    9dfa:	4b43      	ldr	r3, [pc, #268]	; (9f08 <usb_isr+0x758>)
    9dfc:	42b3      	cmp	r3, r6
    9dfe:	f104 0401 	add.w	r4, r4, #1
    9e02:	f47f aeca 	bne.w	9b9a <usb_isr+0x3ea>
		usb_rx_memory_needed = 0;
    9e06:	4e41      	ldr	r6, [pc, #260]	; (9f0c <usb_isr+0x75c>)
    9e08:	9c03      	ldr	r4, [sp, #12]
		cfg = usb_endpoint_config_table;
    9e0a:	f8df 8114 	ldr.w	r8, [pc, #276]	; 9f20 <usb_isr+0x770>
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9e0e:	4f40      	ldr	r7, [pc, #256]	; (9f10 <usb_isr+0x760>)
		usb_rx_memory_needed = 0;
    9e10:	2300      	movs	r3, #0
    9e12:	7033      	strb	r3, [r6, #0]
    9e14:	2504      	movs	r5, #4
			epconf = *cfg++;
    9e16:	f818 3b01 	ldrb.w	r3, [r8], #1
			*reg = epconf;
    9e1a:	4a3e      	ldr	r2, [pc, #248]	; (9f14 <usb_isr+0x764>)
    9e1c:	54ab      	strb	r3, [r5, r2]
			if (epconf & USB_ENDPT_EPRXEN) {
    9e1e:	071b      	lsls	r3, r3, #28
    9e20:	d425      	bmi.n	9e6e <usb_isr+0x6be>
			table[index(i, TX, EVEN)].desc = 0;
    9e22:	f045 0102 	orr.w	r1, r5, #2
			table[index(i, TX, ODD)].desc = 0;
    9e26:	f045 0203 	orr.w	r2, r5, #3
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    9e2a:	3504      	adds	r5, #4
			table[index(i, TX, EVEN)].desc = 0;
    9e2c:	2300      	movs	r3, #0
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    9e2e:	2d14      	cmp	r5, #20
			table[index(i, TX, EVEN)].desc = 0;
    9e30:	f849 3031 	str.w	r3, [r9, r1, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    9e34:	f849 3032 	str.w	r3, [r9, r2, lsl #3]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    9e38:	d1ed      	bne.n	9e16 <usb_isr+0x666>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9e3a:	4f37      	ldr	r7, [pc, #220]	; (9f18 <usb_isr+0x768>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9e3c:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9e3e:	783a      	ldrb	r2, [r7, #0]
    9e40:	f042 0002 	orr.w	r0, r2, #2
    9e44:	eb09 0cc0 	add.w	ip, r9, r0, lsl #3
	ep0_tx_data_toggle ^= 1;
    9e48:	f085 0601 	eor.w	r6, r5, #1
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    9e4c:	f8cc 3004 	str.w	r3, [ip, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9e50:	2d00      	cmp	r5, #0
    9e52:	d14d      	bne.n	9ef0 <usb_isr+0x740>
    9e54:	2388      	movs	r3, #136	; 0x88
	ep0_tx_bdt_bank ^= 1;
    9e56:	f082 0201 	eor.w	r2, r2, #1
	ep0_tx_data_toggle ^= 1;
    9e5a:	7026      	strb	r6, [r4, #0]
	ep0_tx_bdt_bank ^= 1;
    9e5c:	703a      	strb	r2, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9e5e:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    9e62:	2301      	movs	r3, #1
    9e64:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    9e68:	e52b      	b.n	98c2 <usb_isr+0x112>
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    9e6a:	7025      	strb	r5, [r4, #0]
				break;
    9e6c:	e7c5      	b.n	9dfa <usb_isr+0x64a>
				p = usb_malloc();
    9e6e:	f000 f8c3 	bl	9ff8 <usb_malloc>
				if (p) {
    9e72:	2800      	cmp	r0, #0
    9e74:	d032      	beq.n	9edc <usb_isr+0x72c>
					table[index(i, RX, EVEN)].addr = p->buf;
    9e76:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
    9e7a:	3008      	adds	r0, #8
    9e7c:	6058      	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    9e7e:	f849 7035 	str.w	r7, [r9, r5, lsl #3]
				p = usb_malloc();
    9e82:	f000 f8b9 	bl	9ff8 <usb_malloc>
				if (p) {
    9e86:	b308      	cbz	r0, 9ecc <usb_isr+0x71c>
					table[index(i, RX, ODD)].addr = p->buf;
    9e88:	f045 0301 	orr.w	r3, r5, #1
    9e8c:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
    9e90:	3008      	adds	r0, #8
    9e92:	6050      	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    9e94:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
    9e98:	e7c3      	b.n	9e22 <usb_isr+0x672>
			if (list->addr == NULL) break;
    9e9a:	4a20      	ldr	r2, [pc, #128]	; (9f1c <usb_isr+0x76c>)
    9e9c:	6853      	ldr	r3, [r2, #4]
    9e9e:	2b00      	cmp	r3, #0
    9ea0:	f43f ae47 	beq.w	9b32 <usb_isr+0x382>
    9ea4:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9ea6:	b2bf      	uxth	r7, r7
    9ea8:	e004      	b.n	9eb4 <usb_isr+0x704>
			if (list->addr == NULL) break;
    9eaa:	6913      	ldr	r3, [r2, #16]
		for (list = usb_descriptor_list; 1; list++) {
    9eac:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    9eae:	2b00      	cmp	r3, #0
    9eb0:	f43f ae3f 	beq.w	9b32 <usb_isr+0x382>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9eb4:	8811      	ldrh	r1, [r2, #0]
    9eb6:	4281      	cmp	r1, r0
    9eb8:	d1f7      	bne.n	9eaa <usb_isr+0x6fa>
    9eba:	8851      	ldrh	r1, [r2, #2]
    9ebc:	42b9      	cmp	r1, r7
    9ebe:	d1f4      	bne.n	9eaa <usb_isr+0x6fa>
				if ((setup.wValue >> 8) == 3) {
    9ec0:	0a00      	lsrs	r0, r0, #8
    9ec2:	2803      	cmp	r0, #3
					datalen = *(list->addr);
    9ec4:	bf0c      	ite	eq
    9ec6:	781a      	ldrbeq	r2, [r3, #0]
					datalen = list->length;
    9ec8:	8912      	ldrhne	r2, [r2, #8]
    9eca:	e5a7      	b.n	9a1c <usb_isr+0x26c>
					usb_rx_memory_needed++;
    9ecc:	7833      	ldrb	r3, [r6, #0]
    9ece:	3301      	adds	r3, #1
    9ed0:	7033      	strb	r3, [r6, #0]
					table[index(i, RX, ODD)].desc = 0;
    9ed2:	f045 0301 	orr.w	r3, r5, #1
    9ed6:	f849 0033 	str.w	r0, [r9, r3, lsl #3]
					usb_rx_memory_needed++;
    9eda:	e7a2      	b.n	9e22 <usb_isr+0x672>
					usb_rx_memory_needed++;
    9edc:	7833      	ldrb	r3, [r6, #0]
					table[index(i, RX, EVEN)].desc = 0;
    9ede:	f849 0035 	str.w	r0, [r9, r5, lsl #3]
					usb_rx_memory_needed++;
    9ee2:	3301      	adds	r3, #1
    9ee4:	7033      	strb	r3, [r6, #0]
    9ee6:	e7cc      	b.n	9e82 <usb_isr+0x6d2>
		data = reply_buffer;
    9ee8:	4b06      	ldr	r3, [pc, #24]	; (9f04 <usb_isr+0x754>)
		datalen = 2;
    9eea:	2202      	movs	r2, #2
    9eec:	e596      	b.n	9a1c <usb_isr+0x26c>
	__asm__ volatile("bkpt");
    9eee:	be00      	bkpt	0x0000
	ep0_tx_data_toggle ^= 1;
    9ef0:	7026      	strb	r6, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9ef2:	23c8      	movs	r3, #200	; 0xc8
	ep0_tx_bdt_bank ^= 1;
    9ef4:	f082 0601 	eor.w	r6, r2, #1
    9ef8:	703e      	strb	r6, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    9efa:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;
    9efe:	e5bc      	b.n	9a7a <usb_isr+0x2ca>
    9f00:	1fff7bc4 	.word	0x1fff7bc4
    9f04:	1fff7b70 	.word	0x1fff7b70
    9f08:	1fff7b88 	.word	0x1fff7b88
    9f0c:	1fff7bd0 	.word	0x1fff7bd0
    9f10:	00400088 	.word	0x00400088
    9f14:	400720c0 	.word	0x400720c0
    9f18:	1fff7b68 	.word	0x1fff7b68
    9f1c:	0001222c 	.word	0x0001222c
    9f20:	00012280 	.word	0x00012280

00009f24 <usb_init>:



void usb_init(void)
{
    9f24:	b510      	push	{r4, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    9f26:	f000 fb03 	bl	a530 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    9f2a:	2300      	movs	r3, #0
    9f2c:	4a23      	ldr	r2, [pc, #140]	; (9fbc <usb_init+0x98>)
		table[i].desc = 0;
    9f2e:	4619      	mov	r1, r3
    9f30:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		table[i].addr = 0;
    9f34:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    9f38:	3301      	adds	r3, #1
    9f3a:	2b14      	cmp	r3, #20
		table[i].addr = 0;
    9f3c:	6041      	str	r1, [r0, #4]
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    9f3e:	d1f7      	bne.n	9f30 <usb_init+0xc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    9f40:	481f      	ldr	r0, [pc, #124]	; (9fc0 <usb_init+0x9c>)
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
    9f42:	4c20      	ldr	r4, [pc, #128]	; (9fc4 <usb_init+0xa0>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    9f44:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9f46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    9f4a:	6343      	str	r3, [r0, #52]	; 0x34
	MPU_RGDAAC0 |= 0x03000000;
    9f4c:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
#endif
#if F_CPU == 180000000 || F_CPU == 216000000 || F_CPU == 256000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    9f50:	f500 3028 	add.w	r0, r0, #172032	; 0x2a000
    9f54:	f500 7080 	add.w	r0, r0, #256	; 0x100
	MPU_RGDAAC0 |= 0x03000000;
    9f58:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
    9f5c:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
    9f60:	2403      	movs	r4, #3
    9f62:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    9f66:	4b18      	ldr	r3, [pc, #96]	; (9fc8 <usb_init+0xa4>)
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
    9f68:	24a0      	movs	r4, #160	; 0xa0
    9f6a:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    9f6e:	f3c2 2407 	ubfx	r4, r2, #8, #8
    9f72:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    9f76:	f3c2 4407 	ubfx	r4, r2, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    9f7a:	0e12      	lsrs	r2, r2, #24
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    9f7c:	f883 40b0 	strb.w	r4, [r3, #176]	; 0xb0

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    9f80:	f04f 0cff 	mov.w	ip, #255	; 0xff
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    9f84:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    9f88:	2201      	movs	r2, #1
	USB0_ISTAT = 0xFF;
    9f8a:	f883 c080 	strb.w	ip, [r3, #128]	; 0x80

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    9f8e:	4c0f      	ldr	r4, [pc, #60]	; (9fcc <usb_init+0xa8>)
	USB0_ERRSTAT = 0xFF;
    9f90:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
	USB0_OTGISTAT = 0xFF;
    9f94:	f883 c010 	strb.w	ip, [r3, #16]
	USB0_CTL = USB_CTL_USBENSOFEN;
    9f98:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	USB0_USBCTRL = 0;
    9f9c:	7001      	strb	r1, [r0, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    9f9e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	USB0_INTEN = USB_INTEN_USBRSTEN;
    9fa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    9fa6:	f04f 0c70 	mov.w	ip, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    9faa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    9fae:	2310      	movs	r3, #16
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    9fb0:	f884 c035 	strb.w	ip, [r4, #53]	; 0x35
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    9fb4:	f8c1 2104 	str.w	r2, [r1, #260]	; 0x104
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    9fb8:	7203      	strb	r3, [r0, #8]
}
    9fba:	bd10      	pop	{r4, pc}
    9fbc:	1fff0000 	.word	0x1fff0000
    9fc0:	40048000 	.word	0x40048000
    9fc4:	4000d000 	.word	0x4000d000
    9fc8:	40072000 	.word	0x40072000
    9fcc:	e000e400 	.word	0xe000e400

00009fd0 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    9fd0:	f000 b8ac 	b.w	a12c <usb_serial_flush_input>

00009fd4 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    9fd4:	f000 b87c 	b.w	a0d0 <usb_serial_peekchar>

00009fd8 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    9fd8:	f000 b856 	b.w	a088 <usb_serial_getchar>

00009fdc <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    9fdc:	f000 b890 	b.w	a100 <usb_serial_available>

00009fe0 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    9fe0:	f000 b978 	b.w	a2d4 <usb_serial_flush_output>

00009fe4 <usb_serial_class::availableForWrite()>:
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    9fe4:	f000 b952 	b.w	a28c <usb_serial_write_buffer_free>

00009fe8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    9fe8:	4608      	mov	r0, r1
    9fea:	4611      	mov	r1, r2
    9fec:	f000 b8ba 	b.w	a164 <usb_serial_write>

00009ff0 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9ff0:	4608      	mov	r0, r1
    9ff2:	f000 b93d 	b.w	a270 <usb_serial_putchar>
    9ff6:	bf00      	nop

00009ff8 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    9ff8:	b672      	cpsid	i
	avail = usb_buffer_available;
    9ffa:	490d      	ldr	r1, [pc, #52]	; (a030 <usb_malloc+0x38>)
    9ffc:	680b      	ldr	r3, [r1, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    9ffe:	fab3 f083 	clz	r0, r3
	if (n >= NUM_USB_BUFFERS) {
    a002:	280b      	cmp	r0, #11
    a004:	dc10      	bgt.n	a028 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    a006:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    a00a:	40c2      	lsrs	r2, r0
    a00c:	ea23 0302 	bic.w	r3, r3, r2
    a010:	600b      	str	r3, [r1, #0]
	__enable_irq();
    a012:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    a014:	4a07      	ldr	r2, [pc, #28]	; (a034 <usb_malloc+0x3c>)
    a016:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    a01a:	00c1      	lsls	r1, r0, #3
    a01c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    a020:	2300      	movs	r3, #0
    a022:	5053      	str	r3, [r2, r1]
	*(uint32_t *)(p + 4) = 0;
    a024:	6043      	str	r3, [r0, #4]
	return (usb_packet_t *)p;
}
    a026:	4770      	bx	lr
		__enable_irq();
    a028:	b662      	cpsie	i
		return NULL;
    a02a:	2000      	movs	r0, #0
    a02c:	4770      	bx	lr
    a02e:	bf00      	nop
    a030:	1fff0e74 	.word	0x1fff0e74
    a034:	1fff03d0 	.word	0x1fff03d0

0000a038 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    a038:	4b0e      	ldr	r3, [pc, #56]	; (a074 <usb_free+0x3c>)
    a03a:	1ac3      	subs	r3, r0, r3
	if (n >= NUM_USB_BUFFERS) return;
    a03c:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
    a040:	d210      	bcs.n	a064 <usb_free+0x2c>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    a042:	4a0d      	ldr	r2, [pc, #52]	; (a078 <usb_free+0x40>)
    a044:	7812      	ldrb	r2, [r2, #0]
    a046:	b972      	cbnz	r2, a066 <usb_free+0x2e>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    a048:	b672      	cpsid	i
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    a04a:	4a0c      	ldr	r2, [pc, #48]	; (a07c <usb_free+0x44>)
	usb_buffer_available |= mask;
    a04c:	490c      	ldr	r1, [pc, #48]	; (a080 <usb_free+0x48>)
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    a04e:	fba2 2303 	umull	r2, r3, r2, r3
	usb_buffer_available |= mask;
    a052:	6808      	ldr	r0, [r1, #0]
	mask = (0x80000000 >> n);
    a054:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    a058:	091b      	lsrs	r3, r3, #4
	mask = (0x80000000 >> n);
    a05a:	fa22 f303 	lsr.w	r3, r2, r3
	usb_buffer_available |= mask;
    a05e:	4303      	orrs	r3, r0
    a060:	600b      	str	r3, [r1, #0]
	__enable_irq();
    a062:	b662      	cpsie	i

	//serial_print("free:");
	//serial_phex32((int)p);
	//serial_print("\n");
}
    a064:	4770      	bx	lr
	if (usb_rx_memory_needed && usb_configuration) {
    a066:	4a07      	ldr	r2, [pc, #28]	; (a084 <usb_free+0x4c>)
    a068:	7812      	ldrb	r2, [r2, #0]
    a06a:	2a00      	cmp	r2, #0
    a06c:	d0ec      	beq.n	a048 <usb_free+0x10>
		usb_rx_memory(p);
    a06e:	f7ff bb19 	b.w	96a4 <usb_rx_memory>
    a072:	bf00      	nop
    a074:	1fff03d0 	.word	0x1fff03d0
    a078:	1fff7bd0 	.word	0x1fff7bd0
    a07c:	38e38e39 	.word	0x38e38e39
    a080:	1fff0e74 	.word	0x1fff0e74
    a084:	1fff7bc4 	.word	0x1fff7bc4

0000a088 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    a088:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    a08a:	4c0f      	ldr	r4, [pc, #60]	; (a0c8 <usb_serial_getchar+0x40>)
    a08c:	6820      	ldr	r0, [r4, #0]
    a08e:	b178      	cbz	r0, a0b0 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    a090:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    a092:	8802      	ldrh	r2, [r0, #0]
	c = rx_packet->buf[i++];
    a094:	18c1      	adds	r1, r0, r3
    a096:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    a098:	429a      	cmp	r2, r3
	c = rx_packet->buf[i++];
    a09a:	7a0d      	ldrb	r5, [r1, #8]
	if (i >= rx_packet->len) {
    a09c:	d902      	bls.n	a0a4 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    a09e:	8043      	strh	r3, [r0, #2]
	}
	return c;
}
    a0a0:	4628      	mov	r0, r5
    a0a2:	bd38      	pop	{r3, r4, r5, pc}
		usb_free(rx_packet);
    a0a4:	f7ff ffc8 	bl	a038 <usb_free>
		rx_packet = NULL;
    a0a8:	2300      	movs	r3, #0
    a0aa:	6023      	str	r3, [r4, #0]
}
    a0ac:	4628      	mov	r0, r5
    a0ae:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration) return -1;
    a0b0:	4b06      	ldr	r3, [pc, #24]	; (a0cc <usb_serial_getchar+0x44>)
    a0b2:	781b      	ldrb	r3, [r3, #0]
    a0b4:	b12b      	cbz	r3, a0c2 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    a0b6:	2003      	movs	r0, #3
    a0b8:	f7ff fabe 	bl	9638 <usb_rx>
    a0bc:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    a0be:	2800      	cmp	r0, #0
    a0c0:	d1e6      	bne.n	a090 <usb_serial_getchar+0x8>
		if (!usb_configuration) return -1;
    a0c2:	f04f 35ff 	mov.w	r5, #4294967295
    a0c6:	e7eb      	b.n	a0a0 <usb_serial_getchar+0x18>
    a0c8:	1fff7bd4 	.word	0x1fff7bd4
    a0cc:	1fff7bc4 	.word	0x1fff7bc4

0000a0d0 <usb_serial_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    a0d0:	b510      	push	{r4, lr}
	if (!rx_packet) {
    a0d2:	4c09      	ldr	r4, [pc, #36]	; (a0f8 <usb_serial_peekchar+0x28>)
    a0d4:	6820      	ldr	r0, [r4, #0]
    a0d6:	b118      	cbz	r0, a0e0 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    a0d8:	8843      	ldrh	r3, [r0, #2]
    a0da:	4418      	add	r0, r3
    a0dc:	7a00      	ldrb	r0, [r0, #8]
}
    a0de:	bd10      	pop	{r4, pc}
		if (!usb_configuration) return -1;
    a0e0:	4b06      	ldr	r3, [pc, #24]	; (a0fc <usb_serial_peekchar+0x2c>)
    a0e2:	781b      	ldrb	r3, [r3, #0]
    a0e4:	b12b      	cbz	r3, a0f2 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    a0e6:	2003      	movs	r0, #3
    a0e8:	f7ff faa6 	bl	9638 <usb_rx>
    a0ec:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    a0ee:	2800      	cmp	r0, #0
    a0f0:	d1f2      	bne.n	a0d8 <usb_serial_peekchar+0x8>
		if (!usb_configuration) return -1;
    a0f2:	f04f 30ff 	mov.w	r0, #4294967295
}
    a0f6:	bd10      	pop	{r4, pc}
    a0f8:	1fff7bd4 	.word	0x1fff7bd4
    a0fc:	1fff7bc4 	.word	0x1fff7bc4

0000a100 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    a100:	4b08      	ldr	r3, [pc, #32]	; (a124 <usb_serial_available+0x24>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    a102:	4a09      	ldr	r2, [pc, #36]	; (a128 <usb_serial_available+0x28>)
    a104:	681b      	ldr	r3, [r3, #0]
{
    a106:	b510      	push	{r4, lr}
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    a108:	8894      	ldrh	r4, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    a10a:	b11b      	cbz	r3, a114 <usb_serial_available+0x14>
    a10c:	881a      	ldrh	r2, [r3, #0]
    a10e:	885b      	ldrh	r3, [r3, #2]
    a110:	1ad3      	subs	r3, r2, r3
    a112:	441c      	add	r4, r3
	if (count == 0) yield();
    a114:	b10c      	cbz	r4, a11a <usb_serial_available+0x1a>
	return count;
}
    a116:	4620      	mov	r0, r4
    a118:	bd10      	pop	{r4, pc}
	if (count == 0) yield();
    a11a:	f000 f92b 	bl	a374 <yield>
}
    a11e:	4620      	mov	r0, r4
    a120:	bd10      	pop	{r4, pc}
    a122:	bf00      	nop
    a124:	1fff7bd4 	.word	0x1fff7bd4
    a128:	1fff7bc8 	.word	0x1fff7bc8

0000a12c <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    a12c:	4b0b      	ldr	r3, [pc, #44]	; (a15c <usb_serial_flush_input+0x30>)
    a12e:	781b      	ldrb	r3, [r3, #0]
    a130:	b19b      	cbz	r3, a15a <usb_serial_flush_input+0x2e>
{
    a132:	b510      	push	{r4, lr}
	if (rx_packet) {
    a134:	4c0a      	ldr	r4, [pc, #40]	; (a160 <usb_serial_flush_input+0x34>)
    a136:	6820      	ldr	r0, [r4, #0]
    a138:	b148      	cbz	r0, a14e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    a13a:	f7ff ff7d 	bl	a038 <usb_free>
		rx_packet = NULL;
    a13e:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    a140:	2003      	movs	r0, #3
		rx_packet = NULL;
    a142:	6023      	str	r3, [r4, #0]
		rx = usb_rx(CDC_RX_ENDPOINT);
    a144:	f7ff fa78 	bl	9638 <usb_rx>
		if (!rx) break;
    a148:	b130      	cbz	r0, a158 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    a14a:	f7ff ff75 	bl	a038 <usb_free>
		rx = usb_rx(CDC_RX_ENDPOINT);
    a14e:	2003      	movs	r0, #3
    a150:	f7ff fa72 	bl	9638 <usb_rx>
		if (!rx) break;
    a154:	2800      	cmp	r0, #0
    a156:	d1f8      	bne.n	a14a <usb_serial_flush_input+0x1e>
	}
}
    a158:	bd10      	pop	{r4, pc}
    a15a:	4770      	bx	lr
    a15c:	1fff7bc4 	.word	0x1fff7bc4
    a160:	1fff7bd4 	.word	0x1fff7bd4

0000a164 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    a164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    a168:	f8df 90f8 	ldr.w	r9, [pc, #248]	; a264 <usb_serial_write+0x100>
{
    a16c:	b083      	sub	sp, #12
	tx_noautoflush = 1;
    a16e:	2201      	movs	r2, #1
    a170:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    a174:	9101      	str	r1, [sp, #4]
    a176:	b379      	cbz	r1, a1d8 <usb_serial_write+0x74>
    a178:	4f37      	ldr	r7, [pc, #220]	; (a258 <usb_serial_write+0xf4>)
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    a17a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; a268 <usb_serial_write+0x104>
	while (size > 0) {
    a17e:	9d01      	ldr	r5, [sp, #4]
    a180:	4e36      	ldr	r6, [pc, #216]	; (a25c <usb_serial_write+0xf8>)
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    a182:	f8df a0e8 	ldr.w	sl, [pc, #232]	; a26c <usb_serial_write+0x108>
    a186:	4683      	mov	fp, r0
		if (!tx_packet) {
    a188:	6838      	ldr	r0, [r7, #0]
    a18a:	b3a8      	cbz	r0, a1f8 <usb_serial_write+0x94>
		len = CDC_TX_SIZE - tx_packet->index;
    a18c:	f8b0 e002 	ldrh.w	lr, [r0, #2]
    a190:	f1ce 0c40 	rsb	ip, lr, #64	; 0x40
    a194:	45ac      	cmp	ip, r5
    a196:	bf28      	it	cs
    a198:	46ac      	movcs	ip, r5
		tx_packet->index += len;
    a19a:	eb0e 040c 	add.w	r4, lr, ip
		transmit_previous_timeout = 0;
    a19e:	2200      	movs	r2, #0
		tx_packet->index += len;
    a1a0:	b2a4      	uxth	r4, r4
		transmit_previous_timeout = 0;
    a1a2:	7032      	strb	r2, [r6, #0]
		size -= len;
    a1a4:	eba5 050c 	sub.w	r5, r5, ip
		tx_packet->index += len;
    a1a8:	8044      	strh	r4, [r0, #2]
		dest = tx_packet->buf + tx_packet->index;
    a1aa:	f100 0208 	add.w	r2, r0, #8
		while (len-- > 0) *dest++ = *src++;
    a1ae:	f1bc 0f00 	cmp.w	ip, #0
    a1b2:	d00a      	beq.n	a1ca <usb_serial_write+0x66>
    a1b4:	f10e 3eff 	add.w	lr, lr, #4294967295
    a1b8:	4472      	add	r2, lr
    a1ba:	44dc      	add	ip, fp
    a1bc:	f81b 4b01 	ldrb.w	r4, [fp], #1
    a1c0:	f802 4f01 	strb.w	r4, [r2, #1]!
    a1c4:	45dc      	cmp	ip, fp
    a1c6:	d1f9      	bne.n	a1bc <usb_serial_write+0x58>
		if (tx_packet->index >= CDC_TX_SIZE) {
    a1c8:	8844      	ldrh	r4, [r0, #2]
    a1ca:	2c3f      	cmp	r4, #63	; 0x3f
    a1cc:	d80b      	bhi.n	a1e6 <usb_serial_write+0x82>
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    a1ce:	2205      	movs	r2, #5
    a1d0:	f88a 2000 	strb.w	r2, [sl]
	while (size > 0) {
    a1d4:	2d00      	cmp	r5, #0
    a1d6:	d1d7      	bne.n	a188 <usb_serial_write+0x24>
	}
	tx_noautoflush = 0;
	return ret;
    a1d8:	9801      	ldr	r0, [sp, #4]
	tx_noautoflush = 0;
    a1da:	2300      	movs	r3, #0
    a1dc:	f889 3000 	strb.w	r3, [r9]
}
    a1e0:	b003      	add	sp, #12
    a1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx_packet->len = CDC_TX_SIZE;
    a1e6:	2240      	movs	r2, #64	; 0x40
    a1e8:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    a1ea:	4601      	mov	r1, r0
    a1ec:	2004      	movs	r0, #4
    a1ee:	f7ff fa9b 	bl	9728 <usb_tx>
			tx_packet = NULL;
    a1f2:	2200      	movs	r2, #0
    a1f4:	603a      	str	r2, [r7, #0]
    a1f6:	e7ea      	b.n	a1ce <usb_serial_write+0x6a>
				if (!usb_configuration) {
    a1f8:	f898 2000 	ldrb.w	r2, [r8]
    a1fc:	b31a      	cbz	r2, a246 <usb_serial_write+0xe2>
    a1fe:	4c18      	ldr	r4, [pc, #96]	; (a260 <usb_serial_write+0xfc>)
    a200:	e008      	b.n	a214 <usb_serial_write+0xb0>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    a202:	3c01      	subs	r4, #1
    a204:	d018      	beq.n	a238 <usb_serial_write+0xd4>
    a206:	7832      	ldrb	r2, [r6, #0]
    a208:	b9b2      	cbnz	r2, a238 <usb_serial_write+0xd4>
				yield();
    a20a:	f000 f8b3 	bl	a374 <yield>
				if (!usb_configuration) {
    a20e:	f898 2000 	ldrb.w	r2, [r8]
    a212:	b1c2      	cbz	r2, a246 <usb_serial_write+0xe2>
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    a214:	2004      	movs	r0, #4
    a216:	f7ff fa2f 	bl	9678 <usb_tx_packet_count>
    a21a:	2807      	cmp	r0, #7
    a21c:	d8f1      	bhi.n	a202 <usb_serial_write+0x9e>
					tx_noautoflush = 1;
    a21e:	f04f 0301 	mov.w	r3, #1
    a222:	f889 3000 	strb.w	r3, [r9]
					tx_packet = usb_malloc();
    a226:	f7ff fee7 	bl	9ff8 <usb_malloc>
    a22a:	6038      	str	r0, [r7, #0]
					if (tx_packet) break;
    a22c:	2800      	cmp	r0, #0
    a22e:	d1ad      	bne.n	a18c <usb_serial_write+0x28>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    a230:	3c01      	subs	r4, #1
					tx_noautoflush = 0;
    a232:	f889 0000 	strb.w	r0, [r9]
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    a236:	d1e6      	bne.n	a206 <usb_serial_write+0xa2>
					transmit_previous_timeout = 1;
    a238:	2301      	movs	r3, #1
					return -1;
    a23a:	f04f 30ff 	mov.w	r0, #4294967295
					transmit_previous_timeout = 1;
    a23e:	7033      	strb	r3, [r6, #0]
}
    a240:	b003      	add	sp, #12
    a242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					tx_noautoflush = 0;
    a246:	2300      	movs	r3, #0
					return -1;
    a248:	f04f 30ff 	mov.w	r0, #4294967295
					tx_noautoflush = 0;
    a24c:	f889 3000 	strb.w	r3, [r9]
}
    a250:	b003      	add	sp, #12
    a252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a256:	bf00      	nop
    a258:	1fff7bdc 	.word	0x1fff7bdc
    a25c:	1fff7bd8 	.word	0x1fff7bd8
    a260:	00014821 	.word	0x00014821
    a264:	1fff7bd9 	.word	0x1fff7bd9
    a268:	1fff7bc4 	.word	0x1fff7bc4
    a26c:	1fff7bf0 	.word	0x1fff7bf0

0000a270 <usb_serial_putchar>:
{
    a270:	b500      	push	{lr}
    a272:	b083      	sub	sp, #12
    a274:	4603      	mov	r3, r0
	return usb_serial_write(&c, 1);
    a276:	2101      	movs	r1, #1
    a278:	f10d 0007 	add.w	r0, sp, #7
{
    a27c:	f88d 3007 	strb.w	r3, [sp, #7]
	return usb_serial_write(&c, 1);
    a280:	f7ff ff70 	bl	a164 <usb_serial_write>
}
    a284:	b003      	add	sp, #12
    a286:	f85d fb04 	ldr.w	pc, [sp], #4
    a28a:	bf00      	nop

0000a28c <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    a28c:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    a28e:	4d0e      	ldr	r5, [pc, #56]	; (a2c8 <usb_serial_write_buffer_free+0x3c>)
	tx_noautoflush = 1;
    a290:	4c0e      	ldr	r4, [pc, #56]	; (a2cc <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    a292:	6828      	ldr	r0, [r5, #0]
	tx_noautoflush = 1;
    a294:	2301      	movs	r3, #1
    a296:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    a298:	b128      	cbz	r0, a2a6 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    a29a:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    a29c:	2300      	movs	r3, #0
	len = CDC_TX_SIZE - tx_packet->index;
    a29e:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	tx_noautoflush = 0;
    a2a2:	7023      	strb	r3, [r4, #0]
	return len;
}
    a2a4:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration ||
    a2a6:	4b0a      	ldr	r3, [pc, #40]	; (a2d0 <usb_serial_write_buffer_free+0x44>)
    a2a8:	781b      	ldrb	r3, [r3, #0]
    a2aa:	b913      	cbnz	r3, a2b2 <usb_serial_write_buffer_free+0x26>
			tx_noautoflush = 0;
    a2ac:	2000      	movs	r0, #0
    a2ae:	7020      	strb	r0, [r4, #0]
}
    a2b0:	bd38      	pop	{r3, r4, r5, pc}
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    a2b2:	2004      	movs	r0, #4
    a2b4:	f7ff f9e0 	bl	9678 <usb_tx_packet_count>
		if (!usb_configuration ||
    a2b8:	2807      	cmp	r0, #7
    a2ba:	d8f7      	bhi.n	a2ac <usb_serial_write_buffer_free+0x20>
		  (tx_packet = usb_malloc()) == NULL) {
    a2bc:	f7ff fe9c 	bl	9ff8 <usb_malloc>
    a2c0:	6028      	str	r0, [r5, #0]
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    a2c2:	2800      	cmp	r0, #0
    a2c4:	d1e9      	bne.n	a29a <usb_serial_write_buffer_free+0xe>
    a2c6:	e7f1      	b.n	a2ac <usb_serial_write_buffer_free+0x20>
    a2c8:	1fff7bdc 	.word	0x1fff7bdc
    a2cc:	1fff7bd9 	.word	0x1fff7bd9
    a2d0:	1fff7bc4 	.word	0x1fff7bc4

0000a2d4 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    a2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    a2d6:	4b11      	ldr	r3, [pc, #68]	; (a31c <usb_serial_flush_output+0x48>)
    a2d8:	781b      	ldrb	r3, [r3, #0]
    a2da:	b18b      	cbz	r3, a300 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    a2dc:	4e10      	ldr	r6, [pc, #64]	; (a320 <usb_serial_flush_output+0x4c>)
	tx_noautoflush = 1;
    a2de:	4d11      	ldr	r5, [pc, #68]	; (a324 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    a2e0:	6834      	ldr	r4, [r6, #0]
	tx_noautoflush = 1;
    a2e2:	2701      	movs	r7, #1
    a2e4:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    a2e6:	b164      	cbz	r4, a302 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    a2e8:	4b0f      	ldr	r3, [pc, #60]	; (a328 <usb_serial_flush_output+0x54>)
    a2ea:	2700      	movs	r7, #0
    a2ec:	701f      	strb	r7, [r3, #0]
		tx_packet->len = tx_packet->index;
    a2ee:	8863      	ldrh	r3, [r4, #2]
    a2f0:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    a2f2:	4621      	mov	r1, r4
    a2f4:	2004      	movs	r0, #4
    a2f6:	f7ff fa17 	bl	9728 <usb_tx>
		tx_packet = NULL;
    a2fa:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    a2fc:	2300      	movs	r3, #0
    a2fe:	702b      	strb	r3, [r5, #0]
}
    a300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_packet_t *tx = usb_malloc();
    a302:	f7ff fe79 	bl	9ff8 <usb_malloc>
			usb_cdc_transmit_flush_timer = 0;
    a306:	4b08      	ldr	r3, [pc, #32]	; (a328 <usb_serial_flush_output+0x54>)
		if (tx) {
    a308:	4601      	mov	r1, r0
    a30a:	b120      	cbz	r0, a316 <usb_serial_flush_output+0x42>
			usb_tx(CDC_TX_ENDPOINT, tx);
    a30c:	2004      	movs	r0, #4
			usb_cdc_transmit_flush_timer = 0;
    a30e:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    a310:	f7ff fa0a 	bl	9728 <usb_tx>
    a314:	e7f2      	b.n	a2fc <usb_serial_flush_output+0x28>
			usb_cdc_transmit_flush_timer = 1;
    a316:	701f      	strb	r7, [r3, #0]
    a318:	e7f0      	b.n	a2fc <usb_serial_flush_output+0x28>
    a31a:	bf00      	nop
    a31c:	1fff7bc4 	.word	0x1fff7bc4
    a320:	1fff7bdc 	.word	0x1fff7bdc
    a324:	1fff7bd9 	.word	0x1fff7bd9
    a328:	1fff7bf0 	.word	0x1fff7bf0

0000a32c <usb_serial_flush_callback>:

void usb_serial_flush_callback(void)
{
    a32c:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    a32e:	4b0e      	ldr	r3, [pc, #56]	; (a368 <usb_serial_flush_callback+0x3c>)
    a330:	781b      	ldrb	r3, [r3, #0]
    a332:	b953      	cbnz	r3, a34a <usb_serial_flush_callback+0x1e>
	if (tx_packet) {
    a334:	4c0d      	ldr	r4, [pc, #52]	; (a36c <usb_serial_flush_callback+0x40>)
    a336:	6821      	ldr	r1, [r4, #0]
    a338:	b141      	cbz	r1, a34c <usb_serial_flush_callback+0x20>
    a33a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    a33e:	884b      	ldrh	r3, [r1, #2]
    a340:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    a342:	2004      	movs	r0, #4
    a344:	f7ff f9f0 	bl	9728 <usb_tx>
		tx_packet = NULL;
    a348:	6025      	str	r5, [r4, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    a34a:	bd38      	pop	{r3, r4, r5, pc}
		usb_packet_t *tx = usb_malloc();
    a34c:	f7ff fe54 	bl	9ff8 <usb_malloc>
		if (tx) {
    a350:	4601      	mov	r1, r0
    a352:	b120      	cbz	r0, a35e <usb_serial_flush_callback+0x32>
}
    a354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			usb_tx(CDC_TX_ENDPOINT, tx);
    a358:	2004      	movs	r0, #4
    a35a:	f7ff b9e5 	b.w	9728 <usb_tx>
			usb_cdc_transmit_flush_timer = 1;
    a35e:	4b04      	ldr	r3, [pc, #16]	; (a370 <usb_serial_flush_callback+0x44>)
    a360:	2201      	movs	r2, #1
    a362:	701a      	strb	r2, [r3, #0]
}
    a364:	bd38      	pop	{r3, r4, r5, pc}
    a366:	bf00      	nop
    a368:	1fff7bd9 	.word	0x1fff7bd9
    a36c:	1fff7bdc 	.word	0x1fff7bdc
    a370:	1fff7bf0 	.word	0x1fff7bf0

0000a374 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    a378:	4e32      	ldr	r6, [pc, #200]	; (a444 <yield+0xd0>)
    a37a:	7833      	ldrb	r3, [r6, #0]
    a37c:	b163      	cbz	r3, a398 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    a37e:	4f32      	ldr	r7, [pc, #200]	; (a448 <yield+0xd4>)
    a380:	783a      	ldrb	r2, [r7, #0]
    a382:	b94a      	cbnz	r2, a398 <yield+0x24>
	running = 1;
    a384:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a386:	07d9      	lsls	r1, r3, #31
	running = 1;
    a388:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a38a:	d443      	bmi.n	a414 <yield+0xa0>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    a38c:	079a      	lsls	r2, r3, #30
    a38e:	d426      	bmi.n	a3de <yield+0x6a>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    a390:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a392:	075b      	lsls	r3, r3, #29
	running = 0;
    a394:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a396:	d401      	bmi.n	a39c <yield+0x28>
	
};
    a398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    a39c:	4b2b      	ldr	r3, [pc, #172]	; (a44c <yield+0xd8>)
    a39e:	681a      	ldr	r2, [r3, #0]
    a3a0:	2a00      	cmp	r2, #0
    a3a2:	d0f9      	beq.n	a398 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a3a4:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    a3a8:	2a00      	cmp	r2, #0
    a3aa:	d1f5      	bne.n	a398 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a3ac:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    a3b0:	b672      	cpsid	i
		EventResponder *first = firstYield;
    a3b2:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    a3b4:	2800      	cmp	r0, #0
    a3b6:	d03a      	beq.n	a42e <yield+0xba>
		if (runningFromYield) {
    a3b8:	4c25      	ldr	r4, [pc, #148]	; (a450 <yield+0xdc>)
    a3ba:	7821      	ldrb	r1, [r4, #0]
    a3bc:	2900      	cmp	r1, #0
    a3be:	d136      	bne.n	a42e <yield+0xba>
		firstYield = first->_next;
    a3c0:	6942      	ldr	r2, [r0, #20]
    a3c2:	601a      	str	r2, [r3, #0]
		runningFromYield = true;
    a3c4:	2301      	movs	r3, #1
    a3c6:	7023      	strb	r3, [r4, #0]
		if (firstYield) {
    a3c8:	2a00      	cmp	r2, #0
    a3ca:	d037      	beq.n	a43c <yield+0xc8>
			firstYield->_prev = nullptr;
    a3cc:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    a3ce:	b905      	cbnz	r5, a3d2 <yield+0x5e>
    a3d0:	b662      	cpsie	i
		first->_triggered = false;
    a3d2:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    a3d4:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    a3d6:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    a3d8:	4798      	blx	r3
		runningFromYield = false;
    a3da:	7025      	strb	r5, [r4, #0]
    a3dc:	e7dc      	b.n	a398 <yield+0x24>
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a3de:	f8df 807c 	ldr.w	r8, [pc, #124]	; a45c <yield+0xe8>
    a3e2:	f898 2000 	ldrb.w	r2, [r8]
    a3e6:	2a00      	cmp	r2, #0
    a3e8:	d0d2      	beq.n	a390 <yield+0x1c>
    a3ea:	2500      	movs	r5, #0
    a3ec:	f8df 9070 	ldr.w	r9, [pc, #112]	; a460 <yield+0xec>
    a3f0:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    a3f2:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    a3f6:	6823      	ldr	r3, [r4, #0]
    a3f8:	4620      	mov	r0, r4
    a3fa:	691b      	ldr	r3, [r3, #16]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a3fc:	3501      	adds	r5, #1
		if (available()) (*_serialEvent)();
    a3fe:	4798      	blx	r3
    a400:	b108      	cbz	r0, a406 <yield+0x92>
    a402:	6923      	ldr	r3, [r4, #16]
    a404:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a406:	f898 2000 	ldrb.w	r2, [r8]
    a40a:	b2eb      	uxtb	r3, r5
    a40c:	429a      	cmp	r2, r3
    a40e:	d8f0      	bhi.n	a3f2 <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a410:	7833      	ldrb	r3, [r6, #0]
    a412:	e7bd      	b.n	a390 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    a414:	f7ff fe74 	bl	a100 <usb_serial_available>
		if (Serial.available()) serialEvent();
    a418:	b968      	cbnz	r0, a436 <yield+0xc2>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    a41a:	4b0e      	ldr	r3, [pc, #56]	; (a454 <yield+0xe0>)
    a41c:	781b      	ldrb	r3, [r3, #0]
    a41e:	b90b      	cbnz	r3, a424 <yield+0xb0>
    a420:	7833      	ldrb	r3, [r6, #0]
    a422:	e7b3      	b.n	a38c <yield+0x18>
    a424:	7833      	ldrb	r3, [r6, #0]
    a426:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    a42a:	7033      	strb	r3, [r6, #0]
    a42c:	e7ae      	b.n	a38c <yield+0x18>
		if (doit) __enable_irq();
    a42e:	2d00      	cmp	r5, #0
    a430:	d1b2      	bne.n	a398 <yield+0x24>
    a432:	b662      	cpsie	i
    a434:	e7b0      	b.n	a398 <yield+0x24>
		if (Serial.available()) serialEvent();
    a436:	f000 f879 	bl	a52c <serialEvent()>
    a43a:	e7ee      	b.n	a41a <yield+0xa6>
			lastYield = nullptr;
    a43c:	4b06      	ldr	r3, [pc, #24]	; (a458 <yield+0xe4>)
    a43e:	601a      	str	r2, [r3, #0]
    a440:	e7c5      	b.n	a3ce <yield+0x5a>
    a442:	bf00      	nop
    a444:	1fff0e78 	.word	0x1fff0e78
    a448:	1fff7bf1 	.word	0x1fff7bf1
    a44c:	1fff7acc 	.word	0x1fff7acc
    a450:	1fff7ad8 	.word	0x1fff7ad8
    a454:	00011fe0 	.word	0x00011fe0
    a458:	1fff7adc 	.word	0x1fff7adc
    a45c:	1fff7c0c 	.word	0x1fff7c0c
    a460:	1fff7bf4 	.word	0x1fff7bf4

0000a464 <analog_init>:
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    a464:	4b2a      	ldr	r3, [pc, #168]	; (a510 <analog_init+0xac>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    a466:	4a2b      	ldr	r2, [pc, #172]	; (a514 <analog_init+0xb0>)
	VREF_TRM = 0x60;
    a468:	2060      	movs	r0, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    a46a:	21e1      	movs	r1, #225	; 0xe1
	VREF_TRM = 0x60;
    a46c:	7018      	strb	r0, [r3, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    a46e:	7059      	strb	r1, [r3, #1]
	if (analog_config_bits == 8) {
    a470:	7813      	ldrb	r3, [r2, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a472:	4829      	ldr	r0, [pc, #164]	; (a518 <analog_init+0xb4>)
	if (analog_config_bits == 8) {
    a474:	2b08      	cmp	r3, #8
    a476:	d034      	beq.n	a4e2 <analog_init+0x7e>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    a478:	2b0a      	cmp	r3, #10
    a47a:	d020      	beq.n	a4be <analog_init+0x5a>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    a47c:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    a47e:	4b27      	ldr	r3, [pc, #156]	; (a51c <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    a480:	bf0c      	ite	eq
    a482:	2135      	moveq	r1, #53	; 0x35
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    a484:	215d      	movne	r1, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    a486:	2212      	movs	r2, #18
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    a488:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    a48a:	60c2      	str	r2, [r0, #12]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    a48c:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    a48e:	60da      	str	r2, [r3, #12]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    a490:	4b23      	ldr	r3, [pc, #140]	; (a520 <analog_init+0xbc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a492:	4921      	ldr	r1, [pc, #132]	; (a518 <analog_init+0xb4>)
	if (analog_reference_internal) {
    a494:	781b      	ldrb	r3, [r3, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a496:	4a21      	ldr	r2, [pc, #132]	; (a51c <analog_init+0xb8>)
	if (analog_reference_internal) {
    a498:	b1cb      	cbz	r3, a4ce <analog_init+0x6a>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a49a:	2301      	movs	r3, #1
    a49c:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    a49e:	6213      	str	r3, [r2, #32]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    a4a0:	4b20      	ldr	r3, [pc, #128]	; (a524 <analog_init+0xc0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    a4a2:	491d      	ldr	r1, [pc, #116]	; (a518 <analog_init+0xb4>)
	num = analog_num_average;
    a4a4:	781b      	ldrb	r3, [r3, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    a4a6:	4a1d      	ldr	r2, [pc, #116]	; (a51c <analog_init+0xb8>)
	if (num <= 1) {
    a4a8:	2b01      	cmp	r3, #1
    a4aa:	d913      	bls.n	a4d4 <analog_init+0x70>
		#endif
	} else if (num <= 4) {
    a4ac:	2b04      	cmp	r3, #4
    a4ae:	d81b      	bhi.n	a4e8 <analog_init+0x84>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    a4b0:	2384      	movs	r3, #132	; 0x84
    a4b2:	624b      	str	r3, [r1, #36]	; 0x24
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    a4b4:	6253      	str	r3, [r2, #36]	; 0x24
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#endif
	}
	calibrating = 1;
    a4b6:	4b1c      	ldr	r3, [pc, #112]	; (a528 <analog_init+0xc4>)
    a4b8:	2201      	movs	r2, #1
    a4ba:	701a      	strb	r2, [r3, #0]
}
    a4bc:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a4be:	4b17      	ldr	r3, [pc, #92]	; (a51c <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a4c0:	2139      	movs	r1, #57	; 0x39
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a4c2:	2213      	movs	r2, #19
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a4c4:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a4c6:	60c2      	str	r2, [r0, #12]
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    a4c8:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    a4ca:	60da      	str	r2, [r3, #12]
    a4cc:	e7e0      	b.n	a490 <analog_init+0x2c>
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    a4ce:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    a4d0:	6213      	str	r3, [r2, #32]
    a4d2:	e7e5      	b.n	a4a0 <analog_init+0x3c>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    a4d4:	2380      	movs	r3, #128	; 0x80
    a4d6:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    a4d8:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    a4da:	4b13      	ldr	r3, [pc, #76]	; (a528 <analog_init+0xc4>)
    a4dc:	2201      	movs	r2, #1
    a4de:	701a      	strb	r2, [r3, #0]
}
    a4e0:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a4e2:	4b0e      	ldr	r3, [pc, #56]	; (a51c <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    a4e4:	2121      	movs	r1, #33	; 0x21
    a4e6:	e7ec      	b.n	a4c2 <analog_init+0x5e>
	} else if (num <= 8) {
    a4e8:	2b08      	cmp	r3, #8
    a4ea:	d806      	bhi.n	a4fa <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    a4ec:	2385      	movs	r3, #133	; 0x85
    a4ee:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    a4f0:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    a4f2:	4b0d      	ldr	r3, [pc, #52]	; (a528 <analog_init+0xc4>)
    a4f4:	2201      	movs	r2, #1
    a4f6:	701a      	strb	r2, [r3, #0]
}
    a4f8:	4770      	bx	lr
	} else if (num <= 16) {
    a4fa:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    a4fc:	bf94      	ite	ls
    a4fe:	2386      	movls	r3, #134	; 0x86
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    a500:	2387      	movhi	r3, #135	; 0x87
    a502:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    a504:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    a506:	4b08      	ldr	r3, [pc, #32]	; (a528 <analog_init+0xc4>)
    a508:	2201      	movs	r2, #1
    a50a:	701a      	strb	r2, [r3, #0]
}
    a50c:	4770      	bx	lr
    a50e:	bf00      	nop
    a510:	40074000 	.word	0x40074000
    a514:	1fff0e79 	.word	0x1fff0e79
    a518:	4003b000 	.word	0x4003b000
    a51c:	400bb000 	.word	0x400bb000
    a520:	1fff7c0d 	.word	0x1fff7c0d
    a524:	1fff0e7a 	.word	0x1fff0e7a
    a528:	1fff7c0e 	.word	0x1fff7c0e

0000a52c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    a52c:	4770      	bx	lr
    a52e:	bf00      	nop

0000a530 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    a530:	b510      	push	{r4, lr}
    a532:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    a534:	b672      	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
    a536:	f7fe fe09 	bl	914c <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a53a:	4a17      	ldr	r2, [pc, #92]	; (a598 <usb_init_serialnumber+0x68>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
    a53c:	4917      	ldr	r1, [pc, #92]	; (a59c <usb_init_serialnumber+0x6c>)
    a53e:	6051      	str	r1, [r2, #4]
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a540:	2070      	movs	r0, #112	; 0x70
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    a542:	2380      	movs	r3, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    a544:	7010      	strb	r0, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    a546:	7013      	strb	r3, [r2, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    a548:	7813      	ldrb	r3, [r2, #0]
    a54a:	061b      	lsls	r3, r3, #24
    a54c:	d5fc      	bpl.n	a548 <usb_init_serialnumber+0x18>
	num = *(uint32_t *)&FTFL_FCCOBB;
    a54e:	68d4      	ldr	r4, [r2, #12]
	kinetis_hsrun_enable();
    a550:	f7fe fe12 	bl	9178 <kinetis_hsrun_enable>
#endif
	__enable_irq();
    a554:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a556:	4b12      	ldr	r3, [pc, #72]	; (a5a0 <usb_init_serialnumber+0x70>)
    a558:	429c      	cmp	r4, r3
    a55a:	bf3c      	itt	cc
    a55c:	eb04 0484 	addcc.w	r4, r4, r4, lsl #2
    a560:	0064      	lslcc	r4, r4, #1
	ultoa(num, buf, 10);
    a562:	4620      	mov	r0, r4
    a564:	4c0f      	ldr	r4, [pc, #60]	; (a5a4 <usb_init_serialnumber+0x74>)
    a566:	a901      	add	r1, sp, #4
    a568:	220a      	movs	r2, #10
    a56a:	f7fe fe1d 	bl	91a8 <ultoa>
	for (i=0; i<10; i++) {
    a56e:	a901      	add	r1, sp, #4
    a570:	4620      	mov	r0, r4
    a572:	2300      	movs	r3, #0
		char c = buf[i];
    a574:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    a578:	3301      	adds	r3, #1
		if (!c) break;
    a57a:	b13a      	cbz	r2, a58c <usb_init_serialnumber+0x5c>
	for (i=0; i<10; i++) {
    a57c:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    a57e:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    a582:	d1f7      	bne.n	a574 <usb_init_serialnumber+0x44>
    a584:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a586:	7023      	strb	r3, [r4, #0]
}
    a588:	b004      	add	sp, #16
    a58a:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a58c:	005b      	lsls	r3, r3, #1
    a58e:	b2db      	uxtb	r3, r3
    a590:	7023      	strb	r3, [r4, #0]
}
    a592:	b004      	add	sp, #16
    a594:	bd10      	pop	{r4, pc}
    a596:	bf00      	nop
    a598:	40020000 	.word	0x40020000
    a59c:	41070000 	.word	0x41070000
    a5a0:	00989680 	.word	0x00989680
    a5a4:	1fff0f08 	.word	0x1fff0f08

0000a5a8 <__aeabi_atexit>:
    a5a8:	4603      	mov	r3, r0
    a5aa:	4608      	mov	r0, r1
    a5ac:	4619      	mov	r1, r3
    a5ae:	f001 b931 	b.w	b814 <__cxa_atexit>
    a5b2:	bf00      	nop

0000a5b4 <__aeabi_drsub>:
    a5b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    a5b8:	e002      	b.n	a5c0 <__adddf3>
    a5ba:	bf00      	nop

0000a5bc <__aeabi_dsub>:
    a5bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000a5c0 <__adddf3>:
    a5c0:	b530      	push	{r4, r5, lr}
    a5c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    a5c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    a5ca:	ea94 0f05 	teq	r4, r5
    a5ce:	bf08      	it	eq
    a5d0:	ea90 0f02 	teqeq	r0, r2
    a5d4:	bf1f      	itttt	ne
    a5d6:	ea54 0c00 	orrsne.w	ip, r4, r0
    a5da:	ea55 0c02 	orrsne.w	ip, r5, r2
    a5de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    a5e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    a5e6:	f000 80e2 	beq.w	a7ae <__adddf3+0x1ee>
    a5ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
    a5ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    a5f2:	bfb8      	it	lt
    a5f4:	426d      	neglt	r5, r5
    a5f6:	dd0c      	ble.n	a612 <__adddf3+0x52>
    a5f8:	442c      	add	r4, r5
    a5fa:	ea80 0202 	eor.w	r2, r0, r2
    a5fe:	ea81 0303 	eor.w	r3, r1, r3
    a602:	ea82 0000 	eor.w	r0, r2, r0
    a606:	ea83 0101 	eor.w	r1, r3, r1
    a60a:	ea80 0202 	eor.w	r2, r0, r2
    a60e:	ea81 0303 	eor.w	r3, r1, r3
    a612:	2d36      	cmp	r5, #54	; 0x36
    a614:	bf88      	it	hi
    a616:	bd30      	pophi	{r4, r5, pc}
    a618:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    a61c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    a620:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    a624:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    a628:	d002      	beq.n	a630 <__adddf3+0x70>
    a62a:	4240      	negs	r0, r0
    a62c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    a630:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    a634:	ea4f 3303 	mov.w	r3, r3, lsl #12
    a638:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    a63c:	d002      	beq.n	a644 <__adddf3+0x84>
    a63e:	4252      	negs	r2, r2
    a640:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    a644:	ea94 0f05 	teq	r4, r5
    a648:	f000 80a7 	beq.w	a79a <__adddf3+0x1da>
    a64c:	f1a4 0401 	sub.w	r4, r4, #1
    a650:	f1d5 0e20 	rsbs	lr, r5, #32
    a654:	db0d      	blt.n	a672 <__adddf3+0xb2>
    a656:	fa02 fc0e 	lsl.w	ip, r2, lr
    a65a:	fa22 f205 	lsr.w	r2, r2, r5
    a65e:	1880      	adds	r0, r0, r2
    a660:	f141 0100 	adc.w	r1, r1, #0
    a664:	fa03 f20e 	lsl.w	r2, r3, lr
    a668:	1880      	adds	r0, r0, r2
    a66a:	fa43 f305 	asr.w	r3, r3, r5
    a66e:	4159      	adcs	r1, r3
    a670:	e00e      	b.n	a690 <__adddf3+0xd0>
    a672:	f1a5 0520 	sub.w	r5, r5, #32
    a676:	f10e 0e20 	add.w	lr, lr, #32
    a67a:	2a01      	cmp	r2, #1
    a67c:	fa03 fc0e 	lsl.w	ip, r3, lr
    a680:	bf28      	it	cs
    a682:	f04c 0c02 	orrcs.w	ip, ip, #2
    a686:	fa43 f305 	asr.w	r3, r3, r5
    a68a:	18c0      	adds	r0, r0, r3
    a68c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    a690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    a694:	d507      	bpl.n	a6a6 <__adddf3+0xe6>
    a696:	f04f 0e00 	mov.w	lr, #0
    a69a:	f1dc 0c00 	rsbs	ip, ip, #0
    a69e:	eb7e 0000 	sbcs.w	r0, lr, r0
    a6a2:	eb6e 0101 	sbc.w	r1, lr, r1
    a6a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    a6aa:	d31b      	bcc.n	a6e4 <__adddf3+0x124>
    a6ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    a6b0:	d30c      	bcc.n	a6cc <__adddf3+0x10c>
    a6b2:	0849      	lsrs	r1, r1, #1
    a6b4:	ea5f 0030 	movs.w	r0, r0, rrx
    a6b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
    a6bc:	f104 0401 	add.w	r4, r4, #1
    a6c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    a6c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    a6c8:	f080 809a 	bcs.w	a800 <__adddf3+0x240>
    a6cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    a6d0:	bf08      	it	eq
    a6d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    a6d6:	f150 0000 	adcs.w	r0, r0, #0
    a6da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    a6de:	ea41 0105 	orr.w	r1, r1, r5
    a6e2:	bd30      	pop	{r4, r5, pc}
    a6e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    a6e8:	4140      	adcs	r0, r0
    a6ea:	eb41 0101 	adc.w	r1, r1, r1
    a6ee:	3c01      	subs	r4, #1
    a6f0:	bf28      	it	cs
    a6f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    a6f6:	d2e9      	bcs.n	a6cc <__adddf3+0x10c>
    a6f8:	f091 0f00 	teq	r1, #0
    a6fc:	bf04      	itt	eq
    a6fe:	4601      	moveq	r1, r0
    a700:	2000      	moveq	r0, #0
    a702:	fab1 f381 	clz	r3, r1
    a706:	bf08      	it	eq
    a708:	3320      	addeq	r3, #32
    a70a:	f1a3 030b 	sub.w	r3, r3, #11
    a70e:	f1b3 0220 	subs.w	r2, r3, #32
    a712:	da0c      	bge.n	a72e <__adddf3+0x16e>
    a714:	320c      	adds	r2, #12
    a716:	dd08      	ble.n	a72a <__adddf3+0x16a>
    a718:	f102 0c14 	add.w	ip, r2, #20
    a71c:	f1c2 020c 	rsb	r2, r2, #12
    a720:	fa01 f00c 	lsl.w	r0, r1, ip
    a724:	fa21 f102 	lsr.w	r1, r1, r2
    a728:	e00c      	b.n	a744 <__adddf3+0x184>
    a72a:	f102 0214 	add.w	r2, r2, #20
    a72e:	bfd8      	it	le
    a730:	f1c2 0c20 	rsble	ip, r2, #32
    a734:	fa01 f102 	lsl.w	r1, r1, r2
    a738:	fa20 fc0c 	lsr.w	ip, r0, ip
    a73c:	bfdc      	itt	le
    a73e:	ea41 010c 	orrle.w	r1, r1, ip
    a742:	4090      	lslle	r0, r2
    a744:	1ae4      	subs	r4, r4, r3
    a746:	bfa2      	ittt	ge
    a748:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    a74c:	4329      	orrge	r1, r5
    a74e:	bd30      	popge	{r4, r5, pc}
    a750:	ea6f 0404 	mvn.w	r4, r4
    a754:	3c1f      	subs	r4, #31
    a756:	da1c      	bge.n	a792 <__adddf3+0x1d2>
    a758:	340c      	adds	r4, #12
    a75a:	dc0e      	bgt.n	a77a <__adddf3+0x1ba>
    a75c:	f104 0414 	add.w	r4, r4, #20
    a760:	f1c4 0220 	rsb	r2, r4, #32
    a764:	fa20 f004 	lsr.w	r0, r0, r4
    a768:	fa01 f302 	lsl.w	r3, r1, r2
    a76c:	ea40 0003 	orr.w	r0, r0, r3
    a770:	fa21 f304 	lsr.w	r3, r1, r4
    a774:	ea45 0103 	orr.w	r1, r5, r3
    a778:	bd30      	pop	{r4, r5, pc}
    a77a:	f1c4 040c 	rsb	r4, r4, #12
    a77e:	f1c4 0220 	rsb	r2, r4, #32
    a782:	fa20 f002 	lsr.w	r0, r0, r2
    a786:	fa01 f304 	lsl.w	r3, r1, r4
    a78a:	ea40 0003 	orr.w	r0, r0, r3
    a78e:	4629      	mov	r1, r5
    a790:	bd30      	pop	{r4, r5, pc}
    a792:	fa21 f004 	lsr.w	r0, r1, r4
    a796:	4629      	mov	r1, r5
    a798:	bd30      	pop	{r4, r5, pc}
    a79a:	f094 0f00 	teq	r4, #0
    a79e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    a7a2:	bf06      	itte	eq
    a7a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    a7a8:	3401      	addeq	r4, #1
    a7aa:	3d01      	subne	r5, #1
    a7ac:	e74e      	b.n	a64c <__adddf3+0x8c>
    a7ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    a7b2:	bf18      	it	ne
    a7b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    a7b8:	d029      	beq.n	a80e <__adddf3+0x24e>
    a7ba:	ea94 0f05 	teq	r4, r5
    a7be:	bf08      	it	eq
    a7c0:	ea90 0f02 	teqeq	r0, r2
    a7c4:	d005      	beq.n	a7d2 <__adddf3+0x212>
    a7c6:	ea54 0c00 	orrs.w	ip, r4, r0
    a7ca:	bf04      	itt	eq
    a7cc:	4619      	moveq	r1, r3
    a7ce:	4610      	moveq	r0, r2
    a7d0:	bd30      	pop	{r4, r5, pc}
    a7d2:	ea91 0f03 	teq	r1, r3
    a7d6:	bf1e      	ittt	ne
    a7d8:	2100      	movne	r1, #0
    a7da:	2000      	movne	r0, #0
    a7dc:	bd30      	popne	{r4, r5, pc}
    a7de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    a7e2:	d105      	bne.n	a7f0 <__adddf3+0x230>
    a7e4:	0040      	lsls	r0, r0, #1
    a7e6:	4149      	adcs	r1, r1
    a7e8:	bf28      	it	cs
    a7ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    a7ee:	bd30      	pop	{r4, r5, pc}
    a7f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    a7f4:	bf3c      	itt	cc
    a7f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    a7fa:	bd30      	popcc	{r4, r5, pc}
    a7fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    a800:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    a804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    a808:	f04f 0000 	mov.w	r0, #0
    a80c:	bd30      	pop	{r4, r5, pc}
    a80e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    a812:	bf1a      	itte	ne
    a814:	4619      	movne	r1, r3
    a816:	4610      	movne	r0, r2
    a818:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    a81c:	bf1c      	itt	ne
    a81e:	460b      	movne	r3, r1
    a820:	4602      	movne	r2, r0
    a822:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    a826:	bf06      	itte	eq
    a828:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    a82c:	ea91 0f03 	teqeq	r1, r3
    a830:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    a834:	bd30      	pop	{r4, r5, pc}
    a836:	bf00      	nop

0000a838 <__aeabi_ui2d>:
    a838:	f090 0f00 	teq	r0, #0
    a83c:	bf04      	itt	eq
    a83e:	2100      	moveq	r1, #0
    a840:	4770      	bxeq	lr
    a842:	b530      	push	{r4, r5, lr}
    a844:	f44f 6480 	mov.w	r4, #1024	; 0x400
    a848:	f104 0432 	add.w	r4, r4, #50	; 0x32
    a84c:	f04f 0500 	mov.w	r5, #0
    a850:	f04f 0100 	mov.w	r1, #0
    a854:	e750      	b.n	a6f8 <__adddf3+0x138>
    a856:	bf00      	nop

0000a858 <__aeabi_i2d>:
    a858:	f090 0f00 	teq	r0, #0
    a85c:	bf04      	itt	eq
    a85e:	2100      	moveq	r1, #0
    a860:	4770      	bxeq	lr
    a862:	b530      	push	{r4, r5, lr}
    a864:	f44f 6480 	mov.w	r4, #1024	; 0x400
    a868:	f104 0432 	add.w	r4, r4, #50	; 0x32
    a86c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    a870:	bf48      	it	mi
    a872:	4240      	negmi	r0, r0
    a874:	f04f 0100 	mov.w	r1, #0
    a878:	e73e      	b.n	a6f8 <__adddf3+0x138>
    a87a:	bf00      	nop

0000a87c <__aeabi_f2d>:
    a87c:	0042      	lsls	r2, r0, #1
    a87e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    a882:	ea4f 0131 	mov.w	r1, r1, rrx
    a886:	ea4f 7002 	mov.w	r0, r2, lsl #28
    a88a:	bf1f      	itttt	ne
    a88c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    a890:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    a894:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    a898:	4770      	bxne	lr
    a89a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    a89e:	bf08      	it	eq
    a8a0:	4770      	bxeq	lr
    a8a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    a8a6:	bf04      	itt	eq
    a8a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    a8ac:	4770      	bxeq	lr
    a8ae:	b530      	push	{r4, r5, lr}
    a8b0:	f44f 7460 	mov.w	r4, #896	; 0x380
    a8b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    a8b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    a8bc:	e71c      	b.n	a6f8 <__adddf3+0x138>
    a8be:	bf00      	nop

0000a8c0 <__aeabi_ul2d>:
    a8c0:	ea50 0201 	orrs.w	r2, r0, r1
    a8c4:	bf08      	it	eq
    a8c6:	4770      	bxeq	lr
    a8c8:	b530      	push	{r4, r5, lr}
    a8ca:	f04f 0500 	mov.w	r5, #0
    a8ce:	e00a      	b.n	a8e6 <__aeabi_l2d+0x16>

0000a8d0 <__aeabi_l2d>:
    a8d0:	ea50 0201 	orrs.w	r2, r0, r1
    a8d4:	bf08      	it	eq
    a8d6:	4770      	bxeq	lr
    a8d8:	b530      	push	{r4, r5, lr}
    a8da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    a8de:	d502      	bpl.n	a8e6 <__aeabi_l2d+0x16>
    a8e0:	4240      	negs	r0, r0
    a8e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    a8e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
    a8ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
    a8ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    a8f2:	f43f aed8 	beq.w	a6a6 <__adddf3+0xe6>
    a8f6:	f04f 0203 	mov.w	r2, #3
    a8fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    a8fe:	bf18      	it	ne
    a900:	3203      	addne	r2, #3
    a902:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    a906:	bf18      	it	ne
    a908:	3203      	addne	r2, #3
    a90a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    a90e:	f1c2 0320 	rsb	r3, r2, #32
    a912:	fa00 fc03 	lsl.w	ip, r0, r3
    a916:	fa20 f002 	lsr.w	r0, r0, r2
    a91a:	fa01 fe03 	lsl.w	lr, r1, r3
    a91e:	ea40 000e 	orr.w	r0, r0, lr
    a922:	fa21 f102 	lsr.w	r1, r1, r2
    a926:	4414      	add	r4, r2
    a928:	e6bd      	b.n	a6a6 <__adddf3+0xe6>
    a92a:	bf00      	nop

0000a92c <__aeabi_dmul>:
    a92c:	b570      	push	{r4, r5, r6, lr}
    a92e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    a932:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    a936:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    a93a:	bf1d      	ittte	ne
    a93c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    a940:	ea94 0f0c 	teqne	r4, ip
    a944:	ea95 0f0c 	teqne	r5, ip
    a948:	f000 f8de 	bleq	ab08 <__aeabi_dmul+0x1dc>
    a94c:	442c      	add	r4, r5
    a94e:	ea81 0603 	eor.w	r6, r1, r3
    a952:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    a956:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    a95a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    a95e:	bf18      	it	ne
    a960:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    a964:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    a968:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    a96c:	d038      	beq.n	a9e0 <__aeabi_dmul+0xb4>
    a96e:	fba0 ce02 	umull	ip, lr, r0, r2
    a972:	f04f 0500 	mov.w	r5, #0
    a976:	fbe1 e502 	umlal	lr, r5, r1, r2
    a97a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    a97e:	fbe0 e503 	umlal	lr, r5, r0, r3
    a982:	f04f 0600 	mov.w	r6, #0
    a986:	fbe1 5603 	umlal	r5, r6, r1, r3
    a98a:	f09c 0f00 	teq	ip, #0
    a98e:	bf18      	it	ne
    a990:	f04e 0e01 	orrne.w	lr, lr, #1
    a994:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    a998:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    a99c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    a9a0:	d204      	bcs.n	a9ac <__aeabi_dmul+0x80>
    a9a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    a9a6:	416d      	adcs	r5, r5
    a9a8:	eb46 0606 	adc.w	r6, r6, r6
    a9ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    a9b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    a9b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    a9b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    a9bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    a9c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    a9c4:	bf88      	it	hi
    a9c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    a9ca:	d81e      	bhi.n	aa0a <__aeabi_dmul+0xde>
    a9cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    a9d0:	bf08      	it	eq
    a9d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    a9d6:	f150 0000 	adcs.w	r0, r0, #0
    a9da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    a9de:	bd70      	pop	{r4, r5, r6, pc}
    a9e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    a9e4:	ea46 0101 	orr.w	r1, r6, r1
    a9e8:	ea40 0002 	orr.w	r0, r0, r2
    a9ec:	ea81 0103 	eor.w	r1, r1, r3
    a9f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    a9f4:	bfc2      	ittt	gt
    a9f6:	ebd4 050c 	rsbsgt	r5, r4, ip
    a9fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    a9fe:	bd70      	popgt	{r4, r5, r6, pc}
    aa00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    aa04:	f04f 0e00 	mov.w	lr, #0
    aa08:	3c01      	subs	r4, #1
    aa0a:	f300 80ab 	bgt.w	ab64 <__aeabi_dmul+0x238>
    aa0e:	f114 0f36 	cmn.w	r4, #54	; 0x36
    aa12:	bfde      	ittt	le
    aa14:	2000      	movle	r0, #0
    aa16:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    aa1a:	bd70      	pople	{r4, r5, r6, pc}
    aa1c:	f1c4 0400 	rsb	r4, r4, #0
    aa20:	3c20      	subs	r4, #32
    aa22:	da35      	bge.n	aa90 <__aeabi_dmul+0x164>
    aa24:	340c      	adds	r4, #12
    aa26:	dc1b      	bgt.n	aa60 <__aeabi_dmul+0x134>
    aa28:	f104 0414 	add.w	r4, r4, #20
    aa2c:	f1c4 0520 	rsb	r5, r4, #32
    aa30:	fa00 f305 	lsl.w	r3, r0, r5
    aa34:	fa20 f004 	lsr.w	r0, r0, r4
    aa38:	fa01 f205 	lsl.w	r2, r1, r5
    aa3c:	ea40 0002 	orr.w	r0, r0, r2
    aa40:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    aa44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    aa48:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    aa4c:	fa21 f604 	lsr.w	r6, r1, r4
    aa50:	eb42 0106 	adc.w	r1, r2, r6
    aa54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    aa58:	bf08      	it	eq
    aa5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    aa5e:	bd70      	pop	{r4, r5, r6, pc}
    aa60:	f1c4 040c 	rsb	r4, r4, #12
    aa64:	f1c4 0520 	rsb	r5, r4, #32
    aa68:	fa00 f304 	lsl.w	r3, r0, r4
    aa6c:	fa20 f005 	lsr.w	r0, r0, r5
    aa70:	fa01 f204 	lsl.w	r2, r1, r4
    aa74:	ea40 0002 	orr.w	r0, r0, r2
    aa78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    aa7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    aa80:	f141 0100 	adc.w	r1, r1, #0
    aa84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    aa88:	bf08      	it	eq
    aa8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    aa8e:	bd70      	pop	{r4, r5, r6, pc}
    aa90:	f1c4 0520 	rsb	r5, r4, #32
    aa94:	fa00 f205 	lsl.w	r2, r0, r5
    aa98:	ea4e 0e02 	orr.w	lr, lr, r2
    aa9c:	fa20 f304 	lsr.w	r3, r0, r4
    aaa0:	fa01 f205 	lsl.w	r2, r1, r5
    aaa4:	ea43 0302 	orr.w	r3, r3, r2
    aaa8:	fa21 f004 	lsr.w	r0, r1, r4
    aaac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    aab0:	fa21 f204 	lsr.w	r2, r1, r4
    aab4:	ea20 0002 	bic.w	r0, r0, r2
    aab8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    aabc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    aac0:	bf08      	it	eq
    aac2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    aac6:	bd70      	pop	{r4, r5, r6, pc}
    aac8:	f094 0f00 	teq	r4, #0
    aacc:	d10f      	bne.n	aaee <__aeabi_dmul+0x1c2>
    aace:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    aad2:	0040      	lsls	r0, r0, #1
    aad4:	eb41 0101 	adc.w	r1, r1, r1
    aad8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    aadc:	bf08      	it	eq
    aade:	3c01      	subeq	r4, #1
    aae0:	d0f7      	beq.n	aad2 <__aeabi_dmul+0x1a6>
    aae2:	ea41 0106 	orr.w	r1, r1, r6
    aae6:	f095 0f00 	teq	r5, #0
    aaea:	bf18      	it	ne
    aaec:	4770      	bxne	lr
    aaee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    aaf2:	0052      	lsls	r2, r2, #1
    aaf4:	eb43 0303 	adc.w	r3, r3, r3
    aaf8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    aafc:	bf08      	it	eq
    aafe:	3d01      	subeq	r5, #1
    ab00:	d0f7      	beq.n	aaf2 <__aeabi_dmul+0x1c6>
    ab02:	ea43 0306 	orr.w	r3, r3, r6
    ab06:	4770      	bx	lr
    ab08:	ea94 0f0c 	teq	r4, ip
    ab0c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    ab10:	bf18      	it	ne
    ab12:	ea95 0f0c 	teqne	r5, ip
    ab16:	d00c      	beq.n	ab32 <__aeabi_dmul+0x206>
    ab18:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ab1c:	bf18      	it	ne
    ab1e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ab22:	d1d1      	bne.n	aac8 <__aeabi_dmul+0x19c>
    ab24:	ea81 0103 	eor.w	r1, r1, r3
    ab28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ab2c:	f04f 0000 	mov.w	r0, #0
    ab30:	bd70      	pop	{r4, r5, r6, pc}
    ab32:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ab36:	bf06      	itte	eq
    ab38:	4610      	moveq	r0, r2
    ab3a:	4619      	moveq	r1, r3
    ab3c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ab40:	d019      	beq.n	ab76 <__aeabi_dmul+0x24a>
    ab42:	ea94 0f0c 	teq	r4, ip
    ab46:	d102      	bne.n	ab4e <__aeabi_dmul+0x222>
    ab48:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    ab4c:	d113      	bne.n	ab76 <__aeabi_dmul+0x24a>
    ab4e:	ea95 0f0c 	teq	r5, ip
    ab52:	d105      	bne.n	ab60 <__aeabi_dmul+0x234>
    ab54:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    ab58:	bf1c      	itt	ne
    ab5a:	4610      	movne	r0, r2
    ab5c:	4619      	movne	r1, r3
    ab5e:	d10a      	bne.n	ab76 <__aeabi_dmul+0x24a>
    ab60:	ea81 0103 	eor.w	r1, r1, r3
    ab64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ab68:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    ab6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    ab70:	f04f 0000 	mov.w	r0, #0
    ab74:	bd70      	pop	{r4, r5, r6, pc}
    ab76:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    ab7a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    ab7e:	bd70      	pop	{r4, r5, r6, pc}

0000ab80 <__aeabi_ddiv>:
    ab80:	b570      	push	{r4, r5, r6, lr}
    ab82:	f04f 0cff 	mov.w	ip, #255	; 0xff
    ab86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    ab8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    ab8e:	bf1d      	ittte	ne
    ab90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    ab94:	ea94 0f0c 	teqne	r4, ip
    ab98:	ea95 0f0c 	teqne	r5, ip
    ab9c:	f000 f8a7 	bleq	acee <__aeabi_ddiv+0x16e>
    aba0:	eba4 0405 	sub.w	r4, r4, r5
    aba4:	ea81 0e03 	eor.w	lr, r1, r3
    aba8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    abac:	ea4f 3101 	mov.w	r1, r1, lsl #12
    abb0:	f000 8088 	beq.w	acc4 <__aeabi_ddiv+0x144>
    abb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    abb8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    abbc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    abc0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    abc4:	ea4f 2202 	mov.w	r2, r2, lsl #8
    abc8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    abcc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    abd0:	ea4f 2600 	mov.w	r6, r0, lsl #8
    abd4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    abd8:	429d      	cmp	r5, r3
    abda:	bf08      	it	eq
    abdc:	4296      	cmpeq	r6, r2
    abde:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    abe2:	f504 7440 	add.w	r4, r4, #768	; 0x300
    abe6:	d202      	bcs.n	abee <__aeabi_ddiv+0x6e>
    abe8:	085b      	lsrs	r3, r3, #1
    abea:	ea4f 0232 	mov.w	r2, r2, rrx
    abee:	1ab6      	subs	r6, r6, r2
    abf0:	eb65 0503 	sbc.w	r5, r5, r3
    abf4:	085b      	lsrs	r3, r3, #1
    abf6:	ea4f 0232 	mov.w	r2, r2, rrx
    abfa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    abfe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    ac02:	ebb6 0e02 	subs.w	lr, r6, r2
    ac06:	eb75 0e03 	sbcs.w	lr, r5, r3
    ac0a:	bf22      	ittt	cs
    ac0c:	1ab6      	subcs	r6, r6, r2
    ac0e:	4675      	movcs	r5, lr
    ac10:	ea40 000c 	orrcs.w	r0, r0, ip
    ac14:	085b      	lsrs	r3, r3, #1
    ac16:	ea4f 0232 	mov.w	r2, r2, rrx
    ac1a:	ebb6 0e02 	subs.w	lr, r6, r2
    ac1e:	eb75 0e03 	sbcs.w	lr, r5, r3
    ac22:	bf22      	ittt	cs
    ac24:	1ab6      	subcs	r6, r6, r2
    ac26:	4675      	movcs	r5, lr
    ac28:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    ac2c:	085b      	lsrs	r3, r3, #1
    ac2e:	ea4f 0232 	mov.w	r2, r2, rrx
    ac32:	ebb6 0e02 	subs.w	lr, r6, r2
    ac36:	eb75 0e03 	sbcs.w	lr, r5, r3
    ac3a:	bf22      	ittt	cs
    ac3c:	1ab6      	subcs	r6, r6, r2
    ac3e:	4675      	movcs	r5, lr
    ac40:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    ac44:	085b      	lsrs	r3, r3, #1
    ac46:	ea4f 0232 	mov.w	r2, r2, rrx
    ac4a:	ebb6 0e02 	subs.w	lr, r6, r2
    ac4e:	eb75 0e03 	sbcs.w	lr, r5, r3
    ac52:	bf22      	ittt	cs
    ac54:	1ab6      	subcs	r6, r6, r2
    ac56:	4675      	movcs	r5, lr
    ac58:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    ac5c:	ea55 0e06 	orrs.w	lr, r5, r6
    ac60:	d018      	beq.n	ac94 <__aeabi_ddiv+0x114>
    ac62:	ea4f 1505 	mov.w	r5, r5, lsl #4
    ac66:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    ac6a:	ea4f 1606 	mov.w	r6, r6, lsl #4
    ac6e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    ac72:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    ac76:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    ac7a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    ac7e:	d1c0      	bne.n	ac02 <__aeabi_ddiv+0x82>
    ac80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ac84:	d10b      	bne.n	ac9e <__aeabi_ddiv+0x11e>
    ac86:	ea41 0100 	orr.w	r1, r1, r0
    ac8a:	f04f 0000 	mov.w	r0, #0
    ac8e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    ac92:	e7b6      	b.n	ac02 <__aeabi_ddiv+0x82>
    ac94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    ac98:	bf04      	itt	eq
    ac9a:	4301      	orreq	r1, r0
    ac9c:	2000      	moveq	r0, #0
    ac9e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    aca2:	bf88      	it	hi
    aca4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    aca8:	f63f aeaf 	bhi.w	aa0a <__aeabi_dmul+0xde>
    acac:	ebb5 0c03 	subs.w	ip, r5, r3
    acb0:	bf04      	itt	eq
    acb2:	ebb6 0c02 	subseq.w	ip, r6, r2
    acb6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    acba:	f150 0000 	adcs.w	r0, r0, #0
    acbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    acc2:	bd70      	pop	{r4, r5, r6, pc}
    acc4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    acc8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    accc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    acd0:	bfc2      	ittt	gt
    acd2:	ebd4 050c 	rsbsgt	r5, r4, ip
    acd6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    acda:	bd70      	popgt	{r4, r5, r6, pc}
    acdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ace0:	f04f 0e00 	mov.w	lr, #0
    ace4:	3c01      	subs	r4, #1
    ace6:	e690      	b.n	aa0a <__aeabi_dmul+0xde>
    ace8:	ea45 0e06 	orr.w	lr, r5, r6
    acec:	e68d      	b.n	aa0a <__aeabi_dmul+0xde>
    acee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    acf2:	ea94 0f0c 	teq	r4, ip
    acf6:	bf08      	it	eq
    acf8:	ea95 0f0c 	teqeq	r5, ip
    acfc:	f43f af3b 	beq.w	ab76 <__aeabi_dmul+0x24a>
    ad00:	ea94 0f0c 	teq	r4, ip
    ad04:	d10a      	bne.n	ad1c <__aeabi_ddiv+0x19c>
    ad06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    ad0a:	f47f af34 	bne.w	ab76 <__aeabi_dmul+0x24a>
    ad0e:	ea95 0f0c 	teq	r5, ip
    ad12:	f47f af25 	bne.w	ab60 <__aeabi_dmul+0x234>
    ad16:	4610      	mov	r0, r2
    ad18:	4619      	mov	r1, r3
    ad1a:	e72c      	b.n	ab76 <__aeabi_dmul+0x24a>
    ad1c:	ea95 0f0c 	teq	r5, ip
    ad20:	d106      	bne.n	ad30 <__aeabi_ddiv+0x1b0>
    ad22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    ad26:	f43f aefd 	beq.w	ab24 <__aeabi_dmul+0x1f8>
    ad2a:	4610      	mov	r0, r2
    ad2c:	4619      	mov	r1, r3
    ad2e:	e722      	b.n	ab76 <__aeabi_dmul+0x24a>
    ad30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    ad34:	bf18      	it	ne
    ad36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    ad3a:	f47f aec5 	bne.w	aac8 <__aeabi_dmul+0x19c>
    ad3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    ad42:	f47f af0d 	bne.w	ab60 <__aeabi_dmul+0x234>
    ad46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    ad4a:	f47f aeeb 	bne.w	ab24 <__aeabi_dmul+0x1f8>
    ad4e:	e712      	b.n	ab76 <__aeabi_dmul+0x24a>

0000ad50 <__gedf2>:
    ad50:	f04f 3cff 	mov.w	ip, #4294967295
    ad54:	e006      	b.n	ad64 <__cmpdf2+0x4>
    ad56:	bf00      	nop

0000ad58 <__ledf2>:
    ad58:	f04f 0c01 	mov.w	ip, #1
    ad5c:	e002      	b.n	ad64 <__cmpdf2+0x4>
    ad5e:	bf00      	nop

0000ad60 <__cmpdf2>:
    ad60:	f04f 0c01 	mov.w	ip, #1
    ad64:	f84d cd04 	str.w	ip, [sp, #-4]!
    ad68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    ad6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ad70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    ad74:	bf18      	it	ne
    ad76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    ad7a:	d01b      	beq.n	adb4 <__cmpdf2+0x54>
    ad7c:	b001      	add	sp, #4
    ad7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    ad82:	bf0c      	ite	eq
    ad84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    ad88:	ea91 0f03 	teqne	r1, r3
    ad8c:	bf02      	ittt	eq
    ad8e:	ea90 0f02 	teqeq	r0, r2
    ad92:	2000      	moveq	r0, #0
    ad94:	4770      	bxeq	lr
    ad96:	f110 0f00 	cmn.w	r0, #0
    ad9a:	ea91 0f03 	teq	r1, r3
    ad9e:	bf58      	it	pl
    ada0:	4299      	cmppl	r1, r3
    ada2:	bf08      	it	eq
    ada4:	4290      	cmpeq	r0, r2
    ada6:	bf2c      	ite	cs
    ada8:	17d8      	asrcs	r0, r3, #31
    adaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    adae:	f040 0001 	orr.w	r0, r0, #1
    adb2:	4770      	bx	lr
    adb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    adb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    adbc:	d102      	bne.n	adc4 <__cmpdf2+0x64>
    adbe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    adc2:	d107      	bne.n	add4 <__cmpdf2+0x74>
    adc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    adc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    adcc:	d1d6      	bne.n	ad7c <__cmpdf2+0x1c>
    adce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    add2:	d0d3      	beq.n	ad7c <__cmpdf2+0x1c>
    add4:	f85d 0b04 	ldr.w	r0, [sp], #4
    add8:	4770      	bx	lr
    adda:	bf00      	nop

0000addc <__aeabi_cdrcmple>:
    addc:	4684      	mov	ip, r0
    adde:	4610      	mov	r0, r2
    ade0:	4662      	mov	r2, ip
    ade2:	468c      	mov	ip, r1
    ade4:	4619      	mov	r1, r3
    ade6:	4663      	mov	r3, ip
    ade8:	e000      	b.n	adec <__aeabi_cdcmpeq>
    adea:	bf00      	nop

0000adec <__aeabi_cdcmpeq>:
    adec:	b501      	push	{r0, lr}
    adee:	f7ff ffb7 	bl	ad60 <__cmpdf2>
    adf2:	2800      	cmp	r0, #0
    adf4:	bf48      	it	mi
    adf6:	f110 0f00 	cmnmi.w	r0, #0
    adfa:	bd01      	pop	{r0, pc}

0000adfc <__aeabi_dcmpeq>:
    adfc:	f84d ed08 	str.w	lr, [sp, #-8]!
    ae00:	f7ff fff4 	bl	adec <__aeabi_cdcmpeq>
    ae04:	bf0c      	ite	eq
    ae06:	2001      	moveq	r0, #1
    ae08:	2000      	movne	r0, #0
    ae0a:	f85d fb08 	ldr.w	pc, [sp], #8
    ae0e:	bf00      	nop

0000ae10 <__aeabi_dcmplt>:
    ae10:	f84d ed08 	str.w	lr, [sp, #-8]!
    ae14:	f7ff ffea 	bl	adec <__aeabi_cdcmpeq>
    ae18:	bf34      	ite	cc
    ae1a:	2001      	movcc	r0, #1
    ae1c:	2000      	movcs	r0, #0
    ae1e:	f85d fb08 	ldr.w	pc, [sp], #8
    ae22:	bf00      	nop

0000ae24 <__aeabi_dcmple>:
    ae24:	f84d ed08 	str.w	lr, [sp, #-8]!
    ae28:	f7ff ffe0 	bl	adec <__aeabi_cdcmpeq>
    ae2c:	bf94      	ite	ls
    ae2e:	2001      	movls	r0, #1
    ae30:	2000      	movhi	r0, #0
    ae32:	f85d fb08 	ldr.w	pc, [sp], #8
    ae36:	bf00      	nop

0000ae38 <__aeabi_dcmpge>:
    ae38:	f84d ed08 	str.w	lr, [sp, #-8]!
    ae3c:	f7ff ffce 	bl	addc <__aeabi_cdrcmple>
    ae40:	bf94      	ite	ls
    ae42:	2001      	movls	r0, #1
    ae44:	2000      	movhi	r0, #0
    ae46:	f85d fb08 	ldr.w	pc, [sp], #8
    ae4a:	bf00      	nop

0000ae4c <__aeabi_dcmpgt>:
    ae4c:	f84d ed08 	str.w	lr, [sp, #-8]!
    ae50:	f7ff ffc4 	bl	addc <__aeabi_cdrcmple>
    ae54:	bf34      	ite	cc
    ae56:	2001      	movcc	r0, #1
    ae58:	2000      	movcs	r0, #0
    ae5a:	f85d fb08 	ldr.w	pc, [sp], #8
    ae5e:	bf00      	nop

0000ae60 <__aeabi_dcmpun>:
    ae60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    ae64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ae68:	d102      	bne.n	ae70 <__aeabi_dcmpun+0x10>
    ae6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    ae6e:	d10a      	bne.n	ae86 <__aeabi_dcmpun+0x26>
    ae70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    ae74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ae78:	d102      	bne.n	ae80 <__aeabi_dcmpun+0x20>
    ae7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    ae7e:	d102      	bne.n	ae86 <__aeabi_dcmpun+0x26>
    ae80:	f04f 0000 	mov.w	r0, #0
    ae84:	4770      	bx	lr
    ae86:	f04f 0001 	mov.w	r0, #1
    ae8a:	4770      	bx	lr

0000ae8c <malloc>:
    ae8c:	4b02      	ldr	r3, [pc, #8]	; (ae98 <malloc+0xc>)
    ae8e:	4601      	mov	r1, r0
    ae90:	6818      	ldr	r0, [r3, #0]
    ae92:	f000 b80b 	b.w	aeac <_malloc_r>
    ae96:	bf00      	nop
    ae98:	1fff15c8 	.word	0x1fff15c8

0000ae9c <free>:
    ae9c:	4b02      	ldr	r3, [pc, #8]	; (aea8 <free+0xc>)
    ae9e:	4601      	mov	r1, r0
    aea0:	6818      	ldr	r0, [r3, #0]
    aea2:	f001 b9bf 	b.w	c224 <_free_r>
    aea6:	bf00      	nop
    aea8:	1fff15c8 	.word	0x1fff15c8

0000aeac <_malloc_r>:
    aeac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aeb0:	f101 060b 	add.w	r6, r1, #11
    aeb4:	2e16      	cmp	r6, #22
    aeb6:	b083      	sub	sp, #12
    aeb8:	4604      	mov	r4, r0
    aeba:	d824      	bhi.n	af06 <_malloc_r+0x5a>
    aebc:	2910      	cmp	r1, #16
    aebe:	f200 80ba 	bhi.w	b036 <_malloc_r+0x18a>
    aec2:	f000 faa3 	bl	b40c <__malloc_lock>
    aec6:	2610      	movs	r6, #16
    aec8:	2218      	movs	r2, #24
    aeca:	2002      	movs	r0, #2
    aecc:	4fb5      	ldr	r7, [pc, #724]	; (b1a4 <_malloc_r+0x2f8>)
    aece:	443a      	add	r2, r7
    aed0:	f1a2 0108 	sub.w	r1, r2, #8
    aed4:	6853      	ldr	r3, [r2, #4]
    aed6:	428b      	cmp	r3, r1
    aed8:	f000 80ba 	beq.w	b050 <_malloc_r+0x1a4>
    aedc:	685a      	ldr	r2, [r3, #4]
    aede:	68d9      	ldr	r1, [r3, #12]
    aee0:	f022 0203 	bic.w	r2, r2, #3
    aee4:	441a      	add	r2, r3
    aee6:	689d      	ldr	r5, [r3, #8]
    aee8:	60e9      	str	r1, [r5, #12]
    aeea:	608d      	str	r5, [r1, #8]
    aeec:	6851      	ldr	r1, [r2, #4]
    aeee:	f041 0101 	orr.w	r1, r1, #1
    aef2:	4620      	mov	r0, r4
    aef4:	6051      	str	r1, [r2, #4]
    aef6:	f103 0508 	add.w	r5, r3, #8
    aefa:	f000 fa8d 	bl	b418 <__malloc_unlock>
    aefe:	4628      	mov	r0, r5
    af00:	b003      	add	sp, #12
    af02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af06:	f036 0607 	bics.w	r6, r6, #7
    af0a:	f100 8094 	bmi.w	b036 <_malloc_r+0x18a>
    af0e:	42b1      	cmp	r1, r6
    af10:	f200 8091 	bhi.w	b036 <_malloc_r+0x18a>
    af14:	f000 fa7a 	bl	b40c <__malloc_lock>
    af18:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    af1c:	f0c0 819a 	bcc.w	b254 <_malloc_r+0x3a8>
    af20:	0a73      	lsrs	r3, r6, #9
    af22:	f000 808f 	beq.w	b044 <_malloc_r+0x198>
    af26:	2b04      	cmp	r3, #4
    af28:	f200 816f 	bhi.w	b20a <_malloc_r+0x35e>
    af2c:	09b3      	lsrs	r3, r6, #6
    af2e:	f103 0039 	add.w	r0, r3, #57	; 0x39
    af32:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    af36:	00c3      	lsls	r3, r0, #3
    af38:	4f9a      	ldr	r7, [pc, #616]	; (b1a4 <_malloc_r+0x2f8>)
    af3a:	443b      	add	r3, r7
    af3c:	f1a3 0508 	sub.w	r5, r3, #8
    af40:	685b      	ldr	r3, [r3, #4]
    af42:	429d      	cmp	r5, r3
    af44:	d106      	bne.n	af54 <_malloc_r+0xa8>
    af46:	e00c      	b.n	af62 <_malloc_r+0xb6>
    af48:	2900      	cmp	r1, #0
    af4a:	f280 8127 	bge.w	b19c <_malloc_r+0x2f0>
    af4e:	68db      	ldr	r3, [r3, #12]
    af50:	429d      	cmp	r5, r3
    af52:	d006      	beq.n	af62 <_malloc_r+0xb6>
    af54:	685a      	ldr	r2, [r3, #4]
    af56:	f022 0203 	bic.w	r2, r2, #3
    af5a:	1b91      	subs	r1, r2, r6
    af5c:	290f      	cmp	r1, #15
    af5e:	ddf3      	ble.n	af48 <_malloc_r+0x9c>
    af60:	4660      	mov	r0, ip
    af62:	693d      	ldr	r5, [r7, #16]
    af64:	f8df c250 	ldr.w	ip, [pc, #592]	; b1b8 <_malloc_r+0x30c>
    af68:	4565      	cmp	r5, ip
    af6a:	d07c      	beq.n	b066 <_malloc_r+0x1ba>
    af6c:	686a      	ldr	r2, [r5, #4]
    af6e:	f022 0203 	bic.w	r2, r2, #3
    af72:	1b93      	subs	r3, r2, r6
    af74:	2b0f      	cmp	r3, #15
    af76:	f300 817b 	bgt.w	b270 <_malloc_r+0x3c4>
    af7a:	2b00      	cmp	r3, #0
    af7c:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    af80:	f280 816c 	bge.w	b25c <_malloc_r+0x3b0>
    af84:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    af88:	f080 811a 	bcs.w	b1c0 <_malloc_r+0x314>
    af8c:	08d3      	lsrs	r3, r2, #3
    af8e:	6879      	ldr	r1, [r7, #4]
    af90:	3301      	adds	r3, #1
    af92:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    af96:	2201      	movs	r2, #1
    af98:	fa02 f20e 	lsl.w	r2, r2, lr
    af9c:	430a      	orrs	r2, r1
    af9e:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    afa2:	f8c5 e008 	str.w	lr, [r5, #8]
    afa6:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    afaa:	3908      	subs	r1, #8
    afac:	60e9      	str	r1, [r5, #12]
    afae:	607a      	str	r2, [r7, #4]
    afb0:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    afb4:	f8ce 500c 	str.w	r5, [lr, #12]
    afb8:	1083      	asrs	r3, r0, #2
    afba:	2101      	movs	r1, #1
    afbc:	4099      	lsls	r1, r3
    afbe:	4291      	cmp	r1, r2
    afc0:	d857      	bhi.n	b072 <_malloc_r+0x1c6>
    afc2:	4211      	tst	r1, r2
    afc4:	d106      	bne.n	afd4 <_malloc_r+0x128>
    afc6:	f020 0003 	bic.w	r0, r0, #3
    afca:	0049      	lsls	r1, r1, #1
    afcc:	4211      	tst	r1, r2
    afce:	f100 0004 	add.w	r0, r0, #4
    afd2:	d0fa      	beq.n	afca <_malloc_r+0x11e>
    afd4:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    afd8:	464d      	mov	r5, r9
    afda:	4686      	mov	lr, r0
    afdc:	f8d5 800c 	ldr.w	r8, [r5, #12]
    afe0:	4545      	cmp	r5, r8
    afe2:	d108      	bne.n	aff6 <_malloc_r+0x14a>
    afe4:	e11d      	b.n	b222 <_malloc_r+0x376>
    afe6:	2b00      	cmp	r3, #0
    afe8:	f280 8124 	bge.w	b234 <_malloc_r+0x388>
    afec:	f8d8 800c 	ldr.w	r8, [r8, #12]
    aff0:	4545      	cmp	r5, r8
    aff2:	f000 8116 	beq.w	b222 <_malloc_r+0x376>
    aff6:	f8d8 2004 	ldr.w	r2, [r8, #4]
    affa:	f022 0203 	bic.w	r2, r2, #3
    affe:	1b93      	subs	r3, r2, r6
    b000:	2b0f      	cmp	r3, #15
    b002:	ddf0      	ble.n	afe6 <_malloc_r+0x13a>
    b004:	4620      	mov	r0, r4
    b006:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    b00a:	eb08 0106 	add.w	r1, r8, r6
    b00e:	f046 0601 	orr.w	r6, r6, #1
    b012:	f8c8 6004 	str.w	r6, [r8, #4]
    b016:	60ec      	str	r4, [r5, #12]
    b018:	60a5      	str	r5, [r4, #8]
    b01a:	f043 0401 	orr.w	r4, r3, #1
    b01e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    b022:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    b026:	604c      	str	r4, [r1, #4]
    b028:	f848 3002 	str.w	r3, [r8, r2]
    b02c:	f000 f9f4 	bl	b418 <__malloc_unlock>
    b030:	f108 0508 	add.w	r5, r8, #8
    b034:	e002      	b.n	b03c <_malloc_r+0x190>
    b036:	230c      	movs	r3, #12
    b038:	6023      	str	r3, [r4, #0]
    b03a:	2500      	movs	r5, #0
    b03c:	4628      	mov	r0, r5
    b03e:	b003      	add	sp, #12
    b040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b044:	f44f 7300 	mov.w	r3, #512	; 0x200
    b048:	2040      	movs	r0, #64	; 0x40
    b04a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    b04e:	e773      	b.n	af38 <_malloc_r+0x8c>
    b050:	68d3      	ldr	r3, [r2, #12]
    b052:	429a      	cmp	r2, r3
    b054:	bf08      	it	eq
    b056:	3002      	addeq	r0, #2
    b058:	f47f af40 	bne.w	aedc <_malloc_r+0x30>
    b05c:	693d      	ldr	r5, [r7, #16]
    b05e:	f8df c158 	ldr.w	ip, [pc, #344]	; b1b8 <_malloc_r+0x30c>
    b062:	4565      	cmp	r5, ip
    b064:	d182      	bne.n	af6c <_malloc_r+0xc0>
    b066:	687a      	ldr	r2, [r7, #4]
    b068:	1083      	asrs	r3, r0, #2
    b06a:	2101      	movs	r1, #1
    b06c:	4099      	lsls	r1, r3
    b06e:	4291      	cmp	r1, r2
    b070:	d9a7      	bls.n	afc2 <_malloc_r+0x116>
    b072:	68bd      	ldr	r5, [r7, #8]
    b074:	686b      	ldr	r3, [r5, #4]
    b076:	f023 0903 	bic.w	r9, r3, #3
    b07a:	454e      	cmp	r6, r9
    b07c:	d803      	bhi.n	b086 <_malloc_r+0x1da>
    b07e:	eba9 0306 	sub.w	r3, r9, r6
    b082:	2b0f      	cmp	r3, #15
    b084:	dc7a      	bgt.n	b17c <_malloc_r+0x2d0>
    b086:	f8df b134 	ldr.w	fp, [pc, #308]	; b1bc <_malloc_r+0x310>
    b08a:	4b47      	ldr	r3, [pc, #284]	; (b1a8 <_malloc_r+0x2fc>)
    b08c:	f8db 2000 	ldr.w	r2, [fp]
    b090:	681b      	ldr	r3, [r3, #0]
    b092:	3201      	adds	r2, #1
    b094:	4433      	add	r3, r6
    b096:	eb05 0a09 	add.w	sl, r5, r9
    b09a:	f000 8133 	beq.w	b304 <_malloc_r+0x458>
    b09e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    b0a2:	330f      	adds	r3, #15
    b0a4:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    b0a8:	f028 080f 	bic.w	r8, r8, #15
    b0ac:	4641      	mov	r1, r8
    b0ae:	4620      	mov	r0, r4
    b0b0:	f000 feda 	bl	be68 <_sbrk_r>
    b0b4:	1c41      	adds	r1, r0, #1
    b0b6:	4602      	mov	r2, r0
    b0b8:	f000 80f3 	beq.w	b2a2 <_malloc_r+0x3f6>
    b0bc:	4582      	cmp	sl, r0
    b0be:	f200 80ee 	bhi.w	b29e <_malloc_r+0x3f2>
    b0c2:	4b3a      	ldr	r3, [pc, #232]	; (b1ac <_malloc_r+0x300>)
    b0c4:	6819      	ldr	r1, [r3, #0]
    b0c6:	4441      	add	r1, r8
    b0c8:	6019      	str	r1, [r3, #0]
    b0ca:	4608      	mov	r0, r1
    b0cc:	f000 814e 	beq.w	b36c <_malloc_r+0x4c0>
    b0d0:	f8db 1000 	ldr.w	r1, [fp]
    b0d4:	9301      	str	r3, [sp, #4]
    b0d6:	3101      	adds	r1, #1
    b0d8:	bf1b      	ittet	ne
    b0da:	eba2 010a 	subne.w	r1, r2, sl
    b0de:	1809      	addne	r1, r1, r0
    b0e0:	f8cb 2000 	streq.w	r2, [fp]
    b0e4:	6019      	strne	r1, [r3, #0]
    b0e6:	f012 0b07 	ands.w	fp, r2, #7
    b0ea:	f000 8117 	beq.w	b31c <_malloc_r+0x470>
    b0ee:	f1cb 0108 	rsb	r1, fp, #8
    b0f2:	440a      	add	r2, r1
    b0f4:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    b0f8:	4490      	add	r8, r2
    b0fa:	3108      	adds	r1, #8
    b0fc:	eba1 0108 	sub.w	r1, r1, r8
    b100:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    b104:	4651      	mov	r1, sl
    b106:	4620      	mov	r0, r4
    b108:	9200      	str	r2, [sp, #0]
    b10a:	f000 fead 	bl	be68 <_sbrk_r>
    b10e:	1c42      	adds	r2, r0, #1
    b110:	e9dd 2300 	ldrd	r2, r3, [sp]
    b114:	f000 814f 	beq.w	b3b6 <_malloc_r+0x50a>
    b118:	1a80      	subs	r0, r0, r2
    b11a:	eb00 080a 	add.w	r8, r0, sl
    b11e:	6819      	ldr	r1, [r3, #0]
    b120:	60ba      	str	r2, [r7, #8]
    b122:	f048 0001 	orr.w	r0, r8, #1
    b126:	4451      	add	r1, sl
    b128:	42bd      	cmp	r5, r7
    b12a:	6050      	str	r0, [r2, #4]
    b12c:	6019      	str	r1, [r3, #0]
    b12e:	f000 8129 	beq.w	b384 <_malloc_r+0x4d8>
    b132:	f1b9 0f0f 	cmp.w	r9, #15
    b136:	f240 8127 	bls.w	b388 <_malloc_r+0x4dc>
    b13a:	6868      	ldr	r0, [r5, #4]
    b13c:	f1a9 0c0c 	sub.w	ip, r9, #12
    b140:	f02c 0c07 	bic.w	ip, ip, #7
    b144:	f000 0001 	and.w	r0, r0, #1
    b148:	ea40 000c 	orr.w	r0, r0, ip
    b14c:	6068      	str	r0, [r5, #4]
    b14e:	f04f 0e05 	mov.w	lr, #5
    b152:	eb05 000c 	add.w	r0, r5, ip
    b156:	f1bc 0f0f 	cmp.w	ip, #15
    b15a:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    b15e:	f200 8132 	bhi.w	b3c6 <_malloc_r+0x51a>
    b162:	6850      	ldr	r0, [r2, #4]
    b164:	4615      	mov	r5, r2
    b166:	4b12      	ldr	r3, [pc, #72]	; (b1b0 <_malloc_r+0x304>)
    b168:	681a      	ldr	r2, [r3, #0]
    b16a:	428a      	cmp	r2, r1
    b16c:	bf38      	it	cc
    b16e:	6019      	strcc	r1, [r3, #0]
    b170:	4b10      	ldr	r3, [pc, #64]	; (b1b4 <_malloc_r+0x308>)
    b172:	681a      	ldr	r2, [r3, #0]
    b174:	428a      	cmp	r2, r1
    b176:	bf38      	it	cc
    b178:	6019      	strcc	r1, [r3, #0]
    b17a:	e094      	b.n	b2a6 <_malloc_r+0x3fa>
    b17c:	19aa      	adds	r2, r5, r6
    b17e:	f043 0301 	orr.w	r3, r3, #1
    b182:	f046 0601 	orr.w	r6, r6, #1
    b186:	606e      	str	r6, [r5, #4]
    b188:	4620      	mov	r0, r4
    b18a:	60ba      	str	r2, [r7, #8]
    b18c:	6053      	str	r3, [r2, #4]
    b18e:	f000 f943 	bl	b418 <__malloc_unlock>
    b192:	3508      	adds	r5, #8
    b194:	4628      	mov	r0, r5
    b196:	b003      	add	sp, #12
    b198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b19c:	68d9      	ldr	r1, [r3, #12]
    b19e:	441a      	add	r2, r3
    b1a0:	e6a1      	b.n	aee6 <_malloc_r+0x3a>
    b1a2:	bf00      	nop
    b1a4:	1fff0f20 	.word	0x1fff0f20
    b1a8:	1fff7c40 	.word	0x1fff7c40
    b1ac:	1fff7c10 	.word	0x1fff7c10
    b1b0:	1fff7c38 	.word	0x1fff7c38
    b1b4:	1fff7c3c 	.word	0x1fff7c3c
    b1b8:	1fff0f28 	.word	0x1fff0f28
    b1bc:	1fff1328 	.word	0x1fff1328
    b1c0:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    b1c4:	ea4f 2352 	mov.w	r3, r2, lsr #9
    b1c8:	d363      	bcc.n	b292 <_malloc_r+0x3e6>
    b1ca:	2b14      	cmp	r3, #20
    b1cc:	f200 80b7 	bhi.w	b33e <_malloc_r+0x492>
    b1d0:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    b1d4:	00c9      	lsls	r1, r1, #3
    b1d6:	335b      	adds	r3, #91	; 0x5b
    b1d8:	eb07 0e01 	add.w	lr, r7, r1
    b1dc:	5879      	ldr	r1, [r7, r1]
    b1de:	f1ae 0e08 	sub.w	lr, lr, #8
    b1e2:	458e      	cmp	lr, r1
    b1e4:	f000 8091 	beq.w	b30a <_malloc_r+0x45e>
    b1e8:	684b      	ldr	r3, [r1, #4]
    b1ea:	f023 0303 	bic.w	r3, r3, #3
    b1ee:	4293      	cmp	r3, r2
    b1f0:	d902      	bls.n	b1f8 <_malloc_r+0x34c>
    b1f2:	6889      	ldr	r1, [r1, #8]
    b1f4:	458e      	cmp	lr, r1
    b1f6:	d1f7      	bne.n	b1e8 <_malloc_r+0x33c>
    b1f8:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    b1fc:	687a      	ldr	r2, [r7, #4]
    b1fe:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    b202:	f8ce 5008 	str.w	r5, [lr, #8]
    b206:	60cd      	str	r5, [r1, #12]
    b208:	e6d6      	b.n	afb8 <_malloc_r+0x10c>
    b20a:	2b14      	cmp	r3, #20
    b20c:	d959      	bls.n	b2c2 <_malloc_r+0x416>
    b20e:	2b54      	cmp	r3, #84	; 0x54
    b210:	f200 809d 	bhi.w	b34e <_malloc_r+0x4a2>
    b214:	0b33      	lsrs	r3, r6, #12
    b216:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    b21a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    b21e:	00c3      	lsls	r3, r0, #3
    b220:	e68a      	b.n	af38 <_malloc_r+0x8c>
    b222:	f10e 0e01 	add.w	lr, lr, #1
    b226:	f01e 0f03 	tst.w	lr, #3
    b22a:	f105 0508 	add.w	r5, r5, #8
    b22e:	f47f aed5 	bne.w	afdc <_malloc_r+0x130>
    b232:	e051      	b.n	b2d8 <_malloc_r+0x42c>
    b234:	4442      	add	r2, r8
    b236:	4645      	mov	r5, r8
    b238:	6853      	ldr	r3, [r2, #4]
    b23a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    b23e:	f043 0301 	orr.w	r3, r3, #1
    b242:	6053      	str	r3, [r2, #4]
    b244:	f855 3f08 	ldr.w	r3, [r5, #8]!
    b248:	4620      	mov	r0, r4
    b24a:	60d9      	str	r1, [r3, #12]
    b24c:	608b      	str	r3, [r1, #8]
    b24e:	f000 f8e3 	bl	b418 <__malloc_unlock>
    b252:	e6f3      	b.n	b03c <_malloc_r+0x190>
    b254:	08f0      	lsrs	r0, r6, #3
    b256:	f106 0208 	add.w	r2, r6, #8
    b25a:	e637      	b.n	aecc <_malloc_r+0x20>
    b25c:	442a      	add	r2, r5
    b25e:	4620      	mov	r0, r4
    b260:	6853      	ldr	r3, [r2, #4]
    b262:	f043 0301 	orr.w	r3, r3, #1
    b266:	6053      	str	r3, [r2, #4]
    b268:	3508      	adds	r5, #8
    b26a:	f000 f8d5 	bl	b418 <__malloc_unlock>
    b26e:	e6e5      	b.n	b03c <_malloc_r+0x190>
    b270:	19a9      	adds	r1, r5, r6
    b272:	4620      	mov	r0, r4
    b274:	f046 0601 	orr.w	r6, r6, #1
    b278:	f043 0401 	orr.w	r4, r3, #1
    b27c:	606e      	str	r6, [r5, #4]
    b27e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    b282:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    b286:	604c      	str	r4, [r1, #4]
    b288:	50ab      	str	r3, [r5, r2]
    b28a:	f000 f8c5 	bl	b418 <__malloc_unlock>
    b28e:	3508      	adds	r5, #8
    b290:	e6d4      	b.n	b03c <_malloc_r+0x190>
    b292:	0993      	lsrs	r3, r2, #6
    b294:	f103 0139 	add.w	r1, r3, #57	; 0x39
    b298:	00c9      	lsls	r1, r1, #3
    b29a:	3338      	adds	r3, #56	; 0x38
    b29c:	e79c      	b.n	b1d8 <_malloc_r+0x32c>
    b29e:	42bd      	cmp	r5, r7
    b2a0:	d05f      	beq.n	b362 <_malloc_r+0x4b6>
    b2a2:	68bd      	ldr	r5, [r7, #8]
    b2a4:	6868      	ldr	r0, [r5, #4]
    b2a6:	f020 0803 	bic.w	r8, r0, #3
    b2aa:	4546      	cmp	r6, r8
    b2ac:	eba8 0306 	sub.w	r3, r8, r6
    b2b0:	d802      	bhi.n	b2b8 <_malloc_r+0x40c>
    b2b2:	2b0f      	cmp	r3, #15
    b2b4:	f73f af62 	bgt.w	b17c <_malloc_r+0x2d0>
    b2b8:	4620      	mov	r0, r4
    b2ba:	f000 f8ad 	bl	b418 <__malloc_unlock>
    b2be:	2500      	movs	r5, #0
    b2c0:	e6bc      	b.n	b03c <_malloc_r+0x190>
    b2c2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    b2c6:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    b2ca:	00c3      	lsls	r3, r0, #3
    b2cc:	e634      	b.n	af38 <_malloc_r+0x8c>
    b2ce:	f859 3908 	ldr.w	r3, [r9], #-8
    b2d2:	454b      	cmp	r3, r9
    b2d4:	f040 8096 	bne.w	b404 <_malloc_r+0x558>
    b2d8:	f010 0f03 	tst.w	r0, #3
    b2dc:	f100 30ff 	add.w	r0, r0, #4294967295
    b2e0:	d1f5      	bne.n	b2ce <_malloc_r+0x422>
    b2e2:	687b      	ldr	r3, [r7, #4]
    b2e4:	ea23 0301 	bic.w	r3, r3, r1
    b2e8:	607b      	str	r3, [r7, #4]
    b2ea:	0049      	lsls	r1, r1, #1
    b2ec:	4299      	cmp	r1, r3
    b2ee:	f63f aec0 	bhi.w	b072 <_malloc_r+0x1c6>
    b2f2:	b919      	cbnz	r1, b2fc <_malloc_r+0x450>
    b2f4:	e6bd      	b.n	b072 <_malloc_r+0x1c6>
    b2f6:	0049      	lsls	r1, r1, #1
    b2f8:	f10e 0e04 	add.w	lr, lr, #4
    b2fc:	4219      	tst	r1, r3
    b2fe:	d0fa      	beq.n	b2f6 <_malloc_r+0x44a>
    b300:	4670      	mov	r0, lr
    b302:	e667      	b.n	afd4 <_malloc_r+0x128>
    b304:	f103 0810 	add.w	r8, r3, #16
    b308:	e6d0      	b.n	b0ac <_malloc_r+0x200>
    b30a:	109a      	asrs	r2, r3, #2
    b30c:	f04f 0801 	mov.w	r8, #1
    b310:	687b      	ldr	r3, [r7, #4]
    b312:	fa08 f202 	lsl.w	r2, r8, r2
    b316:	431a      	orrs	r2, r3
    b318:	607a      	str	r2, [r7, #4]
    b31a:	e770      	b.n	b1fe <_malloc_r+0x352>
    b31c:	eb02 0108 	add.w	r1, r2, r8
    b320:	4249      	negs	r1, r1
    b322:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    b326:	4651      	mov	r1, sl
    b328:	4620      	mov	r0, r4
    b32a:	9200      	str	r2, [sp, #0]
    b32c:	f000 fd9c 	bl	be68 <_sbrk_r>
    b330:	1c43      	adds	r3, r0, #1
    b332:	e9dd 2300 	ldrd	r2, r3, [sp]
    b336:	f47f aeef 	bne.w	b118 <_malloc_r+0x26c>
    b33a:	46da      	mov	sl, fp
    b33c:	e6ef      	b.n	b11e <_malloc_r+0x272>
    b33e:	2b54      	cmp	r3, #84	; 0x54
    b340:	d825      	bhi.n	b38e <_malloc_r+0x4e2>
    b342:	0b13      	lsrs	r3, r2, #12
    b344:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    b348:	00c9      	lsls	r1, r1, #3
    b34a:	336e      	adds	r3, #110	; 0x6e
    b34c:	e744      	b.n	b1d8 <_malloc_r+0x32c>
    b34e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    b352:	d825      	bhi.n	b3a0 <_malloc_r+0x4f4>
    b354:	0bf3      	lsrs	r3, r6, #15
    b356:	f103 0078 	add.w	r0, r3, #120	; 0x78
    b35a:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    b35e:	00c3      	lsls	r3, r0, #3
    b360:	e5ea      	b.n	af38 <_malloc_r+0x8c>
    b362:	4b29      	ldr	r3, [pc, #164]	; (b408 <_malloc_r+0x55c>)
    b364:	6818      	ldr	r0, [r3, #0]
    b366:	4440      	add	r0, r8
    b368:	6018      	str	r0, [r3, #0]
    b36a:	e6b1      	b.n	b0d0 <_malloc_r+0x224>
    b36c:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    b370:	f1bc 0f00 	cmp.w	ip, #0
    b374:	f47f aeac 	bne.w	b0d0 <_malloc_r+0x224>
    b378:	68bd      	ldr	r5, [r7, #8]
    b37a:	44c8      	add	r8, r9
    b37c:	f048 0001 	orr.w	r0, r8, #1
    b380:	6068      	str	r0, [r5, #4]
    b382:	e6f0      	b.n	b166 <_malloc_r+0x2ba>
    b384:	4615      	mov	r5, r2
    b386:	e6ee      	b.n	b166 <_malloc_r+0x2ba>
    b388:	2301      	movs	r3, #1
    b38a:	6053      	str	r3, [r2, #4]
    b38c:	e794      	b.n	b2b8 <_malloc_r+0x40c>
    b38e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    b392:	d823      	bhi.n	b3dc <_malloc_r+0x530>
    b394:	0bd3      	lsrs	r3, r2, #15
    b396:	f103 0178 	add.w	r1, r3, #120	; 0x78
    b39a:	00c9      	lsls	r1, r1, #3
    b39c:	3377      	adds	r3, #119	; 0x77
    b39e:	e71b      	b.n	b1d8 <_malloc_r+0x32c>
    b3a0:	f240 5254 	movw	r2, #1364	; 0x554
    b3a4:	4293      	cmp	r3, r2
    b3a6:	d823      	bhi.n	b3f0 <_malloc_r+0x544>
    b3a8:	0cb3      	lsrs	r3, r6, #18
    b3aa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    b3ae:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    b3b2:	00c3      	lsls	r3, r0, #3
    b3b4:	e5c0      	b.n	af38 <_malloc_r+0x8c>
    b3b6:	f1ab 0b08 	sub.w	fp, fp, #8
    b3ba:	44d8      	add	r8, fp
    b3bc:	eba8 0802 	sub.w	r8, r8, r2
    b3c0:	f04f 0a00 	mov.w	sl, #0
    b3c4:	e6ab      	b.n	b11e <_malloc_r+0x272>
    b3c6:	f105 0108 	add.w	r1, r5, #8
    b3ca:	4620      	mov	r0, r4
    b3cc:	9300      	str	r3, [sp, #0]
    b3ce:	f000 ff29 	bl	c224 <_free_r>
    b3d2:	68bd      	ldr	r5, [r7, #8]
    b3d4:	9b00      	ldr	r3, [sp, #0]
    b3d6:	6868      	ldr	r0, [r5, #4]
    b3d8:	6819      	ldr	r1, [r3, #0]
    b3da:	e6c4      	b.n	b166 <_malloc_r+0x2ba>
    b3dc:	f240 5154 	movw	r1, #1364	; 0x554
    b3e0:	428b      	cmp	r3, r1
    b3e2:	d80b      	bhi.n	b3fc <_malloc_r+0x550>
    b3e4:	0c93      	lsrs	r3, r2, #18
    b3e6:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    b3ea:	00c9      	lsls	r1, r1, #3
    b3ec:	337c      	adds	r3, #124	; 0x7c
    b3ee:	e6f3      	b.n	b1d8 <_malloc_r+0x32c>
    b3f0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    b3f4:	207f      	movs	r0, #127	; 0x7f
    b3f6:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    b3fa:	e59d      	b.n	af38 <_malloc_r+0x8c>
    b3fc:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    b400:	237e      	movs	r3, #126	; 0x7e
    b402:	e6e9      	b.n	b1d8 <_malloc_r+0x32c>
    b404:	687b      	ldr	r3, [r7, #4]
    b406:	e770      	b.n	b2ea <_malloc_r+0x43e>
    b408:	1fff7c10 	.word	0x1fff7c10

0000b40c <__malloc_lock>:
    b40c:	4801      	ldr	r0, [pc, #4]	; (b414 <__malloc_lock+0x8>)
    b40e:	f000 bd81 	b.w	bf14 <__retarget_lock_acquire_recursive>
    b412:	bf00      	nop
    b414:	1fff7d88 	.word	0x1fff7d88

0000b418 <__malloc_unlock>:
    b418:	4801      	ldr	r0, [pc, #4]	; (b420 <__malloc_unlock+0x8>)
    b41a:	f000 bd7d 	b.w	bf18 <__retarget_lock_release_recursive>
    b41e:	bf00      	nop
    b420:	1fff7d88 	.word	0x1fff7d88

0000b424 <realloc>:
    b424:	b410      	push	{r4}
    b426:	4c04      	ldr	r4, [pc, #16]	; (b438 <realloc+0x14>)
    b428:	4603      	mov	r3, r0
    b42a:	460a      	mov	r2, r1
    b42c:	6820      	ldr	r0, [r4, #0]
    b42e:	f85d 4b04 	ldr.w	r4, [sp], #4
    b432:	4619      	mov	r1, r3
    b434:	f000 b802 	b.w	b43c <_realloc_r>
    b438:	1fff15c8 	.word	0x1fff15c8

0000b43c <_realloc_r>:
    b43c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b440:	4617      	mov	r7, r2
    b442:	2900      	cmp	r1, #0
    b444:	f000 8098 	beq.w	b578 <_realloc_r+0x13c>
    b448:	460c      	mov	r4, r1
    b44a:	f107 050b 	add.w	r5, r7, #11
    b44e:	4680      	mov	r8, r0
    b450:	f7ff ffdc 	bl	b40c <__malloc_lock>
    b454:	2d16      	cmp	r5, #22
    b456:	f854 1c04 	ldr.w	r1, [r4, #-4]
    b45a:	d85b      	bhi.n	b514 <_realloc_r+0xd8>
    b45c:	2510      	movs	r5, #16
    b45e:	462a      	mov	r2, r5
    b460:	42af      	cmp	r7, r5
    b462:	d85c      	bhi.n	b51e <_realloc_r+0xe2>
    b464:	f021 0603 	bic.w	r6, r1, #3
    b468:	4296      	cmp	r6, r2
    b46a:	f1a4 0908 	sub.w	r9, r4, #8
    b46e:	da62      	bge.n	b536 <_realloc_r+0xfa>
    b470:	4bbc      	ldr	r3, [pc, #752]	; (b764 <_realloc_r+0x328>)
    b472:	f8d3 c008 	ldr.w	ip, [r3, #8]
    b476:	eb09 0006 	add.w	r0, r9, r6
    b47a:	4584      	cmp	ip, r0
    b47c:	f000 8097 	beq.w	b5ae <_realloc_r+0x172>
    b480:	f8d0 c004 	ldr.w	ip, [r0, #4]
    b484:	f02c 0301 	bic.w	r3, ip, #1
    b488:	4403      	add	r3, r0
    b48a:	685b      	ldr	r3, [r3, #4]
    b48c:	07db      	lsls	r3, r3, #31
    b48e:	d468      	bmi.n	b562 <_realloc_r+0x126>
    b490:	f02c 0c03 	bic.w	ip, ip, #3
    b494:	eb06 030c 	add.w	r3, r6, ip
    b498:	4293      	cmp	r3, r2
    b49a:	da47      	bge.n	b52c <_realloc_r+0xf0>
    b49c:	07cb      	lsls	r3, r1, #31
    b49e:	d410      	bmi.n	b4c2 <_realloc_r+0x86>
    b4a0:	f854 3c08 	ldr.w	r3, [r4, #-8]
    b4a4:	eba9 0a03 	sub.w	sl, r9, r3
    b4a8:	f8da 3004 	ldr.w	r3, [sl, #4]
    b4ac:	f023 0103 	bic.w	r1, r3, #3
    b4b0:	448c      	add	ip, r1
    b4b2:	44b4      	add	ip, r6
    b4b4:	4594      	cmp	ip, r2
    b4b6:	f280 8111 	bge.w	b6dc <_realloc_r+0x2a0>
    b4ba:	1873      	adds	r3, r6, r1
    b4bc:	4293      	cmp	r3, r2
    b4be:	f280 80e8 	bge.w	b692 <_realloc_r+0x256>
    b4c2:	4639      	mov	r1, r7
    b4c4:	4640      	mov	r0, r8
    b4c6:	f7ff fcf1 	bl	aeac <_malloc_r>
    b4ca:	4607      	mov	r7, r0
    b4cc:	b1e0      	cbz	r0, b508 <_realloc_r+0xcc>
    b4ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b4d2:	f023 0301 	bic.w	r3, r3, #1
    b4d6:	444b      	add	r3, r9
    b4d8:	f1a0 0208 	sub.w	r2, r0, #8
    b4dc:	4293      	cmp	r3, r2
    b4de:	f000 80d2 	beq.w	b686 <_realloc_r+0x24a>
    b4e2:	1f32      	subs	r2, r6, #4
    b4e4:	2a24      	cmp	r2, #36	; 0x24
    b4e6:	f200 80f5 	bhi.w	b6d4 <_realloc_r+0x298>
    b4ea:	2a13      	cmp	r2, #19
    b4ec:	f200 80ac 	bhi.w	b648 <_realloc_r+0x20c>
    b4f0:	4603      	mov	r3, r0
    b4f2:	4622      	mov	r2, r4
    b4f4:	6811      	ldr	r1, [r2, #0]
    b4f6:	6019      	str	r1, [r3, #0]
    b4f8:	6851      	ldr	r1, [r2, #4]
    b4fa:	6059      	str	r1, [r3, #4]
    b4fc:	6892      	ldr	r2, [r2, #8]
    b4fe:	609a      	str	r2, [r3, #8]
    b500:	4621      	mov	r1, r4
    b502:	4640      	mov	r0, r8
    b504:	f000 fe8e 	bl	c224 <_free_r>
    b508:	4640      	mov	r0, r8
    b50a:	f7ff ff85 	bl	b418 <__malloc_unlock>
    b50e:	4638      	mov	r0, r7
    b510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b514:	f025 0507 	bic.w	r5, r5, #7
    b518:	2d00      	cmp	r5, #0
    b51a:	462a      	mov	r2, r5
    b51c:	daa0      	bge.n	b460 <_realloc_r+0x24>
    b51e:	230c      	movs	r3, #12
    b520:	f8c8 3000 	str.w	r3, [r8]
    b524:	2700      	movs	r7, #0
    b526:	4638      	mov	r0, r7
    b528:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b52c:	461e      	mov	r6, r3
    b52e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    b532:	60d3      	str	r3, [r2, #12]
    b534:	609a      	str	r2, [r3, #8]
    b536:	1b73      	subs	r3, r6, r5
    b538:	2b0f      	cmp	r3, #15
    b53a:	d822      	bhi.n	b582 <_realloc_r+0x146>
    b53c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    b540:	f003 0301 	and.w	r3, r3, #1
    b544:	4333      	orrs	r3, r6
    b546:	444e      	add	r6, r9
    b548:	f8c9 3004 	str.w	r3, [r9, #4]
    b54c:	6873      	ldr	r3, [r6, #4]
    b54e:	f043 0301 	orr.w	r3, r3, #1
    b552:	6073      	str	r3, [r6, #4]
    b554:	4640      	mov	r0, r8
    b556:	4627      	mov	r7, r4
    b558:	f7ff ff5e 	bl	b418 <__malloc_unlock>
    b55c:	4638      	mov	r0, r7
    b55e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b562:	07c9      	lsls	r1, r1, #31
    b564:	d4ad      	bmi.n	b4c2 <_realloc_r+0x86>
    b566:	f854 3c08 	ldr.w	r3, [r4, #-8]
    b56a:	eba9 0a03 	sub.w	sl, r9, r3
    b56e:	f8da 1004 	ldr.w	r1, [sl, #4]
    b572:	f021 0103 	bic.w	r1, r1, #3
    b576:	e7a0      	b.n	b4ba <_realloc_r+0x7e>
    b578:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b57c:	4611      	mov	r1, r2
    b57e:	f7ff bc95 	b.w	aeac <_malloc_r>
    b582:	f8d9 2004 	ldr.w	r2, [r9, #4]
    b586:	eb09 0105 	add.w	r1, r9, r5
    b58a:	f002 0201 	and.w	r2, r2, #1
    b58e:	444e      	add	r6, r9
    b590:	f043 0301 	orr.w	r3, r3, #1
    b594:	432a      	orrs	r2, r5
    b596:	f8c9 2004 	str.w	r2, [r9, #4]
    b59a:	604b      	str	r3, [r1, #4]
    b59c:	6873      	ldr	r3, [r6, #4]
    b59e:	f043 0301 	orr.w	r3, r3, #1
    b5a2:	3108      	adds	r1, #8
    b5a4:	6073      	str	r3, [r6, #4]
    b5a6:	4640      	mov	r0, r8
    b5a8:	f000 fe3c 	bl	c224 <_free_r>
    b5ac:	e7d2      	b.n	b554 <_realloc_r+0x118>
    b5ae:	f8dc 0004 	ldr.w	r0, [ip, #4]
    b5b2:	f020 0b03 	bic.w	fp, r0, #3
    b5b6:	eb06 0c0b 	add.w	ip, r6, fp
    b5ba:	f105 0010 	add.w	r0, r5, #16
    b5be:	4584      	cmp	ip, r0
    b5c0:	da4d      	bge.n	b65e <_realloc_r+0x222>
    b5c2:	07c9      	lsls	r1, r1, #31
    b5c4:	f53f af7d 	bmi.w	b4c2 <_realloc_r+0x86>
    b5c8:	f854 1c08 	ldr.w	r1, [r4, #-8]
    b5cc:	eba9 0a01 	sub.w	sl, r9, r1
    b5d0:	f8da 1004 	ldr.w	r1, [sl, #4]
    b5d4:	f021 0103 	bic.w	r1, r1, #3
    b5d8:	448b      	add	fp, r1
    b5da:	44b3      	add	fp, r6
    b5dc:	4558      	cmp	r0, fp
    b5de:	f73f af6c 	bgt.w	b4ba <_realloc_r+0x7e>
    b5e2:	4657      	mov	r7, sl
    b5e4:	f8da 100c 	ldr.w	r1, [sl, #12]
    b5e8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    b5ec:	1f32      	subs	r2, r6, #4
    b5ee:	2a24      	cmp	r2, #36	; 0x24
    b5f0:	60c1      	str	r1, [r0, #12]
    b5f2:	6088      	str	r0, [r1, #8]
    b5f4:	f200 80db 	bhi.w	b7ae <_realloc_r+0x372>
    b5f8:	2a13      	cmp	r2, #19
    b5fa:	f240 80d6 	bls.w	b7aa <_realloc_r+0x36e>
    b5fe:	6821      	ldr	r1, [r4, #0]
    b600:	f8ca 1008 	str.w	r1, [sl, #8]
    b604:	6861      	ldr	r1, [r4, #4]
    b606:	f8ca 100c 	str.w	r1, [sl, #12]
    b60a:	2a1b      	cmp	r2, #27
    b60c:	f200 80df 	bhi.w	b7ce <_realloc_r+0x392>
    b610:	3408      	adds	r4, #8
    b612:	f10a 0210 	add.w	r2, sl, #16
    b616:	6821      	ldr	r1, [r4, #0]
    b618:	6011      	str	r1, [r2, #0]
    b61a:	6861      	ldr	r1, [r4, #4]
    b61c:	6051      	str	r1, [r2, #4]
    b61e:	68a1      	ldr	r1, [r4, #8]
    b620:	6091      	str	r1, [r2, #8]
    b622:	eb0a 0105 	add.w	r1, sl, r5
    b626:	ebab 0205 	sub.w	r2, fp, r5
    b62a:	f042 0201 	orr.w	r2, r2, #1
    b62e:	6099      	str	r1, [r3, #8]
    b630:	604a      	str	r2, [r1, #4]
    b632:	f8da 3004 	ldr.w	r3, [sl, #4]
    b636:	f003 0301 	and.w	r3, r3, #1
    b63a:	432b      	orrs	r3, r5
    b63c:	4640      	mov	r0, r8
    b63e:	f8ca 3004 	str.w	r3, [sl, #4]
    b642:	f7ff fee9 	bl	b418 <__malloc_unlock>
    b646:	e76e      	b.n	b526 <_realloc_r+0xea>
    b648:	6823      	ldr	r3, [r4, #0]
    b64a:	6003      	str	r3, [r0, #0]
    b64c:	6863      	ldr	r3, [r4, #4]
    b64e:	6043      	str	r3, [r0, #4]
    b650:	2a1b      	cmp	r2, #27
    b652:	d868      	bhi.n	b726 <_realloc_r+0x2ea>
    b654:	f104 0208 	add.w	r2, r4, #8
    b658:	f100 0308 	add.w	r3, r0, #8
    b65c:	e74a      	b.n	b4f4 <_realloc_r+0xb8>
    b65e:	eb09 0205 	add.w	r2, r9, r5
    b662:	609a      	str	r2, [r3, #8]
    b664:	ebac 0305 	sub.w	r3, ip, r5
    b668:	f043 0301 	orr.w	r3, r3, #1
    b66c:	6053      	str	r3, [r2, #4]
    b66e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b672:	f003 0301 	and.w	r3, r3, #1
    b676:	432b      	orrs	r3, r5
    b678:	4640      	mov	r0, r8
    b67a:	f844 3c04 	str.w	r3, [r4, #-4]
    b67e:	f7ff fecb 	bl	b418 <__malloc_unlock>
    b682:	4627      	mov	r7, r4
    b684:	e74f      	b.n	b526 <_realloc_r+0xea>
    b686:	f850 3c04 	ldr.w	r3, [r0, #-4]
    b68a:	f023 0303 	bic.w	r3, r3, #3
    b68e:	441e      	add	r6, r3
    b690:	e751      	b.n	b536 <_realloc_r+0xfa>
    b692:	4657      	mov	r7, sl
    b694:	f8da 100c 	ldr.w	r1, [sl, #12]
    b698:	f857 0f08 	ldr.w	r0, [r7, #8]!
    b69c:	1f32      	subs	r2, r6, #4
    b69e:	2a24      	cmp	r2, #36	; 0x24
    b6a0:	60c1      	str	r1, [r0, #12]
    b6a2:	6088      	str	r0, [r1, #8]
    b6a4:	d84c      	bhi.n	b740 <_realloc_r+0x304>
    b6a6:	2a13      	cmp	r2, #19
    b6a8:	d948      	bls.n	b73c <_realloc_r+0x300>
    b6aa:	6821      	ldr	r1, [r4, #0]
    b6ac:	f8ca 1008 	str.w	r1, [sl, #8]
    b6b0:	6861      	ldr	r1, [r4, #4]
    b6b2:	f8ca 100c 	str.w	r1, [sl, #12]
    b6b6:	2a1b      	cmp	r2, #27
    b6b8:	d856      	bhi.n	b768 <_realloc_r+0x32c>
    b6ba:	3408      	adds	r4, #8
    b6bc:	f10a 0210 	add.w	r2, sl, #16
    b6c0:	461e      	mov	r6, r3
    b6c2:	6823      	ldr	r3, [r4, #0]
    b6c4:	6013      	str	r3, [r2, #0]
    b6c6:	6863      	ldr	r3, [r4, #4]
    b6c8:	6053      	str	r3, [r2, #4]
    b6ca:	68a3      	ldr	r3, [r4, #8]
    b6cc:	6093      	str	r3, [r2, #8]
    b6ce:	46d1      	mov	r9, sl
    b6d0:	463c      	mov	r4, r7
    b6d2:	e730      	b.n	b536 <_realloc_r+0xfa>
    b6d4:	4621      	mov	r1, r4
    b6d6:	f000 fa83 	bl	bbe0 <memmove>
    b6da:	e711      	b.n	b500 <_realloc_r+0xc4>
    b6dc:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    b6e0:	4657      	mov	r7, sl
    b6e2:	60cb      	str	r3, [r1, #12]
    b6e4:	6099      	str	r1, [r3, #8]
    b6e6:	f857 1f08 	ldr.w	r1, [r7, #8]!
    b6ea:	f8da 300c 	ldr.w	r3, [sl, #12]
    b6ee:	60cb      	str	r3, [r1, #12]
    b6f0:	1f32      	subs	r2, r6, #4
    b6f2:	2a24      	cmp	r2, #36	; 0x24
    b6f4:	6099      	str	r1, [r3, #8]
    b6f6:	d82d      	bhi.n	b754 <_realloc_r+0x318>
    b6f8:	2a13      	cmp	r2, #19
    b6fa:	d929      	bls.n	b750 <_realloc_r+0x314>
    b6fc:	6823      	ldr	r3, [r4, #0]
    b6fe:	f8ca 3008 	str.w	r3, [sl, #8]
    b702:	6863      	ldr	r3, [r4, #4]
    b704:	f8ca 300c 	str.w	r3, [sl, #12]
    b708:	2a1b      	cmp	r2, #27
    b70a:	d842      	bhi.n	b792 <_realloc_r+0x356>
    b70c:	3408      	adds	r4, #8
    b70e:	f10a 0310 	add.w	r3, sl, #16
    b712:	6822      	ldr	r2, [r4, #0]
    b714:	601a      	str	r2, [r3, #0]
    b716:	6862      	ldr	r2, [r4, #4]
    b718:	605a      	str	r2, [r3, #4]
    b71a:	68a2      	ldr	r2, [r4, #8]
    b71c:	609a      	str	r2, [r3, #8]
    b71e:	4666      	mov	r6, ip
    b720:	46d1      	mov	r9, sl
    b722:	463c      	mov	r4, r7
    b724:	e707      	b.n	b536 <_realloc_r+0xfa>
    b726:	68a3      	ldr	r3, [r4, #8]
    b728:	6083      	str	r3, [r0, #8]
    b72a:	68e3      	ldr	r3, [r4, #12]
    b72c:	60c3      	str	r3, [r0, #12]
    b72e:	2a24      	cmp	r2, #36	; 0x24
    b730:	d026      	beq.n	b780 <_realloc_r+0x344>
    b732:	f104 0210 	add.w	r2, r4, #16
    b736:	f100 0310 	add.w	r3, r0, #16
    b73a:	e6db      	b.n	b4f4 <_realloc_r+0xb8>
    b73c:	463a      	mov	r2, r7
    b73e:	e7bf      	b.n	b6c0 <_realloc_r+0x284>
    b740:	4621      	mov	r1, r4
    b742:	4638      	mov	r0, r7
    b744:	461e      	mov	r6, r3
    b746:	46d1      	mov	r9, sl
    b748:	f000 fa4a 	bl	bbe0 <memmove>
    b74c:	463c      	mov	r4, r7
    b74e:	e6f2      	b.n	b536 <_realloc_r+0xfa>
    b750:	463b      	mov	r3, r7
    b752:	e7de      	b.n	b712 <_realloc_r+0x2d6>
    b754:	4621      	mov	r1, r4
    b756:	4638      	mov	r0, r7
    b758:	4666      	mov	r6, ip
    b75a:	46d1      	mov	r9, sl
    b75c:	f000 fa40 	bl	bbe0 <memmove>
    b760:	463c      	mov	r4, r7
    b762:	e6e8      	b.n	b536 <_realloc_r+0xfa>
    b764:	1fff0f20 	.word	0x1fff0f20
    b768:	68a1      	ldr	r1, [r4, #8]
    b76a:	f8ca 1010 	str.w	r1, [sl, #16]
    b76e:	68e1      	ldr	r1, [r4, #12]
    b770:	f8ca 1014 	str.w	r1, [sl, #20]
    b774:	2a24      	cmp	r2, #36	; 0x24
    b776:	d020      	beq.n	b7ba <_realloc_r+0x37e>
    b778:	3410      	adds	r4, #16
    b77a:	f10a 0218 	add.w	r2, sl, #24
    b77e:	e79f      	b.n	b6c0 <_realloc_r+0x284>
    b780:	6923      	ldr	r3, [r4, #16]
    b782:	6103      	str	r3, [r0, #16]
    b784:	6961      	ldr	r1, [r4, #20]
    b786:	6141      	str	r1, [r0, #20]
    b788:	f104 0218 	add.w	r2, r4, #24
    b78c:	f100 0318 	add.w	r3, r0, #24
    b790:	e6b0      	b.n	b4f4 <_realloc_r+0xb8>
    b792:	68a3      	ldr	r3, [r4, #8]
    b794:	f8ca 3010 	str.w	r3, [sl, #16]
    b798:	68e3      	ldr	r3, [r4, #12]
    b79a:	f8ca 3014 	str.w	r3, [sl, #20]
    b79e:	2a24      	cmp	r2, #36	; 0x24
    b7a0:	d021      	beq.n	b7e6 <_realloc_r+0x3aa>
    b7a2:	3410      	adds	r4, #16
    b7a4:	f10a 0318 	add.w	r3, sl, #24
    b7a8:	e7b3      	b.n	b712 <_realloc_r+0x2d6>
    b7aa:	463a      	mov	r2, r7
    b7ac:	e733      	b.n	b616 <_realloc_r+0x1da>
    b7ae:	4621      	mov	r1, r4
    b7b0:	4638      	mov	r0, r7
    b7b2:	f000 fa15 	bl	bbe0 <memmove>
    b7b6:	4b16      	ldr	r3, [pc, #88]	; (b810 <_realloc_r+0x3d4>)
    b7b8:	e733      	b.n	b622 <_realloc_r+0x1e6>
    b7ba:	6922      	ldr	r2, [r4, #16]
    b7bc:	f8ca 2018 	str.w	r2, [sl, #24]
    b7c0:	6962      	ldr	r2, [r4, #20]
    b7c2:	f8ca 201c 	str.w	r2, [sl, #28]
    b7c6:	3418      	adds	r4, #24
    b7c8:	f10a 0220 	add.w	r2, sl, #32
    b7cc:	e778      	b.n	b6c0 <_realloc_r+0x284>
    b7ce:	68a1      	ldr	r1, [r4, #8]
    b7d0:	f8ca 1010 	str.w	r1, [sl, #16]
    b7d4:	68e1      	ldr	r1, [r4, #12]
    b7d6:	f8ca 1014 	str.w	r1, [sl, #20]
    b7da:	2a24      	cmp	r2, #36	; 0x24
    b7dc:	d00d      	beq.n	b7fa <_realloc_r+0x3be>
    b7de:	3410      	adds	r4, #16
    b7e0:	f10a 0218 	add.w	r2, sl, #24
    b7e4:	e717      	b.n	b616 <_realloc_r+0x1da>
    b7e6:	6923      	ldr	r3, [r4, #16]
    b7e8:	f8ca 3018 	str.w	r3, [sl, #24]
    b7ec:	6963      	ldr	r3, [r4, #20]
    b7ee:	f8ca 301c 	str.w	r3, [sl, #28]
    b7f2:	3418      	adds	r4, #24
    b7f4:	f10a 0320 	add.w	r3, sl, #32
    b7f8:	e78b      	b.n	b712 <_realloc_r+0x2d6>
    b7fa:	6922      	ldr	r2, [r4, #16]
    b7fc:	f8ca 2018 	str.w	r2, [sl, #24]
    b800:	6962      	ldr	r2, [r4, #20]
    b802:	f8ca 201c 	str.w	r2, [sl, #28]
    b806:	3418      	adds	r4, #24
    b808:	f10a 0220 	add.w	r2, sl, #32
    b80c:	e703      	b.n	b616 <_realloc_r+0x1da>
    b80e:	bf00      	nop
    b810:	1fff0f20 	.word	0x1fff0f20

0000b814 <__cxa_atexit>:
    b814:	4613      	mov	r3, r2
    b816:	460a      	mov	r2, r1
    b818:	4601      	mov	r1, r0
    b81a:	2002      	movs	r0, #2
    b81c:	f000 bc5e 	b.w	c0dc <__register_exitproc>

0000b820 <stdio_exit_handler>:
    b820:	4a02      	ldr	r2, [pc, #8]	; (b82c <stdio_exit_handler+0xc>)
    b822:	4903      	ldr	r1, [pc, #12]	; (b830 <stdio_exit_handler+0x10>)
    b824:	4803      	ldr	r0, [pc, #12]	; (b834 <stdio_exit_handler+0x14>)
    b826:	f000 b8bb 	b.w	b9a0 <_fwalk_sglue>
    b82a:	bf00      	nop
    b82c:	1fff1330 	.word	0x1fff1330
    b830:	0000e7d1 	.word	0x0000e7d1
    b834:	1fff14a8 	.word	0x1fff14a8

0000b838 <cleanup_stdio>:
    b838:	4b0c      	ldr	r3, [pc, #48]	; (b86c <cleanup_stdio+0x34>)
    b83a:	6841      	ldr	r1, [r0, #4]
    b83c:	4299      	cmp	r1, r3
    b83e:	b510      	push	{r4, lr}
    b840:	4604      	mov	r4, r0
    b842:	d001      	beq.n	b848 <cleanup_stdio+0x10>
    b844:	f002 ffc4 	bl	e7d0 <_fclose_r>
    b848:	68a1      	ldr	r1, [r4, #8]
    b84a:	4b09      	ldr	r3, [pc, #36]	; (b870 <cleanup_stdio+0x38>)
    b84c:	4299      	cmp	r1, r3
    b84e:	d002      	beq.n	b856 <cleanup_stdio+0x1e>
    b850:	4620      	mov	r0, r4
    b852:	f002 ffbd 	bl	e7d0 <_fclose_r>
    b856:	68e1      	ldr	r1, [r4, #12]
    b858:	4b06      	ldr	r3, [pc, #24]	; (b874 <cleanup_stdio+0x3c>)
    b85a:	4299      	cmp	r1, r3
    b85c:	d004      	beq.n	b868 <cleanup_stdio+0x30>
    b85e:	4620      	mov	r0, r4
    b860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b864:	f002 bfb4 	b.w	e7d0 <_fclose_r>
    b868:	bd10      	pop	{r4, pc}
    b86a:	bf00      	nop
    b86c:	1fff7c44 	.word	0x1fff7c44
    b870:	1fff7cac 	.word	0x1fff7cac
    b874:	1fff7d14 	.word	0x1fff7d14

0000b878 <global_stdio_init.part.0>:
    b878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b87c:	4c2a      	ldr	r4, [pc, #168]	; (b928 <global_stdio_init.part.0+0xb0>)
    b87e:	4b2b      	ldr	r3, [pc, #172]	; (b92c <global_stdio_init.part.0+0xb4>)
    b880:	482b      	ldr	r0, [pc, #172]	; (b930 <global_stdio_init.part.0+0xb8>)
    b882:	f8df 90c0 	ldr.w	r9, [pc, #192]	; b944 <global_stdio_init.part.0+0xcc>
    b886:	f8df 80c0 	ldr.w	r8, [pc, #192]	; b948 <global_stdio_init.part.0+0xd0>
    b88a:	4f2a      	ldr	r7, [pc, #168]	; (b934 <global_stdio_init.part.0+0xbc>)
    b88c:	6018      	str	r0, [r3, #0]
    b88e:	2500      	movs	r5, #0
    b890:	2304      	movs	r3, #4
    b892:	2208      	movs	r2, #8
    b894:	4629      	mov	r1, r5
    b896:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    b89a:	4e27      	ldr	r6, [pc, #156]	; (b938 <global_stdio_init.part.0+0xc0>)
    b89c:	6665      	str	r5, [r4, #100]	; 0x64
    b89e:	e9c4 5302 	strd	r5, r3, [r4, #8]
    b8a2:	e9c4 5500 	strd	r5, r5, [r4]
    b8a6:	e9c4 5504 	strd	r5, r5, [r4, #16]
    b8aa:	61a5      	str	r5, [r4, #24]
    b8ac:	f000 fa14 	bl	bcd8 <memset>
    b8b0:	4b22      	ldr	r3, [pc, #136]	; (b93c <global_stdio_init.part.0+0xc4>)
    b8b2:	6763      	str	r3, [r4, #116]	; 0x74
    b8b4:	2208      	movs	r2, #8
    b8b6:	4629      	mov	r1, r5
    b8b8:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    b8bc:	e9c4 4907 	strd	r4, r9, [r4, #28]
    b8c0:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    b8c4:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    b8c8:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    b8cc:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    b8d0:	6725      	str	r5, [r4, #112]	; 0x70
    b8d2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    b8d6:	62e6      	str	r6, [r4, #44]	; 0x2c
    b8d8:	f000 f9fe 	bl	bcd8 <memset>
    b8dc:	4b18      	ldr	r3, [pc, #96]	; (b940 <global_stdio_init.part.0+0xc8>)
    b8de:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    b8e2:	4629      	mov	r1, r5
    b8e4:	f104 0368 	add.w	r3, r4, #104	; 0x68
    b8e8:	2208      	movs	r2, #8
    b8ea:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    b8ee:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    b8f2:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    b8f6:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    b8fa:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    b8fe:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    b902:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    b906:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    b90a:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    b90e:	f000 f9e3 	bl	bcd8 <memset>
    b912:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    b916:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    b91a:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    b91e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    b922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b926:	bf00      	nop
    b928:	1fff7c44 	.word	0x1fff7c44
    b92c:	1fff7d7c 	.word	0x1fff7d7c
    b930:	0000b821 	.word	0x0000b821
    b934:	0000ba8d 	.word	0x0000ba8d
    b938:	0000baad 	.word	0x0000baad
    b93c:	00010009 	.word	0x00010009
    b940:	00020012 	.word	0x00020012
    b944:	0000ba29 	.word	0x0000ba29
    b948:	0000ba4d 	.word	0x0000ba4d

0000b94c <__sinit>:
    b94c:	b510      	push	{r4, lr}
    b94e:	4604      	mov	r4, r0
    b950:	480a      	ldr	r0, [pc, #40]	; (b97c <__sinit+0x30>)
    b952:	f000 fadf 	bl	bf14 <__retarget_lock_acquire_recursive>
    b956:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b958:	b923      	cbnz	r3, b964 <__sinit+0x18>
    b95a:	4b09      	ldr	r3, [pc, #36]	; (b980 <__sinit+0x34>)
    b95c:	4a09      	ldr	r2, [pc, #36]	; (b984 <__sinit+0x38>)
    b95e:	681b      	ldr	r3, [r3, #0]
    b960:	6362      	str	r2, [r4, #52]	; 0x34
    b962:	b123      	cbz	r3, b96e <__sinit+0x22>
    b964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b968:	4804      	ldr	r0, [pc, #16]	; (b97c <__sinit+0x30>)
    b96a:	f000 bad5 	b.w	bf18 <__retarget_lock_release_recursive>
    b96e:	f7ff ff83 	bl	b878 <global_stdio_init.part.0>
    b972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b976:	4801      	ldr	r0, [pc, #4]	; (b97c <__sinit+0x30>)
    b978:	f000 bace 	b.w	bf18 <__retarget_lock_release_recursive>
    b97c:	1fff7d8c 	.word	0x1fff7d8c
    b980:	1fff7d7c 	.word	0x1fff7d7c
    b984:	0000b839 	.word	0x0000b839

0000b988 <__sfp_lock_acquire>:
    b988:	4801      	ldr	r0, [pc, #4]	; (b990 <__sfp_lock_acquire+0x8>)
    b98a:	f000 bac3 	b.w	bf14 <__retarget_lock_acquire_recursive>
    b98e:	bf00      	nop
    b990:	1fff7d8c 	.word	0x1fff7d8c

0000b994 <__sfp_lock_release>:
    b994:	4801      	ldr	r0, [pc, #4]	; (b99c <__sfp_lock_release+0x8>)
    b996:	f000 babf 	b.w	bf18 <__retarget_lock_release_recursive>
    b99a:	bf00      	nop
    b99c:	1fff7d8c 	.word	0x1fff7d8c

0000b9a0 <_fwalk_sglue>:
    b9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b9a4:	4680      	mov	r8, r0
    b9a6:	460f      	mov	r7, r1
    b9a8:	4616      	mov	r6, r2
    b9aa:	f04f 0900 	mov.w	r9, #0
    b9ae:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    b9b2:	3d01      	subs	r5, #1
    b9b4:	d411      	bmi.n	b9da <_fwalk_sglue+0x3a>
    b9b6:	89a3      	ldrh	r3, [r4, #12]
    b9b8:	2b01      	cmp	r3, #1
    b9ba:	f105 35ff 	add.w	r5, r5, #4294967295
    b9be:	d908      	bls.n	b9d2 <_fwalk_sglue+0x32>
    b9c0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    b9c4:	3301      	adds	r3, #1
    b9c6:	4621      	mov	r1, r4
    b9c8:	d003      	beq.n	b9d2 <_fwalk_sglue+0x32>
    b9ca:	4640      	mov	r0, r8
    b9cc:	47b8      	blx	r7
    b9ce:	ea49 0900 	orr.w	r9, r9, r0
    b9d2:	1c6b      	adds	r3, r5, #1
    b9d4:	f104 0468 	add.w	r4, r4, #104	; 0x68
    b9d8:	d1ed      	bne.n	b9b6 <_fwalk_sglue+0x16>
    b9da:	6836      	ldr	r6, [r6, #0]
    b9dc:	2e00      	cmp	r6, #0
    b9de:	d1e6      	bne.n	b9ae <_fwalk_sglue+0xe>
    b9e0:	4648      	mov	r0, r9
    b9e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b9e6:	bf00      	nop

0000b9e8 <sprintf>:
    b9e8:	b40e      	push	{r1, r2, r3}
    b9ea:	b510      	push	{r4, lr}
    b9ec:	b09d      	sub	sp, #116	; 0x74
    b9ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b9f2:	ab1f      	add	r3, sp, #124	; 0x7c
    b9f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
    b9f8:	9104      	str	r1, [sp, #16]
    b9fa:	4909      	ldr	r1, [pc, #36]	; (ba20 <sprintf+0x38>)
    b9fc:	f853 2b04 	ldr.w	r2, [r3], #4
    ba00:	9002      	str	r0, [sp, #8]
    ba02:	4c08      	ldr	r4, [pc, #32]	; (ba24 <sprintf+0x3c>)
    ba04:	6808      	ldr	r0, [r1, #0]
    ba06:	9301      	str	r3, [sp, #4]
    ba08:	a902      	add	r1, sp, #8
    ba0a:	9405      	str	r4, [sp, #20]
    ba0c:	f001 f8f0 	bl	cbf0 <_svfprintf_r>
    ba10:	9b02      	ldr	r3, [sp, #8]
    ba12:	2200      	movs	r2, #0
    ba14:	701a      	strb	r2, [r3, #0]
    ba16:	b01d      	add	sp, #116	; 0x74
    ba18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ba1c:	b003      	add	sp, #12
    ba1e:	4770      	bx	lr
    ba20:	1fff15c8 	.word	0x1fff15c8
    ba24:	ffff0208 	.word	0xffff0208

0000ba28 <__sread>:
    ba28:	b510      	push	{r4, lr}
    ba2a:	460c      	mov	r4, r1
    ba2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    ba30:	f000 fa04 	bl	be3c <_read_r>
    ba34:	2800      	cmp	r0, #0
    ba36:	db03      	blt.n	ba40 <__sread+0x18>
    ba38:	6d23      	ldr	r3, [r4, #80]	; 0x50
    ba3a:	4403      	add	r3, r0
    ba3c:	6523      	str	r3, [r4, #80]	; 0x50
    ba3e:	bd10      	pop	{r4, pc}
    ba40:	89a3      	ldrh	r3, [r4, #12]
    ba42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    ba46:	81a3      	strh	r3, [r4, #12]
    ba48:	bd10      	pop	{r4, pc}
    ba4a:	bf00      	nop

0000ba4c <__swrite>:
    ba4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba50:	460c      	mov	r4, r1
    ba52:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    ba56:	461f      	mov	r7, r3
    ba58:	05cb      	lsls	r3, r1, #23
    ba5a:	4605      	mov	r5, r0
    ba5c:	4616      	mov	r6, r2
    ba5e:	d40b      	bmi.n	ba78 <__swrite+0x2c>
    ba60:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    ba64:	81a1      	strh	r1, [r4, #12]
    ba66:	463b      	mov	r3, r7
    ba68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    ba6c:	4632      	mov	r2, r6
    ba6e:	4628      	mov	r0, r5
    ba70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ba74:	f000 ba0a 	b.w	be8c <_write_r>
    ba78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    ba7c:	2302      	movs	r3, #2
    ba7e:	2200      	movs	r2, #0
    ba80:	f000 f9c6 	bl	be10 <_lseek_r>
    ba84:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    ba88:	e7ea      	b.n	ba60 <__swrite+0x14>
    ba8a:	bf00      	nop

0000ba8c <__sseek>:
    ba8c:	b510      	push	{r4, lr}
    ba8e:	460c      	mov	r4, r1
    ba90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    ba94:	f000 f9bc 	bl	be10 <_lseek_r>
    ba98:	89a3      	ldrh	r3, [r4, #12]
    ba9a:	1c42      	adds	r2, r0, #1
    ba9c:	bf0e      	itee	eq
    ba9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    baa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    baa6:	6520      	strne	r0, [r4, #80]	; 0x50
    baa8:	81a3      	strh	r3, [r4, #12]
    baaa:	bd10      	pop	{r4, pc}

0000baac <__sclose>:
    baac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    bab0:	f000 b99c 	b.w	bdec <_close_r>

0000bab4 <_vdprintf_r>:
    bab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bab6:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    baba:	af04      	add	r7, sp, #16
    babc:	9300      	str	r3, [sp, #0]
    babe:	4613      	mov	r3, r2
    bac0:	f44f 7200 	mov.w	r2, #512	; 0x200
    bac4:	460e      	mov	r6, r1
    bac6:	9203      	str	r2, [sp, #12]
    bac8:	4639      	mov	r1, r7
    baca:	aa03      	add	r2, sp, #12
    bacc:	4605      	mov	r5, r0
    bace:	f000 f825 	bl	bb1c <_vasnprintf_r>
    bad2:	b188      	cbz	r0, baf8 <_vdprintf_r+0x44>
    bad4:	4604      	mov	r4, r0
    bad6:	4602      	mov	r2, r0
    bad8:	9b03      	ldr	r3, [sp, #12]
    bada:	4631      	mov	r1, r6
    badc:	4628      	mov	r0, r5
    bade:	f000 f9d5 	bl	be8c <_write_r>
    bae2:	42bc      	cmp	r4, r7
    bae4:	9003      	str	r0, [sp, #12]
    bae6:	d004      	beq.n	baf2 <_vdprintf_r+0x3e>
    bae8:	4628      	mov	r0, r5
    baea:	4621      	mov	r1, r4
    baec:	f000 fb9a 	bl	c224 <_free_r>
    baf0:	9803      	ldr	r0, [sp, #12]
    baf2:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    baf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    baf8:	f04f 30ff 	mov.w	r0, #4294967295
    bafc:	e7f9      	b.n	baf2 <_vdprintf_r+0x3e>
    bafe:	bf00      	nop

0000bb00 <vdprintf>:
    bb00:	b410      	push	{r4}
    bb02:	4c05      	ldr	r4, [pc, #20]	; (bb18 <vdprintf+0x18>)
    bb04:	4684      	mov	ip, r0
    bb06:	4613      	mov	r3, r2
    bb08:	6820      	ldr	r0, [r4, #0]
    bb0a:	f85d 4b04 	ldr.w	r4, [sp], #4
    bb0e:	460a      	mov	r2, r1
    bb10:	4661      	mov	r1, ip
    bb12:	f7ff bfcf 	b.w	bab4 <_vdprintf_r>
    bb16:	bf00      	nop
    bb18:	1fff15c8 	.word	0x1fff15c8

0000bb1c <_vasnprintf_r>:
    bb1c:	b530      	push	{r4, r5, lr}
    bb1e:	6814      	ldr	r4, [r2, #0]
    bb20:	4615      	mov	r5, r2
    bb22:	b09b      	sub	sp, #108	; 0x6c
    bb24:	461a      	mov	r2, r3
    bb26:	b109      	cbz	r1, bb2c <_vasnprintf_r+0x10>
    bb28:	2c00      	cmp	r4, #0
    bb2a:	d119      	bne.n	bb60 <_vasnprintf_r+0x44>
    bb2c:	2100      	movs	r1, #0
    bb2e:	f44f 7322 	mov.w	r3, #648	; 0x288
    bb32:	f8ad 300c 	strh.w	r3, [sp, #12]
    bb36:	9100      	str	r1, [sp, #0]
    bb38:	9104      	str	r1, [sp, #16]
    bb3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    bb3e:	9102      	str	r1, [sp, #8]
    bb40:	9105      	str	r1, [sp, #20]
    bb42:	f8ad 300e 	strh.w	r3, [sp, #14]
    bb46:	4669      	mov	r1, sp
    bb48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    bb4a:	f001 f851 	bl	cbf0 <_svfprintf_r>
    bb4e:	2800      	cmp	r0, #0
    bb50:	db13      	blt.n	bb7a <_vasnprintf_r+0x5e>
    bb52:	9b00      	ldr	r3, [sp, #0]
    bb54:	6028      	str	r0, [r5, #0]
    bb56:	2200      	movs	r2, #0
    bb58:	701a      	strb	r2, [r3, #0]
    bb5a:	9804      	ldr	r0, [sp, #16]
    bb5c:	b01b      	add	sp, #108	; 0x6c
    bb5e:	bd30      	pop	{r4, r5, pc}
    bb60:	f44f 63c1 	mov.w	r3, #1544	; 0x608
    bb64:	9100      	str	r1, [sp, #0]
    bb66:	9104      	str	r1, [sp, #16]
    bb68:	f8ad 300c 	strh.w	r3, [sp, #12]
    bb6c:	4621      	mov	r1, r4
    bb6e:	dae4      	bge.n	bb3a <_vasnprintf_r+0x1e>
    bb70:	238b      	movs	r3, #139	; 0x8b
    bb72:	6003      	str	r3, [r0, #0]
    bb74:	2000      	movs	r0, #0
    bb76:	b01b      	add	sp, #108	; 0x6c
    bb78:	bd30      	pop	{r4, r5, pc}
    bb7a:	2000      	movs	r0, #0
    bb7c:	e7ee      	b.n	bb5c <_vasnprintf_r+0x40>
    bb7e:	bf00      	nop

0000bb80 <memcmp>:
    bb80:	2a03      	cmp	r2, #3
    bb82:	b570      	push	{r4, r5, r6, lr}
    bb84:	d914      	bls.n	bbb0 <memcmp+0x30>
    bb86:	ea40 0301 	orr.w	r3, r0, r1
    bb8a:	079b      	lsls	r3, r3, #30
    bb8c:	d122      	bne.n	bbd4 <memcmp+0x54>
    bb8e:	4604      	mov	r4, r0
    bb90:	460b      	mov	r3, r1
    bb92:	4619      	mov	r1, r3
    bb94:	4620      	mov	r0, r4
    bb96:	680e      	ldr	r6, [r1, #0]
    bb98:	6805      	ldr	r5, [r0, #0]
    bb9a:	42b5      	cmp	r5, r6
    bb9c:	f104 0404 	add.w	r4, r4, #4
    bba0:	f103 0304 	add.w	r3, r3, #4
    bba4:	d116      	bne.n	bbd4 <memcmp+0x54>
    bba6:	3a04      	subs	r2, #4
    bba8:	2a03      	cmp	r2, #3
    bbaa:	4620      	mov	r0, r4
    bbac:	4619      	mov	r1, r3
    bbae:	d8f0      	bhi.n	bb92 <memcmp+0x12>
    bbb0:	1e54      	subs	r4, r2, #1
    bbb2:	b19a      	cbz	r2, bbdc <memcmp+0x5c>
    bbb4:	1e42      	subs	r2, r0, #1
    bbb6:	3901      	subs	r1, #1
    bbb8:	e001      	b.n	bbbe <memcmp+0x3e>
    bbba:	18c3      	adds	r3, r0, r3
    bbbc:	d00c      	beq.n	bbd8 <memcmp+0x58>
    bbbe:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    bbc2:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    bbc6:	45e6      	cmp	lr, ip
    bbc8:	eba4 0302 	sub.w	r3, r4, r2
    bbcc:	d0f5      	beq.n	bbba <memcmp+0x3a>
    bbce:	ebae 000c 	sub.w	r0, lr, ip
    bbd2:	bd70      	pop	{r4, r5, r6, pc}
    bbd4:	1e54      	subs	r4, r2, #1
    bbd6:	e7ed      	b.n	bbb4 <memcmp+0x34>
    bbd8:	4618      	mov	r0, r3
    bbda:	bd70      	pop	{r4, r5, r6, pc}
    bbdc:	4610      	mov	r0, r2
    bbde:	bd70      	pop	{r4, r5, r6, pc}

0000bbe0 <memmove>:
    bbe0:	4288      	cmp	r0, r1
    bbe2:	d90d      	bls.n	bc00 <memmove+0x20>
    bbe4:	188b      	adds	r3, r1, r2
    bbe6:	4283      	cmp	r3, r0
    bbe8:	d90a      	bls.n	bc00 <memmove+0x20>
    bbea:	eb00 0c02 	add.w	ip, r0, r2
    bbee:	b1ba      	cbz	r2, bc20 <memmove+0x40>
    bbf0:	4662      	mov	r2, ip
    bbf2:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    bbf6:	f802 cd01 	strb.w	ip, [r2, #-1]!
    bbfa:	4299      	cmp	r1, r3
    bbfc:	d1f9      	bne.n	bbf2 <memmove+0x12>
    bbfe:	4770      	bx	lr
    bc00:	2a0f      	cmp	r2, #15
    bc02:	d80e      	bhi.n	bc22 <memmove+0x42>
    bc04:	4603      	mov	r3, r0
    bc06:	f102 3cff 	add.w	ip, r2, #4294967295
    bc0a:	b14a      	cbz	r2, bc20 <memmove+0x40>
    bc0c:	f10c 0c01 	add.w	ip, ip, #1
    bc10:	3b01      	subs	r3, #1
    bc12:	448c      	add	ip, r1
    bc14:	f811 2b01 	ldrb.w	r2, [r1], #1
    bc18:	f803 2f01 	strb.w	r2, [r3, #1]!
    bc1c:	4561      	cmp	r1, ip
    bc1e:	d1f9      	bne.n	bc14 <memmove+0x34>
    bc20:	4770      	bx	lr
    bc22:	ea40 0301 	orr.w	r3, r0, r1
    bc26:	079b      	lsls	r3, r3, #30
    bc28:	d150      	bne.n	bccc <memmove+0xec>
    bc2a:	f1a2 0310 	sub.w	r3, r2, #16
    bc2e:	b570      	push	{r4, r5, r6, lr}
    bc30:	f101 0c20 	add.w	ip, r1, #32
    bc34:	f023 050f 	bic.w	r5, r3, #15
    bc38:	f101 0e10 	add.w	lr, r1, #16
    bc3c:	f100 0410 	add.w	r4, r0, #16
    bc40:	44ac      	add	ip, r5
    bc42:	091b      	lsrs	r3, r3, #4
    bc44:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    bc48:	f844 5c10 	str.w	r5, [r4, #-16]
    bc4c:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    bc50:	f844 5c0c 	str.w	r5, [r4, #-12]
    bc54:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    bc58:	f844 5c08 	str.w	r5, [r4, #-8]
    bc5c:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    bc60:	f844 5c04 	str.w	r5, [r4, #-4]
    bc64:	f10e 0e10 	add.w	lr, lr, #16
    bc68:	45e6      	cmp	lr, ip
    bc6a:	f104 0410 	add.w	r4, r4, #16
    bc6e:	d1e9      	bne.n	bc44 <memmove+0x64>
    bc70:	3301      	adds	r3, #1
    bc72:	f012 0f0c 	tst.w	r2, #12
    bc76:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    bc7a:	f002 040f 	and.w	r4, r2, #15
    bc7e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    bc82:	d027      	beq.n	bcd4 <memmove+0xf4>
    bc84:	3c04      	subs	r4, #4
    bc86:	f024 0603 	bic.w	r6, r4, #3
    bc8a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    bc8e:	441e      	add	r6, r3
    bc90:	1f1c      	subs	r4, r3, #4
    bc92:	468e      	mov	lr, r1
    bc94:	f85e 5b04 	ldr.w	r5, [lr], #4
    bc98:	f844 5f04 	str.w	r5, [r4, #4]!
    bc9c:	42b4      	cmp	r4, r6
    bc9e:	d1f9      	bne.n	bc94 <memmove+0xb4>
    bca0:	f10c 0401 	add.w	r4, ip, #1
    bca4:	f002 0203 	and.w	r2, r2, #3
    bca8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    bcac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    bcb0:	f102 3cff 	add.w	ip, r2, #4294967295
    bcb4:	b14a      	cbz	r2, bcca <memmove+0xea>
    bcb6:	f10c 0c01 	add.w	ip, ip, #1
    bcba:	3b01      	subs	r3, #1
    bcbc:	448c      	add	ip, r1
    bcbe:	f811 2b01 	ldrb.w	r2, [r1], #1
    bcc2:	f803 2f01 	strb.w	r2, [r3, #1]!
    bcc6:	4561      	cmp	r1, ip
    bcc8:	d1f9      	bne.n	bcbe <memmove+0xde>
    bcca:	bd70      	pop	{r4, r5, r6, pc}
    bccc:	f102 3cff 	add.w	ip, r2, #4294967295
    bcd0:	4603      	mov	r3, r0
    bcd2:	e79b      	b.n	bc0c <memmove+0x2c>
    bcd4:	4622      	mov	r2, r4
    bcd6:	e7eb      	b.n	bcb0 <memmove+0xd0>

0000bcd8 <memset>:
    bcd8:	0783      	lsls	r3, r0, #30
    bcda:	b530      	push	{r4, r5, lr}
    bcdc:	d048      	beq.n	bd70 <memset+0x98>
    bcde:	1e54      	subs	r4, r2, #1
    bce0:	2a00      	cmp	r2, #0
    bce2:	d03f      	beq.n	bd64 <memset+0x8c>
    bce4:	b2ca      	uxtb	r2, r1
    bce6:	4603      	mov	r3, r0
    bce8:	e001      	b.n	bcee <memset+0x16>
    bcea:	3c01      	subs	r4, #1
    bcec:	d33a      	bcc.n	bd64 <memset+0x8c>
    bcee:	f803 2b01 	strb.w	r2, [r3], #1
    bcf2:	079d      	lsls	r5, r3, #30
    bcf4:	d1f9      	bne.n	bcea <memset+0x12>
    bcf6:	2c03      	cmp	r4, #3
    bcf8:	d92d      	bls.n	bd56 <memset+0x7e>
    bcfa:	b2cd      	uxtb	r5, r1
    bcfc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    bd00:	2c0f      	cmp	r4, #15
    bd02:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    bd06:	d936      	bls.n	bd76 <memset+0x9e>
    bd08:	f1a4 0210 	sub.w	r2, r4, #16
    bd0c:	f022 0c0f 	bic.w	ip, r2, #15
    bd10:	f103 0e20 	add.w	lr, r3, #32
    bd14:	44e6      	add	lr, ip
    bd16:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    bd1a:	f103 0210 	add.w	r2, r3, #16
    bd1e:	e942 5504 	strd	r5, r5, [r2, #-16]
    bd22:	e942 5502 	strd	r5, r5, [r2, #-8]
    bd26:	3210      	adds	r2, #16
    bd28:	4572      	cmp	r2, lr
    bd2a:	d1f8      	bne.n	bd1e <memset+0x46>
    bd2c:	f10c 0201 	add.w	r2, ip, #1
    bd30:	f014 0f0c 	tst.w	r4, #12
    bd34:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    bd38:	f004 0c0f 	and.w	ip, r4, #15
    bd3c:	d013      	beq.n	bd66 <memset+0x8e>
    bd3e:	f1ac 0304 	sub.w	r3, ip, #4
    bd42:	f023 0303 	bic.w	r3, r3, #3
    bd46:	3304      	adds	r3, #4
    bd48:	4413      	add	r3, r2
    bd4a:	f842 5b04 	str.w	r5, [r2], #4
    bd4e:	4293      	cmp	r3, r2
    bd50:	d1fb      	bne.n	bd4a <memset+0x72>
    bd52:	f00c 0403 	and.w	r4, ip, #3
    bd56:	b12c      	cbz	r4, bd64 <memset+0x8c>
    bd58:	b2c9      	uxtb	r1, r1
    bd5a:	441c      	add	r4, r3
    bd5c:	f803 1b01 	strb.w	r1, [r3], #1
    bd60:	429c      	cmp	r4, r3
    bd62:	d1fb      	bne.n	bd5c <memset+0x84>
    bd64:	bd30      	pop	{r4, r5, pc}
    bd66:	4664      	mov	r4, ip
    bd68:	4613      	mov	r3, r2
    bd6a:	2c00      	cmp	r4, #0
    bd6c:	d1f4      	bne.n	bd58 <memset+0x80>
    bd6e:	e7f9      	b.n	bd64 <memset+0x8c>
    bd70:	4603      	mov	r3, r0
    bd72:	4614      	mov	r4, r2
    bd74:	e7bf      	b.n	bcf6 <memset+0x1e>
    bd76:	461a      	mov	r2, r3
    bd78:	46a4      	mov	ip, r4
    bd7a:	e7e0      	b.n	bd3e <memset+0x66>

0000bd7c <strncpy>:
    bd7c:	ea40 0301 	orr.w	r3, r0, r1
    bd80:	079b      	lsls	r3, r3, #30
    bd82:	b530      	push	{r4, r5, lr}
    bd84:	d101      	bne.n	bd8a <strncpy+0xe>
    bd86:	2a03      	cmp	r2, #3
    bd88:	d80f      	bhi.n	bdaa <strncpy+0x2e>
    bd8a:	4684      	mov	ip, r0
    bd8c:	f101 3eff 	add.w	lr, r1, #4294967295
    bd90:	e007      	b.n	bda2 <strncpy+0x26>
    bd92:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    bd96:	f803 1b01 	strb.w	r1, [r3], #1
    bd9a:	1e54      	subs	r4, r2, #1
    bd9c:	b1c1      	cbz	r1, bdd0 <strncpy+0x54>
    bd9e:	469c      	mov	ip, r3
    bda0:	4622      	mov	r2, r4
    bda2:	4663      	mov	r3, ip
    bda4:	2a00      	cmp	r2, #0
    bda6:	d1f4      	bne.n	bd92 <strncpy+0x16>
    bda8:	bd30      	pop	{r4, r5, pc}
    bdaa:	460b      	mov	r3, r1
    bdac:	4684      	mov	ip, r0
    bdae:	4619      	mov	r1, r3
    bdb0:	f853 5b04 	ldr.w	r5, [r3], #4
    bdb4:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    bdb8:	ea24 0405 	bic.w	r4, r4, r5
    bdbc:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    bdc0:	d1e4      	bne.n	bd8c <strncpy+0x10>
    bdc2:	3a04      	subs	r2, #4
    bdc4:	2a03      	cmp	r2, #3
    bdc6:	f84c 5b04 	str.w	r5, [ip], #4
    bdca:	4619      	mov	r1, r3
    bdcc:	d8ef      	bhi.n	bdae <strncpy+0x32>
    bdce:	e7dd      	b.n	bd8c <strncpy+0x10>
    bdd0:	4494      	add	ip, r2
    bdd2:	2c00      	cmp	r4, #0
    bdd4:	d0e8      	beq.n	bda8 <strncpy+0x2c>
    bdd6:	f803 1b01 	strb.w	r1, [r3], #1
    bdda:	4563      	cmp	r3, ip
    bddc:	d1fb      	bne.n	bdd6 <strncpy+0x5a>
    bdde:	bd30      	pop	{r4, r5, pc}

0000bde0 <__locale_mb_cur_max>:
    bde0:	4b01      	ldr	r3, [pc, #4]	; (bde8 <__locale_mb_cur_max+0x8>)
    bde2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    bde6:	4770      	bx	lr
    bde8:	1fff133c 	.word	0x1fff133c

0000bdec <_close_r>:
    bdec:	b538      	push	{r3, r4, r5, lr}
    bdee:	4d07      	ldr	r5, [pc, #28]	; (be0c <_close_r+0x20>)
    bdf0:	2200      	movs	r2, #0
    bdf2:	4604      	mov	r4, r0
    bdf4:	4608      	mov	r0, r1
    bdf6:	602a      	str	r2, [r5, #0]
    bdf8:	f7fd f996 	bl	9128 <_close>
    bdfc:	1c43      	adds	r3, r0, #1
    bdfe:	d000      	beq.n	be02 <_close_r+0x16>
    be00:	bd38      	pop	{r3, r4, r5, pc}
    be02:	682b      	ldr	r3, [r5, #0]
    be04:	2b00      	cmp	r3, #0
    be06:	d0fb      	beq.n	be00 <_close_r+0x14>
    be08:	6023      	str	r3, [r4, #0]
    be0a:	bd38      	pop	{r3, r4, r5, pc}
    be0c:	1fff7d80 	.word	0x1fff7d80

0000be10 <_lseek_r>:
    be10:	b538      	push	{r3, r4, r5, lr}
    be12:	460c      	mov	r4, r1
    be14:	4d08      	ldr	r5, [pc, #32]	; (be38 <_lseek_r+0x28>)
    be16:	4684      	mov	ip, r0
    be18:	4611      	mov	r1, r2
    be1a:	4620      	mov	r0, r4
    be1c:	461a      	mov	r2, r3
    be1e:	2300      	movs	r3, #0
    be20:	602b      	str	r3, [r5, #0]
    be22:	4664      	mov	r4, ip
    be24:	f7fd f98c 	bl	9140 <_lseek>
    be28:	1c43      	adds	r3, r0, #1
    be2a:	d000      	beq.n	be2e <_lseek_r+0x1e>
    be2c:	bd38      	pop	{r3, r4, r5, pc}
    be2e:	682b      	ldr	r3, [r5, #0]
    be30:	2b00      	cmp	r3, #0
    be32:	d0fb      	beq.n	be2c <_lseek_r+0x1c>
    be34:	6023      	str	r3, [r4, #0]
    be36:	bd38      	pop	{r3, r4, r5, pc}
    be38:	1fff7d80 	.word	0x1fff7d80

0000be3c <_read_r>:
    be3c:	b538      	push	{r3, r4, r5, lr}
    be3e:	460c      	mov	r4, r1
    be40:	4d08      	ldr	r5, [pc, #32]	; (be64 <_read_r+0x28>)
    be42:	4684      	mov	ip, r0
    be44:	4611      	mov	r1, r2
    be46:	4620      	mov	r0, r4
    be48:	461a      	mov	r2, r3
    be4a:	2300      	movs	r3, #0
    be4c:	602b      	str	r3, [r5, #0]
    be4e:	4664      	mov	r4, ip
    be50:	f7fd f968 	bl	9124 <_read>
    be54:	1c43      	adds	r3, r0, #1
    be56:	d000      	beq.n	be5a <_read_r+0x1e>
    be58:	bd38      	pop	{r3, r4, r5, pc}
    be5a:	682b      	ldr	r3, [r5, #0]
    be5c:	2b00      	cmp	r3, #0
    be5e:	d0fb      	beq.n	be58 <_read_r+0x1c>
    be60:	6023      	str	r3, [r4, #0]
    be62:	bd38      	pop	{r3, r4, r5, pc}
    be64:	1fff7d80 	.word	0x1fff7d80

0000be68 <_sbrk_r>:
    be68:	b538      	push	{r3, r4, r5, lr}
    be6a:	4d07      	ldr	r5, [pc, #28]	; (be88 <_sbrk_r+0x20>)
    be6c:	2200      	movs	r2, #0
    be6e:	4604      	mov	r4, r0
    be70:	4608      	mov	r0, r1
    be72:	602a      	str	r2, [r5, #0]
    be74:	f7fd f93c 	bl	90f0 <_sbrk>
    be78:	1c43      	adds	r3, r0, #1
    be7a:	d000      	beq.n	be7e <_sbrk_r+0x16>
    be7c:	bd38      	pop	{r3, r4, r5, pc}
    be7e:	682b      	ldr	r3, [r5, #0]
    be80:	2b00      	cmp	r3, #0
    be82:	d0fb      	beq.n	be7c <_sbrk_r+0x14>
    be84:	6023      	str	r3, [r4, #0]
    be86:	bd38      	pop	{r3, r4, r5, pc}
    be88:	1fff7d80 	.word	0x1fff7d80

0000be8c <_write_r>:
    be8c:	b538      	push	{r3, r4, r5, lr}
    be8e:	460c      	mov	r4, r1
    be90:	4d08      	ldr	r5, [pc, #32]	; (beb4 <_write_r+0x28>)
    be92:	4684      	mov	ip, r0
    be94:	4611      	mov	r1, r2
    be96:	4620      	mov	r0, r4
    be98:	461a      	mov	r2, r3
    be9a:	2300      	movs	r3, #0
    be9c:	602b      	str	r3, [r5, #0]
    be9e:	4664      	mov	r4, ip
    bea0:	f7fc ff90 	bl	8dc4 <_write>
    bea4:	1c43      	adds	r3, r0, #1
    bea6:	d000      	beq.n	beaa <_write_r+0x1e>
    bea8:	bd38      	pop	{r3, r4, r5, pc}
    beaa:	682b      	ldr	r3, [r5, #0]
    beac:	2b00      	cmp	r3, #0
    beae:	d0fb      	beq.n	bea8 <_write_r+0x1c>
    beb0:	6023      	str	r3, [r4, #0]
    beb2:	bd38      	pop	{r3, r4, r5, pc}
    beb4:	1fff7d80 	.word	0x1fff7d80

0000beb8 <__errno>:
    beb8:	4b01      	ldr	r3, [pc, #4]	; (bec0 <__errno+0x8>)
    beba:	6818      	ldr	r0, [r3, #0]
    bebc:	4770      	bx	lr
    bebe:	bf00      	nop
    bec0:	1fff15c8 	.word	0x1fff15c8

0000bec4 <__libc_init_array>:
    bec4:	b570      	push	{r4, r5, r6, lr}
    bec6:	4e0d      	ldr	r6, [pc, #52]	; (befc <__libc_init_array+0x38>)
    bec8:	4d0d      	ldr	r5, [pc, #52]	; (bf00 <__libc_init_array+0x3c>)
    beca:	1b76      	subs	r6, r6, r5
    becc:	10b6      	asrs	r6, r6, #2
    bece:	d006      	beq.n	bede <__libc_init_array+0x1a>
    bed0:	2400      	movs	r4, #0
    bed2:	f855 3b04 	ldr.w	r3, [r5], #4
    bed6:	3401      	adds	r4, #1
    bed8:	4798      	blx	r3
    beda:	42a6      	cmp	r6, r4
    bedc:	d1f9      	bne.n	bed2 <__libc_init_array+0xe>
    bede:	4e09      	ldr	r6, [pc, #36]	; (bf04 <__libc_init_array+0x40>)
    bee0:	4d09      	ldr	r5, [pc, #36]	; (bf08 <__libc_init_array+0x44>)
    bee2:	1b76      	subs	r6, r6, r5
    bee4:	f006 fbc2 	bl	1266c <_init>
    bee8:	10b6      	asrs	r6, r6, #2
    beea:	d006      	beq.n	befa <__libc_init_array+0x36>
    beec:	2400      	movs	r4, #0
    beee:	f855 3b04 	ldr.w	r3, [r5], #4
    bef2:	3401      	adds	r4, #1
    bef4:	4798      	blx	r3
    bef6:	42a6      	cmp	r6, r4
    bef8:	d1f9      	bne.n	beee <__libc_init_array+0x2a>
    befa:	bd70      	pop	{r4, r5, r6, pc}
    befc:	00012678 	.word	0x00012678
    bf00:	00012678 	.word	0x00012678
    bf04:	00012694 	.word	0x00012694
    bf08:	00012678 	.word	0x00012678

0000bf0c <__retarget_lock_init_recursive>:
    bf0c:	4770      	bx	lr
    bf0e:	bf00      	nop

0000bf10 <__retarget_lock_close_recursive>:
    bf10:	4770      	bx	lr
    bf12:	bf00      	nop

0000bf14 <__retarget_lock_acquire_recursive>:
    bf14:	4770      	bx	lr
    bf16:	bf00      	nop

0000bf18 <__retarget_lock_release_recursive>:
    bf18:	4770      	bx	lr
    bf1a:	bf00      	nop

0000bf1c <strcpy>:
    bf1c:	ea80 0201 	eor.w	r2, r0, r1
    bf20:	4684      	mov	ip, r0
    bf22:	f012 0f03 	tst.w	r2, #3
    bf26:	d14f      	bne.n	bfc8 <strcpy+0xac>
    bf28:	f011 0f03 	tst.w	r1, #3
    bf2c:	d132      	bne.n	bf94 <strcpy+0x78>
    bf2e:	f84d 4d04 	str.w	r4, [sp, #-4]!
    bf32:	f011 0f04 	tst.w	r1, #4
    bf36:	f851 3b04 	ldr.w	r3, [r1], #4
    bf3a:	d00b      	beq.n	bf54 <strcpy+0x38>
    bf3c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    bf40:	439a      	bics	r2, r3
    bf42:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    bf46:	bf04      	itt	eq
    bf48:	f84c 3b04 	streq.w	r3, [ip], #4
    bf4c:	f851 3b04 	ldreq.w	r3, [r1], #4
    bf50:	d116      	bne.n	bf80 <strcpy+0x64>
    bf52:	bf00      	nop
    bf54:	f851 4b04 	ldr.w	r4, [r1], #4
    bf58:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    bf5c:	439a      	bics	r2, r3
    bf5e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    bf62:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    bf66:	d10b      	bne.n	bf80 <strcpy+0x64>
    bf68:	f84c 3b04 	str.w	r3, [ip], #4
    bf6c:	43a2      	bics	r2, r4
    bf6e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    bf72:	bf04      	itt	eq
    bf74:	f851 3b04 	ldreq.w	r3, [r1], #4
    bf78:	f84c 4b04 	streq.w	r4, [ip], #4
    bf7c:	d0ea      	beq.n	bf54 <strcpy+0x38>
    bf7e:	4623      	mov	r3, r4
    bf80:	f80c 3b01 	strb.w	r3, [ip], #1
    bf84:	f013 0fff 	tst.w	r3, #255	; 0xff
    bf88:	ea4f 2333 	mov.w	r3, r3, ror #8
    bf8c:	d1f8      	bne.n	bf80 <strcpy+0x64>
    bf8e:	f85d 4b04 	ldr.w	r4, [sp], #4
    bf92:	4770      	bx	lr
    bf94:	f011 0f01 	tst.w	r1, #1
    bf98:	d006      	beq.n	bfa8 <strcpy+0x8c>
    bf9a:	f811 2b01 	ldrb.w	r2, [r1], #1
    bf9e:	f80c 2b01 	strb.w	r2, [ip], #1
    bfa2:	2a00      	cmp	r2, #0
    bfa4:	bf08      	it	eq
    bfa6:	4770      	bxeq	lr
    bfa8:	f011 0f02 	tst.w	r1, #2
    bfac:	d0bf      	beq.n	bf2e <strcpy+0x12>
    bfae:	f831 2b02 	ldrh.w	r2, [r1], #2
    bfb2:	f012 0fff 	tst.w	r2, #255	; 0xff
    bfb6:	bf16      	itet	ne
    bfb8:	f82c 2b02 	strhne.w	r2, [ip], #2
    bfbc:	f88c 2000 	strbeq.w	r2, [ip]
    bfc0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    bfc4:	d1b3      	bne.n	bf2e <strcpy+0x12>
    bfc6:	4770      	bx	lr
    bfc8:	f811 2b01 	ldrb.w	r2, [r1], #1
    bfcc:	f80c 2b01 	strb.w	r2, [ip], #1
    bfd0:	2a00      	cmp	r2, #0
    bfd2:	d1f9      	bne.n	bfc8 <strcpy+0xac>
    bfd4:	4770      	bx	lr
    bfd6:	bf00      	nop
    bfd8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    bfdc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    bfe0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    bfe4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    bfe8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    bfec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    bff0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    bff4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    bff8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    bffc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

0000c000 <strlen>:
    c000:	f890 f000 	pld	[r0]
    c004:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    c008:	f020 0107 	bic.w	r1, r0, #7
    c00c:	f06f 0c00 	mvn.w	ip, #0
    c010:	f010 0407 	ands.w	r4, r0, #7
    c014:	f891 f020 	pld	[r1, #32]
    c018:	f040 8049 	bne.w	c0ae <strlen+0xae>
    c01c:	f04f 0400 	mov.w	r4, #0
    c020:	f06f 0007 	mvn.w	r0, #7
    c024:	e9d1 2300 	ldrd	r2, r3, [r1]
    c028:	f891 f040 	pld	[r1, #64]	; 0x40
    c02c:	f100 0008 	add.w	r0, r0, #8
    c030:	fa82 f24c 	uadd8	r2, r2, ip
    c034:	faa4 f28c 	sel	r2, r4, ip
    c038:	fa83 f34c 	uadd8	r3, r3, ip
    c03c:	faa2 f38c 	sel	r3, r2, ip
    c040:	bb4b      	cbnz	r3, c096 <strlen+0x96>
    c042:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    c046:	fa82 f24c 	uadd8	r2, r2, ip
    c04a:	f100 0008 	add.w	r0, r0, #8
    c04e:	faa4 f28c 	sel	r2, r4, ip
    c052:	fa83 f34c 	uadd8	r3, r3, ip
    c056:	faa2 f38c 	sel	r3, r2, ip
    c05a:	b9e3      	cbnz	r3, c096 <strlen+0x96>
    c05c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    c060:	fa82 f24c 	uadd8	r2, r2, ip
    c064:	f100 0008 	add.w	r0, r0, #8
    c068:	faa4 f28c 	sel	r2, r4, ip
    c06c:	fa83 f34c 	uadd8	r3, r3, ip
    c070:	faa2 f38c 	sel	r3, r2, ip
    c074:	b97b      	cbnz	r3, c096 <strlen+0x96>
    c076:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    c07a:	f101 0120 	add.w	r1, r1, #32
    c07e:	fa82 f24c 	uadd8	r2, r2, ip
    c082:	f100 0008 	add.w	r0, r0, #8
    c086:	faa4 f28c 	sel	r2, r4, ip
    c08a:	fa83 f34c 	uadd8	r3, r3, ip
    c08e:	faa2 f38c 	sel	r3, r2, ip
    c092:	2b00      	cmp	r3, #0
    c094:	d0c6      	beq.n	c024 <strlen+0x24>
    c096:	2a00      	cmp	r2, #0
    c098:	bf04      	itt	eq
    c09a:	3004      	addeq	r0, #4
    c09c:	461a      	moveq	r2, r3
    c09e:	ba12      	rev	r2, r2
    c0a0:	fab2 f282 	clz	r2, r2
    c0a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    c0a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    c0ac:	4770      	bx	lr
    c0ae:	e9d1 2300 	ldrd	r2, r3, [r1]
    c0b2:	f004 0503 	and.w	r5, r4, #3
    c0b6:	f1c4 0000 	rsb	r0, r4, #0
    c0ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    c0be:	f014 0f04 	tst.w	r4, #4
    c0c2:	f891 f040 	pld	[r1, #64]	; 0x40
    c0c6:	fa0c f505 	lsl.w	r5, ip, r5
    c0ca:	ea62 0205 	orn	r2, r2, r5
    c0ce:	bf1c      	itt	ne
    c0d0:	ea63 0305 	ornne	r3, r3, r5
    c0d4:	4662      	movne	r2, ip
    c0d6:	f04f 0400 	mov.w	r4, #0
    c0da:	e7a9      	b.n	c030 <strlen+0x30>

0000c0dc <__register_exitproc>:
    c0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c0e0:	f8df a07c 	ldr.w	sl, [pc, #124]	; c160 <__register_exitproc+0x84>
    c0e4:	4606      	mov	r6, r0
    c0e6:	f8da 0000 	ldr.w	r0, [sl]
    c0ea:	4698      	mov	r8, r3
    c0ec:	460f      	mov	r7, r1
    c0ee:	4691      	mov	r9, r2
    c0f0:	f7ff ff10 	bl	bf14 <__retarget_lock_acquire_recursive>
    c0f4:	4b18      	ldr	r3, [pc, #96]	; (c158 <__register_exitproc+0x7c>)
    c0f6:	681c      	ldr	r4, [r3, #0]
    c0f8:	b324      	cbz	r4, c144 <__register_exitproc+0x68>
    c0fa:	6865      	ldr	r5, [r4, #4]
    c0fc:	2d1f      	cmp	r5, #31
    c0fe:	dc24      	bgt.n	c14a <__register_exitproc+0x6e>
    c100:	b95e      	cbnz	r6, c11a <__register_exitproc+0x3e>
    c102:	1c6b      	adds	r3, r5, #1
    c104:	3502      	adds	r5, #2
    c106:	f8da 0000 	ldr.w	r0, [sl]
    c10a:	6063      	str	r3, [r4, #4]
    c10c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    c110:	f7ff ff02 	bl	bf18 <__retarget_lock_release_recursive>
    c114:	2000      	movs	r0, #0
    c116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c11a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    c11e:	2301      	movs	r3, #1
    c120:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    c124:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    c128:	40ab      	lsls	r3, r5
    c12a:	431a      	orrs	r2, r3
    c12c:	2e02      	cmp	r6, #2
    c12e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    c132:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    c136:	d1e4      	bne.n	c102 <__register_exitproc+0x26>
    c138:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    c13c:	431a      	orrs	r2, r3
    c13e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    c142:	e7de      	b.n	c102 <__register_exitproc+0x26>
    c144:	4c05      	ldr	r4, [pc, #20]	; (c15c <__register_exitproc+0x80>)
    c146:	601c      	str	r4, [r3, #0]
    c148:	e7d7      	b.n	c0fa <__register_exitproc+0x1e>
    c14a:	f8da 0000 	ldr.w	r0, [sl]
    c14e:	f7ff fee3 	bl	bf18 <__retarget_lock_release_recursive>
    c152:	f04f 30ff 	mov.w	r0, #4294967295
    c156:	e7de      	b.n	c116 <__register_exitproc+0x3a>
    c158:	1fff7f20 	.word	0x1fff7f20
    c15c:	1fff7d90 	.word	0x1fff7d90
    c160:	1fff15cc 	.word	0x1fff15cc

0000c164 <register_fini>:
    c164:	4b02      	ldr	r3, [pc, #8]	; (c170 <register_fini+0xc>)
    c166:	b113      	cbz	r3, c16e <register_fini+0xa>
    c168:	4802      	ldr	r0, [pc, #8]	; (c174 <register_fini+0x10>)
    c16a:	f000 b805 	b.w	c178 <atexit>
    c16e:	4770      	bx	lr
    c170:	00000000 	.word	0x00000000
    c174:	0000ea25 	.word	0x0000ea25

0000c178 <atexit>:
    c178:	2300      	movs	r3, #0
    c17a:	4601      	mov	r1, r0
    c17c:	461a      	mov	r2, r3
    c17e:	4618      	mov	r0, r3
    c180:	f7ff bfac 	b.w	c0dc <__register_exitproc>

0000c184 <_malloc_trim_r>:
    c184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c186:	4f24      	ldr	r7, [pc, #144]	; (c218 <_malloc_trim_r+0x94>)
    c188:	460c      	mov	r4, r1
    c18a:	4606      	mov	r6, r0
    c18c:	f7ff f93e 	bl	b40c <__malloc_lock>
    c190:	68bb      	ldr	r3, [r7, #8]
    c192:	685d      	ldr	r5, [r3, #4]
    c194:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    c198:	310f      	adds	r1, #15
    c19a:	f025 0503 	bic.w	r5, r5, #3
    c19e:	194b      	adds	r3, r1, r5
    c1a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    c1a4:	f023 030f 	bic.w	r3, r3, #15
    c1a8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    c1ac:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    c1b0:	db07      	blt.n	c1c2 <_malloc_trim_r+0x3e>
    c1b2:	2100      	movs	r1, #0
    c1b4:	4630      	mov	r0, r6
    c1b6:	f7ff fe57 	bl	be68 <_sbrk_r>
    c1ba:	68bb      	ldr	r3, [r7, #8]
    c1bc:	442b      	add	r3, r5
    c1be:	4298      	cmp	r0, r3
    c1c0:	d004      	beq.n	c1cc <_malloc_trim_r+0x48>
    c1c2:	4630      	mov	r0, r6
    c1c4:	f7ff f928 	bl	b418 <__malloc_unlock>
    c1c8:	2000      	movs	r0, #0
    c1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c1cc:	4261      	negs	r1, r4
    c1ce:	4630      	mov	r0, r6
    c1d0:	f7ff fe4a 	bl	be68 <_sbrk_r>
    c1d4:	3001      	adds	r0, #1
    c1d6:	d00d      	beq.n	c1f4 <_malloc_trim_r+0x70>
    c1d8:	4a10      	ldr	r2, [pc, #64]	; (c21c <_malloc_trim_r+0x98>)
    c1da:	68bb      	ldr	r3, [r7, #8]
    c1dc:	1b2d      	subs	r5, r5, r4
    c1de:	f045 0501 	orr.w	r5, r5, #1
    c1e2:	605d      	str	r5, [r3, #4]
    c1e4:	6813      	ldr	r3, [r2, #0]
    c1e6:	4630      	mov	r0, r6
    c1e8:	1b1b      	subs	r3, r3, r4
    c1ea:	6013      	str	r3, [r2, #0]
    c1ec:	f7ff f914 	bl	b418 <__malloc_unlock>
    c1f0:	2001      	movs	r0, #1
    c1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c1f4:	2100      	movs	r1, #0
    c1f6:	4630      	mov	r0, r6
    c1f8:	f7ff fe36 	bl	be68 <_sbrk_r>
    c1fc:	68ba      	ldr	r2, [r7, #8]
    c1fe:	1a83      	subs	r3, r0, r2
    c200:	2b0f      	cmp	r3, #15
    c202:	ddde      	ble.n	c1c2 <_malloc_trim_r+0x3e>
    c204:	f043 0301 	orr.w	r3, r3, #1
    c208:	6053      	str	r3, [r2, #4]
    c20a:	4b05      	ldr	r3, [pc, #20]	; (c220 <_malloc_trim_r+0x9c>)
    c20c:	4903      	ldr	r1, [pc, #12]	; (c21c <_malloc_trim_r+0x98>)
    c20e:	681b      	ldr	r3, [r3, #0]
    c210:	1ac0      	subs	r0, r0, r3
    c212:	6008      	str	r0, [r1, #0]
    c214:	e7d5      	b.n	c1c2 <_malloc_trim_r+0x3e>
    c216:	bf00      	nop
    c218:	1fff0f20 	.word	0x1fff0f20
    c21c:	1fff7c10 	.word	0x1fff7c10
    c220:	1fff1328 	.word	0x1fff1328

0000c224 <_free_r>:
    c224:	2900      	cmp	r1, #0
    c226:	d061      	beq.n	c2ec <_free_r+0xc8>
    c228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c22a:	460c      	mov	r4, r1
    c22c:	4606      	mov	r6, r0
    c22e:	f7ff f8ed 	bl	b40c <__malloc_lock>
    c232:	f854 2c04 	ldr.w	r2, [r4, #-4]
    c236:	4f7b      	ldr	r7, [pc, #492]	; (c424 <_free_r+0x200>)
    c238:	f1a4 0508 	sub.w	r5, r4, #8
    c23c:	f022 0101 	bic.w	r1, r2, #1
    c240:	eb05 0c01 	add.w	ip, r5, r1
    c244:	68b8      	ldr	r0, [r7, #8]
    c246:	f8dc 3004 	ldr.w	r3, [ip, #4]
    c24a:	4560      	cmp	r0, ip
    c24c:	f023 0303 	bic.w	r3, r3, #3
    c250:	f000 808b 	beq.w	c36a <_free_r+0x146>
    c254:	07d2      	lsls	r2, r2, #31
    c256:	f8cc 3004 	str.w	r3, [ip, #4]
    c25a:	d432      	bmi.n	c2c2 <_free_r+0x9e>
    c25c:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c260:	1aad      	subs	r5, r5, r2
    c262:	4411      	add	r1, r2
    c264:	68aa      	ldr	r2, [r5, #8]
    c266:	f107 0008 	add.w	r0, r7, #8
    c26a:	4282      	cmp	r2, r0
    c26c:	d06a      	beq.n	c344 <_free_r+0x120>
    c26e:	eb0c 0403 	add.w	r4, ip, r3
    c272:	f8d4 e004 	ldr.w	lr, [r4, #4]
    c276:	68ec      	ldr	r4, [r5, #12]
    c278:	60d4      	str	r4, [r2, #12]
    c27a:	f01e 0f01 	tst.w	lr, #1
    c27e:	60a2      	str	r2, [r4, #8]
    c280:	f000 8097 	beq.w	c3b2 <_free_r+0x18e>
    c284:	f041 0301 	orr.w	r3, r1, #1
    c288:	606b      	str	r3, [r5, #4]
    c28a:	f8cc 1000 	str.w	r1, [ip]
    c28e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c292:	d235      	bcs.n	c300 <_free_r+0xdc>
    c294:	6878      	ldr	r0, [r7, #4]
    c296:	08cb      	lsrs	r3, r1, #3
    c298:	2201      	movs	r2, #1
    c29a:	0949      	lsrs	r1, r1, #5
    c29c:	3301      	adds	r3, #1
    c29e:	408a      	lsls	r2, r1
    c2a0:	4302      	orrs	r2, r0
    c2a2:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    c2a6:	607a      	str	r2, [r7, #4]
    c2a8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    c2ac:	3a08      	subs	r2, #8
    c2ae:	e9c5 1202 	strd	r1, r2, [r5, #8]
    c2b2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    c2b6:	60cd      	str	r5, [r1, #12]
    c2b8:	4630      	mov	r0, r6
    c2ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c2be:	f7ff b8ab 	b.w	b418 <__malloc_unlock>
    c2c2:	eb0c 0203 	add.w	r2, ip, r3
    c2c6:	6852      	ldr	r2, [r2, #4]
    c2c8:	07d0      	lsls	r0, r2, #31
    c2ca:	d410      	bmi.n	c2ee <_free_r+0xca>
    c2cc:	4419      	add	r1, r3
    c2ce:	f107 0008 	add.w	r0, r7, #8
    c2d2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    c2d6:	4283      	cmp	r3, r0
    c2d8:	d073      	beq.n	c3c2 <_free_r+0x19e>
    c2da:	f8dc 200c 	ldr.w	r2, [ip, #12]
    c2de:	60da      	str	r2, [r3, #12]
    c2e0:	6093      	str	r3, [r2, #8]
    c2e2:	f041 0301 	orr.w	r3, r1, #1
    c2e6:	606b      	str	r3, [r5, #4]
    c2e8:	5069      	str	r1, [r5, r1]
    c2ea:	e7d0      	b.n	c28e <_free_r+0x6a>
    c2ec:	4770      	bx	lr
    c2ee:	f041 0301 	orr.w	r3, r1, #1
    c2f2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    c2f6:	f844 3c04 	str.w	r3, [r4, #-4]
    c2fa:	f8cc 1000 	str.w	r1, [ip]
    c2fe:	d3c9      	bcc.n	c294 <_free_r+0x70>
    c300:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    c304:	ea4f 2351 	mov.w	r3, r1, lsr #9
    c308:	d248      	bcs.n	c39c <_free_r+0x178>
    c30a:	098b      	lsrs	r3, r1, #6
    c30c:	f103 0039 	add.w	r0, r3, #57	; 0x39
    c310:	f103 0238 	add.w	r2, r3, #56	; 0x38
    c314:	00c3      	lsls	r3, r0, #3
    c316:	18f8      	adds	r0, r7, r3
    c318:	58fb      	ldr	r3, [r7, r3]
    c31a:	3808      	subs	r0, #8
    c31c:	4298      	cmp	r0, r3
    c31e:	d059      	beq.n	c3d4 <_free_r+0x1b0>
    c320:	685a      	ldr	r2, [r3, #4]
    c322:	f022 0203 	bic.w	r2, r2, #3
    c326:	428a      	cmp	r2, r1
    c328:	d902      	bls.n	c330 <_free_r+0x10c>
    c32a:	689b      	ldr	r3, [r3, #8]
    c32c:	4298      	cmp	r0, r3
    c32e:	d1f7      	bne.n	c320 <_free_r+0xfc>
    c330:	68d8      	ldr	r0, [r3, #12]
    c332:	e9c5 3002 	strd	r3, r0, [r5, #8]
    c336:	6085      	str	r5, [r0, #8]
    c338:	60dd      	str	r5, [r3, #12]
    c33a:	4630      	mov	r0, r6
    c33c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c340:	f7ff b86a 	b.w	b418 <__malloc_unlock>
    c344:	eb0c 0203 	add.w	r2, ip, r3
    c348:	6852      	ldr	r2, [r2, #4]
    c34a:	07d2      	lsls	r2, r2, #31
    c34c:	d463      	bmi.n	c416 <_free_r+0x1f2>
    c34e:	440b      	add	r3, r1
    c350:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    c354:	60ca      	str	r2, [r1, #12]
    c356:	6091      	str	r1, [r2, #8]
    c358:	f043 0201 	orr.w	r2, r3, #1
    c35c:	606a      	str	r2, [r5, #4]
    c35e:	4630      	mov	r0, r6
    c360:	50eb      	str	r3, [r5, r3]
    c362:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c366:	f7ff b857 	b.w	b418 <__malloc_unlock>
    c36a:	440b      	add	r3, r1
    c36c:	07d1      	lsls	r1, r2, #31
    c36e:	d407      	bmi.n	c380 <_free_r+0x15c>
    c370:	f854 2c08 	ldr.w	r2, [r4, #-8]
    c374:	1aad      	subs	r5, r5, r2
    c376:	4413      	add	r3, r2
    c378:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    c37c:	60ca      	str	r2, [r1, #12]
    c37e:	6091      	str	r1, [r2, #8]
    c380:	f043 0201 	orr.w	r2, r3, #1
    c384:	606a      	str	r2, [r5, #4]
    c386:	4a28      	ldr	r2, [pc, #160]	; (c428 <_free_r+0x204>)
    c388:	60bd      	str	r5, [r7, #8]
    c38a:	6812      	ldr	r2, [r2, #0]
    c38c:	429a      	cmp	r2, r3
    c38e:	d893      	bhi.n	c2b8 <_free_r+0x94>
    c390:	4b26      	ldr	r3, [pc, #152]	; (c42c <_free_r+0x208>)
    c392:	4630      	mov	r0, r6
    c394:	6819      	ldr	r1, [r3, #0]
    c396:	f7ff fef5 	bl	c184 <_malloc_trim_r>
    c39a:	e78d      	b.n	c2b8 <_free_r+0x94>
    c39c:	2b14      	cmp	r3, #20
    c39e:	d90a      	bls.n	c3b6 <_free_r+0x192>
    c3a0:	2b54      	cmp	r3, #84	; 0x54
    c3a2:	d81f      	bhi.n	c3e4 <_free_r+0x1c0>
    c3a4:	0b0b      	lsrs	r3, r1, #12
    c3a6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    c3aa:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    c3ae:	00c3      	lsls	r3, r0, #3
    c3b0:	e7b1      	b.n	c316 <_free_r+0xf2>
    c3b2:	4419      	add	r1, r3
    c3b4:	e78d      	b.n	c2d2 <_free_r+0xae>
    c3b6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    c3ba:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    c3be:	00c3      	lsls	r3, r0, #3
    c3c0:	e7a9      	b.n	c316 <_free_r+0xf2>
    c3c2:	f041 0301 	orr.w	r3, r1, #1
    c3c6:	e9c7 5504 	strd	r5, r5, [r7, #16]
    c3ca:	e9c5 0002 	strd	r0, r0, [r5, #8]
    c3ce:	606b      	str	r3, [r5, #4]
    c3d0:	5069      	str	r1, [r5, r1]
    c3d2:	e771      	b.n	c2b8 <_free_r+0x94>
    c3d4:	6879      	ldr	r1, [r7, #4]
    c3d6:	1092      	asrs	r2, r2, #2
    c3d8:	2401      	movs	r4, #1
    c3da:	fa04 f202 	lsl.w	r2, r4, r2
    c3de:	430a      	orrs	r2, r1
    c3e0:	607a      	str	r2, [r7, #4]
    c3e2:	e7a6      	b.n	c332 <_free_r+0x10e>
    c3e4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    c3e8:	d806      	bhi.n	c3f8 <_free_r+0x1d4>
    c3ea:	0bcb      	lsrs	r3, r1, #15
    c3ec:	f103 0078 	add.w	r0, r3, #120	; 0x78
    c3f0:	f103 0277 	add.w	r2, r3, #119	; 0x77
    c3f4:	00c3      	lsls	r3, r0, #3
    c3f6:	e78e      	b.n	c316 <_free_r+0xf2>
    c3f8:	f240 5254 	movw	r2, #1364	; 0x554
    c3fc:	4293      	cmp	r3, r2
    c3fe:	d806      	bhi.n	c40e <_free_r+0x1ea>
    c400:	0c8b      	lsrs	r3, r1, #18
    c402:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    c406:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    c40a:	00c3      	lsls	r3, r0, #3
    c40c:	e783      	b.n	c316 <_free_r+0xf2>
    c40e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    c412:	227e      	movs	r2, #126	; 0x7e
    c414:	e77f      	b.n	c316 <_free_r+0xf2>
    c416:	f041 0301 	orr.w	r3, r1, #1
    c41a:	606b      	str	r3, [r5, #4]
    c41c:	f8cc 1000 	str.w	r1, [ip]
    c420:	e74a      	b.n	c2b8 <_free_r+0x94>
    c422:	bf00      	nop
    c424:	1fff0f20 	.word	0x1fff0f20
    c428:	1fff132c 	.word	0x1fff132c
    c42c:	1fff7c40 	.word	0x1fff7c40

0000c430 <__ascii_mbtowc>:
    c430:	b082      	sub	sp, #8
    c432:	b149      	cbz	r1, c448 <__ascii_mbtowc+0x18>
    c434:	b15a      	cbz	r2, c44e <__ascii_mbtowc+0x1e>
    c436:	b16b      	cbz	r3, c454 <__ascii_mbtowc+0x24>
    c438:	7813      	ldrb	r3, [r2, #0]
    c43a:	600b      	str	r3, [r1, #0]
    c43c:	7812      	ldrb	r2, [r2, #0]
    c43e:	1e10      	subs	r0, r2, #0
    c440:	bf18      	it	ne
    c442:	2001      	movne	r0, #1
    c444:	b002      	add	sp, #8
    c446:	4770      	bx	lr
    c448:	a901      	add	r1, sp, #4
    c44a:	2a00      	cmp	r2, #0
    c44c:	d1f3      	bne.n	c436 <__ascii_mbtowc+0x6>
    c44e:	4610      	mov	r0, r2
    c450:	b002      	add	sp, #8
    c452:	4770      	bx	lr
    c454:	f06f 0001 	mvn.w	r0, #1
    c458:	e7f4      	b.n	c444 <__ascii_mbtowc+0x14>
    c45a:	bf00      	nop

0000c45c <_Balloc>:
    c45c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c45e:	b570      	push	{r4, r5, r6, lr}
    c460:	4605      	mov	r5, r0
    c462:	460c      	mov	r4, r1
    c464:	b14b      	cbz	r3, c47a <_Balloc+0x1e>
    c466:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    c46a:	b180      	cbz	r0, c48e <_Balloc+0x32>
    c46c:	6802      	ldr	r2, [r0, #0]
    c46e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    c472:	2300      	movs	r3, #0
    c474:	e9c0 3303 	strd	r3, r3, [r0, #12]
    c478:	bd70      	pop	{r4, r5, r6, pc}
    c47a:	2221      	movs	r2, #33	; 0x21
    c47c:	2104      	movs	r1, #4
    c47e:	f002 fb8d 	bl	eb9c <_calloc_r>
    c482:	4603      	mov	r3, r0
    c484:	6468      	str	r0, [r5, #68]	; 0x44
    c486:	2800      	cmp	r0, #0
    c488:	d1ed      	bne.n	c466 <_Balloc+0xa>
    c48a:	2000      	movs	r0, #0
    c48c:	bd70      	pop	{r4, r5, r6, pc}
    c48e:	2101      	movs	r1, #1
    c490:	fa01 f604 	lsl.w	r6, r1, r4
    c494:	1d72      	adds	r2, r6, #5
    c496:	0092      	lsls	r2, r2, #2
    c498:	4628      	mov	r0, r5
    c49a:	f002 fb7f 	bl	eb9c <_calloc_r>
    c49e:	2800      	cmp	r0, #0
    c4a0:	d0f3      	beq.n	c48a <_Balloc+0x2e>
    c4a2:	e9c0 4601 	strd	r4, r6, [r0, #4]
    c4a6:	e7e4      	b.n	c472 <_Balloc+0x16>

0000c4a8 <_Bfree>:
    c4a8:	b131      	cbz	r1, c4b8 <_Bfree+0x10>
    c4aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c4ac:	684a      	ldr	r2, [r1, #4]
    c4ae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    c4b2:	6008      	str	r0, [r1, #0]
    c4b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    c4b8:	4770      	bx	lr
    c4ba:	bf00      	nop

0000c4bc <__multadd>:
    c4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4c0:	690e      	ldr	r6, [r1, #16]
    c4c2:	4680      	mov	r8, r0
    c4c4:	460f      	mov	r7, r1
    c4c6:	461d      	mov	r5, r3
    c4c8:	f101 0e14 	add.w	lr, r1, #20
    c4cc:	2000      	movs	r0, #0
    c4ce:	f8de 1000 	ldr.w	r1, [lr]
    c4d2:	b28c      	uxth	r4, r1
    c4d4:	fb02 5304 	mla	r3, r2, r4, r5
    c4d8:	0c09      	lsrs	r1, r1, #16
    c4da:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    c4de:	fb02 cc01 	mla	ip, r2, r1, ip
    c4e2:	3001      	adds	r0, #1
    c4e4:	b29c      	uxth	r4, r3
    c4e6:	eb04 440c 	add.w	r4, r4, ip, lsl #16
    c4ea:	4286      	cmp	r6, r0
    c4ec:	f84e 4b04 	str.w	r4, [lr], #4
    c4f0:	ea4f 451c 	mov.w	r5, ip, lsr #16
    c4f4:	dceb      	bgt.n	c4ce <__multadd+0x12>
    c4f6:	b13d      	cbz	r5, c508 <__multadd+0x4c>
    c4f8:	68bb      	ldr	r3, [r7, #8]
    c4fa:	42b3      	cmp	r3, r6
    c4fc:	dd07      	ble.n	c50e <__multadd+0x52>
    c4fe:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    c502:	3601      	adds	r6, #1
    c504:	615d      	str	r5, [r3, #20]
    c506:	613e      	str	r6, [r7, #16]
    c508:	4638      	mov	r0, r7
    c50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c50e:	6879      	ldr	r1, [r7, #4]
    c510:	4640      	mov	r0, r8
    c512:	3101      	adds	r1, #1
    c514:	f7ff ffa2 	bl	c45c <_Balloc>
    c518:	4604      	mov	r4, r0
    c51a:	b1b0      	cbz	r0, c54a <__multadd+0x8e>
    c51c:	693a      	ldr	r2, [r7, #16]
    c51e:	3202      	adds	r2, #2
    c520:	f107 010c 	add.w	r1, r7, #12
    c524:	0092      	lsls	r2, r2, #2
    c526:	300c      	adds	r0, #12
    c528:	f7fc fce0 	bl	8eec <memcpy>
    c52c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    c530:	687a      	ldr	r2, [r7, #4]
    c532:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    c536:	6039      	str	r1, [r7, #0]
    c538:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    c53c:	4627      	mov	r7, r4
    c53e:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    c542:	3601      	adds	r6, #1
    c544:	615d      	str	r5, [r3, #20]
    c546:	613e      	str	r6, [r7, #16]
    c548:	e7de      	b.n	c508 <__multadd+0x4c>
    c54a:	4b03      	ldr	r3, [pc, #12]	; (c558 <__multadd+0x9c>)
    c54c:	4803      	ldr	r0, [pc, #12]	; (c55c <__multadd+0xa0>)
    c54e:	4622      	mov	r2, r4
    c550:	21ba      	movs	r1, #186	; 0xba
    c552:	f002 fb03 	bl	eb5c <__assert_func>
    c556:	bf00      	nop
    c558:	000123cc 	.word	0x000123cc
    c55c:	000123e0 	.word	0x000123e0

0000c560 <__hi0bits>:
    c560:	0c03      	lsrs	r3, r0, #16
    c562:	041b      	lsls	r3, r3, #16
    c564:	b9d3      	cbnz	r3, c59c <__hi0bits+0x3c>
    c566:	0400      	lsls	r0, r0, #16
    c568:	2310      	movs	r3, #16
    c56a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    c56e:	bf04      	itt	eq
    c570:	0200      	lsleq	r0, r0, #8
    c572:	3308      	addeq	r3, #8
    c574:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    c578:	bf04      	itt	eq
    c57a:	0100      	lsleq	r0, r0, #4
    c57c:	3304      	addeq	r3, #4
    c57e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    c582:	bf04      	itt	eq
    c584:	0080      	lsleq	r0, r0, #2
    c586:	3302      	addeq	r3, #2
    c588:	2800      	cmp	r0, #0
    c58a:	db05      	blt.n	c598 <__hi0bits+0x38>
    c58c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
    c590:	f103 0301 	add.w	r3, r3, #1
    c594:	bf08      	it	eq
    c596:	2320      	moveq	r3, #32
    c598:	4618      	mov	r0, r3
    c59a:	4770      	bx	lr
    c59c:	2300      	movs	r3, #0
    c59e:	e7e4      	b.n	c56a <__hi0bits+0xa>

0000c5a0 <__lo0bits>:
    c5a0:	6803      	ldr	r3, [r0, #0]
    c5a2:	f013 0207 	ands.w	r2, r3, #7
    c5a6:	d008      	beq.n	c5ba <__lo0bits+0x1a>
    c5a8:	07d9      	lsls	r1, r3, #31
    c5aa:	d41f      	bmi.n	c5ec <__lo0bits+0x4c>
    c5ac:	079a      	lsls	r2, r3, #30
    c5ae:	d522      	bpl.n	c5f6 <__lo0bits+0x56>
    c5b0:	085b      	lsrs	r3, r3, #1
    c5b2:	6003      	str	r3, [r0, #0]
    c5b4:	2201      	movs	r2, #1
    c5b6:	4610      	mov	r0, r2
    c5b8:	4770      	bx	lr
    c5ba:	b299      	uxth	r1, r3
    c5bc:	b909      	cbnz	r1, c5c2 <__lo0bits+0x22>
    c5be:	0c1b      	lsrs	r3, r3, #16
    c5c0:	2210      	movs	r2, #16
    c5c2:	b2d9      	uxtb	r1, r3
    c5c4:	b909      	cbnz	r1, c5ca <__lo0bits+0x2a>
    c5c6:	3208      	adds	r2, #8
    c5c8:	0a1b      	lsrs	r3, r3, #8
    c5ca:	0719      	lsls	r1, r3, #28
    c5cc:	bf04      	itt	eq
    c5ce:	091b      	lsreq	r3, r3, #4
    c5d0:	3204      	addeq	r2, #4
    c5d2:	0799      	lsls	r1, r3, #30
    c5d4:	bf04      	itt	eq
    c5d6:	089b      	lsreq	r3, r3, #2
    c5d8:	3202      	addeq	r2, #2
    c5da:	07d9      	lsls	r1, r3, #31
    c5dc:	d403      	bmi.n	c5e6 <__lo0bits+0x46>
    c5de:	085b      	lsrs	r3, r3, #1
    c5e0:	f102 0201 	add.w	r2, r2, #1
    c5e4:	d005      	beq.n	c5f2 <__lo0bits+0x52>
    c5e6:	6003      	str	r3, [r0, #0]
    c5e8:	4610      	mov	r0, r2
    c5ea:	4770      	bx	lr
    c5ec:	2200      	movs	r2, #0
    c5ee:	4610      	mov	r0, r2
    c5f0:	4770      	bx	lr
    c5f2:	2220      	movs	r2, #32
    c5f4:	e7df      	b.n	c5b6 <__lo0bits+0x16>
    c5f6:	089b      	lsrs	r3, r3, #2
    c5f8:	2202      	movs	r2, #2
    c5fa:	6003      	str	r3, [r0, #0]
    c5fc:	4610      	mov	r0, r2
    c5fe:	4770      	bx	lr

0000c600 <__i2b>:
    c600:	b538      	push	{r3, r4, r5, lr}
    c602:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c604:	4604      	mov	r4, r0
    c606:	460d      	mov	r5, r1
    c608:	b14b      	cbz	r3, c61e <__i2b+0x1e>
    c60a:	6858      	ldr	r0, [r3, #4]
    c60c:	b1b0      	cbz	r0, c63c <__i2b+0x3c>
    c60e:	6802      	ldr	r2, [r0, #0]
    c610:	605a      	str	r2, [r3, #4]
    c612:	2200      	movs	r2, #0
    c614:	2301      	movs	r3, #1
    c616:	e9c0 3504 	strd	r3, r5, [r0, #16]
    c61a:	60c2      	str	r2, [r0, #12]
    c61c:	bd38      	pop	{r3, r4, r5, pc}
    c61e:	2221      	movs	r2, #33	; 0x21
    c620:	2104      	movs	r1, #4
    c622:	f002 fabb 	bl	eb9c <_calloc_r>
    c626:	4603      	mov	r3, r0
    c628:	6460      	str	r0, [r4, #68]	; 0x44
    c62a:	2800      	cmp	r0, #0
    c62c:	d1ed      	bne.n	c60a <__i2b+0xa>
    c62e:	4b09      	ldr	r3, [pc, #36]	; (c654 <__i2b+0x54>)
    c630:	4809      	ldr	r0, [pc, #36]	; (c658 <__i2b+0x58>)
    c632:	2200      	movs	r2, #0
    c634:	f240 1145 	movw	r1, #325	; 0x145
    c638:	f002 fa90 	bl	eb5c <__assert_func>
    c63c:	221c      	movs	r2, #28
    c63e:	2101      	movs	r1, #1
    c640:	4620      	mov	r0, r4
    c642:	f002 faab 	bl	eb9c <_calloc_r>
    c646:	2800      	cmp	r0, #0
    c648:	d0f1      	beq.n	c62e <__i2b+0x2e>
    c64a:	2201      	movs	r2, #1
    c64c:	2302      	movs	r3, #2
    c64e:	e9c0 2301 	strd	r2, r3, [r0, #4]
    c652:	e7de      	b.n	c612 <__i2b+0x12>
    c654:	000123cc 	.word	0x000123cc
    c658:	000123e0 	.word	0x000123e0

0000c65c <__multiply>:
    c65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c660:	690e      	ldr	r6, [r1, #16]
    c662:	6915      	ldr	r5, [r2, #16]
    c664:	42ae      	cmp	r6, r5
    c666:	b085      	sub	sp, #20
    c668:	4688      	mov	r8, r1
    c66a:	4614      	mov	r4, r2
    c66c:	db05      	blt.n	c67a <__multiply+0x1e>
    c66e:	462a      	mov	r2, r5
    c670:	4623      	mov	r3, r4
    c672:	4635      	mov	r5, r6
    c674:	460c      	mov	r4, r1
    c676:	4616      	mov	r6, r2
    c678:	4698      	mov	r8, r3
    c67a:	68a3      	ldr	r3, [r4, #8]
    c67c:	6861      	ldr	r1, [r4, #4]
    c67e:	19af      	adds	r7, r5, r6
    c680:	42bb      	cmp	r3, r7
    c682:	bfb8      	it	lt
    c684:	3101      	addlt	r1, #1
    c686:	f7ff fee9 	bl	c45c <_Balloc>
    c68a:	9001      	str	r0, [sp, #4]
    c68c:	2800      	cmp	r0, #0
    c68e:	f000 8087 	beq.w	c7a0 <__multiply+0x144>
    c692:	9b01      	ldr	r3, [sp, #4]
    c694:	f103 0914 	add.w	r9, r3, #20
    c698:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    c69c:	45d1      	cmp	r9, sl
    c69e:	d205      	bcs.n	c6ac <__multiply+0x50>
    c6a0:	464b      	mov	r3, r9
    c6a2:	2200      	movs	r2, #0
    c6a4:	f843 2b04 	str.w	r2, [r3], #4
    c6a8:	459a      	cmp	sl, r3
    c6aa:	d8fb      	bhi.n	c6a4 <__multiply+0x48>
    c6ac:	f108 0814 	add.w	r8, r8, #20
    c6b0:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    c6b4:	f104 0314 	add.w	r3, r4, #20
    c6b8:	45d8      	cmp	r8, fp
    c6ba:	461a      	mov	r2, r3
    c6bc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    c6c0:	d25f      	bcs.n	c782 <__multiply+0x126>
    c6c2:	1b2b      	subs	r3, r5, r4
    c6c4:	3b15      	subs	r3, #21
    c6c6:	f023 0303 	bic.w	r3, r3, #3
    c6ca:	3304      	adds	r3, #4
    c6cc:	3415      	adds	r4, #21
    c6ce:	42a5      	cmp	r5, r4
    c6d0:	bf38      	it	cc
    c6d2:	2304      	movcc	r3, #4
    c6d4:	e9cd a702 	strd	sl, r7, [sp, #8]
    c6d8:	46ac      	mov	ip, r5
    c6da:	461f      	mov	r7, r3
    c6dc:	4692      	mov	sl, r2
    c6de:	e005      	b.n	c6ec <__multiply+0x90>
    c6e0:	0c09      	lsrs	r1, r1, #16
    c6e2:	d129      	bne.n	c738 <__multiply+0xdc>
    c6e4:	45c3      	cmp	fp, r8
    c6e6:	f109 0904 	add.w	r9, r9, #4
    c6ea:	d948      	bls.n	c77e <__multiply+0x122>
    c6ec:	f858 1b04 	ldr.w	r1, [r8], #4
    c6f0:	b28d      	uxth	r5, r1
    c6f2:	2d00      	cmp	r5, #0
    c6f4:	d0f4      	beq.n	c6e0 <__multiply+0x84>
    c6f6:	4656      	mov	r6, sl
    c6f8:	464c      	mov	r4, r9
    c6fa:	2300      	movs	r3, #0
    c6fc:	f856 1b04 	ldr.w	r1, [r6], #4
    c700:	6822      	ldr	r2, [r4, #0]
    c702:	fa1f fe81 	uxth.w	lr, r1
    c706:	b290      	uxth	r0, r2
    c708:	0c09      	lsrs	r1, r1, #16
    c70a:	fb05 000e 	mla	r0, r5, lr, r0
    c70e:	0c12      	lsrs	r2, r2, #16
    c710:	4403      	add	r3, r0
    c712:	fb05 2201 	mla	r2, r5, r1, r2
    c716:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    c71a:	b29b      	uxth	r3, r3
    c71c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    c720:	45b4      	cmp	ip, r6
    c722:	f844 3b04 	str.w	r3, [r4], #4
    c726:	ea4f 4312 	mov.w	r3, r2, lsr #16
    c72a:	d8e7      	bhi.n	c6fc <__multiply+0xa0>
    c72c:	f849 3007 	str.w	r3, [r9, r7]
    c730:	f858 1c04 	ldr.w	r1, [r8, #-4]
    c734:	0c09      	lsrs	r1, r1, #16
    c736:	d0d5      	beq.n	c6e4 <__multiply+0x88>
    c738:	f8d9 3000 	ldr.w	r3, [r9]
    c73c:	4650      	mov	r0, sl
    c73e:	461a      	mov	r2, r3
    c740:	464c      	mov	r4, r9
    c742:	2600      	movs	r6, #0
    c744:	8805      	ldrh	r5, [r0, #0]
    c746:	0c12      	lsrs	r2, r2, #16
    c748:	fb01 2205 	mla	r2, r1, r5, r2
    c74c:	4416      	add	r6, r2
    c74e:	b29b      	uxth	r3, r3
    c750:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    c754:	f844 3b04 	str.w	r3, [r4], #4
    c758:	f850 5b04 	ldr.w	r5, [r0], #4
    c75c:	6822      	ldr	r2, [r4, #0]
    c75e:	0c2d      	lsrs	r5, r5, #16
    c760:	b293      	uxth	r3, r2
    c762:	fb01 3305 	mla	r3, r1, r5, r3
    c766:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    c76a:	4584      	cmp	ip, r0
    c76c:	ea4f 4613 	mov.w	r6, r3, lsr #16
    c770:	d8e8      	bhi.n	c744 <__multiply+0xe8>
    c772:	45c3      	cmp	fp, r8
    c774:	f849 3007 	str.w	r3, [r9, r7]
    c778:	f109 0904 	add.w	r9, r9, #4
    c77c:	d8b6      	bhi.n	c6ec <__multiply+0x90>
    c77e:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    c782:	2f00      	cmp	r7, #0
    c784:	dc02      	bgt.n	c78c <__multiply+0x130>
    c786:	e005      	b.n	c794 <__multiply+0x138>
    c788:	3f01      	subs	r7, #1
    c78a:	d003      	beq.n	c794 <__multiply+0x138>
    c78c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    c790:	2b00      	cmp	r3, #0
    c792:	d0f9      	beq.n	c788 <__multiply+0x12c>
    c794:	9b01      	ldr	r3, [sp, #4]
    c796:	4618      	mov	r0, r3
    c798:	611f      	str	r7, [r3, #16]
    c79a:	b005      	add	sp, #20
    c79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c7a0:	4b03      	ldr	r3, [pc, #12]	; (c7b0 <__multiply+0x154>)
    c7a2:	4804      	ldr	r0, [pc, #16]	; (c7b4 <__multiply+0x158>)
    c7a4:	9a01      	ldr	r2, [sp, #4]
    c7a6:	f44f 71b1 	mov.w	r1, #354	; 0x162
    c7aa:	f002 f9d7 	bl	eb5c <__assert_func>
    c7ae:	bf00      	nop
    c7b0:	000123cc 	.word	0x000123cc
    c7b4:	000123e0 	.word	0x000123e0

0000c7b8 <__pow5mult>:
    c7b8:	f012 0303 	ands.w	r3, r2, #3
    c7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c7c0:	4614      	mov	r4, r2
    c7c2:	4606      	mov	r6, r0
    c7c4:	d132      	bne.n	c82c <__pow5mult+0x74>
    c7c6:	460d      	mov	r5, r1
    c7c8:	10a4      	asrs	r4, r4, #2
    c7ca:	d020      	beq.n	c80e <__pow5mult+0x56>
    c7cc:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    c7d0:	f1b8 0f00 	cmp.w	r8, #0
    c7d4:	d033      	beq.n	c83e <__pow5mult+0x86>
    c7d6:	07e3      	lsls	r3, r4, #31
    c7d8:	f04f 0700 	mov.w	r7, #0
    c7dc:	d407      	bmi.n	c7ee <__pow5mult+0x36>
    c7de:	1064      	asrs	r4, r4, #1
    c7e0:	d015      	beq.n	c80e <__pow5mult+0x56>
    c7e2:	f8d8 0000 	ldr.w	r0, [r8]
    c7e6:	b1a8      	cbz	r0, c814 <__pow5mult+0x5c>
    c7e8:	4680      	mov	r8, r0
    c7ea:	07e3      	lsls	r3, r4, #31
    c7ec:	d5f7      	bpl.n	c7de <__pow5mult+0x26>
    c7ee:	4642      	mov	r2, r8
    c7f0:	4629      	mov	r1, r5
    c7f2:	4630      	mov	r0, r6
    c7f4:	f7ff ff32 	bl	c65c <__multiply>
    c7f8:	b1b5      	cbz	r5, c828 <__pow5mult+0x70>
    c7fa:	6869      	ldr	r1, [r5, #4]
    c7fc:	6c73      	ldr	r3, [r6, #68]	; 0x44
    c7fe:	1064      	asrs	r4, r4, #1
    c800:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    c804:	602a      	str	r2, [r5, #0]
    c806:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    c80a:	4605      	mov	r5, r0
    c80c:	d1e9      	bne.n	c7e2 <__pow5mult+0x2a>
    c80e:	4628      	mov	r0, r5
    c810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c814:	4642      	mov	r2, r8
    c816:	4641      	mov	r1, r8
    c818:	4630      	mov	r0, r6
    c81a:	f7ff ff1f 	bl	c65c <__multiply>
    c81e:	f8c8 0000 	str.w	r0, [r8]
    c822:	6007      	str	r7, [r0, #0]
    c824:	4680      	mov	r8, r0
    c826:	e7e0      	b.n	c7ea <__pow5mult+0x32>
    c828:	4605      	mov	r5, r0
    c82a:	e7d8      	b.n	c7de <__pow5mult+0x26>
    c82c:	3b01      	subs	r3, #1
    c82e:	4a0f      	ldr	r2, [pc, #60]	; (c86c <__pow5mult+0xb4>)
    c830:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    c834:	2300      	movs	r3, #0
    c836:	f7ff fe41 	bl	c4bc <__multadd>
    c83a:	4605      	mov	r5, r0
    c83c:	e7c4      	b.n	c7c8 <__pow5mult+0x10>
    c83e:	2101      	movs	r1, #1
    c840:	4630      	mov	r0, r6
    c842:	f7ff fe0b 	bl	c45c <_Balloc>
    c846:	4680      	mov	r8, r0
    c848:	b140      	cbz	r0, c85c <__pow5mult+0xa4>
    c84a:	2301      	movs	r3, #1
    c84c:	f240 2271 	movw	r2, #625	; 0x271
    c850:	e9c0 3204 	strd	r3, r2, [r0, #16]
    c854:	2300      	movs	r3, #0
    c856:	6430      	str	r0, [r6, #64]	; 0x40
    c858:	6003      	str	r3, [r0, #0]
    c85a:	e7bc      	b.n	c7d6 <__pow5mult+0x1e>
    c85c:	4b04      	ldr	r3, [pc, #16]	; (c870 <__pow5mult+0xb8>)
    c85e:	4805      	ldr	r0, [pc, #20]	; (c874 <__pow5mult+0xbc>)
    c860:	4642      	mov	r2, r8
    c862:	f240 1145 	movw	r1, #325	; 0x145
    c866:	f002 f979 	bl	eb5c <__assert_func>
    c86a:	bf00      	nop
    c86c:	00012530 	.word	0x00012530
    c870:	000123cc 	.word	0x000123cc
    c874:	000123e0 	.word	0x000123e0

0000c878 <__lshift>:
    c878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c87c:	460d      	mov	r5, r1
    c87e:	4614      	mov	r4, r2
    c880:	692f      	ldr	r7, [r5, #16]
    c882:	68ab      	ldr	r3, [r5, #8]
    c884:	6849      	ldr	r1, [r1, #4]
    c886:	eb07 1762 	add.w	r7, r7, r2, asr #5
    c88a:	1c7e      	adds	r6, r7, #1
    c88c:	429e      	cmp	r6, r3
    c88e:	4680      	mov	r8, r0
    c890:	ea4f 1962 	mov.w	r9, r2, asr #5
    c894:	dd04      	ble.n	c8a0 <__lshift+0x28>
    c896:	005b      	lsls	r3, r3, #1
    c898:	429e      	cmp	r6, r3
    c89a:	f101 0101 	add.w	r1, r1, #1
    c89e:	dcfa      	bgt.n	c896 <__lshift+0x1e>
    c8a0:	4640      	mov	r0, r8
    c8a2:	f7ff fddb 	bl	c45c <_Balloc>
    c8a6:	4684      	mov	ip, r0
    c8a8:	2800      	cmp	r0, #0
    c8aa:	d052      	beq.n	c952 <__lshift+0xda>
    c8ac:	f1b9 0f00 	cmp.w	r9, #0
    c8b0:	f100 0214 	add.w	r2, r0, #20
    c8b4:	dd0e      	ble.n	c8d4 <__lshift+0x5c>
    c8b6:	f109 0105 	add.w	r1, r9, #5
    c8ba:	ea4f 0e81 	mov.w	lr, r1, lsl #2
    c8be:	4613      	mov	r3, r2
    c8c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    c8c4:	2000      	movs	r0, #0
    c8c6:	f843 0b04 	str.w	r0, [r3], #4
    c8ca:	428b      	cmp	r3, r1
    c8cc:	d1fb      	bne.n	c8c6 <__lshift+0x4e>
    c8ce:	f1ae 0314 	sub.w	r3, lr, #20
    c8d2:	441a      	add	r2, r3
    c8d4:	6929      	ldr	r1, [r5, #16]
    c8d6:	f105 0314 	add.w	r3, r5, #20
    c8da:	f014 0e1f 	ands.w	lr, r4, #31
    c8de:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    c8e2:	d02e      	beq.n	c942 <__lshift+0xca>
    c8e4:	f1ce 0920 	rsb	r9, lr, #32
    c8e8:	4610      	mov	r0, r2
    c8ea:	f04f 0a00 	mov.w	sl, #0
    c8ee:	681c      	ldr	r4, [r3, #0]
    c8f0:	fa04 f40e 	lsl.w	r4, r4, lr
    c8f4:	ea44 040a 	orr.w	r4, r4, sl
    c8f8:	f840 4b04 	str.w	r4, [r0], #4
    c8fc:	f853 4b04 	ldr.w	r4, [r3], #4
    c900:	4299      	cmp	r1, r3
    c902:	fa24 fa09 	lsr.w	sl, r4, r9
    c906:	d8f2      	bhi.n	c8ee <__lshift+0x76>
    c908:	1b4b      	subs	r3, r1, r5
    c90a:	3b15      	subs	r3, #21
    c90c:	f023 0303 	bic.w	r3, r3, #3
    c910:	3304      	adds	r3, #4
    c912:	f105 0015 	add.w	r0, r5, #21
    c916:	4281      	cmp	r1, r0
    c918:	bf38      	it	cc
    c91a:	2304      	movcc	r3, #4
    c91c:	f1ba 0f00 	cmp.w	sl, #0
    c920:	bf18      	it	ne
    c922:	4637      	movne	r7, r6
    c924:	f842 a003 	str.w	sl, [r2, r3]
    c928:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
    c92c:	686a      	ldr	r2, [r5, #4]
    c92e:	f8cc 7010 	str.w	r7, [ip, #16]
    c932:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    c936:	6029      	str	r1, [r5, #0]
    c938:	4660      	mov	r0, ip
    c93a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
    c93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c942:	3a04      	subs	r2, #4
    c944:	f853 0b04 	ldr.w	r0, [r3], #4
    c948:	f842 0f04 	str.w	r0, [r2, #4]!
    c94c:	4299      	cmp	r1, r3
    c94e:	d8f9      	bhi.n	c944 <__lshift+0xcc>
    c950:	e7ea      	b.n	c928 <__lshift+0xb0>
    c952:	4b03      	ldr	r3, [pc, #12]	; (c960 <__lshift+0xe8>)
    c954:	4803      	ldr	r0, [pc, #12]	; (c964 <__lshift+0xec>)
    c956:	4662      	mov	r2, ip
    c958:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    c95c:	f002 f8fe 	bl	eb5c <__assert_func>
    c960:	000123cc 	.word	0x000123cc
    c964:	000123e0 	.word	0x000123e0

0000c968 <__mcmp>:
    c968:	690b      	ldr	r3, [r1, #16]
    c96a:	4684      	mov	ip, r0
    c96c:	6900      	ldr	r0, [r0, #16]
    c96e:	1ac0      	subs	r0, r0, r3
    c970:	d116      	bne.n	c9a0 <__mcmp+0x38>
    c972:	f10c 0c14 	add.w	ip, ip, #20
    c976:	3114      	adds	r1, #20
    c978:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    c97c:	b410      	push	{r4}
    c97e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    c982:	e001      	b.n	c988 <__mcmp+0x20>
    c984:	4594      	cmp	ip, r2
    c986:	d208      	bcs.n	c99a <__mcmp+0x32>
    c988:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    c98c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    c990:	428c      	cmp	r4, r1
    c992:	d0f7      	beq.n	c984 <__mcmp+0x1c>
    c994:	d205      	bcs.n	c9a2 <__mcmp+0x3a>
    c996:	f04f 30ff 	mov.w	r0, #4294967295
    c99a:	f85d 4b04 	ldr.w	r4, [sp], #4
    c99e:	4770      	bx	lr
    c9a0:	4770      	bx	lr
    c9a2:	2001      	movs	r0, #1
    c9a4:	f85d 4b04 	ldr.w	r4, [sp], #4
    c9a8:	4770      	bx	lr
    c9aa:	bf00      	nop

0000c9ac <__mdiff>:
    c9ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9b0:	690f      	ldr	r7, [r1, #16]
    c9b2:	6913      	ldr	r3, [r2, #16]
    c9b4:	1aff      	subs	r7, r7, r3
    c9b6:	2f00      	cmp	r7, #0
    c9b8:	460e      	mov	r6, r1
    c9ba:	4690      	mov	r8, r2
    c9bc:	d17f      	bne.n	cabe <__mdiff+0x112>
    c9be:	f101 0514 	add.w	r5, r1, #20
    c9c2:	3214      	adds	r2, #20
    c9c4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    c9c8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    c9cc:	e001      	b.n	c9d2 <__mdiff+0x26>
    c9ce:	429d      	cmp	r5, r3
    c9d0:	d278      	bcs.n	cac4 <__mdiff+0x118>
    c9d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    c9d6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    c9da:	42a1      	cmp	r1, r4
    c9dc:	d0f7      	beq.n	c9ce <__mdiff+0x22>
    c9de:	d369      	bcc.n	cab4 <__mdiff+0x108>
    c9e0:	6871      	ldr	r1, [r6, #4]
    c9e2:	f7ff fd3b 	bl	c45c <_Balloc>
    c9e6:	4681      	mov	r9, r0
    c9e8:	2800      	cmp	r0, #0
    c9ea:	d077      	beq.n	cadc <__mdiff+0x130>
    c9ec:	6935      	ldr	r5, [r6, #16]
    c9ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
    c9f2:	60c7      	str	r7, [r0, #12]
    c9f4:	f108 0e14 	add.w	lr, r8, #20
    c9f8:	f106 0014 	add.w	r0, r6, #20
    c9fc:	f109 0a14 	add.w	sl, r9, #20
    ca00:	f106 0110 	add.w	r1, r6, #16
    ca04:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    ca08:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    ca0c:	4656      	mov	r6, sl
    ca0e:	f04f 0c00 	mov.w	ip, #0
    ca12:	f85e 4b04 	ldr.w	r4, [lr], #4
    ca16:	f851 bf04 	ldr.w	fp, [r1, #4]!
    ca1a:	b2a3      	uxth	r3, r4
    ca1c:	fa1c fc8b 	uxtah	ip, ip, fp
    ca20:	ebac 0303 	sub.w	r3, ip, r3
    ca24:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    ca28:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    ca2c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    ca30:	b29b      	uxth	r3, r3
    ca32:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    ca36:	4572      	cmp	r2, lr
    ca38:	f846 3b04 	str.w	r3, [r6], #4
    ca3c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    ca40:	d8e7      	bhi.n	ca12 <__mdiff+0x66>
    ca42:	eba2 0108 	sub.w	r1, r2, r8
    ca46:	3915      	subs	r1, #21
    ca48:	f108 0815 	add.w	r8, r8, #21
    ca4c:	4542      	cmp	r2, r8
    ca4e:	f021 0403 	bic.w	r4, r1, #3
    ca52:	f104 0404 	add.w	r4, r4, #4
    ca56:	bf38      	it	cc
    ca58:	2404      	movcc	r4, #4
    ca5a:	4420      	add	r0, r4
    ca5c:	f021 0203 	bic.w	r2, r1, #3
    ca60:	bf38      	it	cc
    ca62:	2200      	movcc	r2, #0
    ca64:	4287      	cmp	r7, r0
    ca66:	4452      	add	r2, sl
    ca68:	4454      	add	r4, sl
    ca6a:	d918      	bls.n	ca9e <__mdiff+0xf2>
    ca6c:	4626      	mov	r6, r4
    ca6e:	4601      	mov	r1, r0
    ca70:	f851 3b04 	ldr.w	r3, [r1], #4
    ca74:	fa1c fc83 	uxtah	ip, ip, r3
    ca78:	ea4f 422c 	mov.w	r2, ip, asr #16
    ca7c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    ca80:	fa1f fc8c 	uxth.w	ip, ip
    ca84:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    ca88:	428f      	cmp	r7, r1
    ca8a:	f846 3b04 	str.w	r3, [r6], #4
    ca8e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    ca92:	d8ed      	bhi.n	ca70 <__mdiff+0xc4>
    ca94:	3f01      	subs	r7, #1
    ca96:	1a3f      	subs	r7, r7, r0
    ca98:	f027 0703 	bic.w	r7, r7, #3
    ca9c:	19e2      	adds	r2, r4, r7
    ca9e:	b923      	cbnz	r3, caaa <__mdiff+0xfe>
    caa0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    caa4:	3d01      	subs	r5, #1
    caa6:	2b00      	cmp	r3, #0
    caa8:	d0fa      	beq.n	caa0 <__mdiff+0xf4>
    caaa:	f8c9 5010 	str.w	r5, [r9, #16]
    caae:	4648      	mov	r0, r9
    cab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cab4:	4633      	mov	r3, r6
    cab6:	2701      	movs	r7, #1
    cab8:	4646      	mov	r6, r8
    caba:	4698      	mov	r8, r3
    cabc:	e790      	b.n	c9e0 <__mdiff+0x34>
    cabe:	dbf9      	blt.n	cab4 <__mdiff+0x108>
    cac0:	2700      	movs	r7, #0
    cac2:	e78d      	b.n	c9e0 <__mdiff+0x34>
    cac4:	2100      	movs	r1, #0
    cac6:	f7ff fcc9 	bl	c45c <_Balloc>
    caca:	4681      	mov	r9, r0
    cacc:	b168      	cbz	r0, caea <__mdiff+0x13e>
    cace:	2201      	movs	r2, #1
    cad0:	2300      	movs	r3, #0
    cad2:	e9c9 2304 	strd	r2, r3, [r9, #16]
    cad6:	4648      	mov	r0, r9
    cad8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cadc:	4b06      	ldr	r3, [pc, #24]	; (caf8 <__mdiff+0x14c>)
    cade:	4807      	ldr	r0, [pc, #28]	; (cafc <__mdiff+0x150>)
    cae0:	464a      	mov	r2, r9
    cae2:	f240 2145 	movw	r1, #581	; 0x245
    cae6:	f002 f839 	bl	eb5c <__assert_func>
    caea:	4b03      	ldr	r3, [pc, #12]	; (caf8 <__mdiff+0x14c>)
    caec:	4803      	ldr	r0, [pc, #12]	; (cafc <__mdiff+0x150>)
    caee:	464a      	mov	r2, r9
    caf0:	f240 2137 	movw	r1, #567	; 0x237
    caf4:	f002 f832 	bl	eb5c <__assert_func>
    caf8:	000123cc 	.word	0x000123cc
    cafc:	000123e0 	.word	0x000123e0

0000cb00 <__d2b>:
    cb00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cb04:	4688      	mov	r8, r1
    cb06:	b083      	sub	sp, #12
    cb08:	2101      	movs	r1, #1
    cb0a:	ec57 6b10 	vmov	r6, r7, d0
    cb0e:	4615      	mov	r5, r2
    cb10:	f7ff fca4 	bl	c45c <_Balloc>
    cb14:	4604      	mov	r4, r0
    cb16:	2800      	cmp	r0, #0
    cb18:	d051      	beq.n	cbbe <__d2b+0xbe>
    cb1a:	f3c7 590a 	ubfx	r9, r7, #20, #11
    cb1e:	f3c7 0313 	ubfx	r3, r7, #0, #20
    cb22:	f1b9 0f00 	cmp.w	r9, #0
    cb26:	d001      	beq.n	cb2c <__d2b+0x2c>
    cb28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    cb2c:	2e00      	cmp	r6, #0
    cb2e:	9301      	str	r3, [sp, #4]
    cb30:	d118      	bne.n	cb64 <__d2b+0x64>
    cb32:	a801      	add	r0, sp, #4
    cb34:	f7ff fd34 	bl	c5a0 <__lo0bits>
    cb38:	9a01      	ldr	r2, [sp, #4]
    cb3a:	6162      	str	r2, [r4, #20]
    cb3c:	2201      	movs	r2, #1
    cb3e:	f100 0320 	add.w	r3, r0, #32
    cb42:	6122      	str	r2, [r4, #16]
    cb44:	f1b9 0f00 	cmp.w	r9, #0
    cb48:	d025      	beq.n	cb96 <__d2b+0x96>
    cb4a:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
    cb4e:	eb09 0203 	add.w	r2, r9, r3
    cb52:	4620      	mov	r0, r4
    cb54:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
    cb58:	f8c8 2000 	str.w	r2, [r8]
    cb5c:	602b      	str	r3, [r5, #0]
    cb5e:	b003      	add	sp, #12
    cb60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cb64:	4668      	mov	r0, sp
    cb66:	9600      	str	r6, [sp, #0]
    cb68:	f7ff fd1a 	bl	c5a0 <__lo0bits>
    cb6c:	4603      	mov	r3, r0
    cb6e:	b310      	cbz	r0, cbb6 <__d2b+0xb6>
    cb70:	e9dd 0200 	ldrd	r0, r2, [sp]
    cb74:	f1c3 0120 	rsb	r1, r3, #32
    cb78:	fa02 f101 	lsl.w	r1, r2, r1
    cb7c:	4301      	orrs	r1, r0
    cb7e:	40da      	lsrs	r2, r3
    cb80:	6161      	str	r1, [r4, #20]
    cb82:	9201      	str	r2, [sp, #4]
    cb84:	2a00      	cmp	r2, #0
    cb86:	61a2      	str	r2, [r4, #24]
    cb88:	bf14      	ite	ne
    cb8a:	2202      	movne	r2, #2
    cb8c:	2201      	moveq	r2, #1
    cb8e:	6122      	str	r2, [r4, #16]
    cb90:	f1b9 0f00 	cmp.w	r9, #0
    cb94:	d1d9      	bne.n	cb4a <__d2b+0x4a>
    cb96:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
    cb9a:	f8c8 3000 	str.w	r3, [r8]
    cb9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    cba2:	6918      	ldr	r0, [r3, #16]
    cba4:	f7ff fcdc 	bl	c560 <__hi0bits>
    cba8:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
    cbac:	4620      	mov	r0, r4
    cbae:	602b      	str	r3, [r5, #0]
    cbb0:	b003      	add	sp, #12
    cbb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cbb6:	9a00      	ldr	r2, [sp, #0]
    cbb8:	6162      	str	r2, [r4, #20]
    cbba:	9a01      	ldr	r2, [sp, #4]
    cbbc:	e7e2      	b.n	cb84 <__d2b+0x84>
    cbbe:	4b03      	ldr	r3, [pc, #12]	; (cbcc <__d2b+0xcc>)
    cbc0:	4803      	ldr	r0, [pc, #12]	; (cbd0 <__d2b+0xd0>)
    cbc2:	4622      	mov	r2, r4
    cbc4:	f240 310f 	movw	r1, #783	; 0x30f
    cbc8:	f001 ffc8 	bl	eb5c <__assert_func>
    cbcc:	000123cc 	.word	0x000123cc
    cbd0:	000123e0 	.word	0x000123e0

0000cbd4 <__ascii_wctomb>:
    cbd4:	b149      	cbz	r1, cbea <__ascii_wctomb+0x16>
    cbd6:	2aff      	cmp	r2, #255	; 0xff
    cbd8:	d802      	bhi.n	cbe0 <__ascii_wctomb+0xc>
    cbda:	700a      	strb	r2, [r1, #0]
    cbdc:	2001      	movs	r0, #1
    cbde:	4770      	bx	lr
    cbe0:	238a      	movs	r3, #138	; 0x8a
    cbe2:	6003      	str	r3, [r0, #0]
    cbe4:	f04f 30ff 	mov.w	r0, #4294967295
    cbe8:	4770      	bx	lr
    cbea:	4608      	mov	r0, r1
    cbec:	4770      	bx	lr
    cbee:	bf00      	nop

0000cbf0 <_svfprintf_r>:
    cbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbf4:	ed2d 8b06 	vpush	{d8-d10}
    cbf8:	b0d3      	sub	sp, #332	; 0x14c
    cbfa:	460c      	mov	r4, r1
    cbfc:	ee0a 1a10 	vmov	s20, r1
    cc00:	4690      	mov	r8, r2
    cc02:	9308      	str	r3, [sp, #32]
    cc04:	4682      	mov	sl, r0
    cc06:	f001 ff09 	bl	ea1c <_localeconv_r>
    cc0a:	6803      	ldr	r3, [r0, #0]
    cc0c:	9313      	str	r3, [sp, #76]	; 0x4c
    cc0e:	4618      	mov	r0, r3
    cc10:	f7ff f9f6 	bl	c000 <strlen>
    cc14:	2208      	movs	r2, #8
    cc16:	9011      	str	r0, [sp, #68]	; 0x44
    cc18:	2100      	movs	r1, #0
    cc1a:	a822      	add	r0, sp, #136	; 0x88
    cc1c:	f7ff f85c 	bl	bcd8 <memset>
    cc20:	89a3      	ldrh	r3, [r4, #12]
    cc22:	061f      	lsls	r7, r3, #24
    cc24:	d503      	bpl.n	cc2e <_svfprintf_r+0x3e>
    cc26:	6923      	ldr	r3, [r4, #16]
    cc28:	2b00      	cmp	r3, #0
    cc2a:	f000 8752 	beq.w	dad2 <_svfprintf_r+0xee2>
    cc2e:	ed9f 7b84 	vldr	d7, [pc, #528]	; ce40 <_svfprintf_r+0x250>
    cc32:	2300      	movs	r3, #0
    cc34:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
    cc38:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
    cc3c:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
    cc40:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    cc44:	aa29      	add	r2, sp, #164	; 0xa4
    cc46:	930d      	str	r3, [sp, #52]	; 0x34
    cc48:	9226      	str	r2, [sp, #152]	; 0x98
    cc4a:	4691      	mov	r9, r2
    cc4c:	9312      	str	r3, [sp, #72]	; 0x48
    cc4e:	9304      	str	r3, [sp, #16]
    cc50:	4644      	mov	r4, r8
    cc52:	46a0      	mov	r8, r4
    cc54:	4b7c      	ldr	r3, [pc, #496]	; (ce48 <_svfprintf_r+0x258>)
    cc56:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    cc5a:	f7ff f8c1 	bl	bde0 <__locale_mb_cur_max>
    cc5e:	4603      	mov	r3, r0
    cc60:	a822      	add	r0, sp, #136	; 0x88
    cc62:	9000      	str	r0, [sp, #0]
    cc64:	4642      	mov	r2, r8
    cc66:	a91e      	add	r1, sp, #120	; 0x78
    cc68:	4650      	mov	r0, sl
    cc6a:	47a8      	blx	r5
    cc6c:	2800      	cmp	r0, #0
    cc6e:	f000 80b0 	beq.w	cdd2 <_svfprintf_r+0x1e2>
    cc72:	f2c0 80a6 	blt.w	cdc2 <_svfprintf_r+0x1d2>
    cc76:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    cc78:	2a25      	cmp	r2, #37	; 0x25
    cc7a:	4603      	mov	r3, r0
    cc7c:	d001      	beq.n	cc82 <_svfprintf_r+0x92>
    cc7e:	4498      	add	r8, r3
    cc80:	e7e8      	b.n	cc54 <_svfprintf_r+0x64>
    cc82:	ebb8 0704 	subs.w	r7, r8, r4
    cc86:	4606      	mov	r6, r0
    cc88:	f040 80a7 	bne.w	cdda <_svfprintf_r+0x1ea>
    cc8c:	2300      	movs	r3, #0
    cc8e:	f04f 32ff 	mov.w	r2, #4294967295
    cc92:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    cc96:	469b      	mov	fp, r3
    cc98:	9306      	str	r3, [sp, #24]
    cc9a:	f108 0801 	add.w	r8, r8, #1
    cc9e:	f898 3000 	ldrb.w	r3, [r8]
    cca2:	9203      	str	r2, [sp, #12]
    cca4:	252b      	movs	r5, #43	; 0x2b
    cca6:	2620      	movs	r6, #32
    cca8:	f108 0801 	add.w	r8, r8, #1
    ccac:	f1a3 0220 	sub.w	r2, r3, #32
    ccb0:	2a5a      	cmp	r2, #90	; 0x5a
    ccb2:	f200 80cb 	bhi.w	ce4c <_svfprintf_r+0x25c>
    ccb6:	e8df f012 	tbh	[pc, r2, lsl #1]
    ccba:	02f3      	.short	0x02f3
    ccbc:	00c900c9 	.word	0x00c900c9
    ccc0:	00c902ee 	.word	0x00c902ee
    ccc4:	00c900c9 	.word	0x00c900c9
    ccc8:	00c9006a 	.word	0x00c9006a
    cccc:	021400c9 	.word	0x021400c9
    ccd0:	00c90290 	.word	0x00c90290
    ccd4:	02d4021f 	.word	0x02d4021f
    ccd8:	02cf00c9 	.word	0x02cf00c9
    ccdc:	005b005b 	.word	0x005b005b
    cce0:	005b005b 	.word	0x005b005b
    cce4:	005b005b 	.word	0x005b005b
    cce8:	005b005b 	.word	0x005b005b
    ccec:	00c9005b 	.word	0x00c9005b
    ccf0:	00c900c9 	.word	0x00c900c9
    ccf4:	00c900c9 	.word	0x00c900c9
    ccf8:	00c900c9 	.word	0x00c900c9
    ccfc:	00c9014c 	.word	0x00c9014c
    cd00:	02290195 	.word	0x02290195
    cd04:	014c014c 	.word	0x014c014c
    cd08:	00c9014c 	.word	0x00c9014c
    cd0c:	00c900c9 	.word	0x00c900c9
    cd10:	022400c9 	.word	0x022400c9
    cd14:	00c900c9 	.word	0x00c900c9
    cd18:	00c902a2 	.word	0x00c902a2
    cd1c:	00c900c9 	.word	0x00c900c9
    cd20:	00c901bd 	.word	0x00c901bd
    cd24:	00c902b5 	.word	0x00c902b5
    cd28:	06ef00c9 	.word	0x06ef00c9
    cd2c:	00c900c9 	.word	0x00c900c9
    cd30:	00c900c9 	.word	0x00c900c9
    cd34:	00c900c9 	.word	0x00c900c9
    cd38:	00c900c9 	.word	0x00c900c9
    cd3c:	00c9014c 	.word	0x00c9014c
    cd40:	01ee0195 	.word	0x01ee0195
    cd44:	014c014c 	.word	0x014c014c
    cd48:	0283014c 	.word	0x0283014c
    cd4c:	007f01ee 	.word	0x007f01ee
    cd50:	029500c9 	.word	0x029500c9
    cd54:	026b00c9 	.word	0x026b00c9
    cd58:	023e06ec 	.word	0x023e06ec
    cd5c:	00c9007f 	.word	0x00c9007f
    cd60:	007c01bd 	.word	0x007c01bd
    cd64:	00c906c6 	.word	0x00c906c6
    cd68:	06ca00c9 	.word	0x06ca00c9
    cd6c:	007c00c9 	.word	0x007c00c9
    cd70:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    cd74:	2100      	movs	r1, #0
    cd76:	f818 3b01 	ldrb.w	r3, [r8], #1
    cd7a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    cd7e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    cd82:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    cd86:	2a09      	cmp	r2, #9
    cd88:	d9f5      	bls.n	cd76 <_svfprintf_r+0x186>
    cd8a:	9106      	str	r1, [sp, #24]
    cd8c:	e78e      	b.n	ccac <_svfprintf_r+0xbc>
    cd8e:	4650      	mov	r0, sl
    cd90:	f001 fe44 	bl	ea1c <_localeconv_r>
    cd94:	6843      	ldr	r3, [r0, #4]
    cd96:	9316      	str	r3, [sp, #88]	; 0x58
    cd98:	4618      	mov	r0, r3
    cd9a:	f7ff f931 	bl	c000 <strlen>
    cd9e:	9017      	str	r0, [sp, #92]	; 0x5c
    cda0:	4607      	mov	r7, r0
    cda2:	4650      	mov	r0, sl
    cda4:	f001 fe3a 	bl	ea1c <_localeconv_r>
    cda8:	6883      	ldr	r3, [r0, #8]
    cdaa:	9314      	str	r3, [sp, #80]	; 0x50
    cdac:	2f00      	cmp	r7, #0
    cdae:	f040 85d0 	bne.w	d952 <_svfprintf_r+0xd62>
    cdb2:	f898 3000 	ldrb.w	r3, [r8]
    cdb6:	e777      	b.n	cca8 <_svfprintf_r+0xb8>
    cdb8:	f898 3000 	ldrb.w	r3, [r8]
    cdbc:	f04b 0b20 	orr.w	fp, fp, #32
    cdc0:	e772      	b.n	cca8 <_svfprintf_r+0xb8>
    cdc2:	2208      	movs	r2, #8
    cdc4:	2100      	movs	r1, #0
    cdc6:	a822      	add	r0, sp, #136	; 0x88
    cdc8:	f7fe ff86 	bl	bcd8 <memset>
    cdcc:	2301      	movs	r3, #1
    cdce:	4498      	add	r8, r3
    cdd0:	e740      	b.n	cc54 <_svfprintf_r+0x64>
    cdd2:	ebb8 0704 	subs.w	r7, r8, r4
    cdd6:	4606      	mov	r6, r0
    cdd8:	d011      	beq.n	cdfe <_svfprintf_r+0x20e>
    cdda:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    cddc:	443b      	add	r3, r7
    cdde:	9328      	str	r3, [sp, #160]	; 0xa0
    cde0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    cde2:	3301      	adds	r3, #1
    cde4:	2b07      	cmp	r3, #7
    cde6:	e9c9 4700 	strd	r4, r7, [r9]
    cdea:	9327      	str	r3, [sp, #156]	; 0x9c
    cdec:	dc1c      	bgt.n	ce28 <_svfprintf_r+0x238>
    cdee:	f109 0908 	add.w	r9, r9, #8
    cdf2:	9b04      	ldr	r3, [sp, #16]
    cdf4:	443b      	add	r3, r7
    cdf6:	9304      	str	r3, [sp, #16]
    cdf8:	2e00      	cmp	r6, #0
    cdfa:	f47f af47 	bne.w	cc8c <_svfprintf_r+0x9c>
    cdfe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    ce00:	2b00      	cmp	r3, #0
    ce02:	f041 8219 	bne.w	e238 <_svfprintf_r+0x1648>
    ce06:	ee1a 3a10 	vmov	r3, s20
    ce0a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    ce0e:	f013 0f40 	tst.w	r3, #64	; 0x40
    ce12:	9b04      	ldr	r3, [sp, #16]
    ce14:	bf18      	it	ne
    ce16:	f04f 33ff 	movne.w	r3, #4294967295
    ce1a:	9304      	str	r3, [sp, #16]
    ce1c:	9804      	ldr	r0, [sp, #16]
    ce1e:	b053      	add	sp, #332	; 0x14c
    ce20:	ecbd 8b06 	vpop	{d8-d10}
    ce24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce28:	ee1a 1a10 	vmov	r1, s20
    ce2c:	aa26      	add	r2, sp, #152	; 0x98
    ce2e:	4650      	mov	r0, sl
    ce30:	f002 ff6a 	bl	fd08 <__ssprint_r>
    ce34:	2800      	cmp	r0, #0
    ce36:	d1e6      	bne.n	ce06 <_svfprintf_r+0x216>
    ce38:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    ce3c:	e7d9      	b.n	cdf2 <_svfprintf_r+0x202>
    ce3e:	bf00      	nop
	...
    ce48:	1fff133c 	.word	0x1fff133c
    ce4c:	930a      	str	r3, [sp, #40]	; 0x28
    ce4e:	2b00      	cmp	r3, #0
    ce50:	d0d5      	beq.n	cdfe <_svfprintf_r+0x20e>
    ce52:	2200      	movs	r2, #0
    ce54:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
    ce58:	2301      	movs	r3, #1
    ce5a:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    ce5e:	9302      	str	r3, [sp, #8]
    ce60:	9207      	str	r2, [sp, #28]
    ce62:	9305      	str	r3, [sp, #20]
    ce64:	9203      	str	r2, [sp, #12]
    ce66:	920c      	str	r2, [sp, #48]	; 0x30
    ce68:	9210      	str	r2, [sp, #64]	; 0x40
    ce6a:	920b      	str	r2, [sp, #44]	; 0x2c
    ce6c:	ac39      	add	r4, sp, #228	; 0xe4
    ce6e:	f01b 0302 	ands.w	r3, fp, #2
    ce72:	d002      	beq.n	ce7a <_svfprintf_r+0x28a>
    ce74:	9902      	ldr	r1, [sp, #8]
    ce76:	3102      	adds	r1, #2
    ce78:	9102      	str	r1, [sp, #8]
    ce7a:	f01b 0184 	ands.w	r1, fp, #132	; 0x84
    ce7e:	9109      	str	r1, [sp, #36]	; 0x24
    ce80:	d105      	bne.n	ce8e <_svfprintf_r+0x29e>
    ce82:	9906      	ldr	r1, [sp, #24]
    ce84:	9802      	ldr	r0, [sp, #8]
    ce86:	1a0f      	subs	r7, r1, r0
    ce88:	2f00      	cmp	r7, #0
    ce8a:	f300 8387 	bgt.w	d59c <_svfprintf_r+0x9ac>
    ce8e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    ce90:	b182      	cbz	r2, ceb4 <_svfprintf_r+0x2c4>
    ce92:	2201      	movs	r2, #1
    ce94:	f8c9 2004 	str.w	r2, [r9, #4]
    ce98:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    ce9a:	3201      	adds	r2, #1
    ce9c:	3601      	adds	r6, #1
    ce9e:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
    cea2:	2a07      	cmp	r2, #7
    cea4:	9628      	str	r6, [sp, #160]	; 0xa0
    cea6:	9227      	str	r2, [sp, #156]	; 0x9c
    cea8:	f8c9 1000 	str.w	r1, [r9]
    ceac:	f300 83bf 	bgt.w	d62e <_svfprintf_r+0xa3e>
    ceb0:	f109 0908 	add.w	r9, r9, #8
    ceb4:	b183      	cbz	r3, ced8 <_svfprintf_r+0x2e8>
    ceb6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    ceb8:	aa1c      	add	r2, sp, #112	; 0x70
    ceba:	3301      	adds	r3, #1
    cebc:	3602      	adds	r6, #2
    cebe:	f8c9 2000 	str.w	r2, [r9]
    cec2:	2b07      	cmp	r3, #7
    cec4:	f04f 0202 	mov.w	r2, #2
    cec8:	9628      	str	r6, [sp, #160]	; 0xa0
    ceca:	9327      	str	r3, [sp, #156]	; 0x9c
    cecc:	f8c9 2004 	str.w	r2, [r9, #4]
    ced0:	f300 83c2 	bgt.w	d658 <_svfprintf_r+0xa68>
    ced4:	f109 0908 	add.w	r9, r9, #8
    ced8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ceda:	2b80      	cmp	r3, #128	; 0x80
    cedc:	f000 8286 	beq.w	d3ec <_svfprintf_r+0x7fc>
    cee0:	9b03      	ldr	r3, [sp, #12]
    cee2:	9a05      	ldr	r2, [sp, #20]
    cee4:	1a9f      	subs	r7, r3, r2
    cee6:	2f00      	cmp	r7, #0
    cee8:	f300 82c0 	bgt.w	d46c <_svfprintf_r+0x87c>
    ceec:	f41b 7f80 	tst.w	fp, #256	; 0x100
    cef0:	f040 8222 	bne.w	d338 <_svfprintf_r+0x748>
    cef4:	9b05      	ldr	r3, [sp, #20]
    cef6:	f8c9 3004 	str.w	r3, [r9, #4]
    cefa:	441e      	add	r6, r3
    cefc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    cefe:	f8c9 4000 	str.w	r4, [r9]
    cf02:	3301      	adds	r3, #1
    cf04:	2b07      	cmp	r3, #7
    cf06:	9628      	str	r6, [sp, #160]	; 0xa0
    cf08:	9327      	str	r3, [sp, #156]	; 0x9c
    cf0a:	f300 833b 	bgt.w	d584 <_svfprintf_r+0x994>
    cf0e:	f109 0908 	add.w	r9, r9, #8
    cf12:	f01b 0f04 	tst.w	fp, #4
    cf16:	d005      	beq.n	cf24 <_svfprintf_r+0x334>
    cf18:	9b06      	ldr	r3, [sp, #24]
    cf1a:	9a02      	ldr	r2, [sp, #8]
    cf1c:	1a9c      	subs	r4, r3, r2
    cf1e:	2c00      	cmp	r4, #0
    cf20:	f300 83a7 	bgt.w	d672 <_svfprintf_r+0xa82>
    cf24:	9b04      	ldr	r3, [sp, #16]
    cf26:	9a06      	ldr	r2, [sp, #24]
    cf28:	9902      	ldr	r1, [sp, #8]
    cf2a:	428a      	cmp	r2, r1
    cf2c:	bfac      	ite	ge
    cf2e:	189b      	addge	r3, r3, r2
    cf30:	185b      	addlt	r3, r3, r1
    cf32:	9304      	str	r3, [sp, #16]
    cf34:	2e00      	cmp	r6, #0
    cf36:	f040 82cd 	bne.w	d4d4 <_svfprintf_r+0x8e4>
    cf3a:	2300      	movs	r3, #0
    cf3c:	9327      	str	r3, [sp, #156]	; 0x9c
    cf3e:	9b07      	ldr	r3, [sp, #28]
    cf40:	b11b      	cbz	r3, cf4a <_svfprintf_r+0x35a>
    cf42:	9907      	ldr	r1, [sp, #28]
    cf44:	4650      	mov	r0, sl
    cf46:	f7ff f96d 	bl	c224 <_free_r>
    cf4a:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    cf4e:	4644      	mov	r4, r8
    cf50:	e67f      	b.n	cc52 <_svfprintf_r+0x62>
    cf52:	930a      	str	r3, [sp, #40]	; 0x28
    cf54:	9b08      	ldr	r3, [sp, #32]
    cf56:	3307      	adds	r3, #7
    cf58:	f023 0307 	bic.w	r3, r3, #7
    cf5c:	ecb3 7b02 	vldmia	r3!, {d7}
    cf60:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    cf64:	e9dd 560e 	ldrd	r5, r6, [sp, #56]	; 0x38
    cf68:	9308      	str	r3, [sp, #32]
    cf6a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
    cf6e:	ee09 3a90 	vmov	s19, r3
    cf72:	ee09 5a10 	vmov	s18, r5
    cf76:	4bb4      	ldr	r3, [pc, #720]	; (d248 <_svfprintf_r+0x658>)
    cf78:	ec51 0b19 	vmov	r0, r1, d9
    cf7c:	f04f 32ff 	mov.w	r2, #4294967295
    cf80:	f7fd ff6e 	bl	ae60 <__aeabi_dcmpun>
    cf84:	2800      	cmp	r0, #0
    cf86:	f040 8502 	bne.w	d98e <_svfprintf_r+0xd9e>
    cf8a:	4baf      	ldr	r3, [pc, #700]	; (d248 <_svfprintf_r+0x658>)
    cf8c:	ec51 0b19 	vmov	r0, r1, d9
    cf90:	f04f 32ff 	mov.w	r2, #4294967295
    cf94:	f7fd ff46 	bl	ae24 <__aeabi_dcmple>
    cf98:	2800      	cmp	r0, #0
    cf9a:	f040 84f8 	bne.w	d98e <_svfprintf_r+0xd9e>
    cf9e:	2200      	movs	r2, #0
    cfa0:	2300      	movs	r3, #0
    cfa2:	4628      	mov	r0, r5
    cfa4:	4631      	mov	r1, r6
    cfa6:	f7fd ff33 	bl	ae10 <__aeabi_dcmplt>
    cfaa:	2800      	cmp	r0, #0
    cfac:	f041 805c 	bne.w	e068 <_svfprintf_r+0x1478>
    cfb0:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    cfb4:	4ca5      	ldr	r4, [pc, #660]	; (d24c <_svfprintf_r+0x65c>)
    cfb6:	4ba6      	ldr	r3, [pc, #664]	; (d250 <_svfprintf_r+0x660>)
    cfb8:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    cfbc:	990a      	ldr	r1, [sp, #40]	; 0x28
    cfbe:	2947      	cmp	r1, #71	; 0x47
    cfc0:	bfc8      	it	gt
    cfc2:	461c      	movgt	r4, r3
    cfc4:	2300      	movs	r3, #0
    cfc6:	2103      	movs	r1, #3
    cfc8:	9307      	str	r3, [sp, #28]
    cfca:	9102      	str	r1, [sp, #8]
    cfcc:	9105      	str	r1, [sp, #20]
    cfce:	9303      	str	r3, [sp, #12]
    cfd0:	930c      	str	r3, [sp, #48]	; 0x30
    cfd2:	9310      	str	r3, [sp, #64]	; 0x40
    cfd4:	930b      	str	r3, [sp, #44]	; 0x2c
    cfd6:	2a00      	cmp	r2, #0
    cfd8:	f43f af49 	beq.w	ce6e <_svfprintf_r+0x27e>
    cfdc:	9b02      	ldr	r3, [sp, #8]
    cfde:	3301      	adds	r3, #1
    cfe0:	9302      	str	r3, [sp, #8]
    cfe2:	e744      	b.n	ce6e <_svfprintf_r+0x27e>
    cfe4:	2b43      	cmp	r3, #67	; 0x43
    cfe6:	930a      	str	r3, [sp, #40]	; 0x28
    cfe8:	d003      	beq.n	cff2 <_svfprintf_r+0x402>
    cfea:	f01b 0f10 	tst.w	fp, #16
    cfee:	f000 8557 	beq.w	daa0 <_svfprintf_r+0xeb0>
    cff2:	9e08      	ldr	r6, [sp, #32]
    cff4:	2208      	movs	r2, #8
    cff6:	2100      	movs	r1, #0
    cff8:	a824      	add	r0, sp, #144	; 0x90
    cffa:	ac39      	add	r4, sp, #228	; 0xe4
    cffc:	f7fe fe6c 	bl	bcd8 <memset>
    d000:	ab24      	add	r3, sp, #144	; 0x90
    d002:	f856 2b04 	ldr.w	r2, [r6], #4
    d006:	4621      	mov	r1, r4
    d008:	4650      	mov	r0, sl
    d00a:	f002 fe37 	bl	fc7c <_wcrtomb_r>
    d00e:	4603      	mov	r3, r0
    d010:	3301      	adds	r3, #1
    d012:	9005      	str	r0, [sp, #20]
    d014:	f001 8323 	beq.w	e65e <_svfprintf_r+0x1a6e>
    d018:	9b05      	ldr	r3, [sp, #20]
    d01a:	9608      	str	r6, [sp, #32]
    d01c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    d020:	9302      	str	r3, [sp, #8]
    d022:	2200      	movs	r2, #0
    d024:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    d028:	9207      	str	r2, [sp, #28]
    d02a:	9203      	str	r2, [sp, #12]
    d02c:	920c      	str	r2, [sp, #48]	; 0x30
    d02e:	9210      	str	r2, [sp, #64]	; 0x40
    d030:	920b      	str	r2, [sp, #44]	; 0x2c
    d032:	e71c      	b.n	ce6e <_svfprintf_r+0x27e>
    d034:	9f08      	ldr	r7, [sp, #32]
    d036:	930a      	str	r3, [sp, #40]	; 0x28
    d038:	f857 4b04 	ldr.w	r4, [r7], #4
    d03c:	2300      	movs	r3, #0
    d03e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    d042:	2c00      	cmp	r4, #0
    d044:	f000 8552 	beq.w	daec <_svfprintf_r+0xefc>
    d048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d04a:	2b53      	cmp	r3, #83	; 0x53
    d04c:	f000 86de 	beq.w	de0c <_svfprintf_r+0x121c>
    d050:	f01b 0310 	ands.w	r3, fp, #16
    d054:	930b      	str	r3, [sp, #44]	; 0x2c
    d056:	f040 86d9 	bne.w	de0c <_svfprintf_r+0x121c>
    d05a:	9b03      	ldr	r3, [sp, #12]
    d05c:	1c5d      	adds	r5, r3, #1
    d05e:	f001 80e3 	beq.w	e228 <_svfprintf_r+0x1638>
    d062:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d064:	461a      	mov	r2, r3
    d066:	4620      	mov	r0, r4
    d068:	f001 fcf2 	bl	ea50 <memchr>
    d06c:	9007      	str	r0, [sp, #28]
    d06e:	2800      	cmp	r0, #0
    d070:	f001 833b 	beq.w	e6ea <_svfprintf_r+0x1afa>
    d074:	9b07      	ldr	r3, [sp, #28]
    d076:	9708      	str	r7, [sp, #32]
    d078:	1b19      	subs	r1, r3, r4
    d07a:	9105      	str	r1, [sp, #20]
    d07c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d07e:	9303      	str	r3, [sp, #12]
    d080:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    d084:	930c      	str	r3, [sp, #48]	; 0x30
    d086:	9310      	str	r3, [sp, #64]	; 0x40
    d088:	9307      	str	r3, [sp, #28]
    d08a:	2373      	movs	r3, #115	; 0x73
    d08c:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    d090:	9102      	str	r1, [sp, #8]
    d092:	930a      	str	r3, [sp, #40]	; 0x28
    d094:	e79f      	b.n	cfd6 <_svfprintf_r+0x3e6>
    d096:	f01b 0f20 	tst.w	fp, #32
    d09a:	930a      	str	r3, [sp, #40]	; 0x28
    d09c:	9b08      	ldr	r3, [sp, #32]
    d09e:	d03c      	beq.n	d11a <_svfprintf_r+0x52a>
    d0a0:	3307      	adds	r3, #7
    d0a2:	f023 0307 	bic.w	r3, r3, #7
    d0a6:	461a      	mov	r2, r3
    d0a8:	4611      	mov	r1, r2
    d0aa:	685b      	ldr	r3, [r3, #4]
    d0ac:	f851 2b08 	ldr.w	r2, [r1], #8
    d0b0:	9108      	str	r1, [sp, #32]
    d0b2:	4619      	mov	r1, r3
    d0b4:	2b00      	cmp	r3, #0
    d0b6:	f2c0 8407 	blt.w	d8c8 <_svfprintf_r+0xcd8>
    d0ba:	9b03      	ldr	r3, [sp, #12]
    d0bc:	3301      	adds	r3, #1
    d0be:	f000 82a7 	beq.w	d610 <_svfprintf_r+0xa20>
    d0c2:	ea52 0301 	orrs.w	r3, r2, r1
    d0c6:	f02b 0580 	bic.w	r5, fp, #128	; 0x80
    d0ca:	f040 82a2 	bne.w	d612 <_svfprintf_r+0xa22>
    d0ce:	9b03      	ldr	r3, [sp, #12]
    d0d0:	2b00      	cmp	r3, #0
    d0d2:	f040 82a3 	bne.w	d61c <_svfprintf_r+0xa2c>
    d0d6:	46ab      	mov	fp, r5
    d0d8:	2300      	movs	r3, #0
    d0da:	9303      	str	r3, [sp, #12]
    d0dc:	9305      	str	r3, [sp, #20]
    d0de:	ac52      	add	r4, sp, #328	; 0x148
    d0e0:	e100      	b.n	d2e4 <_svfprintf_r+0x6f4>
    d0e2:	9b08      	ldr	r3, [sp, #32]
    d0e4:	f853 2b04 	ldr.w	r2, [r3], #4
    d0e8:	9206      	str	r2, [sp, #24]
    d0ea:	2a00      	cmp	r2, #0
    d0ec:	f280 8414 	bge.w	d918 <_svfprintf_r+0xd28>
    d0f0:	9a06      	ldr	r2, [sp, #24]
    d0f2:	9308      	str	r3, [sp, #32]
    d0f4:	4252      	negs	r2, r2
    d0f6:	9206      	str	r2, [sp, #24]
    d0f8:	f898 3000 	ldrb.w	r3, [r8]
    d0fc:	f04b 0b04 	orr.w	fp, fp, #4
    d100:	e5d2      	b.n	cca8 <_svfprintf_r+0xb8>
    d102:	f898 3000 	ldrb.w	r3, [r8]
    d106:	f04b 0b08 	orr.w	fp, fp, #8
    d10a:	e5cd      	b.n	cca8 <_svfprintf_r+0xb8>
    d10c:	f04b 0b10 	orr.w	fp, fp, #16
    d110:	f01b 0f20 	tst.w	fp, #32
    d114:	930a      	str	r3, [sp, #40]	; 0x28
    d116:	9b08      	ldr	r3, [sp, #32]
    d118:	d1c2      	bne.n	d0a0 <_svfprintf_r+0x4b0>
    d11a:	f01b 0f10 	tst.w	fp, #16
    d11e:	f040 8406 	bne.w	d92e <_svfprintf_r+0xd3e>
    d122:	f01b 0f40 	tst.w	fp, #64	; 0x40
    d126:	f000 83fe 	beq.w	d926 <_svfprintf_r+0xd36>
    d12a:	f933 2b04 	ldrsh.w	r2, [r3], #4
    d12e:	9308      	str	r3, [sp, #32]
    d130:	17d1      	asrs	r1, r2, #31
    d132:	460b      	mov	r3, r1
    d134:	e7be      	b.n	d0b4 <_svfprintf_r+0x4c4>
    d136:	9b08      	ldr	r3, [sp, #32]
    d138:	f853 2b04 	ldr.w	r2, [r3], #4
    d13c:	9308      	str	r3, [sp, #32]
    d13e:	f647 0330 	movw	r3, #30768	; 0x7830
    d142:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
    d146:	2078      	movs	r0, #120	; 0x78
    d148:	4b42      	ldr	r3, [pc, #264]	; (d254 <_svfprintf_r+0x664>)
    d14a:	9312      	str	r3, [sp, #72]	; 0x48
    d14c:	f04b 0502 	orr.w	r5, fp, #2
    d150:	2100      	movs	r1, #0
    d152:	2302      	movs	r3, #2
    d154:	900a      	str	r0, [sp, #40]	; 0x28
    d156:	2000      	movs	r0, #0
    d158:	9c03      	ldr	r4, [sp, #12]
    d15a:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    d15e:	1c60      	adds	r0, r4, #1
    d160:	f000 80a9 	beq.w	d2b6 <_svfprintf_r+0x6c6>
    d164:	ea52 0001 	orrs.w	r0, r2, r1
    d168:	f025 0b80 	bic.w	fp, r5, #128	; 0x80
    d16c:	f040 80a2 	bne.w	d2b4 <_svfprintf_r+0x6c4>
    d170:	2c00      	cmp	r4, #0
    d172:	f040 86a1 	bne.w	deb8 <_svfprintf_r+0x12c8>
    d176:	2b00      	cmp	r3, #0
    d178:	d1ae      	bne.n	d0d8 <_svfprintf_r+0x4e8>
    d17a:	f015 0301 	ands.w	r3, r5, #1
    d17e:	9305      	str	r3, [sp, #20]
    d180:	f000 83cf 	beq.w	d922 <_svfprintf_r+0xd32>
    d184:	2330      	movs	r3, #48	; 0x30
    d186:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
    d18a:	f20d 1447 	addw	r4, sp, #327	; 0x147
    d18e:	e0a9      	b.n	d2e4 <_svfprintf_r+0x6f4>
    d190:	f01b 0f20 	tst.w	fp, #32
    d194:	f040 83f0 	bne.w	d978 <_svfprintf_r+0xd88>
    d198:	f01b 0f10 	tst.w	fp, #16
    d19c:	f040 8692 	bne.w	dec4 <_svfprintf_r+0x12d4>
    d1a0:	f01b 0f40 	tst.w	fp, #64	; 0x40
    d1a4:	f040 8797 	bne.w	e0d6 <_svfprintf_r+0x14e6>
    d1a8:	f41b 7f00 	tst.w	fp, #512	; 0x200
    d1ac:	f000 868a 	beq.w	dec4 <_svfprintf_r+0x12d4>
    d1b0:	9b08      	ldr	r3, [sp, #32]
    d1b2:	9904      	ldr	r1, [sp, #16]
    d1b4:	f853 2b04 	ldr.w	r2, [r3], #4
    d1b8:	9308      	str	r3, [sp, #32]
    d1ba:	7011      	strb	r1, [r2, #0]
    d1bc:	4644      	mov	r4, r8
    d1be:	e548      	b.n	cc52 <_svfprintf_r+0x62>
    d1c0:	f898 3000 	ldrb.w	r3, [r8]
    d1c4:	2b68      	cmp	r3, #104	; 0x68
    d1c6:	bf03      	ittte	eq
    d1c8:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    d1cc:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
    d1d0:	f108 0801 	addeq.w	r8, r8, #1
    d1d4:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
    d1d8:	e566      	b.n	cca8 <_svfprintf_r+0xb8>
    d1da:	f898 3000 	ldrb.w	r3, [r8]
    d1de:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
    d1e2:	e561      	b.n	cca8 <_svfprintf_r+0xb8>
    d1e4:	f898 3000 	ldrb.w	r3, [r8]
    d1e8:	2b6c      	cmp	r3, #108	; 0x6c
    d1ea:	bf03      	ittte	eq
    d1ec:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    d1f0:	f04b 0b20 	orreq.w	fp, fp, #32
    d1f4:	f108 0801 	addeq.w	r8, r8, #1
    d1f8:	f04b 0b10 	orrne.w	fp, fp, #16
    d1fc:	e554      	b.n	cca8 <_svfprintf_r+0xb8>
    d1fe:	930a      	str	r3, [sp, #40]	; 0x28
    d200:	f04b 0b10 	orr.w	fp, fp, #16
    d204:	f01b 0120 	ands.w	r1, fp, #32
    d208:	f000 8350 	beq.w	d8ac <_svfprintf_r+0xcbc>
    d20c:	9b08      	ldr	r3, [sp, #32]
    d20e:	3307      	adds	r3, #7
    d210:	f023 0307 	bic.w	r3, r3, #7
    d214:	6859      	ldr	r1, [r3, #4]
    d216:	f853 2b08 	ldr.w	r2, [r3], #8
    d21a:	9308      	str	r3, [sp, #32]
    d21c:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    d220:	2300      	movs	r3, #0
    d222:	e798      	b.n	d156 <_svfprintf_r+0x566>
    d224:	930a      	str	r3, [sp, #40]	; 0x28
    d226:	f04b 0510 	orr.w	r5, fp, #16
    d22a:	f015 0120 	ands.w	r1, r5, #32
    d22e:	f000 832e 	beq.w	d88e <_svfprintf_r+0xc9e>
    d232:	9b08      	ldr	r3, [sp, #32]
    d234:	3307      	adds	r3, #7
    d236:	f023 0307 	bic.w	r3, r3, #7
    d23a:	6859      	ldr	r1, [r3, #4]
    d23c:	f853 2b08 	ldr.w	r2, [r3], #8
    d240:	9308      	str	r3, [sp, #32]
    d242:	2301      	movs	r3, #1
    d244:	e787      	b.n	d156 <_svfprintf_r+0x566>
    d246:	bf00      	nop
    d248:	7fefffff 	.word	0x7fefffff
    d24c:	0001253c 	.word	0x0001253c
    d250:	00012540 	.word	0x00012540
    d254:	0001254c 	.word	0x0001254c
    d258:	f898 3000 	ldrb.w	r3, [r8]
    d25c:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    d260:	e522      	b.n	cca8 <_svfprintf_r+0xb8>
    d262:	4641      	mov	r1, r8
    d264:	f811 3b01 	ldrb.w	r3, [r1], #1
    d268:	2b2a      	cmp	r3, #42	; 0x2a
    d26a:	f001 8277 	beq.w	e75c <_svfprintf_r+0x1b6c>
    d26e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d272:	2a09      	cmp	r2, #9
    d274:	4688      	mov	r8, r1
    d276:	bf98      	it	ls
    d278:	2100      	movls	r1, #0
    d27a:	f201 818c 	bhi.w	e596 <_svfprintf_r+0x19a6>
    d27e:	f818 3b01 	ldrb.w	r3, [r8], #1
    d282:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    d286:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    d28a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d28e:	2a09      	cmp	r2, #9
    d290:	d9f5      	bls.n	d27e <_svfprintf_r+0x68e>
    d292:	9103      	str	r1, [sp, #12]
    d294:	e50a      	b.n	ccac <_svfprintf_r+0xbc>
    d296:	f898 3000 	ldrb.w	r3, [r8]
    d29a:	f04b 0b01 	orr.w	fp, fp, #1
    d29e:	e503      	b.n	cca8 <_svfprintf_r+0xb8>
    d2a0:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
    d2a4:	2b00      	cmp	r3, #0
    d2a6:	f47f ad84 	bne.w	cdb2 <_svfprintf_r+0x1c2>
    d2aa:	f898 3000 	ldrb.w	r3, [r8]
    d2ae:	f88d 606f 	strb.w	r6, [sp, #111]	; 0x6f
    d2b2:	e4f9      	b.n	cca8 <_svfprintf_r+0xb8>
    d2b4:	465d      	mov	r5, fp
    d2b6:	2b01      	cmp	r3, #1
    d2b8:	f000 81ab 	beq.w	d612 <_svfprintf_r+0xa22>
    d2bc:	2b02      	cmp	r3, #2
    d2be:	ac52      	add	r4, sp, #328	; 0x148
    d2c0:	d11f      	bne.n	d302 <_svfprintf_r+0x712>
    d2c2:	9812      	ldr	r0, [sp, #72]	; 0x48
    d2c4:	f002 030f 	and.w	r3, r2, #15
    d2c8:	0912      	lsrs	r2, r2, #4
    d2ca:	5cc3      	ldrb	r3, [r0, r3]
    d2cc:	f804 3d01 	strb.w	r3, [r4, #-1]!
    d2d0:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    d2d4:	0909      	lsrs	r1, r1, #4
    d2d6:	ea52 0301 	orrs.w	r3, r2, r1
    d2da:	d1f3      	bne.n	d2c4 <_svfprintf_r+0x6d4>
    d2dc:	ab52      	add	r3, sp, #328	; 0x148
    d2de:	1b1b      	subs	r3, r3, r4
    d2e0:	46ab      	mov	fp, r5
    d2e2:	9305      	str	r3, [sp, #20]
    d2e4:	9905      	ldr	r1, [sp, #20]
    d2e6:	9803      	ldr	r0, [sp, #12]
    d2e8:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    d2ec:	4281      	cmp	r1, r0
    d2ee:	f04f 0300 	mov.w	r3, #0
    d2f2:	bfb8      	it	lt
    d2f4:	4601      	movlt	r1, r0
    d2f6:	9307      	str	r3, [sp, #28]
    d2f8:	9102      	str	r1, [sp, #8]
    d2fa:	930c      	str	r3, [sp, #48]	; 0x30
    d2fc:	9310      	str	r3, [sp, #64]	; 0x40
    d2fe:	930b      	str	r3, [sp, #44]	; 0x2c
    d300:	e669      	b.n	cfd6 <_svfprintf_r+0x3e6>
    d302:	f002 0307 	and.w	r3, r2, #7
    d306:	08d2      	lsrs	r2, r2, #3
    d308:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    d30c:	08c9      	lsrs	r1, r1, #3
    d30e:	3330      	adds	r3, #48	; 0x30
    d310:	ea52 0601 	orrs.w	r6, r2, r1
    d314:	4620      	mov	r0, r4
    d316:	f804 3d01 	strb.w	r3, [r4, #-1]!
    d31a:	d1f2      	bne.n	d302 <_svfprintf_r+0x712>
    d31c:	07e9      	lsls	r1, r5, #31
    d31e:	d5dd      	bpl.n	d2dc <_svfprintf_r+0x6ec>
    d320:	2b30      	cmp	r3, #48	; 0x30
    d322:	d0db      	beq.n	d2dc <_svfprintf_r+0x6ec>
    d324:	2330      	movs	r3, #48	; 0x30
    d326:	3802      	subs	r0, #2
    d328:	f804 3c01 	strb.w	r3, [r4, #-1]
    d32c:	ab52      	add	r3, sp, #328	; 0x148
    d32e:	1a1b      	subs	r3, r3, r0
    d330:	46ab      	mov	fp, r5
    d332:	9305      	str	r3, [sp, #20]
    d334:	4604      	mov	r4, r0
    d336:	e7d5      	b.n	d2e4 <_svfprintf_r+0x6f4>
    d338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d33a:	2b65      	cmp	r3, #101	; 0x65
    d33c:	f340 80dc 	ble.w	d4f8 <_svfprintf_r+0x908>
    d340:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    d344:	2200      	movs	r2, #0
    d346:	2300      	movs	r3, #0
    d348:	f7fd fd58 	bl	adfc <__aeabi_dcmpeq>
    d34c:	2800      	cmp	r0, #0
    d34e:	f000 81c8 	beq.w	d6e2 <_svfprintf_r+0xaf2>
    d352:	2301      	movs	r3, #1
    d354:	f8c9 3004 	str.w	r3, [r9, #4]
    d358:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    d35a:	4abc      	ldr	r2, [pc, #752]	; (d64c <_svfprintf_r+0xa5c>)
    d35c:	f8c9 2000 	str.w	r2, [r9]
    d360:	3301      	adds	r3, #1
    d362:	3601      	adds	r6, #1
    d364:	2b07      	cmp	r3, #7
    d366:	9628      	str	r6, [sp, #160]	; 0xa0
    d368:	9327      	str	r3, [sp, #156]	; 0x9c
    d36a:	f300 8541 	bgt.w	ddf0 <_svfprintf_r+0x1200>
    d36e:	f109 0908 	add.w	r9, r9, #8
    d372:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    d374:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d376:	4293      	cmp	r3, r2
    d378:	f280 82c9 	bge.w	d90e <_svfprintf_r+0xd1e>
    d37c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d37e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d380:	441e      	add	r6, r3
    d382:	e9c9 2300 	strd	r2, r3, [r9]
    d386:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    d388:	9628      	str	r6, [sp, #160]	; 0xa0
    d38a:	3301      	adds	r3, #1
    d38c:	2b07      	cmp	r3, #7
    d38e:	9327      	str	r3, [sp, #156]	; 0x9c
    d390:	f300 8392 	bgt.w	dab8 <_svfprintf_r+0xec8>
    d394:	f109 0908 	add.w	r9, r9, #8
    d398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d39a:	1e5c      	subs	r4, r3, #1
    d39c:	2c00      	cmp	r4, #0
    d39e:	f77f adb8 	ble.w	cf12 <_svfprintf_r+0x322>
    d3a2:	2c10      	cmp	r4, #16
    d3a4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    d3a6:	4daa      	ldr	r5, [pc, #680]	; (d650 <_svfprintf_r+0xa60>)
    d3a8:	f340 855e 	ble.w	de68 <_svfprintf_r+0x1278>
    d3ac:	4632      	mov	r2, r6
    d3ae:	2710      	movs	r7, #16
    d3b0:	ee1a 6a10 	vmov	r6, s20
    d3b4:	e005      	b.n	d3c2 <_svfprintf_r+0x7d2>
    d3b6:	f109 0908 	add.w	r9, r9, #8
    d3ba:	3c10      	subs	r4, #16
    d3bc:	2c10      	cmp	r4, #16
    d3be:	f340 8552 	ble.w	de66 <_svfprintf_r+0x1276>
    d3c2:	3301      	adds	r3, #1
    d3c4:	3210      	adds	r2, #16
    d3c6:	2b07      	cmp	r3, #7
    d3c8:	e9c9 5700 	strd	r5, r7, [r9]
    d3cc:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    d3d0:	ddf1      	ble.n	d3b6 <_svfprintf_r+0x7c6>
    d3d2:	aa26      	add	r2, sp, #152	; 0x98
    d3d4:	4631      	mov	r1, r6
    d3d6:	4650      	mov	r0, sl
    d3d8:	f002 fc96 	bl	fd08 <__ssprint_r>
    d3dc:	2800      	cmp	r0, #0
    d3de:	f040 8082 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    d3e2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    d3e6:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    d3ea:	e7e6      	b.n	d3ba <_svfprintf_r+0x7ca>
    d3ec:	9b06      	ldr	r3, [sp, #24]
    d3ee:	9a02      	ldr	r2, [sp, #8]
    d3f0:	1a9f      	subs	r7, r3, r2
    d3f2:	2f00      	cmp	r7, #0
    d3f4:	f77f ad74 	ble.w	cee0 <_svfprintf_r+0x2f0>
    d3f8:	2f10      	cmp	r7, #16
    d3fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    d3fc:	4d94      	ldr	r5, [pc, #592]	; (d650 <_svfprintf_r+0xa60>)
    d3fe:	dd22      	ble.n	d446 <_svfprintf_r+0x856>
    d400:	4632      	mov	r2, r6
    d402:	ee1a 6a10 	vmov	r6, s20
    d406:	e004      	b.n	d412 <_svfprintf_r+0x822>
    d408:	3f10      	subs	r7, #16
    d40a:	2f10      	cmp	r7, #16
    d40c:	f109 0908 	add.w	r9, r9, #8
    d410:	dd18      	ble.n	d444 <_svfprintf_r+0x854>
    d412:	3301      	adds	r3, #1
    d414:	3210      	adds	r2, #16
    d416:	2110      	movs	r1, #16
    d418:	2b07      	cmp	r3, #7
    d41a:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    d41e:	f8c9 5000 	str.w	r5, [r9]
    d422:	f8c9 1004 	str.w	r1, [r9, #4]
    d426:	ddef      	ble.n	d408 <_svfprintf_r+0x818>
    d428:	aa26      	add	r2, sp, #152	; 0x98
    d42a:	4631      	mov	r1, r6
    d42c:	4650      	mov	r0, sl
    d42e:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    d432:	f002 fc69 	bl	fd08 <__ssprint_r>
    d436:	2800      	cmp	r0, #0
    d438:	d155      	bne.n	d4e6 <_svfprintf_r+0x8f6>
    d43a:	3f10      	subs	r7, #16
    d43c:	2f10      	cmp	r7, #16
    d43e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    d442:	dce6      	bgt.n	d412 <_svfprintf_r+0x822>
    d444:	4616      	mov	r6, r2
    d446:	3301      	adds	r3, #1
    d448:	443e      	add	r6, r7
    d44a:	2b07      	cmp	r3, #7
    d44c:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    d450:	f8c9 5000 	str.w	r5, [r9]
    d454:	f8c9 7004 	str.w	r7, [r9, #4]
    d458:	f300 8520 	bgt.w	de9c <_svfprintf_r+0x12ac>
    d45c:	9b03      	ldr	r3, [sp, #12]
    d45e:	9a05      	ldr	r2, [sp, #20]
    d460:	1a9f      	subs	r7, r3, r2
    d462:	2f00      	cmp	r7, #0
    d464:	f109 0908 	add.w	r9, r9, #8
    d468:	f77f ad40 	ble.w	ceec <_svfprintf_r+0x2fc>
    d46c:	2f10      	cmp	r7, #16
    d46e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    d470:	4d77      	ldr	r5, [pc, #476]	; (d650 <_svfprintf_r+0xa60>)
    d472:	dd21      	ble.n	d4b8 <_svfprintf_r+0x8c8>
    d474:	4632      	mov	r2, r6
    d476:	ee1a 6a10 	vmov	r6, s20
    d47a:	e004      	b.n	d486 <_svfprintf_r+0x896>
    d47c:	3f10      	subs	r7, #16
    d47e:	2f10      	cmp	r7, #16
    d480:	f109 0908 	add.w	r9, r9, #8
    d484:	dd17      	ble.n	d4b6 <_svfprintf_r+0x8c6>
    d486:	3301      	adds	r3, #1
    d488:	3210      	adds	r2, #16
    d48a:	2110      	movs	r1, #16
    d48c:	2b07      	cmp	r3, #7
    d48e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    d492:	f8c9 5000 	str.w	r5, [r9]
    d496:	f8c9 1004 	str.w	r1, [r9, #4]
    d49a:	ddef      	ble.n	d47c <_svfprintf_r+0x88c>
    d49c:	aa26      	add	r2, sp, #152	; 0x98
    d49e:	4631      	mov	r1, r6
    d4a0:	4650      	mov	r0, sl
    d4a2:	f002 fc31 	bl	fd08 <__ssprint_r>
    d4a6:	b9f0      	cbnz	r0, d4e6 <_svfprintf_r+0x8f6>
    d4a8:	3f10      	subs	r7, #16
    d4aa:	2f10      	cmp	r7, #16
    d4ac:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    d4b0:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    d4b4:	dce7      	bgt.n	d486 <_svfprintf_r+0x896>
    d4b6:	4616      	mov	r6, r2
    d4b8:	3301      	adds	r3, #1
    d4ba:	443e      	add	r6, r7
    d4bc:	2b07      	cmp	r3, #7
    d4be:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    d4c2:	f8c9 5000 	str.w	r5, [r9]
    d4c6:	f8c9 7004 	str.w	r7, [r9, #4]
    d4ca:	f300 81d2 	bgt.w	d872 <_svfprintf_r+0xc82>
    d4ce:	f109 0908 	add.w	r9, r9, #8
    d4d2:	e50b      	b.n	ceec <_svfprintf_r+0x2fc>
    d4d4:	ee1a 1a10 	vmov	r1, s20
    d4d8:	aa26      	add	r2, sp, #152	; 0x98
    d4da:	4650      	mov	r0, sl
    d4dc:	f002 fc14 	bl	fd08 <__ssprint_r>
    d4e0:	2800      	cmp	r0, #0
    d4e2:	f43f ad2a 	beq.w	cf3a <_svfprintf_r+0x34a>
    d4e6:	9b07      	ldr	r3, [sp, #28]
    d4e8:	2b00      	cmp	r3, #0
    d4ea:	f43f ac8c 	beq.w	ce06 <_svfprintf_r+0x216>
    d4ee:	9907      	ldr	r1, [sp, #28]
    d4f0:	4650      	mov	r0, sl
    d4f2:	f7fe fe97 	bl	c224 <_free_r>
    d4f6:	e486      	b.n	ce06 <_svfprintf_r+0x216>
    d4f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d4fa:	2b01      	cmp	r3, #1
    d4fc:	f340 816f 	ble.w	d7de <_svfprintf_r+0xbee>
    d500:	9f27      	ldr	r7, [sp, #156]	; 0x9c
    d502:	f8c9 4000 	str.w	r4, [r9]
    d506:	2301      	movs	r3, #1
    d508:	441f      	add	r7, r3
    d50a:	3601      	adds	r6, #1
    d50c:	2f07      	cmp	r7, #7
    d50e:	f8c9 3004 	str.w	r3, [r9, #4]
    d512:	9628      	str	r6, [sp, #160]	; 0xa0
    d514:	9727      	str	r7, [sp, #156]	; 0x9c
    d516:	f300 81de 	bgt.w	d8d6 <_svfprintf_r+0xce6>
    d51a:	f109 0908 	add.w	r9, r9, #8
    d51e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d520:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d522:	3701      	adds	r7, #1
    d524:	441e      	add	r6, r3
    d526:	2f07      	cmp	r7, #7
    d528:	e9c9 2300 	strd	r2, r3, [r9]
    d52c:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
    d530:	f300 81df 	bgt.w	d8f2 <_svfprintf_r+0xd02>
    d534:	f109 0908 	add.w	r9, r9, #8
    d538:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    d53c:	2200      	movs	r2, #0
    d53e:	2300      	movs	r3, #0
    d540:	f7fd fc5c 	bl	adfc <__aeabi_dcmpeq>
    d544:	2800      	cmp	r0, #0
    d546:	f040 8169 	bne.w	d81c <_svfprintf_r+0xc2c>
    d54a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d54c:	3701      	adds	r7, #1
    d54e:	3b01      	subs	r3, #1
    d550:	3401      	adds	r4, #1
    d552:	441e      	add	r6, r3
    d554:	2f07      	cmp	r7, #7
    d556:	f8c9 4000 	str.w	r4, [r9]
    d55a:	9727      	str	r7, [sp, #156]	; 0x9c
    d55c:	f8c9 3004 	str.w	r3, [r9, #4]
    d560:	9628      	str	r6, [sp, #160]	; 0xa0
    d562:	f300 814d 	bgt.w	d800 <_svfprintf_r+0xc10>
    d566:	f109 0908 	add.w	r9, r9, #8
    d56a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d56c:	f8c9 3004 	str.w	r3, [r9, #4]
    d570:	3701      	adds	r7, #1
    d572:	441e      	add	r6, r3
    d574:	2f07      	cmp	r7, #7
    d576:	ab20      	add	r3, sp, #128	; 0x80
    d578:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
    d57c:	f8c9 3000 	str.w	r3, [r9]
    d580:	f77f acc5 	ble.w	cf0e <_svfprintf_r+0x31e>
    d584:	ee1a 1a10 	vmov	r1, s20
    d588:	aa26      	add	r2, sp, #152	; 0x98
    d58a:	4650      	mov	r0, sl
    d58c:	f002 fbbc 	bl	fd08 <__ssprint_r>
    d590:	2800      	cmp	r0, #0
    d592:	d1a8      	bne.n	d4e6 <_svfprintf_r+0x8f6>
    d594:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    d596:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    d59a:	e4ba      	b.n	cf12 <_svfprintf_r+0x322>
    d59c:	2f10      	cmp	r7, #16
    d59e:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
    d5a2:	4d2c      	ldr	r5, [pc, #176]	; (d654 <_svfprintf_r+0xa64>)
    d5a4:	dd24      	ble.n	d5f0 <_svfprintf_r+0xa00>
    d5a6:	9318      	str	r3, [sp, #96]	; 0x60
    d5a8:	9419      	str	r4, [sp, #100]	; 0x64
    d5aa:	2610      	movs	r6, #16
    d5ac:	ee1a 4a10 	vmov	r4, s20
    d5b0:	460b      	mov	r3, r1
    d5b2:	e004      	b.n	d5be <_svfprintf_r+0x9ce>
    d5b4:	3f10      	subs	r7, #16
    d5b6:	2f10      	cmp	r7, #16
    d5b8:	f109 0908 	add.w	r9, r9, #8
    d5bc:	dd15      	ble.n	d5ea <_svfprintf_r+0x9fa>
    d5be:	3201      	adds	r2, #1
    d5c0:	3310      	adds	r3, #16
    d5c2:	2a07      	cmp	r2, #7
    d5c4:	e9c9 5600 	strd	r5, r6, [r9]
    d5c8:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
    d5cc:	ddf2      	ble.n	d5b4 <_svfprintf_r+0x9c4>
    d5ce:	aa26      	add	r2, sp, #152	; 0x98
    d5d0:	4621      	mov	r1, r4
    d5d2:	4650      	mov	r0, sl
    d5d4:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    d5d8:	f002 fb96 	bl	fd08 <__ssprint_r>
    d5dc:	2800      	cmp	r0, #0
    d5de:	d182      	bne.n	d4e6 <_svfprintf_r+0x8f6>
    d5e0:	3f10      	subs	r7, #16
    d5e2:	2f10      	cmp	r7, #16
    d5e4:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
    d5e8:	dce9      	bgt.n	d5be <_svfprintf_r+0x9ce>
    d5ea:	4619      	mov	r1, r3
    d5ec:	e9dd 3418 	ldrd	r3, r4, [sp, #96]	; 0x60
    d5f0:	3201      	adds	r2, #1
    d5f2:	187e      	adds	r6, r7, r1
    d5f4:	2a07      	cmp	r2, #7
    d5f6:	e9cd 2627 	strd	r2, r6, [sp, #156]	; 0x9c
    d5fa:	f8c9 5000 	str.w	r5, [r9]
    d5fe:	f8c9 7004 	str.w	r7, [r9, #4]
    d602:	f300 83a3 	bgt.w	dd4c <_svfprintf_r+0x115c>
    d606:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    d60a:	f109 0908 	add.w	r9, r9, #8
    d60e:	e43f      	b.n	ce90 <_svfprintf_r+0x2a0>
    d610:	465d      	mov	r5, fp
    d612:	2a0a      	cmp	r2, #10
    d614:	f171 0300 	sbcs.w	r3, r1, #0
    d618:	f080 8334 	bcs.w	dc84 <_svfprintf_r+0x1094>
    d61c:	3230      	adds	r2, #48	; 0x30
    d61e:	2301      	movs	r3, #1
    d620:	f88d 2147 	strb.w	r2, [sp, #327]	; 0x147
    d624:	46ab      	mov	fp, r5
    d626:	9305      	str	r3, [sp, #20]
    d628:	f20d 1447 	addw	r4, sp, #327	; 0x147
    d62c:	e65a      	b.n	d2e4 <_svfprintf_r+0x6f4>
    d62e:	ee1a 1a10 	vmov	r1, s20
    d632:	aa26      	add	r2, sp, #152	; 0x98
    d634:	4650      	mov	r0, sl
    d636:	9318      	str	r3, [sp, #96]	; 0x60
    d638:	f002 fb66 	bl	fd08 <__ssprint_r>
    d63c:	2800      	cmp	r0, #0
    d63e:	f47f af52 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    d642:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    d644:	9b18      	ldr	r3, [sp, #96]	; 0x60
    d646:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    d64a:	e433      	b.n	ceb4 <_svfprintf_r+0x2c4>
    d64c:	0001257c 	.word	0x0001257c
    d650:	00012590 	.word	0x00012590
    d654:	00012580 	.word	0x00012580
    d658:	ee1a 1a10 	vmov	r1, s20
    d65c:	aa26      	add	r2, sp, #152	; 0x98
    d65e:	4650      	mov	r0, sl
    d660:	f002 fb52 	bl	fd08 <__ssprint_r>
    d664:	2800      	cmp	r0, #0
    d666:	f47f af3e 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    d66a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    d66c:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    d670:	e432      	b.n	ced8 <_svfprintf_r+0x2e8>
    d672:	2c10      	cmp	r4, #16
    d674:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    d676:	4dbe      	ldr	r5, [pc, #760]	; (d970 <_svfprintf_r+0xd80>)
    d678:	dd1f      	ble.n	d6ba <_svfprintf_r+0xaca>
    d67a:	ee1a ba10 	vmov	fp, s20
    d67e:	2710      	movs	r7, #16
    d680:	e004      	b.n	d68c <_svfprintf_r+0xa9c>
    d682:	3c10      	subs	r4, #16
    d684:	2c10      	cmp	r4, #16
    d686:	f109 0908 	add.w	r9, r9, #8
    d68a:	dd16      	ble.n	d6ba <_svfprintf_r+0xaca>
    d68c:	3301      	adds	r3, #1
    d68e:	3610      	adds	r6, #16
    d690:	2b07      	cmp	r3, #7
    d692:	e9c9 5700 	strd	r5, r7, [r9]
    d696:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    d69a:	ddf2      	ble.n	d682 <_svfprintf_r+0xa92>
    d69c:	aa26      	add	r2, sp, #152	; 0x98
    d69e:	4659      	mov	r1, fp
    d6a0:	4650      	mov	r0, sl
    d6a2:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    d6a6:	f002 fb2f 	bl	fd08 <__ssprint_r>
    d6aa:	2800      	cmp	r0, #0
    d6ac:	f47f af1b 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    d6b0:	3c10      	subs	r4, #16
    d6b2:	2c10      	cmp	r4, #16
    d6b4:	e9dd 3627 	ldrd	r3, r6, [sp, #156]	; 0x9c
    d6b8:	dce8      	bgt.n	d68c <_svfprintf_r+0xa9c>
    d6ba:	3301      	adds	r3, #1
    d6bc:	4426      	add	r6, r4
    d6be:	2b07      	cmp	r3, #7
    d6c0:	e9c9 5400 	strd	r5, r4, [r9]
    d6c4:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    d6c8:	f77f ac2c 	ble.w	cf24 <_svfprintf_r+0x334>
    d6cc:	ee1a 1a10 	vmov	r1, s20
    d6d0:	aa26      	add	r2, sp, #152	; 0x98
    d6d2:	4650      	mov	r0, sl
    d6d4:	f002 fb18 	bl	fd08 <__ssprint_r>
    d6d8:	2800      	cmp	r0, #0
    d6da:	f47f af04 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    d6de:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    d6e0:	e420      	b.n	cf24 <_svfprintf_r+0x334>
    d6e2:	991d      	ldr	r1, [sp, #116]	; 0x74
    d6e4:	2900      	cmp	r1, #0
    d6e6:	f340 8343 	ble.w	dd70 <_svfprintf_r+0x1180>
    d6ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    d6ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d6ee:	429d      	cmp	r5, r3
    d6f0:	bfa8      	it	ge
    d6f2:	461d      	movge	r5, r3
    d6f4:	2d00      	cmp	r5, #0
    d6f6:	dd0b      	ble.n	d710 <_svfprintf_r+0xb20>
    d6f8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    d6fa:	3301      	adds	r3, #1
    d6fc:	442e      	add	r6, r5
    d6fe:	2b07      	cmp	r3, #7
    d700:	e9c9 4500 	strd	r4, r5, [r9]
    d704:	9628      	str	r6, [sp, #160]	; 0xa0
    d706:	9327      	str	r3, [sp, #156]	; 0x9c
    d708:	f300 86fc 	bgt.w	e504 <_svfprintf_r+0x1914>
    d70c:	f109 0908 	add.w	r9, r9, #8
    d710:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    d712:	2d00      	cmp	r5, #0
    d714:	bfa8      	it	ge
    d716:	1b7f      	subge	r7, r7, r5
    d718:	2f00      	cmp	r7, #0
    d71a:	f300 81f8 	bgt.w	db0e <_svfprintf_r+0xf1e>
    d71e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d720:	f41b 6f80 	tst.w	fp, #1024	; 0x400
    d724:	4423      	add	r3, r4
    d726:	9305      	str	r3, [sp, #20]
    d728:	f040 8218 	bne.w	db5c <_svfprintf_r+0xf6c>
    d72c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    d72e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d730:	4293      	cmp	r3, r2
    d732:	db03      	blt.n	d73c <_svfprintf_r+0xb4c>
    d734:	f01b 0f01 	tst.w	fp, #1
    d738:	f000 84bc 	beq.w	e0b4 <_svfprintf_r+0x14c4>
    d73c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d73e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    d740:	4416      	add	r6, r2
    d742:	e9c9 1200 	strd	r1, r2, [r9]
    d746:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    d748:	9628      	str	r6, [sp, #160]	; 0xa0
    d74a:	3201      	adds	r2, #1
    d74c:	2a07      	cmp	r2, #7
    d74e:	9227      	str	r2, [sp, #156]	; 0x9c
    d750:	f300 86e6 	bgt.w	e520 <_svfprintf_r+0x1930>
    d754:	f109 0908 	add.w	r9, r9, #8
    d758:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d75a:	18a5      	adds	r5, r4, r2
    d75c:	1ad4      	subs	r4, r2, r3
    d75e:	9b05      	ldr	r3, [sp, #20]
    d760:	1aed      	subs	r5, r5, r3
    d762:	42a5      	cmp	r5, r4
    d764:	bfa8      	it	ge
    d766:	4625      	movge	r5, r4
    d768:	2d00      	cmp	r5, #0
    d76a:	dd0d      	ble.n	d788 <_svfprintf_r+0xb98>
    d76c:	f8c9 3000 	str.w	r3, [r9]
    d770:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    d772:	f8c9 5004 	str.w	r5, [r9, #4]
    d776:	3301      	adds	r3, #1
    d778:	442e      	add	r6, r5
    d77a:	2b07      	cmp	r3, #7
    d77c:	9628      	str	r6, [sp, #160]	; 0xa0
    d77e:	9327      	str	r3, [sp, #156]	; 0x9c
    d780:	f300 86f8 	bgt.w	e574 <_svfprintf_r+0x1984>
    d784:	f109 0908 	add.w	r9, r9, #8
    d788:	2d00      	cmp	r5, #0
    d78a:	bfa8      	it	ge
    d78c:	1b64      	subge	r4, r4, r5
    d78e:	2c00      	cmp	r4, #0
    d790:	f77f abbf 	ble.w	cf12 <_svfprintf_r+0x322>
    d794:	2c10      	cmp	r4, #16
    d796:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    d798:	4d76      	ldr	r5, [pc, #472]	; (d974 <_svfprintf_r+0xd84>)
    d79a:	f340 8365 	ble.w	de68 <_svfprintf_r+0x1278>
    d79e:	4632      	mov	r2, r6
    d7a0:	2710      	movs	r7, #16
    d7a2:	ee1a 6a10 	vmov	r6, s20
    d7a6:	e005      	b.n	d7b4 <_svfprintf_r+0xbc4>
    d7a8:	f109 0908 	add.w	r9, r9, #8
    d7ac:	3c10      	subs	r4, #16
    d7ae:	2c10      	cmp	r4, #16
    d7b0:	f340 8359 	ble.w	de66 <_svfprintf_r+0x1276>
    d7b4:	3301      	adds	r3, #1
    d7b6:	3210      	adds	r2, #16
    d7b8:	2b07      	cmp	r3, #7
    d7ba:	e9c9 5700 	strd	r5, r7, [r9]
    d7be:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    d7c2:	ddf1      	ble.n	d7a8 <_svfprintf_r+0xbb8>
    d7c4:	aa26      	add	r2, sp, #152	; 0x98
    d7c6:	4631      	mov	r1, r6
    d7c8:	4650      	mov	r0, sl
    d7ca:	f002 fa9d 	bl	fd08 <__ssprint_r>
    d7ce:	2800      	cmp	r0, #0
    d7d0:	f47f ae89 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    d7d4:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    d7d8:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    d7dc:	e7e6      	b.n	d7ac <_svfprintf_r+0xbbc>
    d7de:	f01b 0f01 	tst.w	fp, #1
    d7e2:	f47f ae8d 	bne.w	d500 <_svfprintf_r+0x910>
    d7e6:	9f27      	ldr	r7, [sp, #156]	; 0x9c
    d7e8:	f8c9 4000 	str.w	r4, [r9]
    d7ec:	2301      	movs	r3, #1
    d7ee:	441f      	add	r7, r3
    d7f0:	3601      	adds	r6, #1
    d7f2:	2f07      	cmp	r7, #7
    d7f4:	f8c9 3004 	str.w	r3, [r9, #4]
    d7f8:	9628      	str	r6, [sp, #160]	; 0xa0
    d7fa:	9727      	str	r7, [sp, #156]	; 0x9c
    d7fc:	f77f aeb3 	ble.w	d566 <_svfprintf_r+0x976>
    d800:	ee1a 1a10 	vmov	r1, s20
    d804:	aa26      	add	r2, sp, #152	; 0x98
    d806:	4650      	mov	r0, sl
    d808:	f002 fa7e 	bl	fd08 <__ssprint_r>
    d80c:	2800      	cmp	r0, #0
    d80e:	f47f ae6a 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    d812:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
    d816:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    d81a:	e6a6      	b.n	d56a <_svfprintf_r+0x97a>
    d81c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d81e:	1e5c      	subs	r4, r3, #1
    d820:	2c00      	cmp	r4, #0
    d822:	f77f aea2 	ble.w	d56a <_svfprintf_r+0x97a>
    d826:	2c10      	cmp	r4, #16
    d828:	4d52      	ldr	r5, [pc, #328]	; (d974 <_svfprintf_r+0xd84>)
    d82a:	f340 8356 	ble.w	deda <_svfprintf_r+0x12ea>
    d82e:	f8cd 800c 	str.w	r8, [sp, #12]
    d832:	2310      	movs	r3, #16
    d834:	ee1a 8a10 	vmov	r8, s20
    d838:	e005      	b.n	d846 <_svfprintf_r+0xc56>
    d83a:	f109 0908 	add.w	r9, r9, #8
    d83e:	3c10      	subs	r4, #16
    d840:	2c10      	cmp	r4, #16
    d842:	f340 8348 	ble.w	ded6 <_svfprintf_r+0x12e6>
    d846:	3701      	adds	r7, #1
    d848:	3610      	adds	r6, #16
    d84a:	2f07      	cmp	r7, #7
    d84c:	e9c9 5300 	strd	r5, r3, [r9]
    d850:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
    d854:	ddf1      	ble.n	d83a <_svfprintf_r+0xc4a>
    d856:	aa26      	add	r2, sp, #152	; 0x98
    d858:	4641      	mov	r1, r8
    d85a:	4650      	mov	r0, sl
    d85c:	f002 fa54 	bl	fd08 <__ssprint_r>
    d860:	2800      	cmp	r0, #0
    d862:	f47f ae40 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    d866:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
    d86a:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    d86e:	2310      	movs	r3, #16
    d870:	e7e5      	b.n	d83e <_svfprintf_r+0xc4e>
    d872:	ee1a 1a10 	vmov	r1, s20
    d876:	aa26      	add	r2, sp, #152	; 0x98
    d878:	4650      	mov	r0, sl
    d87a:	f002 fa45 	bl	fd08 <__ssprint_r>
    d87e:	2800      	cmp	r0, #0
    d880:	f47f ae31 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    d884:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    d886:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    d88a:	f7ff bb2f 	b.w	ceec <_svfprintf_r+0x2fc>
    d88e:	f015 0310 	ands.w	r3, r5, #16
    d892:	d158      	bne.n	d946 <_svfprintf_r+0xd56>
    d894:	f015 0240 	ands.w	r2, r5, #64	; 0x40
    d898:	f000 836e 	beq.w	df78 <_svfprintf_r+0x1388>
    d89c:	9808      	ldr	r0, [sp, #32]
    d89e:	f850 2b04 	ldr.w	r2, [r0], #4
    d8a2:	9008      	str	r0, [sp, #32]
    d8a4:	4619      	mov	r1, r3
    d8a6:	b292      	uxth	r2, r2
    d8a8:	2301      	movs	r3, #1
    d8aa:	e454      	b.n	d156 <_svfprintf_r+0x566>
    d8ac:	f01b 0310 	ands.w	r3, fp, #16
    d8b0:	d144      	bne.n	d93c <_svfprintf_r+0xd4c>
    d8b2:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    d8b6:	f000 836e 	beq.w	df96 <_svfprintf_r+0x13a6>
    d8ba:	9808      	ldr	r0, [sp, #32]
    d8bc:	f850 2b04 	ldr.w	r2, [r0], #4
    d8c0:	9008      	str	r0, [sp, #32]
    d8c2:	4619      	mov	r1, r3
    d8c4:	b292      	uxth	r2, r2
    d8c6:	e4a9      	b.n	d21c <_svfprintf_r+0x62c>
    d8c8:	4252      	negs	r2, r2
    d8ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d8ce:	465d      	mov	r5, fp
    d8d0:	202d      	movs	r0, #45	; 0x2d
    d8d2:	2301      	movs	r3, #1
    d8d4:	e440      	b.n	d158 <_svfprintf_r+0x568>
    d8d6:	ee1a 1a10 	vmov	r1, s20
    d8da:	aa26      	add	r2, sp, #152	; 0x98
    d8dc:	4650      	mov	r0, sl
    d8de:	f002 fa13 	bl	fd08 <__ssprint_r>
    d8e2:	2800      	cmp	r0, #0
    d8e4:	f47f adff 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    d8e8:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
    d8ec:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    d8f0:	e615      	b.n	d51e <_svfprintf_r+0x92e>
    d8f2:	ee1a 1a10 	vmov	r1, s20
    d8f6:	aa26      	add	r2, sp, #152	; 0x98
    d8f8:	4650      	mov	r0, sl
    d8fa:	f002 fa05 	bl	fd08 <__ssprint_r>
    d8fe:	2800      	cmp	r0, #0
    d900:	f47f adf1 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    d904:	e9dd 7627 	ldrd	r7, r6, [sp, #156]	; 0x9c
    d908:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    d90c:	e614      	b.n	d538 <_svfprintf_r+0x948>
    d90e:	f01b 0f01 	tst.w	fp, #1
    d912:	f43f aafe 	beq.w	cf12 <_svfprintf_r+0x322>
    d916:	e531      	b.n	d37c <_svfprintf_r+0x78c>
    d918:	9308      	str	r3, [sp, #32]
    d91a:	f898 3000 	ldrb.w	r3, [r8]
    d91e:	f7ff b9c3 	b.w	cca8 <_svfprintf_r+0xb8>
    d922:	ac52      	add	r4, sp, #328	; 0x148
    d924:	e4de      	b.n	d2e4 <_svfprintf_r+0x6f4>
    d926:	f41b 7f00 	tst.w	fp, #512	; 0x200
    d92a:	f040 83cd 	bne.w	e0c8 <_svfprintf_r+0x14d8>
    d92e:	f853 2b04 	ldr.w	r2, [r3], #4
    d932:	9308      	str	r3, [sp, #32]
    d934:	17d1      	asrs	r1, r2, #31
    d936:	460b      	mov	r3, r1
    d938:	f7ff bbbc 	b.w	d0b4 <_svfprintf_r+0x4c4>
    d93c:	9b08      	ldr	r3, [sp, #32]
    d93e:	f853 2b04 	ldr.w	r2, [r3], #4
    d942:	9308      	str	r3, [sp, #32]
    d944:	e46a      	b.n	d21c <_svfprintf_r+0x62c>
    d946:	9b08      	ldr	r3, [sp, #32]
    d948:	f853 2b04 	ldr.w	r2, [r3], #4
    d94c:	9308      	str	r3, [sp, #32]
    d94e:	2301      	movs	r3, #1
    d950:	e401      	b.n	d156 <_svfprintf_r+0x566>
    d952:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d954:	2b00      	cmp	r3, #0
    d956:	f43f aa2c 	beq.w	cdb2 <_svfprintf_r+0x1c2>
    d95a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d95c:	781b      	ldrb	r3, [r3, #0]
    d95e:	2b00      	cmp	r3, #0
    d960:	f43f aa27 	beq.w	cdb2 <_svfprintf_r+0x1c2>
    d964:	f898 3000 	ldrb.w	r3, [r8]
    d968:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
    d96c:	f7ff b99c 	b.w	cca8 <_svfprintf_r+0xb8>
    d970:	00012580 	.word	0x00012580
    d974:	00012590 	.word	0x00012590
    d978:	9b08      	ldr	r3, [sp, #32]
    d97a:	9804      	ldr	r0, [sp, #16]
    d97c:	f853 1b04 	ldr.w	r1, [r3], #4
    d980:	9308      	str	r3, [sp, #32]
    d982:	17c2      	asrs	r2, r0, #31
    d984:	e9c1 0200 	strd	r0, r2, [r1]
    d988:	4644      	mov	r4, r8
    d98a:	f7ff b962 	b.w	cc52 <_svfprintf_r+0x62>
    d98e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    d992:	4602      	mov	r2, r0
    d994:	460b      	mov	r3, r1
    d996:	f7fd fa63 	bl	ae60 <__aeabi_dcmpun>
    d99a:	2800      	cmp	r0, #0
    d99c:	f040 86b2 	bne.w	e704 <_svfprintf_r+0x1b14>
    d9a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d9a2:	2b61      	cmp	r3, #97	; 0x61
    d9a4:	f000 8566 	beq.w	e474 <_svfprintf_r+0x1884>
    d9a8:	2b41      	cmp	r3, #65	; 0x41
    d9aa:	f000 85c8 	beq.w	e53e <_svfprintf_r+0x194e>
    d9ae:	9b03      	ldr	r3, [sp, #12]
    d9b0:	3301      	adds	r3, #1
    d9b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d9b4:	f023 0320 	bic.w	r3, r3, #32
    d9b8:	9302      	str	r3, [sp, #8]
    d9ba:	f000 8466 	beq.w	e28a <_svfprintf_r+0x169a>
    d9be:	2b47      	cmp	r3, #71	; 0x47
    d9c0:	d104      	bne.n	d9cc <_svfprintf_r+0xddc>
    d9c2:	9b03      	ldr	r3, [sp, #12]
    d9c4:	2b00      	cmp	r3, #0
    d9c6:	bf08      	it	eq
    d9c8:	2301      	moveq	r3, #1
    d9ca:	9303      	str	r3, [sp, #12]
    d9cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    d9d0:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
    d9d4:	2900      	cmp	r1, #0
    d9d6:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    d9da:	f04f 0300 	mov.w	r3, #0
    d9de:	4693      	mov	fp, r2
    d9e0:	f2c0 8584 	blt.w	e4ec <_svfprintf_r+0x18fc>
    d9e4:	ec41 0b18 	vmov	d8, r0, r1
    d9e8:	9318      	str	r3, [sp, #96]	; 0x60
    d9ea:	9307      	str	r3, [sp, #28]
    d9ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d9ee:	3b41      	subs	r3, #65	; 0x41
    d9f0:	2b25      	cmp	r3, #37	; 0x25
    d9f2:	f200 8379 	bhi.w	e0e8 <_svfprintf_r+0x14f8>
    d9f6:	e8df f013 	tbh	[pc, r3, lsl #1]
    d9fa:	0453      	.short	0x0453
    d9fc:	03770377 	.word	0x03770377
    da00:	044c0377 	.word	0x044c0377
    da04:	03770450 	.word	0x03770450
    da08:	03770377 	.word	0x03770377
    da0c:	03770377 	.word	0x03770377
    da10:	03770377 	.word	0x03770377
    da14:	03770377 	.word	0x03770377
    da18:	03770377 	.word	0x03770377
    da1c:	03770377 	.word	0x03770377
    da20:	03770377 	.word	0x03770377
    da24:	03770377 	.word	0x03770377
    da28:	03770377 	.word	0x03770377
    da2c:	03770377 	.word	0x03770377
    da30:	03770377 	.word	0x03770377
    da34:	03770377 	.word	0x03770377
    da38:	03770377 	.word	0x03770377
    da3c:	03770377 	.word	0x03770377
    da40:	044c0377 	.word	0x044c0377
    da44:	0450      	.short	0x0450
    da46:	930a      	str	r3, [sp, #40]	; 0x28
    da48:	465d      	mov	r5, fp
    da4a:	f7ff bbee 	b.w	d22a <_svfprintf_r+0x63a>
    da4e:	930a      	str	r3, [sp, #40]	; 0x28
    da50:	4bb9      	ldr	r3, [pc, #740]	; (dd38 <_svfprintf_r+0x1148>)
    da52:	9312      	str	r3, [sp, #72]	; 0x48
    da54:	f01b 0120 	ands.w	r1, fp, #32
    da58:	f000 80ff 	beq.w	dc5a <_svfprintf_r+0x106a>
    da5c:	9b08      	ldr	r3, [sp, #32]
    da5e:	3307      	adds	r3, #7
    da60:	f023 0307 	bic.w	r3, r3, #7
    da64:	6859      	ldr	r1, [r3, #4]
    da66:	f853 2b08 	ldr.w	r2, [r3], #8
    da6a:	9308      	str	r3, [sp, #32]
    da6c:	f01b 0f01 	tst.w	fp, #1
    da70:	d00a      	beq.n	da88 <_svfprintf_r+0xe98>
    da72:	ea52 0301 	orrs.w	r3, r2, r1
    da76:	d007      	beq.n	da88 <_svfprintf_r+0xe98>
    da78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    da7a:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    da7e:	2330      	movs	r3, #48	; 0x30
    da80:	f04b 0b02 	orr.w	fp, fp, #2
    da84:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    da88:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    da8c:	2302      	movs	r3, #2
    da8e:	f7ff bb62 	b.w	d156 <_svfprintf_r+0x566>
    da92:	930a      	str	r3, [sp, #40]	; 0x28
    da94:	f7ff bbb6 	b.w	d204 <_svfprintf_r+0x614>
    da98:	930a      	str	r3, [sp, #40]	; 0x28
    da9a:	4ba8      	ldr	r3, [pc, #672]	; (dd3c <_svfprintf_r+0x114c>)
    da9c:	9312      	str	r3, [sp, #72]	; 0x48
    da9e:	e7d9      	b.n	da54 <_svfprintf_r+0xe64>
    daa0:	9b08      	ldr	r3, [sp, #32]
    daa2:	2101      	movs	r1, #1
    daa4:	f853 2b04 	ldr.w	r2, [r3], #4
    daa8:	9102      	str	r1, [sp, #8]
    daaa:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
    daae:	9308      	str	r3, [sp, #32]
    dab0:	9105      	str	r1, [sp, #20]
    dab2:	ac39      	add	r4, sp, #228	; 0xe4
    dab4:	f7ff bab5 	b.w	d022 <_svfprintf_r+0x432>
    dab8:	ee1a 1a10 	vmov	r1, s20
    dabc:	aa26      	add	r2, sp, #152	; 0x98
    dabe:	4650      	mov	r0, sl
    dac0:	f002 f922 	bl	fd08 <__ssprint_r>
    dac4:	2800      	cmp	r0, #0
    dac6:	f47f ad0e 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    daca:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    dacc:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    dad0:	e462      	b.n	d398 <_svfprintf_r+0x7a8>
    dad2:	2140      	movs	r1, #64	; 0x40
    dad4:	4650      	mov	r0, sl
    dad6:	f7fd f9e9 	bl	aeac <_malloc_r>
    dada:	6020      	str	r0, [r4, #0]
    dadc:	6120      	str	r0, [r4, #16]
    dade:	2800      	cmp	r0, #0
    dae0:	f000 8662 	beq.w	e7a8 <_svfprintf_r+0x1bb8>
    dae4:	2340      	movs	r3, #64	; 0x40
    dae6:	6163      	str	r3, [r4, #20]
    dae8:	f7ff b8a1 	b.w	cc2e <_svfprintf_r+0x3e>
    daec:	9b03      	ldr	r3, [sp, #12]
    daee:	9407      	str	r4, [sp, #28]
    daf0:	2b06      	cmp	r3, #6
    daf2:	4621      	mov	r1, r4
    daf4:	bf28      	it	cs
    daf6:	2306      	movcs	r3, #6
    daf8:	9403      	str	r4, [sp, #12]
    dafa:	4622      	mov	r2, r4
    dafc:	9302      	str	r3, [sp, #8]
    dafe:	4c90      	ldr	r4, [pc, #576]	; (dd40 <_svfprintf_r+0x1150>)
    db00:	9708      	str	r7, [sp, #32]
    db02:	9305      	str	r3, [sp, #20]
    db04:	910c      	str	r1, [sp, #48]	; 0x30
    db06:	9110      	str	r1, [sp, #64]	; 0x40
    db08:	910b      	str	r1, [sp, #44]	; 0x2c
    db0a:	f7ff ba64 	b.w	cfd6 <_svfprintf_r+0x3e6>
    db0e:	2f10      	cmp	r7, #16
    db10:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    db12:	4d8c      	ldr	r5, [pc, #560]	; (dd44 <_svfprintf_r+0x1154>)
    db14:	f340 824e 	ble.w	dfb4 <_svfprintf_r+0x13c4>
    db18:	4632      	mov	r2, r6
    db1a:	ee1a 6a10 	vmov	r6, s20
    db1e:	e005      	b.n	db2c <_svfprintf_r+0xf3c>
    db20:	f109 0908 	add.w	r9, r9, #8
    db24:	3f10      	subs	r7, #16
    db26:	2f10      	cmp	r7, #16
    db28:	f340 8243 	ble.w	dfb2 <_svfprintf_r+0x13c2>
    db2c:	3301      	adds	r3, #1
    db2e:	3210      	adds	r2, #16
    db30:	2110      	movs	r1, #16
    db32:	2b07      	cmp	r3, #7
    db34:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    db38:	f8c9 5000 	str.w	r5, [r9]
    db3c:	f8c9 1004 	str.w	r1, [r9, #4]
    db40:	ddee      	ble.n	db20 <_svfprintf_r+0xf30>
    db42:	aa26      	add	r2, sp, #152	; 0x98
    db44:	4631      	mov	r1, r6
    db46:	4650      	mov	r0, sl
    db48:	f002 f8de 	bl	fd08 <__ssprint_r>
    db4c:	2800      	cmp	r0, #0
    db4e:	f47f acca 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    db52:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    db56:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    db5a:	e7e3      	b.n	db24 <_svfprintf_r+0xf34>
    db5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    db5e:	9d05      	ldr	r5, [sp, #20]
    db60:	f8cd b014 	str.w	fp, [sp, #20]
    db64:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
    db68:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    db6c:	18e3      	adds	r3, r4, r3
    db6e:	9303      	str	r3, [sp, #12]
    db70:	464a      	mov	r2, r9
    db72:	9f14      	ldr	r7, [sp, #80]	; 0x50
    db74:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    db78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    db7a:	940a      	str	r4, [sp, #40]	; 0x28
    db7c:	ee1a 9a10 	vmov	r9, s20
    db80:	46b4      	mov	ip, r6
    db82:	f1bb 0f00 	cmp.w	fp, #0
    db86:	d030      	beq.n	dbea <_svfprintf_r+0xffa>
    db88:	bb93      	cbnz	r3, dbf0 <_svfprintf_r+0x1000>
    db8a:	3f01      	subs	r7, #1
    db8c:	f10b 3bff 	add.w	fp, fp, #4294967295
    db90:	9b16      	ldr	r3, [sp, #88]	; 0x58
    db92:	e9c2 3800 	strd	r3, r8, [r2]
    db96:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    db98:	3301      	adds	r3, #1
    db9a:	44c4      	add	ip, r8
    db9c:	2b07      	cmp	r3, #7
    db9e:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
    dba2:	9327      	str	r3, [sp, #156]	; 0x9c
    dba4:	dc62      	bgt.n	dc6c <_svfprintf_r+0x107c>
    dba6:	3208      	adds	r2, #8
    dba8:	9b03      	ldr	r3, [sp, #12]
    dbaa:	7838      	ldrb	r0, [r7, #0]
    dbac:	1b5b      	subs	r3, r3, r5
    dbae:	4283      	cmp	r3, r0
    dbb0:	bfa8      	it	ge
    dbb2:	4603      	movge	r3, r0
    dbb4:	2b00      	cmp	r3, #0
    dbb6:	461e      	mov	r6, r3
    dbb8:	dd0c      	ble.n	dbd4 <_svfprintf_r+0xfe4>
    dbba:	9827      	ldr	r0, [sp, #156]	; 0x9c
    dbbc:	3001      	adds	r0, #1
    dbbe:	449c      	add	ip, r3
    dbc0:	2807      	cmp	r0, #7
    dbc2:	e9c2 5300 	strd	r5, r3, [r2]
    dbc6:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
    dbca:	9027      	str	r0, [sp, #156]	; 0x9c
    dbcc:	f300 8159 	bgt.w	de82 <_svfprintf_r+0x1292>
    dbd0:	7838      	ldrb	r0, [r7, #0]
    dbd2:	3208      	adds	r2, #8
    dbd4:	2e00      	cmp	r6, #0
    dbd6:	bfac      	ite	ge
    dbd8:	1b84      	subge	r4, r0, r6
    dbda:	4604      	movlt	r4, r0
    dbdc:	2c00      	cmp	r4, #0
    dbde:	dc0b      	bgt.n	dbf8 <_svfprintf_r+0x1008>
    dbe0:	4405      	add	r5, r0
    dbe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dbe4:	f1bb 0f00 	cmp.w	fp, #0
    dbe8:	d1ce      	bne.n	db88 <_svfprintf_r+0xf98>
    dbea:	2b00      	cmp	r3, #0
    dbec:	f000 83d4 	beq.w	e398 <_svfprintf_r+0x17a8>
    dbf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dbf2:	3b01      	subs	r3, #1
    dbf4:	930c      	str	r3, [sp, #48]	; 0x30
    dbf6:	e7cb      	b.n	db90 <_svfprintf_r+0xfa0>
    dbf8:	2c10      	cmp	r4, #16
    dbfa:	9827      	ldr	r0, [sp, #156]	; 0x9c
    dbfc:	dd1f      	ble.n	dc3e <_svfprintf_r+0x104e>
    dbfe:	2610      	movs	r6, #16
    dc00:	4663      	mov	r3, ip
    dc02:	e004      	b.n	dc0e <_svfprintf_r+0x101e>
    dc04:	3c10      	subs	r4, #16
    dc06:	2c10      	cmp	r4, #16
    dc08:	f102 0208 	add.w	r2, r2, #8
    dc0c:	dd16      	ble.n	dc3c <_svfprintf_r+0x104c>
    dc0e:	3001      	adds	r0, #1
    dc10:	494c      	ldr	r1, [pc, #304]	; (dd44 <_svfprintf_r+0x1154>)
    dc12:	3310      	adds	r3, #16
    dc14:	2807      	cmp	r0, #7
    dc16:	e9c2 1600 	strd	r1, r6, [r2]
    dc1a:	e9cd 0327 	strd	r0, r3, [sp, #156]	; 0x9c
    dc1e:	ddf1      	ble.n	dc04 <_svfprintf_r+0x1014>
    dc20:	aa26      	add	r2, sp, #152	; 0x98
    dc22:	4649      	mov	r1, r9
    dc24:	4650      	mov	r0, sl
    dc26:	f002 f86f 	bl	fd08 <__ssprint_r>
    dc2a:	2800      	cmp	r0, #0
    dc2c:	f47f ac5b 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    dc30:	3c10      	subs	r4, #16
    dc32:	2c10      	cmp	r4, #16
    dc34:	e9dd 0327 	ldrd	r0, r3, [sp, #156]	; 0x9c
    dc38:	aa29      	add	r2, sp, #164	; 0xa4
    dc3a:	dce8      	bgt.n	dc0e <_svfprintf_r+0x101e>
    dc3c:	469c      	mov	ip, r3
    dc3e:	3001      	adds	r0, #1
    dc40:	4b40      	ldr	r3, [pc, #256]	; (dd44 <_svfprintf_r+0x1154>)
    dc42:	6054      	str	r4, [r2, #4]
    dc44:	44a4      	add	ip, r4
    dc46:	2807      	cmp	r0, #7
    dc48:	e9cd 0c27 	strd	r0, ip, [sp, #156]	; 0x9c
    dc4c:	6013      	str	r3, [r2, #0]
    dc4e:	f300 83fa 	bgt.w	e446 <_svfprintf_r+0x1856>
    dc52:	7838      	ldrb	r0, [r7, #0]
    dc54:	3208      	adds	r2, #8
    dc56:	4405      	add	r5, r0
    dc58:	e7c3      	b.n	dbe2 <_svfprintf_r+0xff2>
    dc5a:	f01b 0310 	ands.w	r3, fp, #16
    dc5e:	f000 80bc 	beq.w	ddda <_svfprintf_r+0x11ea>
    dc62:	9b08      	ldr	r3, [sp, #32]
    dc64:	f853 2b04 	ldr.w	r2, [r3], #4
    dc68:	9308      	str	r3, [sp, #32]
    dc6a:	e6ff      	b.n	da6c <_svfprintf_r+0xe7c>
    dc6c:	aa26      	add	r2, sp, #152	; 0x98
    dc6e:	4649      	mov	r1, r9
    dc70:	4650      	mov	r0, sl
    dc72:	f002 f849 	bl	fd08 <__ssprint_r>
    dc76:	2800      	cmp	r0, #0
    dc78:	f47f ac35 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    dc7c:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
    dc80:	aa29      	add	r2, sp, #164	; 0xa4
    dc82:	e791      	b.n	dba8 <_svfprintf_r+0xfb8>
    dc84:	f405 6080 	and.w	r0, r5, #1024	; 0x400
    dc88:	2600      	movs	r6, #0
    dc8a:	f8cd 8008 	str.w	r8, [sp, #8]
    dc8e:	9505      	str	r5, [sp, #20]
    dc90:	4b2d      	ldr	r3, [pc, #180]	; (dd48 <_svfprintf_r+0x1158>)
    dc92:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
    dc96:	ee0a aa90 	vmov	s21, sl
    dc9a:	ac52      	add	r4, sp, #328	; 0x148
    dc9c:	f04f 3bcc 	mov.w	fp, #3435973836	; 0xcccccccc
    dca0:	46b4      	mov	ip, r6
    dca2:	4605      	mov	r5, r0
    dca4:	e005      	b.n	dcb2 <_svfprintf_r+0x10c2>
    dca6:	2a0a      	cmp	r2, #10
    dca8:	f171 0100 	sbcs.w	r1, r1, #0
    dcac:	d334      	bcc.n	dd18 <_svfprintf_r+0x1128>
    dcae:	4652      	mov	r2, sl
    dcb0:	4639      	mov	r1, r7
    dcb2:	1850      	adds	r0, r2, r1
    dcb4:	f140 0000 	adc.w	r0, r0, #0
    dcb8:	fba3 6700 	umull	r6, r7, r3, r0
    dcbc:	f027 0603 	bic.w	r6, r7, #3
    dcc0:	eb06 0697 	add.w	r6, r6, r7, lsr #2
    dcc4:	1b80      	subs	r0, r0, r6
    dcc6:	1a16      	subs	r6, r2, r0
    dcc8:	f161 0e00 	sbc.w	lr, r1, #0
    dccc:	fb0b f706 	mul.w	r7, fp, r6
    dcd0:	fb03 770e 	mla	r7, r3, lr, r7
    dcd4:	fba6 a603 	umull	sl, r6, r6, r3
    dcd8:	4437      	add	r7, r6
    dcda:	f00a 0e01 	and.w	lr, sl, #1
    dcde:	2605      	movs	r6, #5
    dce0:	fbae 6e06 	umull	r6, lr, lr, r6
    dce4:	1830      	adds	r0, r6, r0
    dce6:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    dcea:	3030      	adds	r0, #48	; 0x30
    dcec:	f804 0c01 	strb.w	r0, [r4, #-1]
    dcf0:	ea4a 7ac7 	orr.w	sl, sl, r7, lsl #31
    dcf4:	f10c 0c01 	add.w	ip, ip, #1
    dcf8:	3c01      	subs	r4, #1
    dcfa:	087f      	lsrs	r7, r7, #1
    dcfc:	2d00      	cmp	r5, #0
    dcfe:	d0d2      	beq.n	dca6 <_svfprintf_r+0x10b6>
    dd00:	f898 0000 	ldrb.w	r0, [r8]
    dd04:	4584      	cmp	ip, r0
    dd06:	d1ce      	bne.n	dca6 <_svfprintf_r+0x10b6>
    dd08:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    dd0c:	d0cb      	beq.n	dca6 <_svfprintf_r+0x10b6>
    dd0e:	2a0a      	cmp	r2, #10
    dd10:	f171 0100 	sbcs.w	r1, r1, #0
    dd14:	f080 815d 	bcs.w	dfd2 <_svfprintf_r+0x13e2>
    dd18:	9d05      	ldr	r5, [sp, #20]
    dd1a:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
    dd1e:	ab52      	add	r3, sp, #328	; 0x148
    dd20:	1b1b      	subs	r3, r3, r4
    dd22:	f8dd 8008 	ldr.w	r8, [sp, #8]
    dd26:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    dd2a:	ee1a aa90 	vmov	sl, s21
    dd2e:	46ab      	mov	fp, r5
    dd30:	9305      	str	r3, [sp, #20]
    dd32:	f7ff bad7 	b.w	d2e4 <_svfprintf_r+0x6f4>
    dd36:	bf00      	nop
    dd38:	0001254c 	.word	0x0001254c
    dd3c:	00012560 	.word	0x00012560
    dd40:	00012574 	.word	0x00012574
    dd44:	00012590 	.word	0x00012590
    dd48:	cccccccd 	.word	0xcccccccd
    dd4c:	ee1a 1a10 	vmov	r1, s20
    dd50:	aa26      	add	r2, sp, #152	; 0x98
    dd52:	4650      	mov	r0, sl
    dd54:	9318      	str	r3, [sp, #96]	; 0x60
    dd56:	f001 ffd7 	bl	fd08 <__ssprint_r>
    dd5a:	2800      	cmp	r0, #0
    dd5c:	f47f abc3 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    dd60:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    dd64:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    dd66:	9b18      	ldr	r3, [sp, #96]	; 0x60
    dd68:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    dd6c:	f7ff b890 	b.w	ce90 <_svfprintf_r+0x2a0>
    dd70:	2301      	movs	r3, #1
    dd72:	f8c9 3004 	str.w	r3, [r9, #4]
    dd76:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    dd78:	4abe      	ldr	r2, [pc, #760]	; (e074 <_svfprintf_r+0x1484>)
    dd7a:	f8c9 2000 	str.w	r2, [r9]
    dd7e:	3301      	adds	r3, #1
    dd80:	3601      	adds	r6, #1
    dd82:	2b07      	cmp	r3, #7
    dd84:	9628      	str	r6, [sp, #160]	; 0xa0
    dd86:	9327      	str	r3, [sp, #156]	; 0x9c
    dd88:	f300 817a 	bgt.w	e080 <_svfprintf_r+0x1490>
    dd8c:	f109 0908 	add.w	r9, r9, #8
    dd90:	2900      	cmp	r1, #0
    dd92:	f040 80ae 	bne.w	def2 <_svfprintf_r+0x1302>
    dd96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    dd98:	f00b 0301 	and.w	r3, fp, #1
    dd9c:	4313      	orrs	r3, r2
    dd9e:	f43f a8b8 	beq.w	cf12 <_svfprintf_r+0x322>
    dda2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    dda4:	9913      	ldr	r1, [sp, #76]	; 0x4c
    dda6:	199a      	adds	r2, r3, r6
    dda8:	e9c9 1300 	strd	r1, r3, [r9]
    ddac:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    ddae:	9228      	str	r2, [sp, #160]	; 0xa0
    ddb0:	3301      	adds	r3, #1
    ddb2:	2b07      	cmp	r3, #7
    ddb4:	9327      	str	r3, [sp, #156]	; 0x9c
    ddb6:	f300 8259 	bgt.w	e26c <_svfprintf_r+0x167c>
    ddba:	f109 0908 	add.w	r9, r9, #8
    ddbe:	990d      	ldr	r1, [sp, #52]	; 0x34
    ddc0:	f8c9 4000 	str.w	r4, [r9]
    ddc4:	3301      	adds	r3, #1
    ddc6:	188e      	adds	r6, r1, r2
    ddc8:	2b07      	cmp	r3, #7
    ddca:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    ddce:	f8c9 1004 	str.w	r1, [r9, #4]
    ddd2:	f77f a89c 	ble.w	cf0e <_svfprintf_r+0x31e>
    ddd6:	f7ff bbd5 	b.w	d584 <_svfprintf_r+0x994>
    ddda:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    ddde:	f000 80be 	beq.w	df5e <_svfprintf_r+0x136e>
    dde2:	9808      	ldr	r0, [sp, #32]
    dde4:	f850 2b04 	ldr.w	r2, [r0], #4
    dde8:	9008      	str	r0, [sp, #32]
    ddea:	4619      	mov	r1, r3
    ddec:	b292      	uxth	r2, r2
    ddee:	e63d      	b.n	da6c <_svfprintf_r+0xe7c>
    ddf0:	ee1a 1a10 	vmov	r1, s20
    ddf4:	aa26      	add	r2, sp, #152	; 0x98
    ddf6:	4650      	mov	r0, sl
    ddf8:	f001 ff86 	bl	fd08 <__ssprint_r>
    ddfc:	2800      	cmp	r0, #0
    ddfe:	f47f ab72 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    de02:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    de04:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    de08:	f7ff bab3 	b.w	d372 <_svfprintf_r+0x782>
    de0c:	ae24      	add	r6, sp, #144	; 0x90
    de0e:	2208      	movs	r2, #8
    de10:	2100      	movs	r1, #0
    de12:	4630      	mov	r0, r6
    de14:	941f      	str	r4, [sp, #124]	; 0x7c
    de16:	f7fd ff5f 	bl	bcd8 <memset>
    de1a:	9b03      	ldr	r3, [sp, #12]
    de1c:	1c5a      	adds	r2, r3, #1
    de1e:	f000 80e8 	beq.w	dff2 <_svfprintf_r+0x1402>
    de22:	2500      	movs	r5, #0
    de24:	f8cd 8008 	str.w	r8, [sp, #8]
    de28:	f8cd b01c 	str.w	fp, [sp, #28]
    de2c:	46a8      	mov	r8, r5
    de2e:	469b      	mov	fp, r3
    de30:	e00c      	b.n	de4c <_svfprintf_r+0x125c>
    de32:	a939      	add	r1, sp, #228	; 0xe4
    de34:	4650      	mov	r0, sl
    de36:	f001 ff21 	bl	fc7c <_wcrtomb_r>
    de3a:	1c43      	adds	r3, r0, #1
    de3c:	4440      	add	r0, r8
    de3e:	f000 840e 	beq.w	e65e <_svfprintf_r+0x1a6e>
    de42:	4558      	cmp	r0, fp
    de44:	dc08      	bgt.n	de58 <_svfprintf_r+0x1268>
    de46:	f000 841a 	beq.w	e67e <_svfprintf_r+0x1a8e>
    de4a:	4680      	mov	r8, r0
    de4c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    de4e:	5952      	ldr	r2, [r2, r5]
    de50:	4633      	mov	r3, r6
    de52:	3504      	adds	r5, #4
    de54:	2a00      	cmp	r2, #0
    de56:	d1ec      	bne.n	de32 <_svfprintf_r+0x1242>
    de58:	f8cd 8014 	str.w	r8, [sp, #20]
    de5c:	f8dd b01c 	ldr.w	fp, [sp, #28]
    de60:	f8dd 8008 	ldr.w	r8, [sp, #8]
    de64:	e0d2      	b.n	e00c <_svfprintf_r+0x141c>
    de66:	4616      	mov	r6, r2
    de68:	3301      	adds	r3, #1
    de6a:	4426      	add	r6, r4
    de6c:	2b07      	cmp	r3, #7
    de6e:	f8c9 5000 	str.w	r5, [r9]
    de72:	f8c9 4004 	str.w	r4, [r9, #4]
    de76:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    de7a:	f77f a848 	ble.w	cf0e <_svfprintf_r+0x31e>
    de7e:	f7ff bb81 	b.w	d584 <_svfprintf_r+0x994>
    de82:	aa26      	add	r2, sp, #152	; 0x98
    de84:	4649      	mov	r1, r9
    de86:	4650      	mov	r0, sl
    de88:	f001 ff3e 	bl	fd08 <__ssprint_r>
    de8c:	2800      	cmp	r0, #0
    de8e:	f47f ab2a 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    de92:	7838      	ldrb	r0, [r7, #0]
    de94:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
    de98:	aa29      	add	r2, sp, #164	; 0xa4
    de9a:	e69b      	b.n	dbd4 <_svfprintf_r+0xfe4>
    de9c:	ee1a 1a10 	vmov	r1, s20
    dea0:	aa26      	add	r2, sp, #152	; 0x98
    dea2:	4650      	mov	r0, sl
    dea4:	f001 ff30 	bl	fd08 <__ssprint_r>
    dea8:	2800      	cmp	r0, #0
    deaa:	f47f ab1c 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    deae:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    deb0:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    deb4:	f7ff b814 	b.w	cee0 <_svfprintf_r+0x2f0>
    deb8:	2b01      	cmp	r3, #1
    deba:	465d      	mov	r5, fp
    debc:	f47f a9fe 	bne.w	d2bc <_svfprintf_r+0x6cc>
    dec0:	f7ff bbac 	b.w	d61c <_svfprintf_r+0xa2c>
    dec4:	9b08      	ldr	r3, [sp, #32]
    dec6:	9904      	ldr	r1, [sp, #16]
    dec8:	f853 2b04 	ldr.w	r2, [r3], #4
    decc:	4644      	mov	r4, r8
    dece:	6011      	str	r1, [r2, #0]
    ded0:	9308      	str	r3, [sp, #32]
    ded2:	f7fe bebe 	b.w	cc52 <_svfprintf_r+0x62>
    ded6:	f8dd 800c 	ldr.w	r8, [sp, #12]
    deda:	f8c9 5000 	str.w	r5, [r9]
    dede:	3701      	adds	r7, #1
    dee0:	4426      	add	r6, r4
    dee2:	2f07      	cmp	r7, #7
    dee4:	e9cd 7627 	strd	r7, r6, [sp, #156]	; 0x9c
    dee8:	f8c9 4004 	str.w	r4, [r9, #4]
    deec:	f77f ab3b 	ble.w	d566 <_svfprintf_r+0x976>
    def0:	e486      	b.n	d800 <_svfprintf_r+0xc10>
    def2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    def4:	9813      	ldr	r0, [sp, #76]	; 0x4c
    def6:	199a      	adds	r2, r3, r6
    def8:	e9c9 0300 	strd	r0, r3, [r9]
    defc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    defe:	9228      	str	r2, [sp, #160]	; 0xa0
    df00:	3301      	adds	r3, #1
    df02:	2b07      	cmp	r3, #7
    df04:	9327      	str	r3, [sp, #156]	; 0x9c
    df06:	f300 81b1 	bgt.w	e26c <_svfprintf_r+0x167c>
    df0a:	f109 0908 	add.w	r9, r9, #8
    df0e:	2900      	cmp	r1, #0
    df10:	f6bf af55 	bge.w	ddbe <_svfprintf_r+0x11ce>
    df14:	424f      	negs	r7, r1
    df16:	3110      	adds	r1, #16
    df18:	4d57      	ldr	r5, [pc, #348]	; (e078 <_svfprintf_r+0x1488>)
    df1a:	f280 836a 	bge.w	e5f2 <_svfprintf_r+0x1a02>
    df1e:	ee1a 1a10 	vmov	r1, s20
    df22:	2610      	movs	r6, #16
    df24:	e005      	b.n	df32 <_svfprintf_r+0x1342>
    df26:	f109 0908 	add.w	r9, r9, #8
    df2a:	3f10      	subs	r7, #16
    df2c:	2f10      	cmp	r7, #16
    df2e:	f340 8360 	ble.w	e5f2 <_svfprintf_r+0x1a02>
    df32:	3301      	adds	r3, #1
    df34:	3210      	adds	r2, #16
    df36:	2b07      	cmp	r3, #7
    df38:	e9c9 5600 	strd	r5, r6, [r9]
    df3c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    df40:	ddf1      	ble.n	df26 <_svfprintf_r+0x1336>
    df42:	aa26      	add	r2, sp, #152	; 0x98
    df44:	4650      	mov	r0, sl
    df46:	9103      	str	r1, [sp, #12]
    df48:	f001 fede 	bl	fd08 <__ssprint_r>
    df4c:	2800      	cmp	r0, #0
    df4e:	f47f aaca 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    df52:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    df56:	9903      	ldr	r1, [sp, #12]
    df58:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    df5c:	e7e5      	b.n	df2a <_svfprintf_r+0x133a>
    df5e:	9b08      	ldr	r3, [sp, #32]
    df60:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
    df64:	bf1a      	itte	ne
    df66:	4611      	movne	r1, r2
    df68:	f853 2b04 	ldrne.w	r2, [r3], #4
    df6c:	f853 2b04 	ldreq.w	r2, [r3], #4
    df70:	9308      	str	r3, [sp, #32]
    df72:	bf18      	it	ne
    df74:	b2d2      	uxtbne	r2, r2
    df76:	e579      	b.n	da6c <_svfprintf_r+0xe7c>
    df78:	9b08      	ldr	r3, [sp, #32]
    df7a:	f415 7100 	ands.w	r1, r5, #512	; 0x200
    df7e:	bf1a      	itte	ne
    df80:	4611      	movne	r1, r2
    df82:	f853 2b04 	ldrne.w	r2, [r3], #4
    df86:	f853 2b04 	ldreq.w	r2, [r3], #4
    df8a:	9308      	str	r3, [sp, #32]
    df8c:	bf18      	it	ne
    df8e:	b2d2      	uxtbne	r2, r2
    df90:	2301      	movs	r3, #1
    df92:	f7ff b8e0 	b.w	d156 <_svfprintf_r+0x566>
    df96:	9b08      	ldr	r3, [sp, #32]
    df98:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
    df9c:	bf1a      	itte	ne
    df9e:	4611      	movne	r1, r2
    dfa0:	f853 2b04 	ldrne.w	r2, [r3], #4
    dfa4:	f853 2b04 	ldreq.w	r2, [r3], #4
    dfa8:	9308      	str	r3, [sp, #32]
    dfaa:	bf18      	it	ne
    dfac:	b2d2      	uxtbne	r2, r2
    dfae:	f7ff b935 	b.w	d21c <_svfprintf_r+0x62c>
    dfb2:	4616      	mov	r6, r2
    dfb4:	3301      	adds	r3, #1
    dfb6:	443e      	add	r6, r7
    dfb8:	2b07      	cmp	r3, #7
    dfba:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
    dfbe:	f8c9 5000 	str.w	r5, [r9]
    dfc2:	f8c9 7004 	str.w	r7, [r9, #4]
    dfc6:	f300 8143 	bgt.w	e250 <_svfprintf_r+0x1660>
    dfca:	f109 0908 	add.w	r9, r9, #8
    dfce:	f7ff bba6 	b.w	d71e <_svfprintf_r+0xb2e>
    dfd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    dfd4:	9916      	ldr	r1, [sp, #88]	; 0x58
    dfd6:	1ae4      	subs	r4, r4, r3
    dfd8:	461a      	mov	r2, r3
    dfda:	4620      	mov	r0, r4
    dfdc:	f7fd fece 	bl	bd7c <strncpy>
    dfe0:	f898 2001 	ldrb.w	r2, [r8, #1]
    dfe4:	4b25      	ldr	r3, [pc, #148]	; (e07c <_svfprintf_r+0x148c>)
    dfe6:	b10a      	cbz	r2, dfec <_svfprintf_r+0x13fc>
    dfe8:	f108 0801 	add.w	r8, r8, #1
    dfec:	f04f 0c00 	mov.w	ip, #0
    dff0:	e65d      	b.n	dcae <_svfprintf_r+0x10be>
    dff2:	2300      	movs	r3, #0
    dff4:	4619      	mov	r1, r3
    dff6:	9600      	str	r6, [sp, #0]
    dff8:	aa1f      	add	r2, sp, #124	; 0x7c
    dffa:	4650      	mov	r0, sl
    dffc:	f001 fe64 	bl	fcc8 <_wcsrtombs_r>
    e000:	4603      	mov	r3, r0
    e002:	3301      	adds	r3, #1
    e004:	9005      	str	r0, [sp, #20]
    e006:	f000 832a 	beq.w	e65e <_svfprintf_r+0x1a6e>
    e00a:	941f      	str	r4, [sp, #124]	; 0x7c
    e00c:	9b05      	ldr	r3, [sp, #20]
    e00e:	2b00      	cmp	r3, #0
    e010:	d044      	beq.n	e09c <_svfprintf_r+0x14ac>
    e012:	2b63      	cmp	r3, #99	; 0x63
    e014:	f340 8118 	ble.w	e248 <_svfprintf_r+0x1658>
    e018:	1c59      	adds	r1, r3, #1
    e01a:	4650      	mov	r0, sl
    e01c:	f7fc ff46 	bl	aeac <_malloc_r>
    e020:	4604      	mov	r4, r0
    e022:	2800      	cmp	r0, #0
    e024:	f000 831b 	beq.w	e65e <_svfprintf_r+0x1a6e>
    e028:	9007      	str	r0, [sp, #28]
    e02a:	2208      	movs	r2, #8
    e02c:	2100      	movs	r1, #0
    e02e:	4630      	mov	r0, r6
    e030:	f7fd fe52 	bl	bcd8 <memset>
    e034:	9d05      	ldr	r5, [sp, #20]
    e036:	9600      	str	r6, [sp, #0]
    e038:	462b      	mov	r3, r5
    e03a:	aa1f      	add	r2, sp, #124	; 0x7c
    e03c:	4621      	mov	r1, r4
    e03e:	4650      	mov	r0, sl
    e040:	f001 fe42 	bl	fcc8 <_wcsrtombs_r>
    e044:	4285      	cmp	r5, r0
    e046:	f040 83bb 	bne.w	e7c0 <_svfprintf_r+0x1bd0>
    e04a:	9905      	ldr	r1, [sp, #20]
    e04c:	9708      	str	r7, [sp, #32]
    e04e:	2300      	movs	r3, #0
    e050:	5463      	strb	r3, [r4, r1]
    e052:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    e056:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    e05a:	9303      	str	r3, [sp, #12]
    e05c:	9102      	str	r1, [sp, #8]
    e05e:	930c      	str	r3, [sp, #48]	; 0x30
    e060:	9310      	str	r3, [sp, #64]	; 0x40
    e062:	930b      	str	r3, [sp, #44]	; 0x2c
    e064:	f7fe bfb7 	b.w	cfd6 <_svfprintf_r+0x3e6>
    e068:	222d      	movs	r2, #45	; 0x2d
    e06a:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    e06e:	f7fe bfa1 	b.w	cfb4 <_svfprintf_r+0x3c4>
    e072:	bf00      	nop
    e074:	0001257c 	.word	0x0001257c
    e078:	00012590 	.word	0x00012590
    e07c:	cccccccd 	.word	0xcccccccd
    e080:	ee1a 1a10 	vmov	r1, s20
    e084:	aa26      	add	r2, sp, #152	; 0x98
    e086:	4650      	mov	r0, sl
    e088:	f001 fe3e 	bl	fd08 <__ssprint_r>
    e08c:	2800      	cmp	r0, #0
    e08e:	f47f aa2a 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    e092:	991d      	ldr	r1, [sp, #116]	; 0x74
    e094:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    e096:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    e09a:	e679      	b.n	dd90 <_svfprintf_r+0x11a0>
    e09c:	9b05      	ldr	r3, [sp, #20]
    e09e:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    e0a2:	9708      	str	r7, [sp, #32]
    e0a4:	e9cd 3302 	strd	r3, r3, [sp, #8]
    e0a8:	930c      	str	r3, [sp, #48]	; 0x30
    e0aa:	9310      	str	r3, [sp, #64]	; 0x40
    e0ac:	930b      	str	r3, [sp, #44]	; 0x2c
    e0ae:	9307      	str	r3, [sp, #28]
    e0b0:	f7fe bf91 	b.w	cfd6 <_svfprintf_r+0x3e6>
    e0b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e0b6:	9905      	ldr	r1, [sp, #20]
    e0b8:	18a5      	adds	r5, r4, r2
    e0ba:	1a6d      	subs	r5, r5, r1
    e0bc:	1ad4      	subs	r4, r2, r3
    e0be:	42a5      	cmp	r5, r4
    e0c0:	bfa8      	it	ge
    e0c2:	4625      	movge	r5, r4
    e0c4:	f7ff bb60 	b.w	d788 <_svfprintf_r+0xb98>
    e0c8:	f913 2b04 	ldrsb.w	r2, [r3], #4
    e0cc:	9308      	str	r3, [sp, #32]
    e0ce:	17d1      	asrs	r1, r2, #31
    e0d0:	460b      	mov	r3, r1
    e0d2:	f7fe bfef 	b.w	d0b4 <_svfprintf_r+0x4c4>
    e0d6:	9b08      	ldr	r3, [sp, #32]
    e0d8:	9904      	ldr	r1, [sp, #16]
    e0da:	f853 2b04 	ldr.w	r2, [r3], #4
    e0de:	9308      	str	r3, [sp, #32]
    e0e0:	8011      	strh	r1, [r2, #0]
    e0e2:	4644      	mov	r4, r8
    e0e4:	f7fe bdb5 	b.w	cc52 <_svfprintf_r+0x62>
    e0e8:	9e03      	ldr	r6, [sp, #12]
    e0ea:	2102      	movs	r1, #2
    e0ec:	ab24      	add	r3, sp, #144	; 0x90
    e0ee:	9301      	str	r3, [sp, #4]
    e0f0:	ab1f      	add	r3, sp, #124	; 0x7c
    e0f2:	9300      	str	r3, [sp, #0]
    e0f4:	4632      	mov	r2, r6
    e0f6:	ab1d      	add	r3, sp, #116	; 0x74
    e0f8:	4650      	mov	r0, sl
    e0fa:	eeb0 0a48 	vmov.f32	s0, s16
    e0fe:	eef0 0a68 	vmov.f32	s1, s17
    e102:	f000 fe1d 	bl	ed40 <_dtoa_r>
    e106:	9b02      	ldr	r3, [sp, #8]
    e108:	2b47      	cmp	r3, #71	; 0x47
    e10a:	4604      	mov	r4, r0
    e10c:	f000 8195 	beq.w	e43a <_svfprintf_r+0x184a>
    e110:	2b46      	cmp	r3, #70	; 0x46
    e112:	eb00 0506 	add.w	r5, r0, r6
    e116:	d105      	bne.n	e124 <_svfprintf_r+0x1534>
    e118:	7803      	ldrb	r3, [r0, #0]
    e11a:	2b30      	cmp	r3, #48	; 0x30
    e11c:	f000 830e 	beq.w	e73c <_svfprintf_r+0x1b4c>
    e120:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    e122:	4435      	add	r5, r6
    e124:	ec51 0b18 	vmov	r0, r1, d8
    e128:	2200      	movs	r2, #0
    e12a:	2300      	movs	r3, #0
    e12c:	f7fc fe66 	bl	adfc <__aeabi_dcmpeq>
    e130:	2800      	cmp	r0, #0
    e132:	f000 8176 	beq.w	e422 <_svfprintf_r+0x1832>
    e136:	462b      	mov	r3, r5
    e138:	1b1b      	subs	r3, r3, r4
    e13a:	930d      	str	r3, [sp, #52]	; 0x34
    e13c:	9b02      	ldr	r3, [sp, #8]
    e13e:	2b47      	cmp	r3, #71	; 0x47
    e140:	f000 813b 	beq.w	e3ba <_svfprintf_r+0x17ca>
    e144:	9b02      	ldr	r3, [sp, #8]
    e146:	2b46      	cmp	r3, #70	; 0x46
    e148:	f000 81fb 	beq.w	e542 <_svfprintf_r+0x1952>
    e14c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e14e:	930b      	str	r3, [sp, #44]	; 0x2c
    e150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e152:	9a02      	ldr	r2, [sp, #8]
    e154:	3b01      	subs	r3, #1
    e156:	2a41      	cmp	r2, #65	; 0x41
    e158:	931d      	str	r3, [sp, #116]	; 0x74
    e15a:	f000 822d 	beq.w	e5b8 <_svfprintf_r+0x19c8>
    e15e:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
    e162:	2100      	movs	r1, #0
    e164:	2b00      	cmp	r3, #0
    e166:	bfb8      	it	lt
    e168:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
    e16a:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
    e16e:	bfba      	itte	lt
    e170:	f1c3 0301 	rsblt	r3, r3, #1
    e174:	222d      	movlt	r2, #45	; 0x2d
    e176:	222b      	movge	r2, #43	; 0x2b
    e178:	2b09      	cmp	r3, #9
    e17a:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
    e17e:	f340 8220 	ble.w	e5c2 <_svfprintf_r+0x19d2>
    e182:	f10d 0597 	add.w	r5, sp, #151	; 0x97
    e186:	4eb7      	ldr	r6, [pc, #732]	; (e464 <_svfprintf_r+0x1874>)
    e188:	462a      	mov	r2, r5
    e18a:	4610      	mov	r0, r2
    e18c:	fb86 2103 	smull	r2, r1, r6, r3
    e190:	17da      	asrs	r2, r3, #31
    e192:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    e196:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    e19a:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    e19e:	3130      	adds	r1, #48	; 0x30
    e1a0:	f800 1c01 	strb.w	r1, [r0, #-1]
    e1a4:	4619      	mov	r1, r3
    e1a6:	2963      	cmp	r1, #99	; 0x63
    e1a8:	4613      	mov	r3, r2
    e1aa:	f100 32ff 	add.w	r2, r0, #4294967295
    e1ae:	dcec      	bgt.n	e18a <_svfprintf_r+0x159a>
    e1b0:	3330      	adds	r3, #48	; 0x30
    e1b2:	b2d9      	uxtb	r1, r3
    e1b4:	1e83      	subs	r3, r0, #2
    e1b6:	429d      	cmp	r5, r3
    e1b8:	f802 1c01 	strb.w	r1, [r2, #-1]
    e1bc:	f240 82cb 	bls.w	e756 <_svfprintf_r+0x1b66>
    e1c0:	4613      	mov	r3, r2
    e1c2:	f10d 0282 	add.w	r2, sp, #130	; 0x82
    e1c6:	e001      	b.n	e1cc <_svfprintf_r+0x15dc>
    e1c8:	f813 1b01 	ldrb.w	r1, [r3], #1
    e1cc:	f802 1b01 	strb.w	r1, [r2], #1
    e1d0:	429d      	cmp	r5, r3
    e1d2:	d1f9      	bne.n	e1c8 <_svfprintf_r+0x15d8>
    e1d4:	f10d 0399 	add.w	r3, sp, #153	; 0x99
    e1d8:	f10d 0282 	add.w	r2, sp, #130	; 0x82
    e1dc:	1a1b      	subs	r3, r3, r0
    e1de:	4413      	add	r3, r2
    e1e0:	aa20      	add	r2, sp, #128	; 0x80
    e1e2:	1a9b      	subs	r3, r3, r2
    e1e4:	9315      	str	r3, [sp, #84]	; 0x54
    e1e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e1e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
    e1ea:	2b01      	cmp	r3, #1
    e1ec:	441a      	add	r2, r3
    e1ee:	9205      	str	r2, [sp, #20]
    e1f0:	f340 823e 	ble.w	e670 <_svfprintf_r+0x1a80>
    e1f4:	9b05      	ldr	r3, [sp, #20]
    e1f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e1f8:	4413      	add	r3, r2
    e1fa:	9305      	str	r3, [sp, #20]
    e1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e1fe:	9a05      	ldr	r2, [sp, #20]
    e200:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    e204:	f443 7b80 	orr.w	fp, r3, #256	; 0x100
    e208:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    e20c:	2300      	movs	r3, #0
    e20e:	930c      	str	r3, [sp, #48]	; 0x30
    e210:	9202      	str	r2, [sp, #8]
    e212:	9310      	str	r3, [sp, #64]	; 0x40
    e214:	930b      	str	r3, [sp, #44]	; 0x2c
    e216:	9b18      	ldr	r3, [sp, #96]	; 0x60
    e218:	2b00      	cmp	r3, #0
    e21a:	f040 80dc 	bne.w	e3d6 <_svfprintf_r+0x17e6>
    e21e:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    e222:	9303      	str	r3, [sp, #12]
    e224:	f7fe bed7 	b.w	cfd6 <_svfprintf_r+0x3e6>
    e228:	4620      	mov	r0, r4
    e22a:	9708      	str	r7, [sp, #32]
    e22c:	f7fd fee8 	bl	c000 <strlen>
    e230:	4601      	mov	r1, r0
    e232:	9005      	str	r0, [sp, #20]
    e234:	f7fe bf22 	b.w	d07c <_svfprintf_r+0x48c>
    e238:	ee1a 1a10 	vmov	r1, s20
    e23c:	aa26      	add	r2, sp, #152	; 0x98
    e23e:	4650      	mov	r0, sl
    e240:	f001 fd62 	bl	fd08 <__ssprint_r>
    e244:	f7fe bddf 	b.w	ce06 <_svfprintf_r+0x216>
    e248:	2300      	movs	r3, #0
    e24a:	9307      	str	r3, [sp, #28]
    e24c:	ac39      	add	r4, sp, #228	; 0xe4
    e24e:	e6ec      	b.n	e02a <_svfprintf_r+0x143a>
    e250:	ee1a 1a10 	vmov	r1, s20
    e254:	aa26      	add	r2, sp, #152	; 0x98
    e256:	4650      	mov	r0, sl
    e258:	f001 fd56 	bl	fd08 <__ssprint_r>
    e25c:	2800      	cmp	r0, #0
    e25e:	f47f a942 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    e262:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    e264:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    e268:	f7ff ba59 	b.w	d71e <_svfprintf_r+0xb2e>
    e26c:	ee1a 1a10 	vmov	r1, s20
    e270:	aa26      	add	r2, sp, #152	; 0x98
    e272:	4650      	mov	r0, sl
    e274:	f001 fd48 	bl	fd08 <__ssprint_r>
    e278:	2800      	cmp	r0, #0
    e27a:	f47f a934 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    e27e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    e282:	991d      	ldr	r1, [sp, #116]	; 0x74
    e284:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    e288:	e641      	b.n	df0e <_svfprintf_r+0x131e>
    e28a:	2306      	movs	r3, #6
    e28c:	9303      	str	r3, [sp, #12]
    e28e:	f7ff bb9d 	b.w	d9cc <_svfprintf_r+0xddc>
    e292:	9b03      	ldr	r3, [sp, #12]
    e294:	2102      	movs	r1, #2
    e296:	1c5e      	adds	r6, r3, #1
    e298:	e728      	b.n	e0ec <_svfprintf_r+0x14fc>
    e29a:	9e03      	ldr	r6, [sp, #12]
    e29c:	2103      	movs	r1, #3
    e29e:	e725      	b.n	e0ec <_svfprintf_r+0x14fc>
    e2a0:	a81d      	add	r0, sp, #116	; 0x74
    e2a2:	eeb0 0a48 	vmov.f32	s0, s16
    e2a6:	eef0 0a68 	vmov.f32	s1, s17
    e2aa:	f000 fc21 	bl	eaf0 <frexp>
    e2ae:	2200      	movs	r2, #0
    e2b0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    e2b4:	ec51 0b10 	vmov	r0, r1, d0
    e2b8:	f7fc fb38 	bl	a92c <__aeabi_dmul>
    e2bc:	2200      	movs	r2, #0
    e2be:	2300      	movs	r3, #0
    e2c0:	4606      	mov	r6, r0
    e2c2:	460f      	mov	r7, r1
    e2c4:	f7fc fd9a 	bl	adfc <__aeabi_dcmpeq>
    e2c8:	b108      	cbz	r0, e2ce <_svfprintf_r+0x16de>
    e2ca:	2301      	movs	r3, #1
    e2cc:	931d      	str	r3, [sp, #116]	; 0x74
    e2ce:	4b66      	ldr	r3, [pc, #408]	; (e468 <_svfprintf_r+0x1878>)
    e2d0:	9305      	str	r3, [sp, #20]
    e2d2:	9b03      	ldr	r3, [sp, #12]
    e2d4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    e2d8:	3b01      	subs	r3, #1
    e2da:	ee0a aa90 	vmov	s21, sl
    e2de:	e9cd 9b0c 	strd	r9, fp, [sp, #48]	; 0x30
    e2e2:	f8dd a014 	ldr.w	sl, [sp, #20]
    e2e6:	9410      	str	r4, [sp, #64]	; 0x40
    e2e8:	4625      	mov	r5, r4
    e2ea:	4698      	mov	r8, r3
    e2ec:	e006      	b.n	e2fc <_svfprintf_r+0x170c>
    e2ee:	2200      	movs	r2, #0
    e2f0:	2300      	movs	r3, #0
    e2f2:	f108 38ff 	add.w	r8, r8, #4294967295
    e2f6:	f7fc fd81 	bl	adfc <__aeabi_dcmpeq>
    e2fa:	b9e8      	cbnz	r0, e338 <_svfprintf_r+0x1748>
    e2fc:	4b5b      	ldr	r3, [pc, #364]	; (e46c <_svfprintf_r+0x187c>)
    e2fe:	2200      	movs	r2, #0
    e300:	4630      	mov	r0, r6
    e302:	4639      	mov	r1, r7
    e304:	f7fc fb12 	bl	a92c <__aeabi_dmul>
    e308:	460f      	mov	r7, r1
    e30a:	4606      	mov	r6, r0
    e30c:	f003 f9aa 	bl	11664 <__aeabi_d2iz>
    e310:	4604      	mov	r4, r0
    e312:	f7fc faa1 	bl	a858 <__aeabi_i2d>
    e316:	460b      	mov	r3, r1
    e318:	4602      	mov	r2, r0
    e31a:	4639      	mov	r1, r7
    e31c:	4630      	mov	r0, r6
    e31e:	f7fc f94d 	bl	a5bc <__aeabi_dsub>
    e322:	f81a 3004 	ldrb.w	r3, [sl, r4]
    e326:	f1b8 3fff 	cmp.w	r8, #4294967295
    e32a:	46ab      	mov	fp, r5
    e32c:	46c1      	mov	r9, r8
    e32e:	f805 3b01 	strb.w	r3, [r5], #1
    e332:	4606      	mov	r6, r0
    e334:	460f      	mov	r7, r1
    e336:	d1da      	bne.n	e2ee <_svfprintf_r+0x16fe>
    e338:	4b4d      	ldr	r3, [pc, #308]	; (e470 <_svfprintf_r+0x1880>)
    e33a:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    e33e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    e342:	2200      	movs	r2, #0
    e344:	4630      	mov	r0, r6
    e346:	4639      	mov	r1, r7
    e348:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    e34c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
    e350:	ee1a aa90 	vmov	sl, s21
    e354:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    e358:	940d      	str	r4, [sp, #52]	; 0x34
    e35a:	9c10      	ldr	r4, [sp, #64]	; 0x40
    e35c:	f7fc fd76 	bl	ae4c <__aeabi_dcmpgt>
    e360:	2800      	cmp	r0, #0
    e362:	f040 8160 	bne.w	e626 <_svfprintf_r+0x1a36>
    e366:	4b42      	ldr	r3, [pc, #264]	; (e470 <_svfprintf_r+0x1880>)
    e368:	4630      	mov	r0, r6
    e36a:	4639      	mov	r1, r7
    e36c:	2200      	movs	r2, #0
    e36e:	f7fc fd45 	bl	adfc <__aeabi_dcmpeq>
    e372:	b118      	cbz	r0, e37c <_svfprintf_r+0x178c>
    e374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e376:	07de      	lsls	r6, r3, #31
    e378:	f100 8155 	bmi.w	e626 <_svfprintf_r+0x1a36>
    e37c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e37e:	2b00      	cmp	r3, #0
    e380:	db07      	blt.n	e392 <_svfprintf_r+0x17a2>
    e382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e384:	3301      	adds	r3, #1
    e386:	442b      	add	r3, r5
    e388:	2230      	movs	r2, #48	; 0x30
    e38a:	f805 2b01 	strb.w	r2, [r5], #1
    e38e:	42ab      	cmp	r3, r5
    e390:	d1fb      	bne.n	e38a <_svfprintf_r+0x179a>
    e392:	1b2b      	subs	r3, r5, r4
    e394:	930d      	str	r3, [sp, #52]	; 0x34
    e396:	e6d1      	b.n	e13c <_svfprintf_r+0x154c>
    e398:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    e39a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e39c:	f8dd b014 	ldr.w	fp, [sp, #20]
    e3a0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    e3a4:	9714      	str	r7, [sp, #80]	; 0x50
    e3a6:	18e3      	adds	r3, r4, r3
    e3a8:	429d      	cmp	r5, r3
    e3aa:	4691      	mov	r9, r2
    e3ac:	462a      	mov	r2, r5
    e3ae:	bf28      	it	cs
    e3b0:	461a      	movcs	r2, r3
    e3b2:	4666      	mov	r6, ip
    e3b4:	9205      	str	r2, [sp, #20]
    e3b6:	f7ff b9b9 	b.w	d72c <_svfprintf_r+0xb3c>
    e3ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e3bc:	930b      	str	r3, [sp, #44]	; 0x2c
    e3be:	1cdd      	adds	r5, r3, #3
    e3c0:	db02      	blt.n	e3c8 <_svfprintf_r+0x17d8>
    e3c2:	9a03      	ldr	r2, [sp, #12]
    e3c4:	4293      	cmp	r3, r2
    e3c6:	dd0d      	ble.n	e3e4 <_svfprintf_r+0x17f4>
    e3c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e3ca:	3b02      	subs	r3, #2
    e3cc:	930a      	str	r3, [sp, #40]	; 0x28
    e3ce:	f023 0320 	bic.w	r3, r3, #32
    e3d2:	9302      	str	r3, [sp, #8]
    e3d4:	e6bc      	b.n	e150 <_svfprintf_r+0x1560>
    e3d6:	222d      	movs	r2, #45	; 0x2d
    e3d8:	2300      	movs	r3, #0
    e3da:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    e3de:	9303      	str	r3, [sp, #12]
    e3e0:	f7fe bdfc 	b.w	cfdc <_svfprintf_r+0x3ec>
    e3e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e3e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e3e8:	4293      	cmp	r3, r2
    e3ea:	f2c0 80d8 	blt.w	e59e <_svfprintf_r+0x19ae>
    e3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e3f0:	f013 0f01 	tst.w	r3, #1
    e3f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e3f6:	f000 8140 	beq.w	e67a <_svfprintf_r+0x1a8a>
    e3fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e3fc:	4413      	add	r3, r2
    e3fe:	9305      	str	r3, [sp, #20]
    e400:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e402:	0559      	lsls	r1, r3, #21
    e404:	d503      	bpl.n	e40e <_svfprintf_r+0x181e>
    e406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e408:	2b00      	cmp	r3, #0
    e40a:	f300 813f 	bgt.w	e68c <_svfprintf_r+0x1a9c>
    e40e:	9b05      	ldr	r3, [sp, #20]
    e410:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e414:	9302      	str	r3, [sp, #8]
    e416:	2367      	movs	r3, #103	; 0x67
    e418:	930a      	str	r3, [sp, #40]	; 0x28
    e41a:	2300      	movs	r3, #0
    e41c:	930c      	str	r3, [sp, #48]	; 0x30
    e41e:	9310      	str	r3, [sp, #64]	; 0x40
    e420:	e6f9      	b.n	e216 <_svfprintf_r+0x1626>
    e422:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e424:	42ab      	cmp	r3, r5
    e426:	f4bf ae87 	bcs.w	e138 <_svfprintf_r+0x1548>
    e42a:	2130      	movs	r1, #48	; 0x30
    e42c:	1c5a      	adds	r2, r3, #1
    e42e:	9224      	str	r2, [sp, #144]	; 0x90
    e430:	7019      	strb	r1, [r3, #0]
    e432:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e434:	429d      	cmp	r5, r3
    e436:	d8f9      	bhi.n	e42c <_svfprintf_r+0x183c>
    e438:	e67e      	b.n	e138 <_svfprintf_r+0x1548>
    e43a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e43c:	07db      	lsls	r3, r3, #31
    e43e:	f100 80b9 	bmi.w	e5b4 <_svfprintf_r+0x19c4>
    e442:	9b24      	ldr	r3, [sp, #144]	; 0x90
    e444:	e678      	b.n	e138 <_svfprintf_r+0x1548>
    e446:	aa26      	add	r2, sp, #152	; 0x98
    e448:	4649      	mov	r1, r9
    e44a:	4650      	mov	r0, sl
    e44c:	f001 fc5c 	bl	fd08 <__ssprint_r>
    e450:	2800      	cmp	r0, #0
    e452:	f47f a848 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    e456:	7838      	ldrb	r0, [r7, #0]
    e458:	f8dd c0a0 	ldr.w	ip, [sp, #160]	; 0xa0
    e45c:	aa29      	add	r2, sp, #164	; 0xa4
    e45e:	4405      	add	r5, r0
    e460:	f7ff bbbf 	b.w	dbe2 <_svfprintf_r+0xff2>
    e464:	66666667 	.word	0x66666667
    e468:	00012560 	.word	0x00012560
    e46c:	40300000 	.word	0x40300000
    e470:	3fe00000 	.word	0x3fe00000
    e474:	2378      	movs	r3, #120	; 0x78
    e476:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    e47a:	2330      	movs	r3, #48	; 0x30
    e47c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    e480:	f04b 0302 	orr.w	r3, fp, #2
    e484:	9309      	str	r3, [sp, #36]	; 0x24
    e486:	9b03      	ldr	r3, [sp, #12]
    e488:	2b63      	cmp	r3, #99	; 0x63
    e48a:	f300 80a9 	bgt.w	e5e0 <_svfprintf_r+0x19f0>
    e48e:	2300      	movs	r3, #0
    e490:	9307      	str	r3, [sp, #28]
    e492:	ac39      	add	r4, sp, #228	; 0xe4
    e494:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
    e498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e49a:	2a00      	cmp	r2, #0
    e49c:	f023 0320 	bic.w	r3, r3, #32
    e4a0:	f44b 7b81 	orr.w	fp, fp, #258	; 0x102
    e4a4:	9302      	str	r3, [sp, #8]
    e4a6:	db22      	blt.n	e4ee <_svfprintf_r+0x18fe>
    e4a8:	2300      	movs	r3, #0
    e4aa:	ec42 1b18 	vmov	d8, r1, r2
    e4ae:	9318      	str	r3, [sp, #96]	; 0x60
    e4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e4b2:	2b61      	cmp	r3, #97	; 0x61
    e4b4:	f47f aa9a 	bne.w	d9ec <_svfprintf_r+0xdfc>
    e4b8:	eeb0 0a48 	vmov.f32	s0, s16
    e4bc:	eef0 0a68 	vmov.f32	s1, s17
    e4c0:	a81d      	add	r0, sp, #116	; 0x74
    e4c2:	f000 fb15 	bl	eaf0 <frexp>
    e4c6:	2200      	movs	r2, #0
    e4c8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    e4cc:	ec51 0b10 	vmov	r0, r1, d0
    e4d0:	f7fc fa2c 	bl	a92c <__aeabi_dmul>
    e4d4:	2200      	movs	r2, #0
    e4d6:	2300      	movs	r3, #0
    e4d8:	4606      	mov	r6, r0
    e4da:	460f      	mov	r7, r1
    e4dc:	f7fc fc8e 	bl	adfc <__aeabi_dcmpeq>
    e4e0:	b108      	cbz	r0, e4e6 <_svfprintf_r+0x18f6>
    e4e2:	2301      	movs	r3, #1
    e4e4:	931d      	str	r3, [sp, #116]	; 0x74
    e4e6:	4bad      	ldr	r3, [pc, #692]	; (e79c <_svfprintf_r+0x1bac>)
    e4e8:	9305      	str	r3, [sp, #20]
    e4ea:	e6f2      	b.n	e2d2 <_svfprintf_r+0x16e2>
    e4ec:	9307      	str	r3, [sp, #28]
    e4ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    e4f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    e4f6:	ee08 3a90 	vmov	s17, r3
    e4fa:	232d      	movs	r3, #45	; 0x2d
    e4fc:	ee08 2a10 	vmov	s16, r2
    e500:	9318      	str	r3, [sp, #96]	; 0x60
    e502:	e7d5      	b.n	e4b0 <_svfprintf_r+0x18c0>
    e504:	ee1a 1a10 	vmov	r1, s20
    e508:	aa26      	add	r2, sp, #152	; 0x98
    e50a:	4650      	mov	r0, sl
    e50c:	f001 fbfc 	bl	fd08 <__ssprint_r>
    e510:	2800      	cmp	r0, #0
    e512:	f47e afe8 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    e516:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    e518:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    e51c:	f7ff b8f8 	b.w	d710 <_svfprintf_r+0xb20>
    e520:	ee1a 1a10 	vmov	r1, s20
    e524:	aa26      	add	r2, sp, #152	; 0x98
    e526:	4650      	mov	r0, sl
    e528:	f001 fbee 	bl	fd08 <__ssprint_r>
    e52c:	2800      	cmp	r0, #0
    e52e:	f47e afda 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    e532:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e534:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    e536:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    e53a:	f7ff b90d 	b.w	d758 <_svfprintf_r+0xb68>
    e53e:	2358      	movs	r3, #88	; 0x58
    e540:	e799      	b.n	e476 <_svfprintf_r+0x1886>
    e542:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    e544:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e546:	920b      	str	r2, [sp, #44]	; 0x2c
    e548:	2a00      	cmp	r2, #0
    e54a:	f003 0301 	and.w	r3, r3, #1
    e54e:	f340 8111 	ble.w	e774 <_svfprintf_r+0x1b84>
    e552:	9903      	ldr	r1, [sp, #12]
    e554:	430b      	orrs	r3, r1
    e556:	f040 80c1 	bne.w	e6dc <_svfprintf_r+0x1aec>
    e55a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e55c:	9305      	str	r3, [sp, #20]
    e55e:	2366      	movs	r3, #102	; 0x66
    e560:	930a      	str	r3, [sp, #40]	; 0x28
    e562:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e564:	055a      	lsls	r2, r3, #21
    e566:	f100 8093 	bmi.w	e690 <_svfprintf_r+0x1aa0>
    e56a:	9b05      	ldr	r3, [sp, #20]
    e56c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e570:	9302      	str	r3, [sp, #8]
    e572:	e752      	b.n	e41a <_svfprintf_r+0x182a>
    e574:	ee1a 1a10 	vmov	r1, s20
    e578:	aa26      	add	r2, sp, #152	; 0x98
    e57a:	4650      	mov	r0, sl
    e57c:	f001 fbc4 	bl	fd08 <__ssprint_r>
    e580:	2800      	cmp	r0, #0
    e582:	f47e afb0 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    e586:	9c1d      	ldr	r4, [sp, #116]	; 0x74
    e588:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e58a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    e58c:	1b1c      	subs	r4, r3, r4
    e58e:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    e592:	f7ff b8f9 	b.w	d788 <_svfprintf_r+0xb98>
    e596:	2200      	movs	r2, #0
    e598:	9203      	str	r2, [sp, #12]
    e59a:	f7fe bb87 	b.w	ccac <_svfprintf_r+0xbc>
    e59e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e5a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    e5a2:	189a      	adds	r2, r3, r2
    e5a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e5a6:	9205      	str	r2, [sp, #20]
    e5a8:	2b00      	cmp	r3, #0
    e5aa:	f340 80bd 	ble.w	e728 <_svfprintf_r+0x1b38>
    e5ae:	2367      	movs	r3, #103	; 0x67
    e5b0:	930a      	str	r3, [sp, #40]	; 0x28
    e5b2:	e7d6      	b.n	e562 <_svfprintf_r+0x1972>
    e5b4:	19a5      	adds	r5, r4, r6
    e5b6:	e5b5      	b.n	e124 <_svfprintf_r+0x1534>
    e5b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e5ba:	320f      	adds	r2, #15
    e5bc:	b2d2      	uxtb	r2, r2
    e5be:	2101      	movs	r1, #1
    e5c0:	e5d0      	b.n	e164 <_svfprintf_r+0x1574>
    e5c2:	2900      	cmp	r1, #0
    e5c4:	f040 80ad 	bne.w	e722 <_svfprintf_r+0x1b32>
    e5c8:	2230      	movs	r2, #48	; 0x30
    e5ca:	f88d 2082 	strb.w	r2, [sp, #130]	; 0x82
    e5ce:	f10d 0283 	add.w	r2, sp, #131	; 0x83
    e5d2:	3330      	adds	r3, #48	; 0x30
    e5d4:	f802 3b01 	strb.w	r3, [r2], #1
    e5d8:	ab20      	add	r3, sp, #128	; 0x80
    e5da:	1ad3      	subs	r3, r2, r3
    e5dc:	9315      	str	r3, [sp, #84]	; 0x54
    e5de:	e602      	b.n	e1e6 <_svfprintf_r+0x15f6>
    e5e0:	1c59      	adds	r1, r3, #1
    e5e2:	4650      	mov	r0, sl
    e5e4:	f7fc fc62 	bl	aeac <_malloc_r>
    e5e8:	4604      	mov	r4, r0
    e5ea:	2800      	cmp	r0, #0
    e5ec:	d037      	beq.n	e65e <_svfprintf_r+0x1a6e>
    e5ee:	9007      	str	r0, [sp, #28]
    e5f0:	e750      	b.n	e494 <_svfprintf_r+0x18a4>
    e5f2:	3301      	adds	r3, #1
    e5f4:	443a      	add	r2, r7
    e5f6:	2b07      	cmp	r3, #7
    e5f8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
    e5fc:	f8c9 5000 	str.w	r5, [r9]
    e600:	f8c9 7004 	str.w	r7, [r9, #4]
    e604:	f77f abd9 	ble.w	ddba <_svfprintf_r+0x11ca>
    e608:	ee1a 1a10 	vmov	r1, s20
    e60c:	aa26      	add	r2, sp, #152	; 0x98
    e60e:	4650      	mov	r0, sl
    e610:	f001 fb7a 	bl	fd08 <__ssprint_r>
    e614:	2800      	cmp	r0, #0
    e616:	f47e af66 	bne.w	d4e6 <_svfprintf_r+0x8f6>
    e61a:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
    e61e:	f10d 09a4 	add.w	r9, sp, #164	; 0xa4
    e622:	f7ff bbcc 	b.w	ddbe <_svfprintf_r+0x11ce>
    e626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e628:	9a05      	ldr	r2, [sp, #20]
    e62a:	9324      	str	r3, [sp, #144]	; 0x90
    e62c:	7bd1      	ldrb	r1, [r2, #15]
    e62e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    e632:	428b      	cmp	r3, r1
    e634:	462a      	mov	r2, r5
    e636:	d109      	bne.n	e64c <_svfprintf_r+0x1a5c>
    e638:	2030      	movs	r0, #48	; 0x30
    e63a:	f802 0c01 	strb.w	r0, [r2, #-1]
    e63e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    e640:	1e53      	subs	r3, r2, #1
    e642:	9324      	str	r3, [sp, #144]	; 0x90
    e644:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    e648:	4299      	cmp	r1, r3
    e64a:	d0f6      	beq.n	e63a <_svfprintf_r+0x1a4a>
    e64c:	2b39      	cmp	r3, #57	; 0x39
    e64e:	bf0b      	itete	eq
    e650:	9b05      	ldreq	r3, [sp, #20]
    e652:	3301      	addne	r3, #1
    e654:	7a9b      	ldrbeq	r3, [r3, #10]
    e656:	b2db      	uxtbne	r3, r3
    e658:	f802 3c01 	strb.w	r3, [r2, #-1]
    e65c:	e699      	b.n	e392 <_svfprintf_r+0x17a2>
    e65e:	ee1a 2a10 	vmov	r2, s20
    e662:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    e666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e66a:	8193      	strh	r3, [r2, #12]
    e66c:	f7fe bbcf 	b.w	ce0e <_svfprintf_r+0x21e>
    e670:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e672:	07d8      	lsls	r0, r3, #31
    e674:	f57f adc2 	bpl.w	e1fc <_svfprintf_r+0x160c>
    e678:	e5bc      	b.n	e1f4 <_svfprintf_r+0x1604>
    e67a:	9305      	str	r3, [sp, #20]
    e67c:	e6c0      	b.n	e400 <_svfprintf_r+0x1810>
    e67e:	9b03      	ldr	r3, [sp, #12]
    e680:	f8dd 8008 	ldr.w	r8, [sp, #8]
    e684:	f8dd b01c 	ldr.w	fp, [sp, #28]
    e688:	9305      	str	r3, [sp, #20]
    e68a:	e4bf      	b.n	e00c <_svfprintf_r+0x141c>
    e68c:	2367      	movs	r3, #103	; 0x67
    e68e:	930a      	str	r3, [sp, #40]	; 0x28
    e690:	9914      	ldr	r1, [sp, #80]	; 0x50
    e692:	780b      	ldrb	r3, [r1, #0]
    e694:	2bff      	cmp	r3, #255	; 0xff
    e696:	f000 808f 	beq.w	e7b8 <_svfprintf_r+0x1bc8>
    e69a:	2500      	movs	r5, #0
    e69c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e69e:	4628      	mov	r0, r5
    e6a0:	e003      	b.n	e6aa <_svfprintf_r+0x1aba>
    e6a2:	3001      	adds	r0, #1
    e6a4:	3101      	adds	r1, #1
    e6a6:	2bff      	cmp	r3, #255	; 0xff
    e6a8:	d008      	beq.n	e6bc <_svfprintf_r+0x1acc>
    e6aa:	4293      	cmp	r3, r2
    e6ac:	da06      	bge.n	e6bc <_svfprintf_r+0x1acc>
    e6ae:	1ad2      	subs	r2, r2, r3
    e6b0:	784b      	ldrb	r3, [r1, #1]
    e6b2:	2b00      	cmp	r3, #0
    e6b4:	d1f5      	bne.n	e6a2 <_svfprintf_r+0x1ab2>
    e6b6:	780b      	ldrb	r3, [r1, #0]
    e6b8:	3501      	adds	r5, #1
    e6ba:	e7f4      	b.n	e6a6 <_svfprintf_r+0x1ab6>
    e6bc:	920b      	str	r2, [sp, #44]	; 0x2c
    e6be:	9114      	str	r1, [sp, #80]	; 0x50
    e6c0:	9010      	str	r0, [sp, #64]	; 0x40
    e6c2:	950c      	str	r5, [sp, #48]	; 0x30
    e6c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e6c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e6c8:	9917      	ldr	r1, [sp, #92]	; 0x5c
    e6ca:	4413      	add	r3, r2
    e6cc:	9a05      	ldr	r2, [sp, #20]
    e6ce:	fb01 2303 	mla	r3, r1, r3, r2
    e6d2:	9305      	str	r3, [sp, #20]
    e6d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e6d8:	9302      	str	r3, [sp, #8]
    e6da:	e59c      	b.n	e216 <_svfprintf_r+0x1626>
    e6dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e6de:	18d5      	adds	r5, r2, r3
    e6e0:	4429      	add	r1, r5
    e6e2:	2366      	movs	r3, #102	; 0x66
    e6e4:	9105      	str	r1, [sp, #20]
    e6e6:	930a      	str	r3, [sp, #40]	; 0x28
    e6e8:	e73b      	b.n	e562 <_svfprintf_r+0x1972>
    e6ea:	9b03      	ldr	r3, [sp, #12]
    e6ec:	9302      	str	r3, [sp, #8]
    e6ee:	9305      	str	r3, [sp, #20]
    e6f0:	2373      	movs	r3, #115	; 0x73
    e6f2:	f89d 206f 	ldrb.w	r2, [sp, #111]	; 0x6f
    e6f6:	9708      	str	r7, [sp, #32]
    e6f8:	9003      	str	r0, [sp, #12]
    e6fa:	900c      	str	r0, [sp, #48]	; 0x30
    e6fc:	9010      	str	r0, [sp, #64]	; 0x40
    e6fe:	930a      	str	r3, [sp, #40]	; 0x28
    e700:	f7fe bc69 	b.w	cfd6 <_svfprintf_r+0x3e6>
    e704:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e706:	4c26      	ldr	r4, [pc, #152]	; (e7a0 <_svfprintf_r+0x1bb0>)
    e708:	2b00      	cmp	r3, #0
    e70a:	bfb4      	ite	lt
    e70c:	222d      	movlt	r2, #45	; 0x2d
    e70e:	f89d 206f 	ldrbge.w	r2, [sp, #111]	; 0x6f
    e712:	4b24      	ldr	r3, [pc, #144]	; (e7a4 <_svfprintf_r+0x1bb4>)
    e714:	bfb8      	it	lt
    e716:	f88d 206f 	strblt.w	r2, [sp, #111]	; 0x6f
    e71a:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    e71e:	f7fe bc4d 	b.w	cfbc <_svfprintf_r+0x3cc>
    e722:	f10d 0282 	add.w	r2, sp, #130	; 0x82
    e726:	e754      	b.n	e5d2 <_svfprintf_r+0x19e2>
    e728:	f1c3 0301 	rsb	r3, r3, #1
    e72c:	441a      	add	r2, r3
    e72e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    e732:	9302      	str	r3, [sp, #8]
    e734:	2367      	movs	r3, #103	; 0x67
    e736:	9205      	str	r2, [sp, #20]
    e738:	930a      	str	r3, [sp, #40]	; 0x28
    e73a:	e66e      	b.n	e41a <_svfprintf_r+0x182a>
    e73c:	ec51 0b18 	vmov	r0, r1, d8
    e740:	2200      	movs	r2, #0
    e742:	2300      	movs	r3, #0
    e744:	f7fc fb5a 	bl	adfc <__aeabi_dcmpeq>
    e748:	2800      	cmp	r0, #0
    e74a:	f47f ace9 	bne.w	e120 <_svfprintf_r+0x1530>
    e74e:	f1c6 0601 	rsb	r6, r6, #1
    e752:	961d      	str	r6, [sp, #116]	; 0x74
    e754:	e4e5      	b.n	e122 <_svfprintf_r+0x1532>
    e756:	2302      	movs	r3, #2
    e758:	9315      	str	r3, [sp, #84]	; 0x54
    e75a:	e544      	b.n	e1e6 <_svfprintf_r+0x15f6>
    e75c:	9a08      	ldr	r2, [sp, #32]
    e75e:	f898 3001 	ldrb.w	r3, [r8, #1]
    e762:	4688      	mov	r8, r1
    e764:	f852 1b04 	ldr.w	r1, [r2], #4
    e768:	9208      	str	r2, [sp, #32]
    e76a:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    e76e:	9103      	str	r1, [sp, #12]
    e770:	f7fe ba9a 	b.w	cca8 <_svfprintf_r+0xb8>
    e774:	9a03      	ldr	r2, [sp, #12]
    e776:	4313      	orrs	r3, r2
    e778:	d105      	bne.n	e786 <_svfprintf_r+0x1b96>
    e77a:	2301      	movs	r3, #1
    e77c:	2266      	movs	r2, #102	; 0x66
    e77e:	9302      	str	r3, [sp, #8]
    e780:	920a      	str	r2, [sp, #40]	; 0x28
    e782:	9305      	str	r3, [sp, #20]
    e784:	e649      	b.n	e41a <_svfprintf_r+0x182a>
    e786:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e788:	1c5d      	adds	r5, r3, #1
    e78a:	442a      	add	r2, r5
    e78c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    e790:	9302      	str	r3, [sp, #8]
    e792:	2366      	movs	r3, #102	; 0x66
    e794:	9205      	str	r2, [sp, #20]
    e796:	930a      	str	r3, [sp, #40]	; 0x28
    e798:	e63f      	b.n	e41a <_svfprintf_r+0x182a>
    e79a:	bf00      	nop
    e79c:	0001254c 	.word	0x0001254c
    e7a0:	00012544 	.word	0x00012544
    e7a4:	00012548 	.word	0x00012548
    e7a8:	230c      	movs	r3, #12
    e7aa:	f8ca 3000 	str.w	r3, [sl]
    e7ae:	f04f 33ff 	mov.w	r3, #4294967295
    e7b2:	9304      	str	r3, [sp, #16]
    e7b4:	f7fe bb32 	b.w	ce1c <_svfprintf_r+0x22c>
    e7b8:	2300      	movs	r3, #0
    e7ba:	930c      	str	r3, [sp, #48]	; 0x30
    e7bc:	9310      	str	r3, [sp, #64]	; 0x40
    e7be:	e781      	b.n	e6c4 <_svfprintf_r+0x1ad4>
    e7c0:	ee1a 2a10 	vmov	r2, s20
    e7c4:	8993      	ldrh	r3, [r2, #12]
    e7c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e7ca:	8193      	strh	r3, [r2, #12]
    e7cc:	f7fe be8b 	b.w	d4e6 <_svfprintf_r+0x8f6>

0000e7d0 <_fclose_r>:
    e7d0:	b570      	push	{r4, r5, r6, lr}
    e7d2:	2900      	cmp	r1, #0
    e7d4:	d04b      	beq.n	e86e <_fclose_r+0x9e>
    e7d6:	4606      	mov	r6, r0
    e7d8:	460c      	mov	r4, r1
    e7da:	b110      	cbz	r0, e7e2 <_fclose_r+0x12>
    e7dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e7de:	2b00      	cmp	r3, #0
    e7e0:	d048      	beq.n	e874 <_fclose_r+0xa4>
    e7e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e7e4:	07d8      	lsls	r0, r3, #31
    e7e6:	d534      	bpl.n	e852 <_fclose_r+0x82>
    e7e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e7ec:	2b00      	cmp	r3, #0
    e7ee:	d03e      	beq.n	e86e <_fclose_r+0x9e>
    e7f0:	4621      	mov	r1, r4
    e7f2:	4630      	mov	r0, r6
    e7f4:	f000 f850 	bl	e898 <__sflush_r>
    e7f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e7fa:	4605      	mov	r5, r0
    e7fc:	b133      	cbz	r3, e80c <_fclose_r+0x3c>
    e7fe:	69e1      	ldr	r1, [r4, #28]
    e800:	4630      	mov	r0, r6
    e802:	4798      	blx	r3
    e804:	2800      	cmp	r0, #0
    e806:	bfb8      	it	lt
    e808:	f04f 35ff 	movlt.w	r5, #4294967295
    e80c:	89a3      	ldrh	r3, [r4, #12]
    e80e:	061a      	lsls	r2, r3, #24
    e810:	d43c      	bmi.n	e88c <_fclose_r+0xbc>
    e812:	6b21      	ldr	r1, [r4, #48]	; 0x30
    e814:	b141      	cbz	r1, e828 <_fclose_r+0x58>
    e816:	f104 0340 	add.w	r3, r4, #64	; 0x40
    e81a:	4299      	cmp	r1, r3
    e81c:	d002      	beq.n	e824 <_fclose_r+0x54>
    e81e:	4630      	mov	r0, r6
    e820:	f7fd fd00 	bl	c224 <_free_r>
    e824:	2300      	movs	r3, #0
    e826:	6323      	str	r3, [r4, #48]	; 0x30
    e828:	6c61      	ldr	r1, [r4, #68]	; 0x44
    e82a:	b121      	cbz	r1, e836 <_fclose_r+0x66>
    e82c:	4630      	mov	r0, r6
    e82e:	f7fd fcf9 	bl	c224 <_free_r>
    e832:	2300      	movs	r3, #0
    e834:	6463      	str	r3, [r4, #68]	; 0x44
    e836:	f7fd f8a7 	bl	b988 <__sfp_lock_acquire>
    e83a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e83c:	2200      	movs	r2, #0
    e83e:	07db      	lsls	r3, r3, #31
    e840:	81a2      	strh	r2, [r4, #12]
    e842:	d51f      	bpl.n	e884 <_fclose_r+0xb4>
    e844:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e846:	f7fd fb63 	bl	bf10 <__retarget_lock_close_recursive>
    e84a:	f7fd f8a3 	bl	b994 <__sfp_lock_release>
    e84e:	4628      	mov	r0, r5
    e850:	bd70      	pop	{r4, r5, r6, pc}
    e852:	89a3      	ldrh	r3, [r4, #12]
    e854:	0599      	lsls	r1, r3, #22
    e856:	d4cb      	bmi.n	e7f0 <_fclose_r+0x20>
    e858:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e85a:	f7fd fb5b 	bl	bf14 <__retarget_lock_acquire_recursive>
    e85e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e862:	2b00      	cmp	r3, #0
    e864:	d1c4      	bne.n	e7f0 <_fclose_r+0x20>
    e866:	6e65      	ldr	r5, [r4, #100]	; 0x64
    e868:	f015 0501 	ands.w	r5, r5, #1
    e86c:	d005      	beq.n	e87a <_fclose_r+0xaa>
    e86e:	2500      	movs	r5, #0
    e870:	4628      	mov	r0, r5
    e872:	bd70      	pop	{r4, r5, r6, pc}
    e874:	f7fd f86a 	bl	b94c <__sinit>
    e878:	e7b3      	b.n	e7e2 <_fclose_r+0x12>
    e87a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e87c:	f7fd fb4c 	bl	bf18 <__retarget_lock_release_recursive>
    e880:	4628      	mov	r0, r5
    e882:	bd70      	pop	{r4, r5, r6, pc}
    e884:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e886:	f7fd fb47 	bl	bf18 <__retarget_lock_release_recursive>
    e88a:	e7db      	b.n	e844 <_fclose_r+0x74>
    e88c:	6921      	ldr	r1, [r4, #16]
    e88e:	4630      	mov	r0, r6
    e890:	f7fd fcc8 	bl	c224 <_free_r>
    e894:	e7bd      	b.n	e812 <_fclose_r+0x42>
    e896:	bf00      	nop

0000e898 <__sflush_r>:
    e898:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    e89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e8a0:	460c      	mov	r4, r1
    e8a2:	0711      	lsls	r1, r2, #28
    e8a4:	4680      	mov	r8, r0
    e8a6:	d447      	bmi.n	e938 <__sflush_r+0xa0>
    e8a8:	6863      	ldr	r3, [r4, #4]
    e8aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    e8ae:	2b00      	cmp	r3, #0
    e8b0:	81a2      	strh	r2, [r4, #12]
    e8b2:	dd5e      	ble.n	e972 <__sflush_r+0xda>
    e8b4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    e8b6:	2d00      	cmp	r5, #0
    e8b8:	d058      	beq.n	e96c <__sflush_r+0xd4>
    e8ba:	2300      	movs	r3, #0
    e8bc:	f8d8 6000 	ldr.w	r6, [r8]
    e8c0:	f8c8 3000 	str.w	r3, [r8]
    e8c4:	b293      	uxth	r3, r2
    e8c6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    e8ca:	d156      	bne.n	e97a <__sflush_r+0xe2>
    e8cc:	2301      	movs	r3, #1
    e8ce:	69e1      	ldr	r1, [r4, #28]
    e8d0:	4640      	mov	r0, r8
    e8d2:	47a8      	blx	r5
    e8d4:	1c43      	adds	r3, r0, #1
    e8d6:	d067      	beq.n	e9a8 <__sflush_r+0x110>
    e8d8:	89a3      	ldrh	r3, [r4, #12]
    e8da:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    e8dc:	075f      	lsls	r7, r3, #29
    e8de:	d505      	bpl.n	e8ec <__sflush_r+0x54>
    e8e0:	6863      	ldr	r3, [r4, #4]
    e8e2:	1ac0      	subs	r0, r0, r3
    e8e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e8e6:	b10b      	cbz	r3, e8ec <__sflush_r+0x54>
    e8e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    e8ea:	1ac0      	subs	r0, r0, r3
    e8ec:	69e1      	ldr	r1, [r4, #28]
    e8ee:	4602      	mov	r2, r0
    e8f0:	2300      	movs	r3, #0
    e8f2:	4640      	mov	r0, r8
    e8f4:	47a8      	blx	r5
    e8f6:	1c41      	adds	r1, r0, #1
    e8f8:	d141      	bne.n	e97e <__sflush_r+0xe6>
    e8fa:	f8d8 3000 	ldr.w	r3, [r8]
    e8fe:	2b00      	cmp	r3, #0
    e900:	d03d      	beq.n	e97e <__sflush_r+0xe6>
    e902:	2b1d      	cmp	r3, #29
    e904:	d001      	beq.n	e90a <__sflush_r+0x72>
    e906:	2b16      	cmp	r3, #22
    e908:	d156      	bne.n	e9b8 <__sflush_r+0x120>
    e90a:	89a3      	ldrh	r3, [r4, #12]
    e90c:	6922      	ldr	r2, [r4, #16]
    e90e:	6022      	str	r2, [r4, #0]
    e910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    e914:	2100      	movs	r1, #0
    e916:	6061      	str	r1, [r4, #4]
    e918:	81a3      	strh	r3, [r4, #12]
    e91a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    e91c:	f8c8 6000 	str.w	r6, [r8]
    e920:	b321      	cbz	r1, e96c <__sflush_r+0xd4>
    e922:	f104 0340 	add.w	r3, r4, #64	; 0x40
    e926:	4299      	cmp	r1, r3
    e928:	d002      	beq.n	e930 <__sflush_r+0x98>
    e92a:	4640      	mov	r0, r8
    e92c:	f7fd fc7a 	bl	c224 <_free_r>
    e930:	2000      	movs	r0, #0
    e932:	6320      	str	r0, [r4, #48]	; 0x30
    e934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e938:	6926      	ldr	r6, [r4, #16]
    e93a:	b1be      	cbz	r6, e96c <__sflush_r+0xd4>
    e93c:	b293      	uxth	r3, r2
    e93e:	6825      	ldr	r5, [r4, #0]
    e940:	6026      	str	r6, [r4, #0]
    e942:	079a      	lsls	r2, r3, #30
    e944:	bf0c      	ite	eq
    e946:	6963      	ldreq	r3, [r4, #20]
    e948:	2300      	movne	r3, #0
    e94a:	1bad      	subs	r5, r5, r6
    e94c:	60a3      	str	r3, [r4, #8]
    e94e:	e00b      	b.n	e968 <__sflush_r+0xd0>
    e950:	462b      	mov	r3, r5
    e952:	4632      	mov	r2, r6
    e954:	69e1      	ldr	r1, [r4, #28]
    e956:	6a67      	ldr	r7, [r4, #36]	; 0x24
    e958:	4640      	mov	r0, r8
    e95a:	47b8      	blx	r7
    e95c:	f1b0 0c00 	subs.w	ip, r0, #0
    e960:	eba5 050c 	sub.w	r5, r5, ip
    e964:	4466      	add	r6, ip
    e966:	dd17      	ble.n	e998 <__sflush_r+0x100>
    e968:	2d00      	cmp	r5, #0
    e96a:	dcf1      	bgt.n	e950 <__sflush_r+0xb8>
    e96c:	2000      	movs	r0, #0
    e96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e972:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    e974:	2b00      	cmp	r3, #0
    e976:	dc9d      	bgt.n	e8b4 <__sflush_r+0x1c>
    e978:	e7f8      	b.n	e96c <__sflush_r+0xd4>
    e97a:	6d20      	ldr	r0, [r4, #80]	; 0x50
    e97c:	e7ae      	b.n	e8dc <__sflush_r+0x44>
    e97e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e982:	6922      	ldr	r2, [r4, #16]
    e984:	6022      	str	r2, [r4, #0]
    e986:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    e98a:	81a3      	strh	r3, [r4, #12]
    e98c:	2200      	movs	r2, #0
    e98e:	04db      	lsls	r3, r3, #19
    e990:	6062      	str	r2, [r4, #4]
    e992:	d5c2      	bpl.n	e91a <__sflush_r+0x82>
    e994:	6520      	str	r0, [r4, #80]	; 0x50
    e996:	e7c0      	b.n	e91a <__sflush_r+0x82>
    e998:	89a3      	ldrh	r3, [r4, #12]
    e99a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e99e:	f04f 30ff 	mov.w	r0, #4294967295
    e9a2:	81a3      	strh	r3, [r4, #12]
    e9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e9a8:	f8d8 3000 	ldr.w	r3, [r8]
    e9ac:	2b00      	cmp	r3, #0
    e9ae:	d093      	beq.n	e8d8 <__sflush_r+0x40>
    e9b0:	2b1d      	cmp	r3, #29
    e9b2:	d006      	beq.n	e9c2 <__sflush_r+0x12a>
    e9b4:	2b16      	cmp	r3, #22
    e9b6:	d004      	beq.n	e9c2 <__sflush_r+0x12a>
    e9b8:	89a3      	ldrh	r3, [r4, #12]
    e9ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e9be:	81a3      	strh	r3, [r4, #12]
    e9c0:	e7d5      	b.n	e96e <__sflush_r+0xd6>
    e9c2:	f8c8 6000 	str.w	r6, [r8]
    e9c6:	e7d1      	b.n	e96c <__sflush_r+0xd4>

0000e9c8 <_fflush_r>:
    e9c8:	b538      	push	{r3, r4, r5, lr}
    e9ca:	460c      	mov	r4, r1
    e9cc:	4605      	mov	r5, r0
    e9ce:	b108      	cbz	r0, e9d4 <_fflush_r+0xc>
    e9d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e9d2:	b303      	cbz	r3, ea16 <_fflush_r+0x4e>
    e9d4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    e9d8:	b188      	cbz	r0, e9fe <_fflush_r+0x36>
    e9da:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e9dc:	07db      	lsls	r3, r3, #31
    e9de:	d401      	bmi.n	e9e4 <_fflush_r+0x1c>
    e9e0:	0581      	lsls	r1, r0, #22
    e9e2:	d50f      	bpl.n	ea04 <_fflush_r+0x3c>
    e9e4:	4628      	mov	r0, r5
    e9e6:	4621      	mov	r1, r4
    e9e8:	f7ff ff56 	bl	e898 <__sflush_r>
    e9ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e9ee:	07da      	lsls	r2, r3, #31
    e9f0:	4605      	mov	r5, r0
    e9f2:	d402      	bmi.n	e9fa <_fflush_r+0x32>
    e9f4:	89a3      	ldrh	r3, [r4, #12]
    e9f6:	059b      	lsls	r3, r3, #22
    e9f8:	d508      	bpl.n	ea0c <_fflush_r+0x44>
    e9fa:	4628      	mov	r0, r5
    e9fc:	bd38      	pop	{r3, r4, r5, pc}
    e9fe:	4605      	mov	r5, r0
    ea00:	4628      	mov	r0, r5
    ea02:	bd38      	pop	{r3, r4, r5, pc}
    ea04:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ea06:	f7fd fa85 	bl	bf14 <__retarget_lock_acquire_recursive>
    ea0a:	e7eb      	b.n	e9e4 <_fflush_r+0x1c>
    ea0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ea0e:	f7fd fa83 	bl	bf18 <__retarget_lock_release_recursive>
    ea12:	4628      	mov	r0, r5
    ea14:	bd38      	pop	{r3, r4, r5, pc}
    ea16:	f7fc ff99 	bl	b94c <__sinit>
    ea1a:	e7db      	b.n	e9d4 <_fflush_r+0xc>

0000ea1c <_localeconv_r>:
    ea1c:	4800      	ldr	r0, [pc, #0]	; (ea20 <_localeconv_r+0x4>)
    ea1e:	4770      	bx	lr
    ea20:	1fff142c 	.word	0x1fff142c

0000ea24 <__libc_fini_array>:
    ea24:	b538      	push	{r3, r4, r5, lr}
    ea26:	4d07      	ldr	r5, [pc, #28]	; (ea44 <__libc_fini_array+0x20>)
    ea28:	4c07      	ldr	r4, [pc, #28]	; (ea48 <__libc_fini_array+0x24>)
    ea2a:	1b2c      	subs	r4, r5, r4
    ea2c:	10a4      	asrs	r4, r4, #2
    ea2e:	d005      	beq.n	ea3c <__libc_fini_array+0x18>
    ea30:	3c01      	subs	r4, #1
    ea32:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    ea36:	4798      	blx	r3
    ea38:	2c00      	cmp	r4, #0
    ea3a:	d1f9      	bne.n	ea30 <__libc_fini_array+0xc>
    ea3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ea40:	f003 be28 	b.w	12694 <__init_array_end>
	...
    ea4c:	ffffffff 	.word	0xffffffff

0000ea50 <memchr>:
    ea50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ea54:	2a10      	cmp	r2, #16
    ea56:	db2b      	blt.n	eab0 <memchr+0x60>
    ea58:	f010 0f07 	tst.w	r0, #7
    ea5c:	d008      	beq.n	ea70 <memchr+0x20>
    ea5e:	f810 3b01 	ldrb.w	r3, [r0], #1
    ea62:	3a01      	subs	r2, #1
    ea64:	428b      	cmp	r3, r1
    ea66:	d02d      	beq.n	eac4 <memchr+0x74>
    ea68:	f010 0f07 	tst.w	r0, #7
    ea6c:	b342      	cbz	r2, eac0 <memchr+0x70>
    ea6e:	d1f6      	bne.n	ea5e <memchr+0xe>
    ea70:	b4f0      	push	{r4, r5, r6, r7}
    ea72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ea76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    ea7a:	f022 0407 	bic.w	r4, r2, #7
    ea7e:	f07f 0700 	mvns.w	r7, #0
    ea82:	2300      	movs	r3, #0
    ea84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    ea88:	3c08      	subs	r4, #8
    ea8a:	ea85 0501 	eor.w	r5, r5, r1
    ea8e:	ea86 0601 	eor.w	r6, r6, r1
    ea92:	fa85 f547 	uadd8	r5, r5, r7
    ea96:	faa3 f587 	sel	r5, r3, r7
    ea9a:	fa86 f647 	uadd8	r6, r6, r7
    ea9e:	faa5 f687 	sel	r6, r5, r7
    eaa2:	b98e      	cbnz	r6, eac8 <memchr+0x78>
    eaa4:	d1ee      	bne.n	ea84 <memchr+0x34>
    eaa6:	bcf0      	pop	{r4, r5, r6, r7}
    eaa8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    eaac:	f002 0207 	and.w	r2, r2, #7
    eab0:	b132      	cbz	r2, eac0 <memchr+0x70>
    eab2:	f810 3b01 	ldrb.w	r3, [r0], #1
    eab6:	3a01      	subs	r2, #1
    eab8:	ea83 0301 	eor.w	r3, r3, r1
    eabc:	b113      	cbz	r3, eac4 <memchr+0x74>
    eabe:	d1f8      	bne.n	eab2 <memchr+0x62>
    eac0:	2000      	movs	r0, #0
    eac2:	4770      	bx	lr
    eac4:	3801      	subs	r0, #1
    eac6:	4770      	bx	lr
    eac8:	2d00      	cmp	r5, #0
    eaca:	bf06      	itte	eq
    eacc:	4635      	moveq	r5, r6
    eace:	3803      	subeq	r0, #3
    ead0:	3807      	subne	r0, #7
    ead2:	f015 0f01 	tst.w	r5, #1
    ead6:	d107      	bne.n	eae8 <memchr+0x98>
    ead8:	3001      	adds	r0, #1
    eada:	f415 7f80 	tst.w	r5, #256	; 0x100
    eade:	bf02      	ittt	eq
    eae0:	3001      	addeq	r0, #1
    eae2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    eae6:	3001      	addeq	r0, #1
    eae8:	bcf0      	pop	{r4, r5, r6, r7}
    eaea:	3801      	subs	r0, #1
    eaec:	4770      	bx	lr
    eaee:	bf00      	nop

0000eaf0 <frexp>:
    eaf0:	ec53 2b10 	vmov	r2, r3, d0
    eaf4:	b570      	push	{r4, r5, r6, lr}
    eaf6:	4e16      	ldr	r6, [pc, #88]	; (eb50 <frexp+0x60>)
    eaf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
    eafc:	2500      	movs	r5, #0
    eafe:	42b1      	cmp	r1, r6
    eb00:	4604      	mov	r4, r0
    eb02:	6005      	str	r5, [r0, #0]
    eb04:	dc21      	bgt.n	eb4a <frexp+0x5a>
    eb06:	ee10 6a10 	vmov	r6, s0
    eb0a:	430e      	orrs	r6, r1
    eb0c:	d01d      	beq.n	eb4a <frexp+0x5a>
    eb0e:	4e11      	ldr	r6, [pc, #68]	; (eb54 <frexp+0x64>)
    eb10:	401e      	ands	r6, r3
    eb12:	4618      	mov	r0, r3
    eb14:	b966      	cbnz	r6, eb30 <frexp+0x40>
    eb16:	4619      	mov	r1, r3
    eb18:	2200      	movs	r2, #0
    eb1a:	ee10 0a10 	vmov	r0, s0
    eb1e:	4b0e      	ldr	r3, [pc, #56]	; (eb58 <frexp+0x68>)
    eb20:	f7fb ff04 	bl	a92c <__aeabi_dmul>
    eb24:	f06f 0535 	mvn.w	r5, #53	; 0x35
    eb28:	4602      	mov	r2, r0
    eb2a:	4608      	mov	r0, r1
    eb2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    eb30:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
    eb34:	1509      	asrs	r1, r1, #20
    eb36:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
    eb3a:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
    eb3e:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
    eb42:	4429      	add	r1, r5
    eb44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    eb48:	6021      	str	r1, [r4, #0]
    eb4a:	ec43 2b10 	vmov	d0, r2, r3
    eb4e:	bd70      	pop	{r4, r5, r6, pc}
    eb50:	7fefffff 	.word	0x7fefffff
    eb54:	7ff00000 	.word	0x7ff00000
    eb58:	43500000 	.word	0x43500000

0000eb5c <__assert_func>:
    eb5c:	b500      	push	{lr}
    eb5e:	4c0b      	ldr	r4, [pc, #44]	; (eb8c <__assert_func+0x30>)
    eb60:	6825      	ldr	r5, [r4, #0]
    eb62:	4614      	mov	r4, r2
    eb64:	68ee      	ldr	r6, [r5, #12]
    eb66:	461a      	mov	r2, r3
    eb68:	b085      	sub	sp, #20
    eb6a:	4603      	mov	r3, r0
    eb6c:	460d      	mov	r5, r1
    eb6e:	b14c      	cbz	r4, eb84 <__assert_func+0x28>
    eb70:	4907      	ldr	r1, [pc, #28]	; (eb90 <__assert_func+0x34>)
    eb72:	9500      	str	r5, [sp, #0]
    eb74:	e9cd 1401 	strd	r1, r4, [sp, #4]
    eb78:	4630      	mov	r0, r6
    eb7a:	4906      	ldr	r1, [pc, #24]	; (eb94 <__assert_func+0x38>)
    eb7c:	f001 f8b0 	bl	fce0 <fiprintf>
    eb80:	f7fa fae2 	bl	9148 <abort>
    eb84:	4904      	ldr	r1, [pc, #16]	; (eb98 <__assert_func+0x3c>)
    eb86:	460c      	mov	r4, r1
    eb88:	e7f3      	b.n	eb72 <__assert_func+0x16>
    eb8a:	bf00      	nop
    eb8c:	1fff15c8 	.word	0x1fff15c8
    eb90:	000125a0 	.word	0x000125a0
    eb94:	000125b0 	.word	0x000125b0
    eb98:	000125ac 	.word	0x000125ac

0000eb9c <_calloc_r>:
    eb9c:	b538      	push	{r3, r4, r5, lr}
    eb9e:	fba1 1402 	umull	r1, r4, r1, r2
    eba2:	bb8c      	cbnz	r4, ec08 <_calloc_r+0x6c>
    eba4:	f7fc f982 	bl	aeac <_malloc_r>
    eba8:	4605      	mov	r5, r0
    ebaa:	b1e0      	cbz	r0, ebe6 <_calloc_r+0x4a>
    ebac:	f850 2c04 	ldr.w	r2, [r0, #-4]
    ebb0:	f022 0203 	bic.w	r2, r2, #3
    ebb4:	3a04      	subs	r2, #4
    ebb6:	2a24      	cmp	r2, #36	; 0x24
    ebb8:	d817      	bhi.n	ebea <_calloc_r+0x4e>
    ebba:	2a13      	cmp	r2, #19
    ebbc:	d91a      	bls.n	ebf4 <_calloc_r+0x58>
    ebbe:	2a1b      	cmp	r2, #27
    ebc0:	e9c0 4400 	strd	r4, r4, [r0]
    ebc4:	d91d      	bls.n	ec02 <_calloc_r+0x66>
    ebc6:	2a24      	cmp	r2, #36	; 0x24
    ebc8:	bf14      	ite	ne
    ebca:	f100 0210 	addne.w	r2, r0, #16
    ebce:	f100 0218 	addeq.w	r2, r0, #24
    ebd2:	f04f 0300 	mov.w	r3, #0
    ebd6:	e9c0 4402 	strd	r4, r4, [r0, #8]
    ebda:	bf04      	itt	eq
    ebdc:	6104      	streq	r4, [r0, #16]
    ebde:	6144      	streq	r4, [r0, #20]
    ebe0:	e9c2 3300 	strd	r3, r3, [r2]
    ebe4:	6093      	str	r3, [r2, #8]
    ebe6:	4628      	mov	r0, r5
    ebe8:	bd38      	pop	{r3, r4, r5, pc}
    ebea:	4621      	mov	r1, r4
    ebec:	f7fd f874 	bl	bcd8 <memset>
    ebf0:	4628      	mov	r0, r5
    ebf2:	bd38      	pop	{r3, r4, r5, pc}
    ebf4:	4602      	mov	r2, r0
    ebf6:	2300      	movs	r3, #0
    ebf8:	e9c2 3300 	strd	r3, r3, [r2]
    ebfc:	6093      	str	r3, [r2, #8]
    ebfe:	4628      	mov	r0, r5
    ec00:	bd38      	pop	{r3, r4, r5, pc}
    ec02:	f100 0208 	add.w	r2, r0, #8
    ec06:	e7f6      	b.n	ebf6 <_calloc_r+0x5a>
    ec08:	f7fd f956 	bl	beb8 <__errno>
    ec0c:	230c      	movs	r3, #12
    ec0e:	2500      	movs	r5, #0
    ec10:	6003      	str	r3, [r0, #0]
    ec12:	e7e8      	b.n	ebe6 <_calloc_r+0x4a>

0000ec14 <quorem>:
    ec14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec18:	6903      	ldr	r3, [r0, #16]
    ec1a:	690c      	ldr	r4, [r1, #16]
    ec1c:	42a3      	cmp	r3, r4
    ec1e:	b083      	sub	sp, #12
    ec20:	f2c0 8087 	blt.w	ed32 <quorem+0x11e>
    ec24:	3c01      	subs	r4, #1
    ec26:	f101 0514 	add.w	r5, r1, #20
    ec2a:	00a3      	lsls	r3, r4, #2
    ec2c:	f100 0814 	add.w	r8, r0, #20
    ec30:	9300      	str	r3, [sp, #0]
    ec32:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    ec36:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    ec3a:	3301      	adds	r3, #1
    ec3c:	4681      	mov	r9, r0
    ec3e:	429a      	cmp	r2, r3
    ec40:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    ec44:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    ec48:	9001      	str	r0, [sp, #4]
    ec4a:	fbb2 f6f3 	udiv	r6, r2, r3
    ec4e:	d33b      	bcc.n	ecc8 <quorem+0xb4>
    ec50:	f04f 0c00 	mov.w	ip, #0
    ec54:	46ae      	mov	lr, r5
    ec56:	4640      	mov	r0, r8
    ec58:	46e2      	mov	sl, ip
    ec5a:	4663      	mov	r3, ip
    ec5c:	f85e bb04 	ldr.w	fp, [lr], #4
    ec60:	6802      	ldr	r2, [r0, #0]
    ec62:	fa1f fc8b 	uxth.w	ip, fp
    ec66:	fb06 330c 	mla	r3, r6, ip, r3
    ec6a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    ec6e:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    ec72:	fb06 cc0b 	mla	ip, r6, fp, ip
    ec76:	b29b      	uxth	r3, r3
    ec78:	ebaa 0303 	sub.w	r3, sl, r3
    ec7c:	fa1f fa8c 	uxth.w	sl, ip
    ec80:	fa13 f382 	uxtah	r3, r3, r2
    ec84:	ebca 4212 	rsb	r2, sl, r2, lsr #16
    ec88:	eb02 4223 	add.w	r2, r2, r3, asr #16
    ec8c:	b29b      	uxth	r3, r3
    ec8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    ec92:	4577      	cmp	r7, lr
    ec94:	f840 3b04 	str.w	r3, [r0], #4
    ec98:	ea4f 4a22 	mov.w	sl, r2, asr #16
    ec9c:	ea4f 431c 	mov.w	r3, ip, lsr #16
    eca0:	d2dc      	bcs.n	ec5c <quorem+0x48>
    eca2:	9b00      	ldr	r3, [sp, #0]
    eca4:	f858 3003 	ldr.w	r3, [r8, r3]
    eca8:	b973      	cbnz	r3, ecc8 <quorem+0xb4>
    ecaa:	9b01      	ldr	r3, [sp, #4]
    ecac:	3b04      	subs	r3, #4
    ecae:	4598      	cmp	r8, r3
    ecb0:	d304      	bcc.n	ecbc <quorem+0xa8>
    ecb2:	e007      	b.n	ecc4 <quorem+0xb0>
    ecb4:	4598      	cmp	r8, r3
    ecb6:	f104 34ff 	add.w	r4, r4, #4294967295
    ecba:	d203      	bcs.n	ecc4 <quorem+0xb0>
    ecbc:	f853 2904 	ldr.w	r2, [r3], #-4
    ecc0:	2a00      	cmp	r2, #0
    ecc2:	d0f7      	beq.n	ecb4 <quorem+0xa0>
    ecc4:	f8c9 4010 	str.w	r4, [r9, #16]
    ecc8:	4648      	mov	r0, r9
    ecca:	f7fd fe4d 	bl	c968 <__mcmp>
    ecce:	2800      	cmp	r0, #0
    ecd0:	db2b      	blt.n	ed2a <quorem+0x116>
    ecd2:	3601      	adds	r6, #1
    ecd4:	4641      	mov	r1, r8
    ecd6:	2300      	movs	r3, #0
    ecd8:	f855 0b04 	ldr.w	r0, [r5], #4
    ecdc:	f8d1 c000 	ldr.w	ip, [r1]
    ece0:	b282      	uxth	r2, r0
    ece2:	1a9a      	subs	r2, r3, r2
    ece4:	0c03      	lsrs	r3, r0, #16
    ece6:	fa12 f28c 	uxtah	r2, r2, ip
    ecea:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    ecee:	eb03 4322 	add.w	r3, r3, r2, asr #16
    ecf2:	b292      	uxth	r2, r2
    ecf4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    ecf8:	42af      	cmp	r7, r5
    ecfa:	f841 2b04 	str.w	r2, [r1], #4
    ecfe:	ea4f 4323 	mov.w	r3, r3, asr #16
    ed02:	d2e9      	bcs.n	ecd8 <quorem+0xc4>
    ed04:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    ed08:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    ed0c:	b96a      	cbnz	r2, ed2a <quorem+0x116>
    ed0e:	3b04      	subs	r3, #4
    ed10:	4598      	cmp	r8, r3
    ed12:	d304      	bcc.n	ed1e <quorem+0x10a>
    ed14:	e007      	b.n	ed26 <quorem+0x112>
    ed16:	4598      	cmp	r8, r3
    ed18:	f104 34ff 	add.w	r4, r4, #4294967295
    ed1c:	d203      	bcs.n	ed26 <quorem+0x112>
    ed1e:	f853 2904 	ldr.w	r2, [r3], #-4
    ed22:	2a00      	cmp	r2, #0
    ed24:	d0f7      	beq.n	ed16 <quorem+0x102>
    ed26:	f8c9 4010 	str.w	r4, [r9, #16]
    ed2a:	4630      	mov	r0, r6
    ed2c:	b003      	add	sp, #12
    ed2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed32:	2000      	movs	r0, #0
    ed34:	b003      	add	sp, #12
    ed36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed3a:	bf00      	nop
    ed3c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

0000ed40 <_dtoa_r>:
    ed40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed44:	ed2d 8b06 	vpush	{d8-d10}
    ed48:	b095      	sub	sp, #84	; 0x54
    ed4a:	ed8d 0b02 	vstr	d0, [sp, #8]
    ed4e:	9101      	str	r1, [sp, #4]
    ed50:	6b81      	ldr	r1, [r0, #56]	; 0x38
    ed52:	9d24      	ldr	r5, [sp, #144]	; 0x90
    ed54:	9209      	str	r2, [sp, #36]	; 0x24
    ed56:	ec59 8b10 	vmov	r8, r9, d0
    ed5a:	4604      	mov	r4, r0
    ed5c:	9306      	str	r3, [sp, #24]
    ed5e:	b141      	cbz	r1, ed72 <_dtoa_r+0x32>
    ed60:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    ed62:	604a      	str	r2, [r1, #4]
    ed64:	2301      	movs	r3, #1
    ed66:	4093      	lsls	r3, r2
    ed68:	608b      	str	r3, [r1, #8]
    ed6a:	f7fd fb9d 	bl	c4a8 <_Bfree>
    ed6e:	2300      	movs	r3, #0
    ed70:	63a3      	str	r3, [r4, #56]	; 0x38
    ed72:	f1b9 0a00 	subs.w	sl, r9, #0
    ed76:	bfb4      	ite	lt
    ed78:	2301      	movlt	r3, #1
    ed7a:	2300      	movge	r3, #0
    ed7c:	602b      	str	r3, [r5, #0]
    ed7e:	4b7c      	ldr	r3, [pc, #496]	; (ef70 <_dtoa_r+0x230>)
    ed80:	bfbc      	itt	lt
    ed82:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
    ed86:	f8cd a00c 	strlt.w	sl, [sp, #12]
    ed8a:	ea33 030a 	bics.w	r3, r3, sl
    ed8e:	f000 80b3 	beq.w	eef8 <_dtoa_r+0x1b8>
    ed92:	ed9d 7b02 	vldr	d7, [sp, #8]
    ed96:	2200      	movs	r2, #0
    ed98:	ec51 0b17 	vmov	r0, r1, d7
    ed9c:	eeb0 9a47 	vmov.f32	s18, s14
    eda0:	eef0 9a67 	vmov.f32	s19, s15
    eda4:	2300      	movs	r3, #0
    eda6:	f7fc f829 	bl	adfc <__aeabi_dcmpeq>
    edaa:	4607      	mov	r7, r0
    edac:	b188      	cbz	r0, edd2 <_dtoa_r+0x92>
    edae:	9a06      	ldr	r2, [sp, #24]
    edb0:	2301      	movs	r3, #1
    edb2:	6013      	str	r3, [r2, #0]
    edb4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    edb6:	2b00      	cmp	r3, #0
    edb8:	f000 83ce 	beq.w	f558 <_dtoa_r+0x818>
    edbc:	4b6d      	ldr	r3, [pc, #436]	; (ef74 <_dtoa_r+0x234>)
    edbe:	9a25      	ldr	r2, [sp, #148]	; 0x94
    edc0:	6013      	str	r3, [r2, #0]
    edc2:	3b01      	subs	r3, #1
    edc4:	9300      	str	r3, [sp, #0]
    edc6:	9800      	ldr	r0, [sp, #0]
    edc8:	b015      	add	sp, #84	; 0x54
    edca:	ecbd 8b06 	vpop	{d8-d10}
    edce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    edd2:	aa12      	add	r2, sp, #72	; 0x48
    edd4:	a913      	add	r1, sp, #76	; 0x4c
    edd6:	4620      	mov	r0, r4
    edd8:	eeb0 0a49 	vmov.f32	s0, s18
    eddc:	eef0 0a69 	vmov.f32	s1, s19
    ede0:	f7fd fe8e 	bl	cb00 <__d2b>
    ede4:	eeb0 8a49 	vmov.f32	s16, s18
    ede8:	eef0 8a69 	vmov.f32	s17, s19
    edec:	ea5f 561a 	movs.w	r6, sl, lsr #20
    edf0:	4605      	mov	r5, r0
    edf2:	f040 8099 	bne.w	ef28 <_dtoa_r+0x1e8>
    edf6:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
    edfa:	443e      	add	r6, r7
    edfc:	f206 4332 	addw	r3, r6, #1074	; 0x432
    ee00:	2b20      	cmp	r3, #32
    ee02:	f340 83c2 	ble.w	f58a <_dtoa_r+0x84a>
    ee06:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    ee0a:	fa0a fa03 	lsl.w	sl, sl, r3
    ee0e:	f206 4312 	addw	r3, r6, #1042	; 0x412
    ee12:	fa28 f003 	lsr.w	r0, r8, r3
    ee16:	ea4a 0000 	orr.w	r0, sl, r0
    ee1a:	f7fb fd0d 	bl	a838 <__aeabi_ui2d>
    ee1e:	2301      	movs	r3, #1
    ee20:	3e01      	subs	r6, #1
    ee22:	930d      	str	r3, [sp, #52]	; 0x34
    ee24:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    ee28:	4b53      	ldr	r3, [pc, #332]	; (ef78 <_dtoa_r+0x238>)
    ee2a:	2200      	movs	r2, #0
    ee2c:	f7fb fbc6 	bl	a5bc <__aeabi_dsub>
    ee30:	a349      	add	r3, pc, #292	; (adr r3, ef58 <_dtoa_r+0x218>)
    ee32:	e9d3 2300 	ldrd	r2, r3, [r3]
    ee36:	f7fb fd79 	bl	a92c <__aeabi_dmul>
    ee3a:	a349      	add	r3, pc, #292	; (adr r3, ef60 <_dtoa_r+0x220>)
    ee3c:	e9d3 2300 	ldrd	r2, r3, [r3]
    ee40:	f7fb fbbe 	bl	a5c0 <__adddf3>
    ee44:	4680      	mov	r8, r0
    ee46:	4630      	mov	r0, r6
    ee48:	4689      	mov	r9, r1
    ee4a:	f7fb fd05 	bl	a858 <__aeabi_i2d>
    ee4e:	a346      	add	r3, pc, #280	; (adr r3, ef68 <_dtoa_r+0x228>)
    ee50:	e9d3 2300 	ldrd	r2, r3, [r3]
    ee54:	f7fb fd6a 	bl	a92c <__aeabi_dmul>
    ee58:	4602      	mov	r2, r0
    ee5a:	460b      	mov	r3, r1
    ee5c:	4640      	mov	r0, r8
    ee5e:	4649      	mov	r1, r9
    ee60:	f7fb fbae 	bl	a5c0 <__adddf3>
    ee64:	4680      	mov	r8, r0
    ee66:	4689      	mov	r9, r1
    ee68:	f002 fbfc 	bl	11664 <__aeabi_d2iz>
    ee6c:	2200      	movs	r2, #0
    ee6e:	4683      	mov	fp, r0
    ee70:	2300      	movs	r3, #0
    ee72:	4640      	mov	r0, r8
    ee74:	4649      	mov	r1, r9
    ee76:	f7fb ffcb 	bl	ae10 <__aeabi_dcmplt>
    ee7a:	2800      	cmp	r0, #0
    ee7c:	f040 835f 	bne.w	f53e <_dtoa_r+0x7fe>
    ee80:	f1bb 0f16 	cmp.w	fp, #22
    ee84:	f200 834e 	bhi.w	f524 <_dtoa_r+0x7e4>
    ee88:	4b3c      	ldr	r3, [pc, #240]	; (ef7c <_dtoa_r+0x23c>)
    ee8a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    ee8e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ee92:	ec51 0b19 	vmov	r0, r1, d9
    ee96:	f7fb ffbb 	bl	ae10 <__aeabi_dcmplt>
    ee9a:	2800      	cmp	r0, #0
    ee9c:	d074      	beq.n	ef88 <_dtoa_r+0x248>
    ee9e:	2300      	movs	r3, #0
    eea0:	1bbf      	subs	r7, r7, r6
    eea2:	930c      	str	r3, [sp, #48]	; 0x30
    eea4:	1e7b      	subs	r3, r7, #1
    eea6:	f10b 3bff 	add.w	fp, fp, #4294967295
    eeaa:	9304      	str	r3, [sp, #16]
    eeac:	f100 8341 	bmi.w	f532 <_dtoa_r+0x7f2>
    eeb0:	2300      	movs	r3, #0
    eeb2:	9308      	str	r3, [sp, #32]
    eeb4:	f1bb 0f00 	cmp.w	fp, #0
    eeb8:	da6d      	bge.n	ef96 <_dtoa_r+0x256>
    eeba:	9b08      	ldr	r3, [sp, #32]
    eebc:	f8cd b014 	str.w	fp, [sp, #20]
    eec0:	eba3 030b 	sub.w	r3, r3, fp
    eec4:	9308      	str	r3, [sp, #32]
    eec6:	f1cb 0300 	rsb	r3, fp, #0
    eeca:	930b      	str	r3, [sp, #44]	; 0x2c
    eecc:	9b01      	ldr	r3, [sp, #4]
    eece:	2b09      	cmp	r3, #9
    eed0:	f04f 0b00 	mov.w	fp, #0
    eed4:	d868      	bhi.n	efa8 <_dtoa_r+0x268>
    eed6:	2b05      	cmp	r3, #5
    eed8:	f340 8355 	ble.w	f586 <_dtoa_r+0x846>
    eedc:	3b04      	subs	r3, #4
    eede:	9301      	str	r3, [sp, #4]
    eee0:	2600      	movs	r6, #0
    eee2:	9b01      	ldr	r3, [sp, #4]
    eee4:	3b02      	subs	r3, #2
    eee6:	2b03      	cmp	r3, #3
    eee8:	f200 86a4 	bhi.w	fc34 <_dtoa_r+0xef4>
    eeec:	e8df f013 	tbh	[pc, r3, lsl #1]
    eef0:	04630466 	.word	0x04630466
    eef4:	043e045b 	.word	0x043e045b
    eef8:	9a06      	ldr	r2, [sp, #24]
    eefa:	f3ca 0a13 	ubfx	sl, sl, #0, #20
    eefe:	f242 730f 	movw	r3, #9999	; 0x270f
    ef02:	ea5a 0a08 	orrs.w	sl, sl, r8
    ef06:	6013      	str	r3, [r2, #0]
    ef08:	d11d      	bne.n	ef46 <_dtoa_r+0x206>
    ef0a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ef0c:	2b00      	cmp	r3, #0
    ef0e:	f000 86a0 	beq.w	fc52 <_dtoa_r+0xf12>
    ef12:	4b1b      	ldr	r3, [pc, #108]	; (ef80 <_dtoa_r+0x240>)
    ef14:	9300      	str	r3, [sp, #0]
    ef16:	3308      	adds	r3, #8
    ef18:	9a25      	ldr	r2, [sp, #148]	; 0x94
    ef1a:	9800      	ldr	r0, [sp, #0]
    ef1c:	6013      	str	r3, [r2, #0]
    ef1e:	b015      	add	sp, #84	; 0x54
    ef20:	ecbd 8b06 	vpop	{d8-d10}
    ef24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef28:	ee18 3a90 	vmov	r3, s17
    ef2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    ef30:	ec51 0b19 	vmov	r0, r1, d9
    ef34:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    ef38:	970d      	str	r7, [sp, #52]	; 0x34
    ef3a:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    ef3e:	9f12      	ldr	r7, [sp, #72]	; 0x48
    ef40:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    ef44:	e770      	b.n	ee28 <_dtoa_r+0xe8>
    ef46:	9b25      	ldr	r3, [sp, #148]	; 0x94
    ef48:	2b00      	cmp	r3, #0
    ef4a:	f040 83f0 	bne.w	f72e <_dtoa_r+0x9ee>
    ef4e:	4b0d      	ldr	r3, [pc, #52]	; (ef84 <_dtoa_r+0x244>)
    ef50:	9300      	str	r3, [sp, #0]
    ef52:	e738      	b.n	edc6 <_dtoa_r+0x86>
    ef54:	f3af 8000 	nop.w
    ef58:	636f4361 	.word	0x636f4361
    ef5c:	3fd287a7 	.word	0x3fd287a7
    ef60:	8b60c8b3 	.word	0x8b60c8b3
    ef64:	3fc68a28 	.word	0x3fc68a28
    ef68:	509f79fb 	.word	0x509f79fb
    ef6c:	3fd34413 	.word	0x3fd34413
    ef70:	7ff00000 	.word	0x7ff00000
    ef74:	0001257d 	.word	0x0001257d
    ef78:	3ff80000 	.word	0x3ff80000
    ef7c:	00012468 	.word	0x00012468
    ef80:	000125e0 	.word	0x000125e0
    ef84:	000125ec 	.word	0x000125ec
    ef88:	1bbf      	subs	r7, r7, r6
    ef8a:	1e7b      	subs	r3, r7, #1
    ef8c:	9304      	str	r3, [sp, #16]
    ef8e:	f100 849b 	bmi.w	f8c8 <_dtoa_r+0xb88>
    ef92:	900c      	str	r0, [sp, #48]	; 0x30
    ef94:	9008      	str	r0, [sp, #32]
    ef96:	9b04      	ldr	r3, [sp, #16]
    ef98:	445b      	add	r3, fp
    ef9a:	e9cd 3b04 	strd	r3, fp, [sp, #16]
    ef9e:	2300      	movs	r3, #0
    efa0:	930b      	str	r3, [sp, #44]	; 0x2c
    efa2:	9b01      	ldr	r3, [sp, #4]
    efa4:	2b09      	cmp	r3, #9
    efa6:	d996      	bls.n	eed6 <_dtoa_r+0x196>
    efa8:	2300      	movs	r3, #0
    efaa:	2601      	movs	r6, #1
    efac:	f04f 32ff 	mov.w	r2, #4294967295
    efb0:	9301      	str	r3, [sp, #4]
    efb2:	960a      	str	r6, [sp, #40]	; 0x28
    efb4:	9207      	str	r2, [sp, #28]
    efb6:	9309      	str	r3, [sp, #36]	; 0x24
    efb8:	9b07      	ldr	r3, [sp, #28]
    efba:	930f      	str	r3, [sp, #60]	; 0x3c
    efbc:	2100      	movs	r1, #0
    efbe:	63e1      	str	r1, [r4, #60]	; 0x3c
    efc0:	4620      	mov	r0, r4
    efc2:	f7fd fa4b 	bl	c45c <_Balloc>
    efc6:	9000      	str	r0, [sp, #0]
    efc8:	2800      	cmp	r0, #0
    efca:	f000 863b 	beq.w	fc44 <_dtoa_r+0xf04>
    efce:	9b00      	ldr	r3, [sp, #0]
    efd0:	63a3      	str	r3, [r4, #56]	; 0x38
    efd2:	9b07      	ldr	r3, [sp, #28]
    efd4:	2b0e      	cmp	r3, #14
    efd6:	f200 811e 	bhi.w	f216 <_dtoa_r+0x4d6>
    efda:	2e00      	cmp	r6, #0
    efdc:	f000 811b 	beq.w	f216 <_dtoa_r+0x4d6>
    efe0:	9905      	ldr	r1, [sp, #20]
    efe2:	2900      	cmp	r1, #0
    efe4:	f340 8472 	ble.w	f8cc <_dtoa_r+0xb8c>
    efe8:	4bd0      	ldr	r3, [pc, #832]	; (f32c <_dtoa_r+0x5ec>)
    efea:	f001 020f 	and.w	r2, r1, #15
    efee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    eff2:	ea4f 1821 	mov.w	r8, r1, asr #4
    eff6:	05c9      	lsls	r1, r1, #23
    eff8:	e9d3 6700 	ldrd	r6, r7, [r3]
    effc:	f140 842e 	bpl.w	f85c <_dtoa_r+0xb1c>
    f000:	4bcb      	ldr	r3, [pc, #812]	; (f330 <_dtoa_r+0x5f0>)
    f002:	ec51 0b19 	vmov	r0, r1, d9
    f006:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    f00a:	f7fb fdb9 	bl	ab80 <__aeabi_ddiv>
    f00e:	ec41 0b18 	vmov	d8, r0, r1
    f012:	f008 080f 	and.w	r8, r8, #15
    f016:	f04f 0a03 	mov.w	sl, #3
    f01a:	f1b8 0f00 	cmp.w	r8, #0
    f01e:	d013      	beq.n	f048 <_dtoa_r+0x308>
    f020:	f8df 930c 	ldr.w	r9, [pc, #780]	; f330 <_dtoa_r+0x5f0>
    f024:	f018 0f01 	tst.w	r8, #1
    f028:	d009      	beq.n	f03e <_dtoa_r+0x2fe>
    f02a:	4630      	mov	r0, r6
    f02c:	4639      	mov	r1, r7
    f02e:	e9d9 2300 	ldrd	r2, r3, [r9]
    f032:	f7fb fc7b 	bl	a92c <__aeabi_dmul>
    f036:	f10a 0a01 	add.w	sl, sl, #1
    f03a:	4606      	mov	r6, r0
    f03c:	460f      	mov	r7, r1
    f03e:	ea5f 0868 	movs.w	r8, r8, asr #1
    f042:	f109 0908 	add.w	r9, r9, #8
    f046:	d1ed      	bne.n	f024 <_dtoa_r+0x2e4>
    f048:	ec51 0b18 	vmov	r0, r1, d8
    f04c:	4632      	mov	r2, r6
    f04e:	463b      	mov	r3, r7
    f050:	f7fb fd96 	bl	ab80 <__aeabi_ddiv>
    f054:	ec41 0b1a 	vmov	d10, r0, r1
    f058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f05a:	b15b      	cbz	r3, f074 <_dtoa_r+0x334>
    f05c:	ec57 6b1a 	vmov	r6, r7, d10
    f060:	4bb4      	ldr	r3, [pc, #720]	; (f334 <_dtoa_r+0x5f4>)
    f062:	ee1a 0a10 	vmov	r0, s20
    f066:	2200      	movs	r2, #0
    f068:	4639      	mov	r1, r7
    f06a:	f7fb fed1 	bl	ae10 <__aeabi_dcmplt>
    f06e:	2800      	cmp	r0, #0
    f070:	f040 854e 	bne.w	fb10 <_dtoa_r+0xdd0>
    f074:	4650      	mov	r0, sl
    f076:	f7fb fbef 	bl	a858 <__aeabi_i2d>
    f07a:	ec53 2b1a 	vmov	r2, r3, d10
    f07e:	f7fb fc55 	bl	a92c <__aeabi_dmul>
    f082:	4bad      	ldr	r3, [pc, #692]	; (f338 <_dtoa_r+0x5f8>)
    f084:	2200      	movs	r2, #0
    f086:	f7fb fa9b 	bl	a5c0 <__adddf3>
    f08a:	9b07      	ldr	r3, [sp, #28]
    f08c:	4680      	mov	r8, r0
    f08e:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
    f092:	2b00      	cmp	r3, #0
    f094:	f000 80a5 	beq.w	f1e2 <_dtoa_r+0x4a2>
    f098:	9b05      	ldr	r3, [sp, #20]
    f09a:	9310      	str	r3, [sp, #64]	; 0x40
    f09c:	9b07      	ldr	r3, [sp, #28]
    f09e:	930e      	str	r3, [sp, #56]	; 0x38
    f0a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f0a2:	2b00      	cmp	r3, #0
    f0a4:	f000 84bc 	beq.w	fa20 <_dtoa_r+0xce0>
    f0a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f0aa:	4ba0      	ldr	r3, [pc, #640]	; (f32c <_dtoa_r+0x5ec>)
    f0ac:	49a3      	ldr	r1, [pc, #652]	; (f33c <_dtoa_r+0x5fc>)
    f0ae:	f8dd a000 	ldr.w	sl, [sp]
    f0b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    f0b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    f0ba:	2000      	movs	r0, #0
    f0bc:	f7fb fd60 	bl	ab80 <__aeabi_ddiv>
    f0c0:	4642      	mov	r2, r8
    f0c2:	464b      	mov	r3, r9
    f0c4:	f7fb fa7a 	bl	a5bc <__aeabi_dsub>
    f0c8:	ec59 8b1a 	vmov	r8, r9, d10
    f0cc:	ec41 0b18 	vmov	d8, r0, r1
    f0d0:	4649      	mov	r1, r9
    f0d2:	ee1a 0a10 	vmov	r0, s20
    f0d6:	f002 fac5 	bl	11664 <__aeabi_d2iz>
    f0da:	4607      	mov	r7, r0
    f0dc:	f7fb fbbc 	bl	a858 <__aeabi_i2d>
    f0e0:	4602      	mov	r2, r0
    f0e2:	460b      	mov	r3, r1
    f0e4:	ee1a 0a10 	vmov	r0, s20
    f0e8:	4649      	mov	r1, r9
    f0ea:	f7fb fa67 	bl	a5bc <__aeabi_dsub>
    f0ee:	3730      	adds	r7, #48	; 0x30
    f0f0:	4606      	mov	r6, r0
    f0f2:	f80a 7b01 	strb.w	r7, [sl], #1
    f0f6:	460f      	mov	r7, r1
    f0f8:	4632      	mov	r2, r6
    f0fa:	ec51 0b18 	vmov	r0, r1, d8
    f0fe:	463b      	mov	r3, r7
    f100:	f7fb fea4 	bl	ae4c <__aeabi_dcmpgt>
    f104:	2800      	cmp	r0, #0
    f106:	f040 854f 	bne.w	fba8 <_dtoa_r+0xe68>
    f10a:	f04f 0800 	mov.w	r8, #0
    f10e:	ee0a 5a10 	vmov	s20, r5
    f112:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
    f116:	4655      	mov	r5, sl
    f118:	ec5b ab18 	vmov	sl, fp, d8
    f11c:	ee08 4a10 	vmov	s16, r4
    f120:	4644      	mov	r4, r8
    f122:	e02b      	b.n	f17c <_dtoa_r+0x43c>
    f124:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f126:	3401      	adds	r4, #1
    f128:	429c      	cmp	r4, r3
    f12a:	f280 854d 	bge.w	fbc8 <_dtoa_r+0xe88>
    f12e:	4b84      	ldr	r3, [pc, #528]	; (f340 <_dtoa_r+0x600>)
    f130:	4650      	mov	r0, sl
    f132:	4659      	mov	r1, fp
    f134:	2200      	movs	r2, #0
    f136:	f7fb fbf9 	bl	a92c <__aeabi_dmul>
    f13a:	4b81      	ldr	r3, [pc, #516]	; (f340 <_dtoa_r+0x600>)
    f13c:	2200      	movs	r2, #0
    f13e:	4682      	mov	sl, r0
    f140:	468b      	mov	fp, r1
    f142:	4630      	mov	r0, r6
    f144:	4639      	mov	r1, r7
    f146:	f7fb fbf1 	bl	a92c <__aeabi_dmul>
    f14a:	4689      	mov	r9, r1
    f14c:	4680      	mov	r8, r0
    f14e:	f002 fa89 	bl	11664 <__aeabi_d2iz>
    f152:	4607      	mov	r7, r0
    f154:	f7fb fb80 	bl	a858 <__aeabi_i2d>
    f158:	4602      	mov	r2, r0
    f15a:	460b      	mov	r3, r1
    f15c:	4640      	mov	r0, r8
    f15e:	4649      	mov	r1, r9
    f160:	f7fb fa2c 	bl	a5bc <__aeabi_dsub>
    f164:	3730      	adds	r7, #48	; 0x30
    f166:	f805 7b01 	strb.w	r7, [r5], #1
    f16a:	4652      	mov	r2, sl
    f16c:	465b      	mov	r3, fp
    f16e:	4606      	mov	r6, r0
    f170:	460f      	mov	r7, r1
    f172:	f7fb fe4d 	bl	ae10 <__aeabi_dcmplt>
    f176:	2800      	cmp	r0, #0
    f178:	f040 8511 	bne.w	fb9e <_dtoa_r+0xe5e>
    f17c:	4632      	mov	r2, r6
    f17e:	463b      	mov	r3, r7
    f180:	496c      	ldr	r1, [pc, #432]	; (f334 <_dtoa_r+0x5f4>)
    f182:	2000      	movs	r0, #0
    f184:	f7fb fa1a 	bl	a5bc <__aeabi_dsub>
    f188:	4652      	mov	r2, sl
    f18a:	465b      	mov	r3, fp
    f18c:	f7fb fe40 	bl	ae10 <__aeabi_dcmplt>
    f190:	2800      	cmp	r0, #0
    f192:	d0c7      	beq.n	f124 <_dtoa_r+0x3e4>
    f194:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f196:	9a00      	ldr	r2, [sp, #0]
    f198:	9305      	str	r3, [sp, #20]
    f19a:	46aa      	mov	sl, r5
    f19c:	ee18 4a10 	vmov	r4, s16
    f1a0:	ee1a 5a10 	vmov	r5, s20
    f1a4:	e002      	b.n	f1ac <_dtoa_r+0x46c>
    f1a6:	4552      	cmp	r2, sl
    f1a8:	f000 84e3 	beq.w	fb72 <_dtoa_r+0xe32>
    f1ac:	46d1      	mov	r9, sl
    f1ae:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
    f1b2:	2b39      	cmp	r3, #57	; 0x39
    f1b4:	d0f7      	beq.n	f1a6 <_dtoa_r+0x466>
    f1b6:	3301      	adds	r3, #1
    f1b8:	b2db      	uxtb	r3, r3
    f1ba:	f88a 3000 	strb.w	r3, [sl]
    f1be:	9b05      	ldr	r3, [sp, #20]
    f1c0:	3301      	adds	r3, #1
    f1c2:	9305      	str	r3, [sp, #20]
    f1c4:	e198      	b.n	f4f8 <_dtoa_r+0x7b8>
    f1c6:	4650      	mov	r0, sl
    f1c8:	f7fb fb46 	bl	a858 <__aeabi_i2d>
    f1cc:	ec53 2b1a 	vmov	r2, r3, d10
    f1d0:	f7fb fbac 	bl	a92c <__aeabi_dmul>
    f1d4:	4b58      	ldr	r3, [pc, #352]	; (f338 <_dtoa_r+0x5f8>)
    f1d6:	2200      	movs	r2, #0
    f1d8:	f7fb f9f2 	bl	a5c0 <__adddf3>
    f1dc:	4680      	mov	r8, r0
    f1de:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
    f1e2:	4b58      	ldr	r3, [pc, #352]	; (f344 <_dtoa_r+0x604>)
    f1e4:	2200      	movs	r2, #0
    f1e6:	ec51 0b1a 	vmov	r0, r1, d10
    f1ea:	f7fb f9e7 	bl	a5bc <__aeabi_dsub>
    f1ee:	4642      	mov	r2, r8
    f1f0:	464b      	mov	r3, r9
    f1f2:	4606      	mov	r6, r0
    f1f4:	460f      	mov	r7, r1
    f1f6:	f7fb fe29 	bl	ae4c <__aeabi_dcmpgt>
    f1fa:	4682      	mov	sl, r0
    f1fc:	2800      	cmp	r0, #0
    f1fe:	f040 84c8 	bne.w	fb92 <_dtoa_r+0xe52>
    f202:	4630      	mov	r0, r6
    f204:	4639      	mov	r1, r7
    f206:	4642      	mov	r2, r8
    f208:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
    f20c:	f7fb fe00 	bl	ae10 <__aeabi_dcmplt>
    f210:	2800      	cmp	r0, #0
    f212:	f040 8357 	bne.w	f8c4 <_dtoa_r+0xb84>
    f216:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f218:	2b00      	cmp	r3, #0
    f21a:	f2c0 8095 	blt.w	f348 <_dtoa_r+0x608>
    f21e:	9a05      	ldr	r2, [sp, #20]
    f220:	2a0e      	cmp	r2, #14
    f222:	f300 8091 	bgt.w	f348 <_dtoa_r+0x608>
    f226:	4b41      	ldr	r3, [pc, #260]	; (f32c <_dtoa_r+0x5ec>)
    f228:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    f22c:	e9d3 8900 	ldrd	r8, r9, [r3]
    f230:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f232:	2b00      	cmp	r3, #0
    f234:	da1b      	bge.n	f26e <_dtoa_r+0x52e>
    f236:	9b07      	ldr	r3, [sp, #28]
    f238:	2b00      	cmp	r3, #0
    f23a:	dc18      	bgt.n	f26e <_dtoa_r+0x52e>
    f23c:	f040 8340 	bne.w	f8c0 <_dtoa_r+0xb80>
    f240:	4b40      	ldr	r3, [pc, #256]	; (f344 <_dtoa_r+0x604>)
    f242:	2200      	movs	r2, #0
    f244:	4640      	mov	r0, r8
    f246:	4649      	mov	r1, r9
    f248:	f7fb fb70 	bl	a92c <__aeabi_dmul>
    f24c:	4602      	mov	r2, r0
    f24e:	460b      	mov	r3, r1
    f250:	ec51 0b19 	vmov	r0, r1, d9
    f254:	f7fb fde6 	bl	ae24 <__aeabi_dcmple>
    f258:	f8dd a01c 	ldr.w	sl, [sp, #28]
    f25c:	4656      	mov	r6, sl
    f25e:	2800      	cmp	r0, #0
    f260:	f000 82c4 	beq.w	f7ec <_dtoa_r+0xaac>
    f264:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f266:	f8dd 8000 	ldr.w	r8, [sp]
    f26a:	43df      	mvns	r7, r3
    f26c:	e2c6      	b.n	f7fc <_dtoa_r+0xabc>
    f26e:	4642      	mov	r2, r8
    f270:	464b      	mov	r3, r9
    f272:	ec51 0b19 	vmov	r0, r1, d9
    f276:	f7fb fc83 	bl	ab80 <__aeabi_ddiv>
    f27a:	f002 f9f3 	bl	11664 <__aeabi_d2iz>
    f27e:	4606      	mov	r6, r0
    f280:	4683      	mov	fp, r0
    f282:	f7fb fae9 	bl	a858 <__aeabi_i2d>
    f286:	4642      	mov	r2, r8
    f288:	464b      	mov	r3, r9
    f28a:	f7fb fb4f 	bl	a92c <__aeabi_dmul>
    f28e:	460b      	mov	r3, r1
    f290:	4602      	mov	r2, r0
    f292:	ec51 0b19 	vmov	r0, r1, d9
    f296:	f7fb f991 	bl	a5bc <__aeabi_dsub>
    f29a:	f8dd a000 	ldr.w	sl, [sp]
    f29e:	4633      	mov	r3, r6
    f2a0:	3330      	adds	r3, #48	; 0x30
    f2a2:	f80a 3b01 	strb.w	r3, [sl], #1
    f2a6:	9b07      	ldr	r3, [sp, #28]
    f2a8:	2b01      	cmp	r3, #1
    f2aa:	f000 8371 	beq.w	f990 <_dtoa_r+0xc50>
    f2ae:	f04f 0b01 	mov.w	fp, #1
    f2b2:	ee08 5a10 	vmov	s16, r5
    f2b6:	ee08 4a90 	vmov	s17, r4
    f2ba:	461d      	mov	r5, r3
    f2bc:	4654      	mov	r4, sl
    f2be:	46da      	mov	sl, fp
    f2c0:	e01d      	b.n	f2fe <_dtoa_r+0x5be>
    f2c2:	4642      	mov	r2, r8
    f2c4:	464b      	mov	r3, r9
    f2c6:	4630      	mov	r0, r6
    f2c8:	4639      	mov	r1, r7
    f2ca:	f7fb fc59 	bl	ab80 <__aeabi_ddiv>
    f2ce:	f002 f9c9 	bl	11664 <__aeabi_d2iz>
    f2d2:	4683      	mov	fp, r0
    f2d4:	f7fb fac0 	bl	a858 <__aeabi_i2d>
    f2d8:	4642      	mov	r2, r8
    f2da:	464b      	mov	r3, r9
    f2dc:	f7fb fb26 	bl	a92c <__aeabi_dmul>
    f2e0:	f10a 0a01 	add.w	sl, sl, #1
    f2e4:	460b      	mov	r3, r1
    f2e6:	4602      	mov	r2, r0
    f2e8:	4639      	mov	r1, r7
    f2ea:	4630      	mov	r0, r6
    f2ec:	f7fb f966 	bl	a5bc <__aeabi_dsub>
    f2f0:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    f2f4:	45aa      	cmp	sl, r5
    f2f6:	f804 3b01 	strb.w	r3, [r4], #1
    f2fa:	f000 8344 	beq.w	f986 <_dtoa_r+0xc46>
    f2fe:	4b10      	ldr	r3, [pc, #64]	; (f340 <_dtoa_r+0x600>)
    f300:	2200      	movs	r2, #0
    f302:	f7fb fb13 	bl	a92c <__aeabi_dmul>
    f306:	2200      	movs	r2, #0
    f308:	2300      	movs	r3, #0
    f30a:	4606      	mov	r6, r0
    f30c:	460f      	mov	r7, r1
    f30e:	f7fb fd75 	bl	adfc <__aeabi_dcmpeq>
    f312:	2800      	cmp	r0, #0
    f314:	d0d5      	beq.n	f2c2 <_dtoa_r+0x582>
    f316:	46a2      	mov	sl, r4
    f318:	ee18 5a10 	vmov	r5, s16
    f31c:	ee18 4a90 	vmov	r4, s17
    f320:	9b05      	ldr	r3, [sp, #20]
    f322:	3301      	adds	r3, #1
    f324:	9305      	str	r3, [sp, #20]
    f326:	46d1      	mov	r9, sl
    f328:	e0e6      	b.n	f4f8 <_dtoa_r+0x7b8>
    f32a:	bf00      	nop
    f32c:	00012468 	.word	0x00012468
    f330:	00012440 	.word	0x00012440
    f334:	3ff00000 	.word	0x3ff00000
    f338:	401c0000 	.word	0x401c0000
    f33c:	3fe00000 	.word	0x3fe00000
    f340:	40240000 	.word	0x40240000
    f344:	40140000 	.word	0x40140000
    f348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f34a:	2a00      	cmp	r2, #0
    f34c:	f000 810c 	beq.w	f568 <_dtoa_r+0x828>
    f350:	9a01      	ldr	r2, [sp, #4]
    f352:	2a01      	cmp	r2, #1
    f354:	f340 829d 	ble.w	f892 <_dtoa_r+0xb52>
    f358:	9b07      	ldr	r3, [sp, #28]
    f35a:	f103 38ff 	add.w	r8, r3, #4294967295
    f35e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f360:	4543      	cmp	r3, r8
    f362:	f280 8260 	bge.w	f826 <_dtoa_r+0xae6>
    f366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f368:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    f36c:	eba8 0303 	sub.w	r3, r8, r3
    f370:	449b      	add	fp, r3
    f372:	f04f 0800 	mov.w	r8, #0
    f376:	9b07      	ldr	r3, [sp, #28]
    f378:	2b00      	cmp	r3, #0
    f37a:	f2c0 833b 	blt.w	f9f4 <_dtoa_r+0xcb4>
    f37e:	9a04      	ldr	r2, [sp, #16]
    f380:	441a      	add	r2, r3
    f382:	9204      	str	r2, [sp, #16]
    f384:	9a08      	ldr	r2, [sp, #32]
    f386:	4617      	mov	r7, r2
    f388:	441a      	add	r2, r3
    f38a:	9208      	str	r2, [sp, #32]
    f38c:	2101      	movs	r1, #1
    f38e:	4620      	mov	r0, r4
    f390:	f7fd f936 	bl	c600 <__i2b>
    f394:	4606      	mov	r6, r0
    f396:	b167      	cbz	r7, f3b2 <_dtoa_r+0x672>
    f398:	9a04      	ldr	r2, [sp, #16]
    f39a:	2a00      	cmp	r2, #0
    f39c:	dd09      	ble.n	f3b2 <_dtoa_r+0x672>
    f39e:	9908      	ldr	r1, [sp, #32]
    f3a0:	42ba      	cmp	r2, r7
    f3a2:	4613      	mov	r3, r2
    f3a4:	bfa8      	it	ge
    f3a6:	463b      	movge	r3, r7
    f3a8:	1ac9      	subs	r1, r1, r3
    f3aa:	1aff      	subs	r7, r7, r3
    f3ac:	1ad3      	subs	r3, r2, r3
    f3ae:	9108      	str	r1, [sp, #32]
    f3b0:	9304      	str	r3, [sp, #16]
    f3b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f3b4:	b163      	cbz	r3, f3d0 <_dtoa_r+0x690>
    f3b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3b8:	2b00      	cmp	r3, #0
    f3ba:	f000 82bf 	beq.w	f93c <_dtoa_r+0xbfc>
    f3be:	f1b8 0f00 	cmp.w	r8, #0
    f3c2:	f300 8233 	bgt.w	f82c <_dtoa_r+0xaec>
    f3c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f3c8:	ebb3 0208 	subs.w	r2, r3, r8
    f3cc:	f040 8322 	bne.w	fa14 <_dtoa_r+0xcd4>
    f3d0:	2101      	movs	r1, #1
    f3d2:	4620      	mov	r0, r4
    f3d4:	f7fd f914 	bl	c600 <__i2b>
    f3d8:	f1bb 0f00 	cmp.w	fp, #0
    f3dc:	4682      	mov	sl, r0
    f3de:	f300 80d9 	bgt.w	f594 <_dtoa_r+0x854>
    f3e2:	9b01      	ldr	r3, [sp, #4]
    f3e4:	2b01      	cmp	r3, #1
    f3e6:	f340 81a9 	ble.w	f73c <_dtoa_r+0x9fc>
    f3ea:	f04f 0800 	mov.w	r8, #0
    f3ee:	2001      	movs	r0, #1
    f3f0:	f1bb 0f00 	cmp.w	fp, #0
    f3f4:	f040 80da 	bne.w	f5ac <_dtoa_r+0x86c>
    f3f8:	9b04      	ldr	r3, [sp, #16]
    f3fa:	4418      	add	r0, r3
    f3fc:	f010 001f 	ands.w	r0, r0, #31
    f400:	f000 819a 	beq.w	f738 <_dtoa_r+0x9f8>
    f404:	f1c0 0320 	rsb	r3, r0, #32
    f408:	2b04      	cmp	r3, #4
    f40a:	f300 80b2 	bgt.w	f572 <_dtoa_r+0x832>
    f40e:	f040 822d 	bne.w	f86c <_dtoa_r+0xb2c>
    f412:	9b08      	ldr	r3, [sp, #32]
    f414:	2b00      	cmp	r3, #0
    f416:	dd05      	ble.n	f424 <_dtoa_r+0x6e4>
    f418:	4629      	mov	r1, r5
    f41a:	461a      	mov	r2, r3
    f41c:	4620      	mov	r0, r4
    f41e:	f7fd fa2b 	bl	c878 <__lshift>
    f422:	4605      	mov	r5, r0
    f424:	9b04      	ldr	r3, [sp, #16]
    f426:	2b00      	cmp	r3, #0
    f428:	dd05      	ble.n	f436 <_dtoa_r+0x6f6>
    f42a:	4651      	mov	r1, sl
    f42c:	461a      	mov	r2, r3
    f42e:	4620      	mov	r0, r4
    f430:	f7fd fa22 	bl	c878 <__lshift>
    f434:	4682      	mov	sl, r0
    f436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f438:	2b00      	cmp	r3, #0
    f43a:	f040 815d 	bne.w	f6f8 <_dtoa_r+0x9b8>
    f43e:	9b07      	ldr	r3, [sp, #28]
    f440:	2b00      	cmp	r3, #0
    f442:	f340 8144 	ble.w	f6ce <_dtoa_r+0x98e>
    f446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f448:	2b00      	cmp	r3, #0
    f44a:	f040 80c7 	bne.w	f5dc <_dtoa_r+0x89c>
    f44e:	9b05      	ldr	r3, [sp, #20]
    f450:	3301      	adds	r3, #1
    f452:	9305      	str	r3, [sp, #20]
    f454:	f8dd 8000 	ldr.w	r8, [sp]
    f458:	f8dd 901c 	ldr.w	r9, [sp, #28]
    f45c:	2701      	movs	r7, #1
    f45e:	e007      	b.n	f470 <_dtoa_r+0x730>
    f460:	4629      	mov	r1, r5
    f462:	2300      	movs	r3, #0
    f464:	220a      	movs	r2, #10
    f466:	4620      	mov	r0, r4
    f468:	f7fd f828 	bl	c4bc <__multadd>
    f46c:	3701      	adds	r7, #1
    f46e:	4605      	mov	r5, r0
    f470:	4651      	mov	r1, sl
    f472:	4628      	mov	r0, r5
    f474:	f7ff fbce 	bl	ec14 <quorem>
    f478:	45b9      	cmp	r9, r7
    f47a:	f100 0030 	add.w	r0, r0, #48	; 0x30
    f47e:	f808 0b01 	strb.w	r0, [r8], #1
    f482:	dced      	bgt.n	f460 <_dtoa_r+0x720>
    f484:	9a07      	ldr	r2, [sp, #28]
    f486:	2a00      	cmp	r2, #0
    f488:	bfc8      	it	gt
    f48a:	4693      	movgt	fp, r2
    f48c:	9a00      	ldr	r2, [sp, #0]
    f48e:	bfd8      	it	le
    f490:	f04f 0b01 	movle.w	fp, #1
    f494:	4603      	mov	r3, r0
    f496:	4493      	add	fp, r2
    f498:	2700      	movs	r7, #0
    f49a:	4629      	mov	r1, r5
    f49c:	2201      	movs	r2, #1
    f49e:	4620      	mov	r0, r4
    f4a0:	9301      	str	r3, [sp, #4]
    f4a2:	f7fd f9e9 	bl	c878 <__lshift>
    f4a6:	4651      	mov	r1, sl
    f4a8:	4605      	mov	r5, r0
    f4aa:	f7fd fa5d 	bl	c968 <__mcmp>
    f4ae:	2800      	cmp	r0, #0
    f4b0:	f340 81e4 	ble.w	f87c <_dtoa_r+0xb3c>
    f4b4:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    f4b8:	9a00      	ldr	r2, [sp, #0]
    f4ba:	f10b 3bff 	add.w	fp, fp, #4294967295
    f4be:	e004      	b.n	f4ca <_dtoa_r+0x78a>
    f4c0:	455a      	cmp	r2, fp
    f4c2:	f000 81f6 	beq.w	f8b2 <_dtoa_r+0xb72>
    f4c6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    f4ca:	2b39      	cmp	r3, #57	; 0x39
    f4cc:	f10b 0901 	add.w	r9, fp, #1
    f4d0:	d0f6      	beq.n	f4c0 <_dtoa_r+0x780>
    f4d2:	3301      	adds	r3, #1
    f4d4:	f88b 3000 	strb.w	r3, [fp]
    f4d8:	4651      	mov	r1, sl
    f4da:	4620      	mov	r0, r4
    f4dc:	f7fc ffe4 	bl	c4a8 <_Bfree>
    f4e0:	b156      	cbz	r6, f4f8 <_dtoa_r+0x7b8>
    f4e2:	b12f      	cbz	r7, f4f0 <_dtoa_r+0x7b0>
    f4e4:	42b7      	cmp	r7, r6
    f4e6:	d003      	beq.n	f4f0 <_dtoa_r+0x7b0>
    f4e8:	4639      	mov	r1, r7
    f4ea:	4620      	mov	r0, r4
    f4ec:	f7fc ffdc 	bl	c4a8 <_Bfree>
    f4f0:	4631      	mov	r1, r6
    f4f2:	4620      	mov	r0, r4
    f4f4:	f7fc ffd8 	bl	c4a8 <_Bfree>
    f4f8:	4629      	mov	r1, r5
    f4fa:	4620      	mov	r0, r4
    f4fc:	f7fc ffd4 	bl	c4a8 <_Bfree>
    f500:	2300      	movs	r3, #0
    f502:	f889 3000 	strb.w	r3, [r9]
    f506:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
    f50a:	601a      	str	r2, [r3, #0]
    f50c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    f50e:	2b00      	cmp	r3, #0
    f510:	f43f ac59 	beq.w	edc6 <_dtoa_r+0x86>
    f514:	9800      	ldr	r0, [sp, #0]
    f516:	f8c3 9000 	str.w	r9, [r3]
    f51a:	b015      	add	sp, #84	; 0x54
    f51c:	ecbd 8b06 	vpop	{d8-d10}
    f520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f524:	2301      	movs	r3, #1
    f526:	1bbf      	subs	r7, r7, r6
    f528:	930c      	str	r3, [sp, #48]	; 0x30
    f52a:	1e7b      	subs	r3, r7, #1
    f52c:	9304      	str	r3, [sp, #16]
    f52e:	f57f acbf 	bpl.w	eeb0 <_dtoa_r+0x170>
    f532:	f1c7 0301 	rsb	r3, r7, #1
    f536:	9308      	str	r3, [sp, #32]
    f538:	2300      	movs	r3, #0
    f53a:	9304      	str	r3, [sp, #16]
    f53c:	e4ba      	b.n	eeb4 <_dtoa_r+0x174>
    f53e:	4658      	mov	r0, fp
    f540:	f7fb f98a 	bl	a858 <__aeabi_i2d>
    f544:	4642      	mov	r2, r8
    f546:	464b      	mov	r3, r9
    f548:	f7fb fc58 	bl	adfc <__aeabi_dcmpeq>
    f54c:	2800      	cmp	r0, #0
    f54e:	f47f ac97 	bne.w	ee80 <_dtoa_r+0x140>
    f552:	f10b 3bff 	add.w	fp, fp, #4294967295
    f556:	e493      	b.n	ee80 <_dtoa_r+0x140>
    f558:	4bbd      	ldr	r3, [pc, #756]	; (f850 <_dtoa_r+0xb10>)
    f55a:	9300      	str	r3, [sp, #0]
    f55c:	9800      	ldr	r0, [sp, #0]
    f55e:	b015      	add	sp, #84	; 0x54
    f560:	ecbd 8b06 	vpop	{d8-d10}
    f564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f568:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    f56c:	9f08      	ldr	r7, [sp, #32]
    f56e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    f570:	e711      	b.n	f396 <_dtoa_r+0x656>
    f572:	f1c0 001c 	rsb	r0, r0, #28
    f576:	9b08      	ldr	r3, [sp, #32]
    f578:	4403      	add	r3, r0
    f57a:	9308      	str	r3, [sp, #32]
    f57c:	9b04      	ldr	r3, [sp, #16]
    f57e:	4403      	add	r3, r0
    f580:	4407      	add	r7, r0
    f582:	9304      	str	r3, [sp, #16]
    f584:	e745      	b.n	f412 <_dtoa_r+0x6d2>
    f586:	2601      	movs	r6, #1
    f588:	e4ab      	b.n	eee2 <_dtoa_r+0x1a2>
    f58a:	f1c3 0320 	rsb	r3, r3, #32
    f58e:	fa08 f003 	lsl.w	r0, r8, r3
    f592:	e442      	b.n	ee1a <_dtoa_r+0xda>
    f594:	4601      	mov	r1, r0
    f596:	465a      	mov	r2, fp
    f598:	4620      	mov	r0, r4
    f59a:	f7fd f90d 	bl	c7b8 <__pow5mult>
    f59e:	9b01      	ldr	r3, [sp, #4]
    f5a0:	2b01      	cmp	r3, #1
    f5a2:	4682      	mov	sl, r0
    f5a4:	f340 81be 	ble.w	f924 <_dtoa_r+0xbe4>
    f5a8:	f04f 0800 	mov.w	r8, #0
    f5ac:	f8da 3010 	ldr.w	r3, [sl, #16]
    f5b0:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    f5b4:	6918      	ldr	r0, [r3, #16]
    f5b6:	f7fc ffd3 	bl	c560 <__hi0bits>
    f5ba:	f1c0 0020 	rsb	r0, r0, #32
    f5be:	e71b      	b.n	f3f8 <_dtoa_r+0x6b8>
    f5c0:	4631      	mov	r1, r6
    f5c2:	2300      	movs	r3, #0
    f5c4:	220a      	movs	r2, #10
    f5c6:	4620      	mov	r0, r4
    f5c8:	f7fc ff78 	bl	c4bc <__multadd>
    f5cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f5ce:	2b00      	cmp	r3, #0
    f5d0:	4606      	mov	r6, r0
    f5d2:	f340 8319 	ble.w	fc08 <_dtoa_r+0xec8>
    f5d6:	f8cd 9014 	str.w	r9, [sp, #20]
    f5da:	9307      	str	r3, [sp, #28]
    f5dc:	2f00      	cmp	r7, #0
    f5de:	f300 811b 	bgt.w	f818 <_dtoa_r+0xad8>
    f5e2:	f1b8 0f00 	cmp.w	r8, #0
    f5e6:	f040 81ee 	bne.w	f9c6 <_dtoa_r+0xc86>
    f5ea:	46b0      	mov	r8, r6
    f5ec:	9b02      	ldr	r3, [sp, #8]
    f5ee:	9f00      	ldr	r7, [sp, #0]
    f5f0:	9907      	ldr	r1, [sp, #28]
    f5f2:	f003 0201 	and.w	r2, r3, #1
    f5f6:	1e7b      	subs	r3, r7, #1
    f5f8:	4419      	add	r1, r3
    f5fa:	9b01      	ldr	r3, [sp, #4]
    f5fc:	920a      	str	r2, [sp, #40]	; 0x28
    f5fe:	4313      	orrs	r3, r2
    f600:	9108      	str	r1, [sp, #32]
    f602:	9309      	str	r3, [sp, #36]	; 0x24
    f604:	4651      	mov	r1, sl
    f606:	4628      	mov	r0, r5
    f608:	f7ff fb04 	bl	ec14 <quorem>
    f60c:	4631      	mov	r1, r6
    f60e:	4683      	mov	fp, r0
    f610:	4628      	mov	r0, r5
    f612:	f7fd f9a9 	bl	c968 <__mcmp>
    f616:	4642      	mov	r2, r8
    f618:	4651      	mov	r1, sl
    f61a:	4681      	mov	r9, r0
    f61c:	4620      	mov	r0, r4
    f61e:	f7fd f9c5 	bl	c9ac <__mdiff>
    f622:	68c2      	ldr	r2, [r0, #12]
    f624:	4601      	mov	r1, r0
    f626:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    f62a:	2a00      	cmp	r2, #0
    f62c:	d142      	bne.n	f6b4 <_dtoa_r+0x974>
    f62e:	9004      	str	r0, [sp, #16]
    f630:	4628      	mov	r0, r5
    f632:	9307      	str	r3, [sp, #28]
    f634:	f7fd f998 	bl	c968 <__mcmp>
    f638:	9904      	ldr	r1, [sp, #16]
    f63a:	9002      	str	r0, [sp, #8]
    f63c:	4620      	mov	r0, r4
    f63e:	f7fc ff33 	bl	c4a8 <_Bfree>
    f642:	9a02      	ldr	r2, [sp, #8]
    f644:	9b07      	ldr	r3, [sp, #28]
    f646:	b91a      	cbnz	r2, f650 <_dtoa_r+0x910>
    f648:	9909      	ldr	r1, [sp, #36]	; 0x24
    f64a:	2900      	cmp	r1, #0
    f64c:	f000 82c4 	beq.w	fbd8 <_dtoa_r+0xe98>
    f650:	f1b9 0f00 	cmp.w	r9, #0
    f654:	f2c0 8179 	blt.w	f94a <_dtoa_r+0xc0a>
    f658:	9901      	ldr	r1, [sp, #4]
    f65a:	ea49 0901 	orr.w	r9, r9, r1
    f65e:	990a      	ldr	r1, [sp, #40]	; 0x28
    f660:	ea51 0909 	orrs.w	r9, r1, r9
    f664:	f000 8171 	beq.w	f94a <_dtoa_r+0xc0a>
    f668:	2a00      	cmp	r2, #0
    f66a:	f300 81c7 	bgt.w	f9fc <_dtoa_r+0xcbc>
    f66e:	9a08      	ldr	r2, [sp, #32]
    f670:	703b      	strb	r3, [r7, #0]
    f672:	f107 0901 	add.w	r9, r7, #1
    f676:	4297      	cmp	r7, r2
    f678:	46cb      	mov	fp, r9
    f67a:	f000 81c5 	beq.w	fa08 <_dtoa_r+0xcc8>
    f67e:	4629      	mov	r1, r5
    f680:	2300      	movs	r3, #0
    f682:	220a      	movs	r2, #10
    f684:	4620      	mov	r0, r4
    f686:	f7fc ff19 	bl	c4bc <__multadd>
    f68a:	4546      	cmp	r6, r8
    f68c:	4605      	mov	r5, r0
    f68e:	4631      	mov	r1, r6
    f690:	f04f 0300 	mov.w	r3, #0
    f694:	f04f 020a 	mov.w	r2, #10
    f698:	4620      	mov	r0, r4
    f69a:	d012      	beq.n	f6c2 <_dtoa_r+0x982>
    f69c:	f7fc ff0e 	bl	c4bc <__multadd>
    f6a0:	4641      	mov	r1, r8
    f6a2:	4606      	mov	r6, r0
    f6a4:	2300      	movs	r3, #0
    f6a6:	220a      	movs	r2, #10
    f6a8:	4620      	mov	r0, r4
    f6aa:	f7fc ff07 	bl	c4bc <__multadd>
    f6ae:	464f      	mov	r7, r9
    f6b0:	4680      	mov	r8, r0
    f6b2:	e7a7      	b.n	f604 <_dtoa_r+0x8c4>
    f6b4:	4620      	mov	r0, r4
    f6b6:	9302      	str	r3, [sp, #8]
    f6b8:	f7fc fef6 	bl	c4a8 <_Bfree>
    f6bc:	9b02      	ldr	r3, [sp, #8]
    f6be:	2201      	movs	r2, #1
    f6c0:	e7c6      	b.n	f650 <_dtoa_r+0x910>
    f6c2:	f7fc fefb 	bl	c4bc <__multadd>
    f6c6:	464f      	mov	r7, r9
    f6c8:	4606      	mov	r6, r0
    f6ca:	4680      	mov	r8, r0
    f6cc:	e79a      	b.n	f604 <_dtoa_r+0x8c4>
    f6ce:	9b01      	ldr	r3, [sp, #4]
    f6d0:	2b02      	cmp	r3, #2
    f6d2:	dc7a      	bgt.n	f7ca <_dtoa_r+0xa8a>
    f6d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f6d6:	2b00      	cmp	r3, #0
    f6d8:	d180      	bne.n	f5dc <_dtoa_r+0x89c>
    f6da:	9b05      	ldr	r3, [sp, #20]
    f6dc:	4651      	mov	r1, sl
    f6de:	3301      	adds	r3, #1
    f6e0:	4628      	mov	r0, r5
    f6e2:	9305      	str	r3, [sp, #20]
    f6e4:	f7ff fa96 	bl	ec14 <quorem>
    f6e8:	f8dd b000 	ldr.w	fp, [sp]
    f6ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
    f6f0:	f80b 3b01 	strb.w	r3, [fp], #1
    f6f4:	2700      	movs	r7, #0
    f6f6:	e6d0      	b.n	f49a <_dtoa_r+0x75a>
    f6f8:	4651      	mov	r1, sl
    f6fa:	4628      	mov	r0, r5
    f6fc:	f7fd f934 	bl	c968 <__mcmp>
    f700:	2800      	cmp	r0, #0
    f702:	f6bf ae9c 	bge.w	f43e <_dtoa_r+0x6fe>
    f706:	4629      	mov	r1, r5
    f708:	2300      	movs	r3, #0
    f70a:	220a      	movs	r2, #10
    f70c:	4620      	mov	r0, r4
    f70e:	f7fc fed5 	bl	c4bc <__multadd>
    f712:	9b05      	ldr	r3, [sp, #20]
    f714:	f103 39ff 	add.w	r9, r3, #4294967295
    f718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f71a:	4605      	mov	r5, r0
    f71c:	2b00      	cmp	r3, #0
    f71e:	f47f af4f 	bne.w	f5c0 <_dtoa_r+0x880>
    f722:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f724:	2b00      	cmp	r3, #0
    f726:	f340 825e 	ble.w	fbe6 <_dtoa_r+0xea6>
    f72a:	9307      	str	r3, [sp, #28]
    f72c:	e692      	b.n	f454 <_dtoa_r+0x714>
    f72e:	4b49      	ldr	r3, [pc, #292]	; (f854 <_dtoa_r+0xb14>)
    f730:	9300      	str	r3, [sp, #0]
    f732:	3303      	adds	r3, #3
    f734:	f7ff bbf0 	b.w	ef18 <_dtoa_r+0x1d8>
    f738:	201c      	movs	r0, #28
    f73a:	e71c      	b.n	f576 <_dtoa_r+0x836>
    f73c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    f740:	2900      	cmp	r1, #0
    f742:	f47f ae52 	bne.w	f3ea <_dtoa_r+0x6aa>
    f746:	f3c2 0313 	ubfx	r3, r2, #0, #20
    f74a:	2b00      	cmp	r3, #0
    f74c:	f47f ae4d 	bne.w	f3ea <_dtoa_r+0x6aa>
    f750:	4b41      	ldr	r3, [pc, #260]	; (f858 <_dtoa_r+0xb18>)
    f752:	4013      	ands	r3, r2
    f754:	2b00      	cmp	r3, #0
    f756:	f000 8220 	beq.w	fb9a <_dtoa_r+0xe5a>
    f75a:	9b08      	ldr	r3, [sp, #32]
    f75c:	3301      	adds	r3, #1
    f75e:	9308      	str	r3, [sp, #32]
    f760:	9b04      	ldr	r3, [sp, #16]
    f762:	3301      	adds	r3, #1
    f764:	9304      	str	r3, [sp, #16]
    f766:	f04f 0801 	mov.w	r8, #1
    f76a:	e640      	b.n	f3ee <_dtoa_r+0x6ae>
    f76c:	2301      	movs	r3, #1
    f76e:	930a      	str	r3, [sp, #40]	; 0x28
    f770:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f772:	9a05      	ldr	r2, [sp, #20]
    f774:	4413      	add	r3, r2
    f776:	930f      	str	r3, [sp, #60]	; 0x3c
    f778:	3301      	adds	r3, #1
    f77a:	2b01      	cmp	r3, #1
    f77c:	461f      	mov	r7, r3
    f77e:	9307      	str	r3, [sp, #28]
    f780:	bfb8      	it	lt
    f782:	2701      	movlt	r7, #1
    f784:	2100      	movs	r1, #0
    f786:	2f17      	cmp	r7, #23
    f788:	63e1      	str	r1, [r4, #60]	; 0x3c
    f78a:	f77f ac19 	ble.w	efc0 <_dtoa_r+0x280>
    f78e:	2201      	movs	r2, #1
    f790:	2304      	movs	r3, #4
    f792:	005b      	lsls	r3, r3, #1
    f794:	f103 0014 	add.w	r0, r3, #20
    f798:	42b8      	cmp	r0, r7
    f79a:	4611      	mov	r1, r2
    f79c:	f102 0201 	add.w	r2, r2, #1
    f7a0:	d9f7      	bls.n	f792 <_dtoa_r+0xa52>
    f7a2:	63e1      	str	r1, [r4, #60]	; 0x3c
    f7a4:	e40c      	b.n	efc0 <_dtoa_r+0x280>
    f7a6:	2301      	movs	r3, #1
    f7a8:	930a      	str	r3, [sp, #40]	; 0x28
    f7aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
    f7ac:	2f00      	cmp	r7, #0
    f7ae:	dd60      	ble.n	f872 <_dtoa_r+0xb32>
    f7b0:	970f      	str	r7, [sp, #60]	; 0x3c
    f7b2:	9707      	str	r7, [sp, #28]
    f7b4:	e7e6      	b.n	f784 <_dtoa_r+0xa44>
    f7b6:	2300      	movs	r3, #0
    f7b8:	930a      	str	r3, [sp, #40]	; 0x28
    f7ba:	e7d9      	b.n	f770 <_dtoa_r+0xa30>
    f7bc:	2300      	movs	r3, #0
    f7be:	930a      	str	r3, [sp, #40]	; 0x28
    f7c0:	e7f3      	b.n	f7aa <_dtoa_r+0xa6a>
    f7c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f7c4:	9307      	str	r3, [sp, #28]
    f7c6:	f8cd 9014 	str.w	r9, [sp, #20]
    f7ca:	9b07      	ldr	r3, [sp, #28]
    f7cc:	2b00      	cmp	r3, #0
    f7ce:	f47f ad49 	bne.w	f264 <_dtoa_r+0x524>
    f7d2:	4651      	mov	r1, sl
    f7d4:	2205      	movs	r2, #5
    f7d6:	4620      	mov	r0, r4
    f7d8:	f7fc fe70 	bl	c4bc <__multadd>
    f7dc:	4601      	mov	r1, r0
    f7de:	4682      	mov	sl, r0
    f7e0:	4628      	mov	r0, r5
    f7e2:	f7fd f8c1 	bl	c968 <__mcmp>
    f7e6:	2800      	cmp	r0, #0
    f7e8:	f77f ad3c 	ble.w	f264 <_dtoa_r+0x524>
    f7ec:	9b00      	ldr	r3, [sp, #0]
    f7ee:	9f05      	ldr	r7, [sp, #20]
    f7f0:	2231      	movs	r2, #49	; 0x31
    f7f2:	4698      	mov	r8, r3
    f7f4:	f803 2b01 	strb.w	r2, [r3], #1
    f7f8:	3701      	adds	r7, #1
    f7fa:	9300      	str	r3, [sp, #0]
    f7fc:	4651      	mov	r1, sl
    f7fe:	4620      	mov	r0, r4
    f800:	f7fc fe52 	bl	c4a8 <_Bfree>
    f804:	1c7b      	adds	r3, r7, #1
    f806:	f8dd 9000 	ldr.w	r9, [sp]
    f80a:	9305      	str	r3, [sp, #20]
    f80c:	f8cd 8000 	str.w	r8, [sp]
    f810:	2e00      	cmp	r6, #0
    f812:	f47f ae6d 	bne.w	f4f0 <_dtoa_r+0x7b0>
    f816:	e66f      	b.n	f4f8 <_dtoa_r+0x7b8>
    f818:	4631      	mov	r1, r6
    f81a:	463a      	mov	r2, r7
    f81c:	4620      	mov	r0, r4
    f81e:	f7fd f82b 	bl	c878 <__lshift>
    f822:	4606      	mov	r6, r0
    f824:	e6dd      	b.n	f5e2 <_dtoa_r+0x8a2>
    f826:	eba3 0808 	sub.w	r8, r3, r8
    f82a:	e5a4      	b.n	f376 <_dtoa_r+0x636>
    f82c:	4631      	mov	r1, r6
    f82e:	4642      	mov	r2, r8
    f830:	4620      	mov	r0, r4
    f832:	f7fc ffc1 	bl	c7b8 <__pow5mult>
    f836:	462a      	mov	r2, r5
    f838:	4601      	mov	r1, r0
    f83a:	4606      	mov	r6, r0
    f83c:	4620      	mov	r0, r4
    f83e:	f7fc ff0d 	bl	c65c <__multiply>
    f842:	4629      	mov	r1, r5
    f844:	4605      	mov	r5, r0
    f846:	4620      	mov	r0, r4
    f848:	f7fc fe2e 	bl	c4a8 <_Bfree>
    f84c:	e5bb      	b.n	f3c6 <_dtoa_r+0x686>
    f84e:	bf00      	nop
    f850:	0001257c 	.word	0x0001257c
    f854:	000125ec 	.word	0x000125ec
    f858:	7ff00000 	.word	0x7ff00000
    f85c:	f04f 0a02 	mov.w	sl, #2
    f860:	eeb0 8a49 	vmov.f32	s16, s18
    f864:	eef0 8a69 	vmov.f32	s17, s19
    f868:	f7ff bbd7 	b.w	f01a <_dtoa_r+0x2da>
    f86c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    f870:	e681      	b.n	f576 <_dtoa_r+0x836>
    f872:	2301      	movs	r3, #1
    f874:	9309      	str	r3, [sp, #36]	; 0x24
    f876:	9307      	str	r3, [sp, #28]
    f878:	f7ff bb9e 	b.w	efb8 <_dtoa_r+0x278>
    f87c:	d103      	bne.n	f886 <_dtoa_r+0xb46>
    f87e:	9b01      	ldr	r3, [sp, #4]
    f880:	07db      	lsls	r3, r3, #31
    f882:	f53f ae17 	bmi.w	f4b4 <_dtoa_r+0x774>
    f886:	46d9      	mov	r9, fp
    f888:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
    f88c:	2b30      	cmp	r3, #48	; 0x30
    f88e:	d0fa      	beq.n	f886 <_dtoa_r+0xb46>
    f890:	e622      	b.n	f4d8 <_dtoa_r+0x798>
    f892:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f894:	2a00      	cmp	r2, #0
    f896:	f000 8137 	beq.w	fb08 <_dtoa_r+0xdc8>
    f89a:	f203 4333 	addw	r3, r3, #1075	; 0x433
    f89e:	9a04      	ldr	r2, [sp, #16]
    f8a0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    f8a4:	441a      	add	r2, r3
    f8a6:	9204      	str	r2, [sp, #16]
    f8a8:	9a08      	ldr	r2, [sp, #32]
    f8aa:	4617      	mov	r7, r2
    f8ac:	441a      	add	r2, r3
    f8ae:	9208      	str	r2, [sp, #32]
    f8b0:	e56c      	b.n	f38c <_dtoa_r+0x64c>
    f8b2:	9b05      	ldr	r3, [sp, #20]
    f8b4:	9a00      	ldr	r2, [sp, #0]
    f8b6:	3301      	adds	r3, #1
    f8b8:	9305      	str	r3, [sp, #20]
    f8ba:	2331      	movs	r3, #49	; 0x31
    f8bc:	7013      	strb	r3, [r2, #0]
    f8be:	e60b      	b.n	f4d8 <_dtoa_r+0x798>
    f8c0:	f04f 0a00 	mov.w	sl, #0
    f8c4:	4656      	mov	r6, sl
    f8c6:	e4cd      	b.n	f264 <_dtoa_r+0x524>
    f8c8:	900c      	str	r0, [sp, #48]	; 0x30
    f8ca:	e632      	b.n	f532 <_dtoa_r+0x7f2>
    f8cc:	f000 8149 	beq.w	fb62 <_dtoa_r+0xe22>
    f8d0:	9a05      	ldr	r2, [sp, #20]
    f8d2:	4bc8      	ldr	r3, [pc, #800]	; (fbf4 <_dtoa_r+0xeb4>)
    f8d4:	4256      	negs	r6, r2
    f8d6:	f006 020f 	and.w	r2, r6, #15
    f8da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    f8de:	e9d3 2300 	ldrd	r2, r3, [r3]
    f8e2:	ec51 0b19 	vmov	r0, r1, d9
    f8e6:	f7fb f821 	bl	a92c <__aeabi_dmul>
    f8ea:	1136      	asrs	r6, r6, #4
    f8ec:	ec41 0b1a 	vmov	d10, r0, r1
    f8f0:	f000 8195 	beq.w	fc1e <_dtoa_r+0xede>
    f8f4:	4fc0      	ldr	r7, [pc, #768]	; (fbf8 <_dtoa_r+0xeb8>)
    f8f6:	2300      	movs	r3, #0
    f8f8:	f04f 0a02 	mov.w	sl, #2
    f8fc:	07f2      	lsls	r2, r6, #31
    f8fe:	d506      	bpl.n	f90e <_dtoa_r+0xbce>
    f900:	e9d7 2300 	ldrd	r2, r3, [r7]
    f904:	f7fb f812 	bl	a92c <__aeabi_dmul>
    f908:	f10a 0a01 	add.w	sl, sl, #1
    f90c:	2301      	movs	r3, #1
    f90e:	1076      	asrs	r6, r6, #1
    f910:	f107 0708 	add.w	r7, r7, #8
    f914:	d1f2      	bne.n	f8fc <_dtoa_r+0xbbc>
    f916:	2b00      	cmp	r3, #0
    f918:	f43f ab9e 	beq.w	f058 <_dtoa_r+0x318>
    f91c:	ec41 0b1a 	vmov	d10, r0, r1
    f920:	f7ff bb9a 	b.w	f058 <_dtoa_r+0x318>
    f924:	9b02      	ldr	r3, [sp, #8]
    f926:	2b00      	cmp	r3, #0
    f928:	f47f ae3e 	bne.w	f5a8 <_dtoa_r+0x868>
    f92c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    f930:	f3c2 0313 	ubfx	r3, r2, #0, #20
    f934:	2b00      	cmp	r3, #0
    f936:	f43f af0b 	beq.w	f750 <_dtoa_r+0xa10>
    f93a:	e635      	b.n	f5a8 <_dtoa_r+0x868>
    f93c:	4629      	mov	r1, r5
    f93e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f940:	4620      	mov	r0, r4
    f942:	f7fc ff39 	bl	c7b8 <__pow5mult>
    f946:	4605      	mov	r5, r0
    f948:	e542      	b.n	f3d0 <_dtoa_r+0x690>
    f94a:	2a00      	cmp	r2, #0
    f94c:	dd12      	ble.n	f974 <_dtoa_r+0xc34>
    f94e:	4629      	mov	r1, r5
    f950:	2201      	movs	r2, #1
    f952:	4620      	mov	r0, r4
    f954:	9301      	str	r3, [sp, #4]
    f956:	f7fc ff8f 	bl	c878 <__lshift>
    f95a:	4651      	mov	r1, sl
    f95c:	4605      	mov	r5, r0
    f95e:	f7fd f803 	bl	c968 <__mcmp>
    f962:	2800      	cmp	r0, #0
    f964:	9b01      	ldr	r3, [sp, #4]
    f966:	f340 8129 	ble.w	fbbc <_dtoa_r+0xe7c>
    f96a:	2b39      	cmp	r3, #57	; 0x39
    f96c:	f000 8107 	beq.w	fb7e <_dtoa_r+0xe3e>
    f970:	f10b 0331 	add.w	r3, fp, #49	; 0x31
    f974:	46b9      	mov	r9, r7
    f976:	f809 3b01 	strb.w	r3, [r9], #1
    f97a:	9b05      	ldr	r3, [sp, #20]
    f97c:	3301      	adds	r3, #1
    f97e:	4637      	mov	r7, r6
    f980:	9305      	str	r3, [sp, #20]
    f982:	4646      	mov	r6, r8
    f984:	e5a8      	b.n	f4d8 <_dtoa_r+0x798>
    f986:	46a2      	mov	sl, r4
    f988:	ee18 5a10 	vmov	r5, s16
    f98c:	ee18 4a90 	vmov	r4, s17
    f990:	4602      	mov	r2, r0
    f992:	460b      	mov	r3, r1
    f994:	f7fa fe14 	bl	a5c0 <__adddf3>
    f998:	4642      	mov	r2, r8
    f99a:	464b      	mov	r3, r9
    f99c:	4606      	mov	r6, r0
    f99e:	460f      	mov	r7, r1
    f9a0:	f7fb fa54 	bl	ae4c <__aeabi_dcmpgt>
    f9a4:	b960      	cbnz	r0, f9c0 <_dtoa_r+0xc80>
    f9a6:	4642      	mov	r2, r8
    f9a8:	464b      	mov	r3, r9
    f9aa:	4630      	mov	r0, r6
    f9ac:	4639      	mov	r1, r7
    f9ae:	f7fb fa25 	bl	adfc <__aeabi_dcmpeq>
    f9b2:	2800      	cmp	r0, #0
    f9b4:	f43f acb4 	beq.w	f320 <_dtoa_r+0x5e0>
    f9b8:	ea5f 71cb 	movs.w	r1, fp, lsl #31
    f9bc:	f57f acb0 	bpl.w	f320 <_dtoa_r+0x5e0>
    f9c0:	9a00      	ldr	r2, [sp, #0]
    f9c2:	f7ff bbf3 	b.w	f1ac <_dtoa_r+0x46c>
    f9c6:	6871      	ldr	r1, [r6, #4]
    f9c8:	4620      	mov	r0, r4
    f9ca:	f7fc fd47 	bl	c45c <_Balloc>
    f9ce:	4607      	mov	r7, r0
    f9d0:	2800      	cmp	r0, #0
    f9d2:	f000 8128 	beq.w	fc26 <_dtoa_r+0xee6>
    f9d6:	6933      	ldr	r3, [r6, #16]
    f9d8:	3302      	adds	r3, #2
    f9da:	009a      	lsls	r2, r3, #2
    f9dc:	f106 010c 	add.w	r1, r6, #12
    f9e0:	300c      	adds	r0, #12
    f9e2:	f7f9 fa83 	bl	8eec <memcpy>
    f9e6:	4639      	mov	r1, r7
    f9e8:	2201      	movs	r2, #1
    f9ea:	4620      	mov	r0, r4
    f9ec:	f7fc ff44 	bl	c878 <__lshift>
    f9f0:	4680      	mov	r8, r0
    f9f2:	e5fb      	b.n	f5ec <_dtoa_r+0x8ac>
    f9f4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
    f9f8:	1a9f      	subs	r7, r3, r2
    f9fa:	e4c7      	b.n	f38c <_dtoa_r+0x64c>
    f9fc:	2b39      	cmp	r3, #57	; 0x39
    f9fe:	f000 80be 	beq.w	fb7e <_dtoa_r+0xe3e>
    fa02:	46b9      	mov	r9, r7
    fa04:	3301      	adds	r3, #1
    fa06:	e7b6      	b.n	f976 <_dtoa_r+0xc36>
    fa08:	9a05      	ldr	r2, [sp, #20]
    fa0a:	3201      	adds	r2, #1
    fa0c:	4637      	mov	r7, r6
    fa0e:	9205      	str	r2, [sp, #20]
    fa10:	4646      	mov	r6, r8
    fa12:	e542      	b.n	f49a <_dtoa_r+0x75a>
    fa14:	4629      	mov	r1, r5
    fa16:	4620      	mov	r0, r4
    fa18:	f7fc fece 	bl	c7b8 <__pow5mult>
    fa1c:	4605      	mov	r5, r0
    fa1e:	e4d7      	b.n	f3d0 <_dtoa_r+0x690>
    fa20:	980e      	ldr	r0, [sp, #56]	; 0x38
    fa22:	4974      	ldr	r1, [pc, #464]	; (fbf4 <_dtoa_r+0xeb4>)
    fa24:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    fa28:	4642      	mov	r2, r8
    fa2a:	464b      	mov	r3, r9
    fa2c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
    fa30:	f7fa ff7c 	bl	a92c <__aeabi_dmul>
    fa34:	ec5a 9b1a 	vmov	r9, sl, d10
    fa38:	ec41 0b18 	vmov	d8, r0, r1
    fa3c:	4651      	mov	r1, sl
    fa3e:	ee1a 0a10 	vmov	r0, s20
    fa42:	f001 fe0f 	bl	11664 <__aeabi_d2iz>
    fa46:	4607      	mov	r7, r0
    fa48:	f7fa ff06 	bl	a858 <__aeabi_i2d>
    fa4c:	4602      	mov	r2, r0
    fa4e:	460b      	mov	r3, r1
    fa50:	ee1a 0a10 	vmov	r0, s20
    fa54:	4651      	mov	r1, sl
    fa56:	f7fa fdb1 	bl	a5bc <__aeabi_dsub>
    fa5a:	4606      	mov	r6, r0
    fa5c:	980e      	ldr	r0, [sp, #56]	; 0x38
    fa5e:	f8dd 8000 	ldr.w	r8, [sp]
    fa62:	3730      	adds	r7, #48	; 0x30
    fa64:	2801      	cmp	r0, #1
    fa66:	f808 7b01 	strb.w	r7, [r8], #1
    fa6a:	460f      	mov	r7, r1
    fa6c:	f000 80d5 	beq.w	fc1a <_dtoa_r+0xeda>
    fa70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fa72:	9a00      	ldr	r2, [sp, #0]
    fa74:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    fa78:	4413      	add	r3, r2
    fa7a:	469b      	mov	fp, r3
    fa7c:	46c2      	mov	sl, r8
    fa7e:	4b5f      	ldr	r3, [pc, #380]	; (fbfc <_dtoa_r+0xebc>)
    fa80:	2200      	movs	r2, #0
    fa82:	4630      	mov	r0, r6
    fa84:	4639      	mov	r1, r7
    fa86:	f7fa ff51 	bl	a92c <__aeabi_dmul>
    fa8a:	4689      	mov	r9, r1
    fa8c:	4680      	mov	r8, r0
    fa8e:	f001 fde9 	bl	11664 <__aeabi_d2iz>
    fa92:	4607      	mov	r7, r0
    fa94:	f7fa fee0 	bl	a858 <__aeabi_i2d>
    fa98:	3730      	adds	r7, #48	; 0x30
    fa9a:	4602      	mov	r2, r0
    fa9c:	460b      	mov	r3, r1
    fa9e:	4640      	mov	r0, r8
    faa0:	4649      	mov	r1, r9
    faa2:	f7fa fd8b 	bl	a5bc <__aeabi_dsub>
    faa6:	f80a 7b01 	strb.w	r7, [sl], #1
    faaa:	45d3      	cmp	fp, sl
    faac:	4606      	mov	r6, r0
    faae:	460f      	mov	r7, r1
    fab0:	d1e5      	bne.n	fa7e <_dtoa_r+0xd3e>
    fab2:	46da      	mov	sl, fp
    fab4:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    fab8:	4b51      	ldr	r3, [pc, #324]	; (fc00 <_dtoa_r+0xec0>)
    faba:	ec59 8b18 	vmov	r8, r9, d8
    fabe:	2200      	movs	r2, #0
    fac0:	ee18 0a10 	vmov	r0, s16
    fac4:	4649      	mov	r1, r9
    fac6:	f7fa fd7b 	bl	a5c0 <__adddf3>
    faca:	4632      	mov	r2, r6
    facc:	463b      	mov	r3, r7
    face:	f7fb f99f 	bl	ae10 <__aeabi_dcmplt>
    fad2:	2800      	cmp	r0, #0
    fad4:	d16d      	bne.n	fbb2 <_dtoa_r+0xe72>
    fad6:	ee18 2a10 	vmov	r2, s16
    fada:	464b      	mov	r3, r9
    fadc:	4948      	ldr	r1, [pc, #288]	; (fc00 <_dtoa_r+0xec0>)
    fade:	2000      	movs	r0, #0
    fae0:	f7fa fd6c 	bl	a5bc <__aeabi_dsub>
    fae4:	4632      	mov	r2, r6
    fae6:	463b      	mov	r3, r7
    fae8:	f7fb f9b0 	bl	ae4c <__aeabi_dcmpgt>
    faec:	2800      	cmp	r0, #0
    faee:	f43f ab92 	beq.w	f216 <_dtoa_r+0x4d6>
    faf2:	46d1      	mov	r9, sl
    faf4:	f10a 3aff 	add.w	sl, sl, #4294967295
    faf8:	f819 3c01 	ldrb.w	r3, [r9, #-1]
    fafc:	2b30      	cmp	r3, #48	; 0x30
    fafe:	d0f8      	beq.n	faf2 <_dtoa_r+0xdb2>
    fb00:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fb02:	3301      	adds	r3, #1
    fb04:	9305      	str	r3, [sp, #20]
    fb06:	e4f7      	b.n	f4f8 <_dtoa_r+0x7b8>
    fb08:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fb0a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    fb0e:	e6c6      	b.n	f89e <_dtoa_r+0xb5e>
    fb10:	9b07      	ldr	r3, [sp, #28]
    fb12:	2b00      	cmp	r3, #0
    fb14:	f43f ab57 	beq.w	f1c6 <_dtoa_r+0x486>
    fb18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fb1a:	2b00      	cmp	r3, #0
    fb1c:	f77f ab7b 	ble.w	f216 <_dtoa_r+0x4d6>
    fb20:	9a05      	ldr	r2, [sp, #20]
    fb22:	930e      	str	r3, [sp, #56]	; 0x38
    fb24:	3a01      	subs	r2, #1
    fb26:	4b35      	ldr	r3, [pc, #212]	; (fbfc <_dtoa_r+0xebc>)
    fb28:	9210      	str	r2, [sp, #64]	; 0x40
    fb2a:	ee1a 0a10 	vmov	r0, s20
    fb2e:	4639      	mov	r1, r7
    fb30:	2200      	movs	r2, #0
    fb32:	f7fa fefb 	bl	a92c <__aeabi_dmul>
    fb36:	4602      	mov	r2, r0
    fb38:	4616      	mov	r6, r2
    fb3a:	460f      	mov	r7, r1
    fb3c:	f10a 0001 	add.w	r0, sl, #1
    fb40:	f7fa fe8a 	bl	a858 <__aeabi_i2d>
    fb44:	4632      	mov	r2, r6
    fb46:	463b      	mov	r3, r7
    fb48:	f7fa fef0 	bl	a92c <__aeabi_dmul>
    fb4c:	4b2d      	ldr	r3, [pc, #180]	; (fc04 <_dtoa_r+0xec4>)
    fb4e:	2200      	movs	r2, #0
    fb50:	f7fa fd36 	bl	a5c0 <__adddf3>
    fb54:	ec47 6b1a 	vmov	d10, r6, r7
    fb58:	4680      	mov	r8, r0
    fb5a:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
    fb5e:	f7ff ba9f 	b.w	f0a0 <_dtoa_r+0x360>
    fb62:	f04f 0a02 	mov.w	sl, #2
    fb66:	eeb0 aa49 	vmov.f32	s20, s18
    fb6a:	eef0 aa69 	vmov.f32	s21, s19
    fb6e:	f7ff ba73 	b.w	f058 <_dtoa_r+0x318>
    fb72:	9b05      	ldr	r3, [sp, #20]
    fb74:	3301      	adds	r3, #1
    fb76:	9305      	str	r3, [sp, #20]
    fb78:	2331      	movs	r3, #49	; 0x31
    fb7a:	f7ff bb1e 	b.w	f1ba <_dtoa_r+0x47a>
    fb7e:	9b05      	ldr	r3, [sp, #20]
    fb80:	46bb      	mov	fp, r7
    fb82:	3301      	adds	r3, #1
    fb84:	9305      	str	r3, [sp, #20]
    fb86:	2339      	movs	r3, #57	; 0x39
    fb88:	4637      	mov	r7, r6
    fb8a:	f80b 3b01 	strb.w	r3, [fp], #1
    fb8e:	4646      	mov	r6, r8
    fb90:	e492      	b.n	f4b8 <_dtoa_r+0x778>
    fb92:	f04f 0a00 	mov.w	sl, #0
    fb96:	4656      	mov	r6, sl
    fb98:	e628      	b.n	f7ec <_dtoa_r+0xaac>
    fb9a:	4698      	mov	r8, r3
    fb9c:	e427      	b.n	f3ee <_dtoa_r+0x6ae>
    fb9e:	46aa      	mov	sl, r5
    fba0:	ee18 4a10 	vmov	r4, s16
    fba4:	ee1a 5a10 	vmov	r5, s20
    fba8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fbaa:	3301      	adds	r3, #1
    fbac:	9305      	str	r3, [sp, #20]
    fbae:	46d1      	mov	r9, sl
    fbb0:	e4a2      	b.n	f4f8 <_dtoa_r+0x7b8>
    fbb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fbb4:	9a00      	ldr	r2, [sp, #0]
    fbb6:	9305      	str	r3, [sp, #20]
    fbb8:	f7ff baf8 	b.w	f1ac <_dtoa_r+0x46c>
    fbbc:	f47f aeda 	bne.w	f974 <_dtoa_r+0xc34>
    fbc0:	07da      	lsls	r2, r3, #31
    fbc2:	f57f aed7 	bpl.w	f974 <_dtoa_r+0xc34>
    fbc6:	e6d0      	b.n	f96a <_dtoa_r+0xc2a>
    fbc8:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
    fbcc:	ee1a 5a10 	vmov	r5, s20
    fbd0:	ee18 4a10 	vmov	r4, s16
    fbd4:	f7ff bb1f 	b.w	f216 <_dtoa_r+0x4d6>
    fbd8:	2b39      	cmp	r3, #57	; 0x39
    fbda:	d0d0      	beq.n	fb7e <_dtoa_r+0xe3e>
    fbdc:	f1b9 0f00 	cmp.w	r9, #0
    fbe0:	f73f aec6 	bgt.w	f970 <_dtoa_r+0xc30>
    fbe4:	e6c6      	b.n	f974 <_dtoa_r+0xc34>
    fbe6:	9b01      	ldr	r3, [sp, #4]
    fbe8:	2b02      	cmp	r3, #2
    fbea:	f73f adea 	bgt.w	f7c2 <_dtoa_r+0xa82>
    fbee:	f8cd 9014 	str.w	r9, [sp, #20]
    fbf2:	e572      	b.n	f6da <_dtoa_r+0x99a>
    fbf4:	00012468 	.word	0x00012468
    fbf8:	00012440 	.word	0x00012440
    fbfc:	40240000 	.word	0x40240000
    fc00:	3fe00000 	.word	0x3fe00000
    fc04:	401c0000 	.word	0x401c0000
    fc08:	9b01      	ldr	r3, [sp, #4]
    fc0a:	2b02      	cmp	r3, #2
    fc0c:	f73f add9 	bgt.w	f7c2 <_dtoa_r+0xa82>
    fc10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fc12:	f8cd 9014 	str.w	r9, [sp, #20]
    fc16:	9307      	str	r3, [sp, #28]
    fc18:	e4e0      	b.n	f5dc <_dtoa_r+0x89c>
    fc1a:	46c2      	mov	sl, r8
    fc1c:	e74c      	b.n	fab8 <_dtoa_r+0xd78>
    fc1e:	f04f 0a02 	mov.w	sl, #2
    fc22:	f7ff ba19 	b.w	f058 <_dtoa_r+0x318>
    fc26:	4b12      	ldr	r3, [pc, #72]	; (fc70 <_dtoa_r+0xf30>)
    fc28:	4812      	ldr	r0, [pc, #72]	; (fc74 <_dtoa_r+0xf34>)
    fc2a:	463a      	mov	r2, r7
    fc2c:	f240 21ef 	movw	r1, #751	; 0x2ef
    fc30:	f7fe ff94 	bl	eb5c <__assert_func>
    fc34:	2600      	movs	r6, #0
    fc36:	63e6      	str	r6, [r4, #60]	; 0x3c
    fc38:	4631      	mov	r1, r6
    fc3a:	4620      	mov	r0, r4
    fc3c:	f7fc fc0e 	bl	c45c <_Balloc>
    fc40:	9000      	str	r0, [sp, #0]
    fc42:	b950      	cbnz	r0, fc5a <_dtoa_r+0xf1a>
    fc44:	4b0a      	ldr	r3, [pc, #40]	; (fc70 <_dtoa_r+0xf30>)
    fc46:	480b      	ldr	r0, [pc, #44]	; (fc74 <_dtoa_r+0xf34>)
    fc48:	2200      	movs	r2, #0
    fc4a:	f240 11af 	movw	r1, #431	; 0x1af
    fc4e:	f7fe ff85 	bl	eb5c <__assert_func>
    fc52:	4b09      	ldr	r3, [pc, #36]	; (fc78 <_dtoa_r+0xf38>)
    fc54:	9300      	str	r3, [sp, #0]
    fc56:	f7ff b8b6 	b.w	edc6 <_dtoa_r+0x86>
    fc5a:	9b00      	ldr	r3, [sp, #0]
    fc5c:	63a3      	str	r3, [r4, #56]	; 0x38
    fc5e:	f04f 33ff 	mov.w	r3, #4294967295
    fc62:	930f      	str	r3, [sp, #60]	; 0x3c
    fc64:	9307      	str	r3, [sp, #28]
    fc66:	2301      	movs	r3, #1
    fc68:	9609      	str	r6, [sp, #36]	; 0x24
    fc6a:	930a      	str	r3, [sp, #40]	; 0x28
    fc6c:	f7ff bad3 	b.w	f216 <_dtoa_r+0x4d6>
    fc70:	000123cc 	.word	0x000123cc
    fc74:	000125f0 	.word	0x000125f0
    fc78:	000125e0 	.word	0x000125e0

0000fc7c <_wcrtomb_r>:
    fc7c:	b570      	push	{r4, r5, r6, lr}
    fc7e:	4605      	mov	r5, r0
    fc80:	b084      	sub	sp, #16
    fc82:	b15b      	cbz	r3, fc9c <_wcrtomb_r+0x20>
    fc84:	461c      	mov	r4, r3
    fc86:	b169      	cbz	r1, fca4 <_wcrtomb_r+0x28>
    fc88:	4b0e      	ldr	r3, [pc, #56]	; (fcc4 <_wcrtomb_r+0x48>)
    fc8a:	4628      	mov	r0, r5
    fc8c:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
    fc90:	4623      	mov	r3, r4
    fc92:	47b0      	blx	r6
    fc94:	1c43      	adds	r3, r0, #1
    fc96:	d00f      	beq.n	fcb8 <_wcrtomb_r+0x3c>
    fc98:	b004      	add	sp, #16
    fc9a:	bd70      	pop	{r4, r5, r6, pc}
    fc9c:	f500 7482 	add.w	r4, r0, #260	; 0x104
    fca0:	2900      	cmp	r1, #0
    fca2:	d1f1      	bne.n	fc88 <_wcrtomb_r+0xc>
    fca4:	4a07      	ldr	r2, [pc, #28]	; (fcc4 <_wcrtomb_r+0x48>)
    fca6:	4623      	mov	r3, r4
    fca8:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
    fcac:	4628      	mov	r0, r5
    fcae:	460a      	mov	r2, r1
    fcb0:	a901      	add	r1, sp, #4
    fcb2:	47b0      	blx	r6
    fcb4:	1c43      	adds	r3, r0, #1
    fcb6:	d1ef      	bne.n	fc98 <_wcrtomb_r+0x1c>
    fcb8:	2200      	movs	r2, #0
    fcba:	238a      	movs	r3, #138	; 0x8a
    fcbc:	6022      	str	r2, [r4, #0]
    fcbe:	602b      	str	r3, [r5, #0]
    fcc0:	b004      	add	sp, #16
    fcc2:	bd70      	pop	{r4, r5, r6, pc}
    fcc4:	1fff133c 	.word	0x1fff133c

0000fcc8 <_wcsrtombs_r>:
    fcc8:	b510      	push	{r4, lr}
    fcca:	b082      	sub	sp, #8
    fccc:	9c04      	ldr	r4, [sp, #16]
    fcce:	e9cd 3400 	strd	r3, r4, [sp]
    fcd2:	f04f 33ff 	mov.w	r3, #4294967295
    fcd6:	f001 fbc7 	bl	11468 <_wcsnrtombs_r>
    fcda:	b002      	add	sp, #8
    fcdc:	bd10      	pop	{r4, pc}
    fcde:	bf00      	nop

0000fce0 <fiprintf>:
    fce0:	b40e      	push	{r1, r2, r3}
    fce2:	b510      	push	{r4, lr}
    fce4:	b083      	sub	sp, #12
    fce6:	ab05      	add	r3, sp, #20
    fce8:	4c06      	ldr	r4, [pc, #24]	; (fd04 <fiprintf+0x24>)
    fcea:	f853 2b04 	ldr.w	r2, [r3], #4
    fcee:	9301      	str	r3, [sp, #4]
    fcf0:	4601      	mov	r1, r0
    fcf2:	6820      	ldr	r0, [r4, #0]
    fcf4:	f000 f8c4 	bl	fe80 <_vfiprintf_r>
    fcf8:	b003      	add	sp, #12
    fcfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fcfe:	b003      	add	sp, #12
    fd00:	4770      	bx	lr
    fd02:	bf00      	nop
    fd04:	1fff15c8 	.word	0x1fff15c8

0000fd08 <__ssprint_r>:
    fd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd0c:	6893      	ldr	r3, [r2, #8]
    fd0e:	6817      	ldr	r7, [r2, #0]
    fd10:	b083      	sub	sp, #12
    fd12:	4692      	mov	sl, r2
    fd14:	2b00      	cmp	r3, #0
    fd16:	d070      	beq.n	fdfa <__ssprint_r+0xf2>
    fd18:	4681      	mov	r9, r0
    fd1a:	688a      	ldr	r2, [r1, #8]
    fd1c:	6808      	ldr	r0, [r1, #0]
    fd1e:	460c      	mov	r4, r1
    fd20:	3708      	adds	r7, #8
    fd22:	e043      	b.n	fdac <__ssprint_r+0xa4>
    fd24:	89a3      	ldrh	r3, [r4, #12]
    fd26:	f413 6f90 	tst.w	r3, #1152	; 0x480
    fd2a:	d02e      	beq.n	fd8a <__ssprint_r+0x82>
    fd2c:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
    fd30:	eba0 0801 	sub.w	r8, r0, r1
    fd34:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    fd38:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
    fd3c:	f108 0001 	add.w	r0, r8, #1
    fd40:	1076      	asrs	r6, r6, #1
    fd42:	4428      	add	r0, r5
    fd44:	42b0      	cmp	r0, r6
    fd46:	4632      	mov	r2, r6
    fd48:	bf84      	itt	hi
    fd4a:	4606      	movhi	r6, r0
    fd4c:	4632      	movhi	r2, r6
    fd4e:	055b      	lsls	r3, r3, #21
    fd50:	d537      	bpl.n	fdc2 <__ssprint_r+0xba>
    fd52:	4611      	mov	r1, r2
    fd54:	4648      	mov	r0, r9
    fd56:	f7fb f8a9 	bl	aeac <_malloc_r>
    fd5a:	9001      	str	r0, [sp, #4]
    fd5c:	2800      	cmp	r0, #0
    fd5e:	d03a      	beq.n	fdd6 <__ssprint_r+0xce>
    fd60:	4642      	mov	r2, r8
    fd62:	6921      	ldr	r1, [r4, #16]
    fd64:	f7f9 f8c2 	bl	8eec <memcpy>
    fd68:	89a2      	ldrh	r2, [r4, #12]
    fd6a:	9b01      	ldr	r3, [sp, #4]
    fd6c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    fd70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    fd74:	81a2      	strh	r2, [r4, #12]
    fd76:	eba6 0208 	sub.w	r2, r6, r8
    fd7a:	eb03 0008 	add.w	r0, r3, r8
    fd7e:	6166      	str	r6, [r4, #20]
    fd80:	60a2      	str	r2, [r4, #8]
    fd82:	6123      	str	r3, [r4, #16]
    fd84:	6020      	str	r0, [r4, #0]
    fd86:	462e      	mov	r6, r5
    fd88:	46a8      	mov	r8, r5
    fd8a:	4642      	mov	r2, r8
    fd8c:	4659      	mov	r1, fp
    fd8e:	f7fb ff27 	bl	bbe0 <memmove>
    fd92:	f8da 3008 	ldr.w	r3, [sl, #8]
    fd96:	68a2      	ldr	r2, [r4, #8]
    fd98:	6820      	ldr	r0, [r4, #0]
    fd9a:	1b92      	subs	r2, r2, r6
    fd9c:	4440      	add	r0, r8
    fd9e:	1b5b      	subs	r3, r3, r5
    fda0:	60a2      	str	r2, [r4, #8]
    fda2:	6020      	str	r0, [r4, #0]
    fda4:	f8ca 3008 	str.w	r3, [sl, #8]
    fda8:	b33b      	cbz	r3, fdfa <__ssprint_r+0xf2>
    fdaa:	3708      	adds	r7, #8
    fdac:	e957 b502 	ldrd	fp, r5, [r7, #-8]
    fdb0:	2d00      	cmp	r5, #0
    fdb2:	d0fa      	beq.n	fdaa <__ssprint_r+0xa2>
    fdb4:	42aa      	cmp	r2, r5
    fdb6:	4616      	mov	r6, r2
    fdb8:	4690      	mov	r8, r2
    fdba:	d9b3      	bls.n	fd24 <__ssprint_r+0x1c>
    fdbc:	462e      	mov	r6, r5
    fdbe:	46a8      	mov	r8, r5
    fdc0:	e7e3      	b.n	fd8a <__ssprint_r+0x82>
    fdc2:	4648      	mov	r0, r9
    fdc4:	f7fb fb3a 	bl	b43c <_realloc_r>
    fdc8:	4603      	mov	r3, r0
    fdca:	2800      	cmp	r0, #0
    fdcc:	d1d3      	bne.n	fd76 <__ssprint_r+0x6e>
    fdce:	6921      	ldr	r1, [r4, #16]
    fdd0:	4648      	mov	r0, r9
    fdd2:	f7fc fa27 	bl	c224 <_free_r>
    fdd6:	89a3      	ldrh	r3, [r4, #12]
    fdd8:	220c      	movs	r2, #12
    fdda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fdde:	f8c9 2000 	str.w	r2, [r9]
    fde2:	f04f 30ff 	mov.w	r0, #4294967295
    fde6:	81a3      	strh	r3, [r4, #12]
    fde8:	2200      	movs	r2, #0
    fdea:	2300      	movs	r3, #0
    fdec:	f8ca 2008 	str.w	r2, [sl, #8]
    fdf0:	f8ca 3004 	str.w	r3, [sl, #4]
    fdf4:	b003      	add	sp, #12
    fdf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fdfa:	2000      	movs	r0, #0
    fdfc:	2300      	movs	r3, #0
    fdfe:	f8ca 3004 	str.w	r3, [sl, #4]
    fe02:	b003      	add	sp, #12
    fe04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fe08 <__sprint_r.part.0>:
    fe08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fe0c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    fe0e:	049c      	lsls	r4, r3, #18
    fe10:	4690      	mov	r8, r2
    fe12:	d52d      	bpl.n	fe70 <__sprint_r.part.0+0x68>
    fe14:	6893      	ldr	r3, [r2, #8]
    fe16:	6812      	ldr	r2, [r2, #0]
    fe18:	b343      	cbz	r3, fe6c <__sprint_r.part.0+0x64>
    fe1a:	468b      	mov	fp, r1
    fe1c:	4606      	mov	r6, r0
    fe1e:	f102 0908 	add.w	r9, r2, #8
    fe22:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
    fe26:	ea5f 079a 	movs.w	r7, sl, lsr #2
    fe2a:	d015      	beq.n	fe58 <__sprint_r.part.0+0x50>
    fe2c:	3d04      	subs	r5, #4
    fe2e:	2400      	movs	r4, #0
    fe30:	e001      	b.n	fe36 <__sprint_r.part.0+0x2e>
    fe32:	42a7      	cmp	r7, r4
    fe34:	d00e      	beq.n	fe54 <__sprint_r.part.0+0x4c>
    fe36:	f855 1f04 	ldr.w	r1, [r5, #4]!
    fe3a:	465a      	mov	r2, fp
    fe3c:	4630      	mov	r0, r6
    fe3e:	f001 fa5b 	bl	112f8 <_fputwc_r>
    fe42:	1c43      	adds	r3, r0, #1
    fe44:	f104 0401 	add.w	r4, r4, #1
    fe48:	d1f3      	bne.n	fe32 <__sprint_r.part.0+0x2a>
    fe4a:	2300      	movs	r3, #0
    fe4c:	e9c8 3301 	strd	r3, r3, [r8, #4]
    fe50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe54:	f8d8 3008 	ldr.w	r3, [r8, #8]
    fe58:	f02a 0a03 	bic.w	sl, sl, #3
    fe5c:	eba3 030a 	sub.w	r3, r3, sl
    fe60:	f8c8 3008 	str.w	r3, [r8, #8]
    fe64:	f109 0908 	add.w	r9, r9, #8
    fe68:	2b00      	cmp	r3, #0
    fe6a:	d1da      	bne.n	fe22 <__sprint_r.part.0+0x1a>
    fe6c:	2000      	movs	r0, #0
    fe6e:	e7ec      	b.n	fe4a <__sprint_r.part.0+0x42>
    fe70:	f001 f80c 	bl	10e8c <__sfvwrite_r>
    fe74:	2300      	movs	r3, #0
    fe76:	e9c8 3301 	strd	r3, r3, [r8, #4]
    fe7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe7e:	bf00      	nop

0000fe80 <_vfiprintf_r>:
    fe80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fe84:	ed2d 8b02 	vpush	{d8}
    fe88:	b0c5      	sub	sp, #276	; 0x114
    fe8a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
    fe8e:	4683      	mov	fp, r0
    fe90:	ee08 1a10 	vmov	s16, r1
    fe94:	4616      	mov	r6, r2
    fe96:	2100      	movs	r1, #0
    fe98:	2208      	movs	r2, #8
    fe9a:	4650      	mov	r0, sl
    fe9c:	461c      	mov	r4, r3
    fe9e:	9307      	str	r3, [sp, #28]
    fea0:	f7fb ff1a 	bl	bcd8 <memset>
    fea4:	f1bb 0f00 	cmp.w	fp, #0
    fea8:	d004      	beq.n	feb4 <_vfiprintf_r+0x34>
    feaa:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    feae:	2b00      	cmp	r3, #0
    feb0:	f000 86a0 	beq.w	10bf4 <_vfiprintf_r+0xd74>
    feb4:	ee18 2a10 	vmov	r2, s16
    feb8:	6e53      	ldr	r3, [r2, #100]	; 0x64
    feba:	07db      	lsls	r3, r3, #31
    febc:	f140 8513 	bpl.w	108e6 <_vfiprintf_r+0xa66>
    fec0:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
    fec4:	b28a      	uxth	r2, r1
    fec6:	0495      	lsls	r5, r2, #18
    fec8:	d40b      	bmi.n	fee2 <_vfiprintf_r+0x62>
    feca:	ee18 3a10 	vmov	r3, s16
    fece:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    fed2:	8199      	strh	r1, [r3, #12]
    fed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    fed6:	b28a      	uxth	r2, r1
    fed8:	ee18 1a10 	vmov	r1, s16
    fedc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    fee0:	664b      	str	r3, [r1, #100]	; 0x64
    fee2:	0710      	lsls	r0, r2, #28
    fee4:	f140 8105 	bpl.w	100f2 <_vfiprintf_r+0x272>
    fee8:	ee18 3a10 	vmov	r3, s16
    feec:	691b      	ldr	r3, [r3, #16]
    feee:	2b00      	cmp	r3, #0
    fef0:	f000 80ff 	beq.w	100f2 <_vfiprintf_r+0x272>
    fef4:	f002 031a 	and.w	r3, r2, #26
    fef8:	2b0a      	cmp	r3, #10
    fefa:	f000 810a 	beq.w	10112 <_vfiprintf_r+0x292>
    fefe:	2300      	movs	r3, #0
    ff00:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
    ff04:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    ff08:	aa1b      	add	r2, sp, #108	; 0x6c
    ff0a:	930c      	str	r3, [sp, #48]	; 0x30
    ff0c:	9218      	str	r2, [sp, #96]	; 0x60
    ff0e:	4691      	mov	r9, r2
    ff10:	930b      	str	r3, [sp, #44]	; 0x2c
    ff12:	9305      	str	r3, [sp, #20]
    ff14:	46b0      	mov	r8, r6
    ff16:	4644      	mov	r4, r8
    ff18:	4ba8      	ldr	r3, [pc, #672]	; (101bc <_vfiprintf_r+0x33c>)
    ff1a:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    ff1e:	f7fb ff5f 	bl	bde0 <__locale_mb_cur_max>
    ff22:	4622      	mov	r2, r4
    ff24:	4603      	mov	r3, r0
    ff26:	a912      	add	r1, sp, #72	; 0x48
    ff28:	f8cd a000 	str.w	sl, [sp]
    ff2c:	4658      	mov	r0, fp
    ff2e:	47a8      	blx	r5
    ff30:	2800      	cmp	r0, #0
    ff32:	f000 8145 	beq.w	101c0 <_vfiprintf_r+0x340>
    ff36:	f2c0 8139 	blt.w	101ac <_vfiprintf_r+0x32c>
    ff3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ff3c:	2a25      	cmp	r2, #37	; 0x25
    ff3e:	4603      	mov	r3, r0
    ff40:	d001      	beq.n	ff46 <_vfiprintf_r+0xc6>
    ff42:	441c      	add	r4, r3
    ff44:	e7e8      	b.n	ff18 <_vfiprintf_r+0x98>
    ff46:	ebb4 0608 	subs.w	r6, r4, r8
    ff4a:	4605      	mov	r5, r0
    ff4c:	f040 813c 	bne.w	101c8 <_vfiprintf_r+0x348>
    ff50:	2300      	movs	r3, #0
    ff52:	7861      	ldrb	r1, [r4, #1]
    ff54:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    ff58:	f104 0801 	add.w	r8, r4, #1
    ff5c:	9306      	str	r3, [sp, #24]
    ff5e:	f04f 37ff 	mov.w	r7, #4294967295
    ff62:	461e      	mov	r6, r3
    ff64:	242b      	movs	r4, #43	; 0x2b
    ff66:	f108 0801 	add.w	r8, r8, #1
    ff6a:	f1a1 0320 	sub.w	r3, r1, #32
    ff6e:	2b5a      	cmp	r3, #90	; 0x5a
    ff70:	f200 8178 	bhi.w	10264 <_vfiprintf_r+0x3e4>
    ff74:	e8df f013 	tbh	[pc, r3, lsl #1]
    ff78:	017602b5 	.word	0x017602b5
    ff7c:	02b00176 	.word	0x02b00176
    ff80:	01760176 	.word	0x01760176
    ff84:	006a0176 	.word	0x006a0176
    ff88:	01760176 	.word	0x01760176
    ff8c:	028d027d 	.word	0x028d027d
    ff90:	02880176 	.word	0x02880176
    ff94:	01760297 	.word	0x01760297
    ff98:	005b0292 	.word	0x005b0292
    ff9c:	005b005b 	.word	0x005b005b
    ffa0:	005b005b 	.word	0x005b005b
    ffa4:	005b005b 	.word	0x005b005b
    ffa8:	005b005b 	.word	0x005b005b
    ffac:	01760176 	.word	0x01760176
    ffb0:	01760176 	.word	0x01760176
    ffb4:	01760176 	.word	0x01760176
    ffb8:	01760176 	.word	0x01760176
    ffbc:	025c0176 	.word	0x025c0176
    ffc0:	01760084 	.word	0x01760084
    ffc4:	01760176 	.word	0x01760176
    ffc8:	01760176 	.word	0x01760176
    ffcc:	01760176 	.word	0x01760176
    ffd0:	01760176 	.word	0x01760176
    ffd4:	00e80176 	.word	0x00e80176
    ffd8:	01760176 	.word	0x01760176
    ffdc:	02330176 	.word	0x02330176
    ffe0:	02da0176 	.word	0x02da0176
    ffe4:	01760176 	.word	0x01760176
    ffe8:	0176058b 	.word	0x0176058b
    ffec:	01760176 	.word	0x01760176
    fff0:	01760176 	.word	0x01760176
    fff4:	01760176 	.word	0x01760176
    fff8:	01760176 	.word	0x01760176
    fffc:	025c0176 	.word	0x025c0176
   10000:	01760086 	.word	0x01760086
   10004:	01760176 	.word	0x01760176
   10008:	008602cd 	.word	0x008602cd
   1000c:	0176007f 	.word	0x0176007f
   10010:	017602c0 	.word	0x017602c0
   10014:	00ea02fd 	.word	0x00ea02fd
   10018:	007f02ed 	.word	0x007f02ed
   1001c:	02330176 	.word	0x02330176
   10020:	0569007c 	.word	0x0569007c
   10024:	01760176 	.word	0x01760176
   10028:	0176056b 	.word	0x0176056b
   1002c:	007c      	.short	0x007c
   1002e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   10032:	2200      	movs	r2, #0
   10034:	f818 1b01 	ldrb.w	r1, [r8], #1
   10038:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1003c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   10040:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   10044:	2b09      	cmp	r3, #9
   10046:	d9f5      	bls.n	10034 <_vfiprintf_r+0x1b4>
   10048:	9206      	str	r2, [sp, #24]
   1004a:	e78e      	b.n	ff6a <_vfiprintf_r+0xea>
   1004c:	4658      	mov	r0, fp
   1004e:	f7fe fce5 	bl	ea1c <_localeconv_r>
   10052:	6843      	ldr	r3, [r0, #4]
   10054:	930d      	str	r3, [sp, #52]	; 0x34
   10056:	4618      	mov	r0, r3
   10058:	f7fb ffd2 	bl	c000 <strlen>
   1005c:	900e      	str	r0, [sp, #56]	; 0x38
   1005e:	4605      	mov	r5, r0
   10060:	4658      	mov	r0, fp
   10062:	f7fe fcdb 	bl	ea1c <_localeconv_r>
   10066:	6883      	ldr	r3, [r0, #8]
   10068:	930b      	str	r3, [sp, #44]	; 0x2c
   1006a:	2d00      	cmp	r5, #0
   1006c:	f040 84d6 	bne.w	10a1c <_vfiprintf_r+0xb9c>
   10070:	f898 1000 	ldrb.w	r1, [r8]
   10074:	e777      	b.n	ff66 <_vfiprintf_r+0xe6>
   10076:	f898 1000 	ldrb.w	r1, [r8]
   1007a:	f046 0620 	orr.w	r6, r6, #32
   1007e:	e772      	b.n	ff66 <_vfiprintf_r+0xe6>
   10080:	f046 0610 	orr.w	r6, r6, #16
   10084:	06b4      	lsls	r4, r6, #26
   10086:	f140 818e 	bpl.w	103a6 <_vfiprintf_r+0x526>
   1008a:	9b07      	ldr	r3, [sp, #28]
   1008c:	3307      	adds	r3, #7
   1008e:	f023 0307 	bic.w	r3, r3, #7
   10092:	461a      	mov	r2, r3
   10094:	6859      	ldr	r1, [r3, #4]
   10096:	f852 3b08 	ldr.w	r3, [r2], #8
   1009a:	9207      	str	r2, [sp, #28]
   1009c:	460a      	mov	r2, r1
   1009e:	2900      	cmp	r1, #0
   100a0:	f2c0 8470 	blt.w	10984 <_vfiprintf_r+0xb04>
   100a4:	1c79      	adds	r1, r7, #1
   100a6:	f000 85a2 	beq.w	10bee <_vfiprintf_r+0xd6e>
   100aa:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   100ae:	9103      	str	r1, [sp, #12]
   100b0:	ea53 0102 	orrs.w	r1, r3, r2
   100b4:	f000 843f 	beq.w	10936 <_vfiprintf_r+0xab6>
   100b8:	2b0a      	cmp	r3, #10
   100ba:	f172 0100 	sbcs.w	r1, r2, #0
   100be:	f080 8541 	bcs.w	10b44 <_vfiprintf_r+0xcc4>
   100c2:	3330      	adds	r3, #48	; 0x30
   100c4:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   100c8:	9e03      	ldr	r6, [sp, #12]
   100ca:	2301      	movs	r3, #1
   100cc:	9304      	str	r3, [sp, #16]
   100ce:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   100d2:	9b04      	ldr	r3, [sp, #16]
   100d4:	42bb      	cmp	r3, r7
   100d6:	bfb8      	it	lt
   100d8:	463b      	movlt	r3, r7
   100da:	9303      	str	r3, [sp, #12]
   100dc:	2300      	movs	r3, #0
   100de:	9308      	str	r3, [sp, #32]
   100e0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   100e4:	2b00      	cmp	r3, #0
   100e6:	f000 80cb 	beq.w	10280 <_vfiprintf_r+0x400>
   100ea:	9b03      	ldr	r3, [sp, #12]
   100ec:	3301      	adds	r3, #1
   100ee:	9303      	str	r3, [sp, #12]
   100f0:	e0c6      	b.n	10280 <_vfiprintf_r+0x400>
   100f2:	ee18 1a10 	vmov	r1, s16
   100f6:	4658      	mov	r0, fp
   100f8:	ee18 5a10 	vmov	r5, s16
   100fc:	f001 f840 	bl	11180 <__swsetup_r>
   10100:	2800      	cmp	r0, #0
   10102:	f040 8652 	bne.w	10daa <_vfiprintf_r+0xf2a>
   10106:	89aa      	ldrh	r2, [r5, #12]
   10108:	f002 031a 	and.w	r3, r2, #26
   1010c:	2b0a      	cmp	r3, #10
   1010e:	f47f aef6 	bne.w	fefe <_vfiprintf_r+0x7e>
   10112:	ee18 1a10 	vmov	r1, s16
   10116:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   1011a:	2b00      	cmp	r3, #0
   1011c:	f6ff aeef 	blt.w	fefe <_vfiprintf_r+0x7e>
   10120:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   10122:	07db      	lsls	r3, r3, #31
   10124:	d402      	bmi.n	1012c <_vfiprintf_r+0x2ac>
   10126:	0597      	lsls	r7, r2, #22
   10128:	f140 8612 	bpl.w	10d50 <_vfiprintf_r+0xed0>
   1012c:	ee18 1a10 	vmov	r1, s16
   10130:	4623      	mov	r3, r4
   10132:	4632      	mov	r2, r6
   10134:	4658      	mov	r0, fp
   10136:	f000 fe69 	bl	10e0c <__sbprintf>
   1013a:	9005      	str	r0, [sp, #20]
   1013c:	9805      	ldr	r0, [sp, #20]
   1013e:	b045      	add	sp, #276	; 0x114
   10140:	ecbd 8b02 	vpop	{d8}
   10144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10148:	f046 0610 	orr.w	r6, r6, #16
   1014c:	f016 0220 	ands.w	r2, r6, #32
   10150:	f000 8136 	beq.w	103c0 <_vfiprintf_r+0x540>
   10154:	9b07      	ldr	r3, [sp, #28]
   10156:	3307      	adds	r3, #7
   10158:	f023 0307 	bic.w	r3, r3, #7
   1015c:	4619      	mov	r1, r3
   1015e:	685a      	ldr	r2, [r3, #4]
   10160:	f851 3b08 	ldr.w	r3, [r1], #8
   10164:	9107      	str	r1, [sp, #28]
   10166:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   1016a:	9103      	str	r1, [sp, #12]
   1016c:	2100      	movs	r1, #0
   1016e:	2000      	movs	r0, #0
   10170:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   10174:	1c78      	adds	r0, r7, #1
   10176:	f000 8210 	beq.w	1059a <_vfiprintf_r+0x71a>
   1017a:	9803      	ldr	r0, [sp, #12]
   1017c:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   10180:	ea53 0002 	orrs.w	r0, r3, r2
   10184:	f040 8208 	bne.w	10598 <_vfiprintf_r+0x718>
   10188:	2f00      	cmp	r7, #0
   1018a:	f040 8538 	bne.w	10bfe <_vfiprintf_r+0xd7e>
   1018e:	2900      	cmp	r1, #0
   10190:	f040 83d5 	bne.w	1093e <_vfiprintf_r+0xabe>
   10194:	9b03      	ldr	r3, [sp, #12]
   10196:	f013 0301 	ands.w	r3, r3, #1
   1019a:	9304      	str	r3, [sp, #16]
   1019c:	f000 8411 	beq.w	109c2 <_vfiprintf_r+0xb42>
   101a0:	2330      	movs	r3, #48	; 0x30
   101a2:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   101a6:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   101aa:	e792      	b.n	100d2 <_vfiprintf_r+0x252>
   101ac:	2208      	movs	r2, #8
   101ae:	2100      	movs	r1, #0
   101b0:	4650      	mov	r0, sl
   101b2:	f7fb fd91 	bl	bcd8 <memset>
   101b6:	2301      	movs	r3, #1
   101b8:	441c      	add	r4, r3
   101ba:	e6ad      	b.n	ff18 <_vfiprintf_r+0x98>
   101bc:	1fff133c 	.word	0x1fff133c
   101c0:	ebb4 0608 	subs.w	r6, r4, r8
   101c4:	4605      	mov	r5, r0
   101c6:	d01b      	beq.n	10200 <_vfiprintf_r+0x380>
   101c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   101ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   101cc:	3301      	adds	r3, #1
   101ce:	4432      	add	r2, r6
   101d0:	2b07      	cmp	r3, #7
   101d2:	e9c9 8600 	strd	r8, r6, [r9]
   101d6:	921a      	str	r2, [sp, #104]	; 0x68
   101d8:	9319      	str	r3, [sp, #100]	; 0x64
   101da:	dd1c      	ble.n	10216 <_vfiprintf_r+0x396>
   101dc:	2a00      	cmp	r2, #0
   101de:	f000 83a6 	beq.w	1092e <_vfiprintf_r+0xaae>
   101e2:	ee18 1a10 	vmov	r1, s16
   101e6:	aa18      	add	r2, sp, #96	; 0x60
   101e8:	4658      	mov	r0, fp
   101ea:	f7ff fe0d 	bl	fe08 <__sprint_r.part.0>
   101ee:	bb20      	cbnz	r0, 1023a <_vfiprintf_r+0x3ba>
   101f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   101f4:	9b05      	ldr	r3, [sp, #20]
   101f6:	4433      	add	r3, r6
   101f8:	9305      	str	r3, [sp, #20]
   101fa:	2d00      	cmp	r5, #0
   101fc:	f47f aea8 	bne.w	ff50 <_vfiprintf_r+0xd0>
   10200:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10202:	2b00      	cmp	r3, #0
   10204:	f040 85c1 	bne.w	10d8a <_vfiprintf_r+0xf0a>
   10208:	ee18 3a10 	vmov	r3, s16
   1020c:	2200      	movs	r2, #0
   1020e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   10212:	9219      	str	r2, [sp, #100]	; 0x64
   10214:	e015      	b.n	10242 <_vfiprintf_r+0x3c2>
   10216:	f109 0908 	add.w	r9, r9, #8
   1021a:	e7eb      	b.n	101f4 <_vfiprintf_r+0x374>
   1021c:	ee18 1a10 	vmov	r1, s16
   10220:	aa18      	add	r2, sp, #96	; 0x60
   10222:	4658      	mov	r0, fp
   10224:	f7ff fdf0 	bl	fe08 <__sprint_r.part.0>
   10228:	2800      	cmp	r0, #0
   1022a:	f000 80a6 	beq.w	1037a <_vfiprintf_r+0x4fa>
   1022e:	9b08      	ldr	r3, [sp, #32]
   10230:	b11b      	cbz	r3, 1023a <_vfiprintf_r+0x3ba>
   10232:	9908      	ldr	r1, [sp, #32]
   10234:	4658      	mov	r0, fp
   10236:	f7fb fff5 	bl	c224 <_free_r>
   1023a:	ee18 3a10 	vmov	r3, s16
   1023e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   10242:	ee18 2a10 	vmov	r2, s16
   10246:	6e52      	ldr	r2, [r2, #100]	; 0x64
   10248:	f012 0f01 	tst.w	r2, #1
   1024c:	b29a      	uxth	r2, r3
   1024e:	f000 80a0 	beq.w	10392 <_vfiprintf_r+0x512>
   10252:	0650      	lsls	r0, r2, #25
   10254:	f100 85b2 	bmi.w	10dbc <_vfiprintf_r+0xf3c>
   10258:	9805      	ldr	r0, [sp, #20]
   1025a:	b045      	add	sp, #276	; 0x114
   1025c:	ecbd 8b02 	vpop	{d8}
   10260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10264:	2900      	cmp	r1, #0
   10266:	d0cb      	beq.n	10200 <_vfiprintf_r+0x380>
   10268:	2300      	movs	r3, #0
   1026a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1026e:	2301      	movs	r3, #1
   10270:	e9cd 3303 	strd	r3, r3, [sp, #12]
   10274:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   10278:	ac2b      	add	r4, sp, #172	; 0xac
   1027a:	2300      	movs	r3, #0
   1027c:	9308      	str	r3, [sp, #32]
   1027e:	461f      	mov	r7, r3
   10280:	f016 0302 	ands.w	r3, r6, #2
   10284:	9309      	str	r3, [sp, #36]	; 0x24
   10286:	d002      	beq.n	1028e <_vfiprintf_r+0x40e>
   10288:	9b03      	ldr	r3, [sp, #12]
   1028a:	3302      	adds	r3, #2
   1028c:	9303      	str	r3, [sp, #12]
   1028e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   10292:	930a      	str	r3, [sp, #40]	; 0x28
   10294:	d105      	bne.n	102a2 <_vfiprintf_r+0x422>
   10296:	9b06      	ldr	r3, [sp, #24]
   10298:	9a03      	ldr	r2, [sp, #12]
   1029a:	1a9d      	subs	r5, r3, r2
   1029c:	2d00      	cmp	r5, #0
   1029e:	f300 827b 	bgt.w	10798 <_vfiprintf_r+0x918>
   102a2:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   102a6:	1c41      	adds	r1, r0, #1
   102a8:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   102ac:	b182      	cbz	r2, 102d0 <_vfiprintf_r+0x450>
   102ae:	2201      	movs	r2, #1
   102b0:	3301      	adds	r3, #1
   102b2:	f8c9 2004 	str.w	r2, [r9, #4]
   102b6:	2907      	cmp	r1, #7
   102b8:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   102bc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   102c0:	f8c9 2000 	str.w	r2, [r9]
   102c4:	f300 824a 	bgt.w	1075c <_vfiprintf_r+0x8dc>
   102c8:	4608      	mov	r0, r1
   102ca:	f109 0908 	add.w	r9, r9, #8
   102ce:	3101      	adds	r1, #1
   102d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   102d2:	b1e2      	cbz	r2, 1030e <_vfiprintf_r+0x48e>
   102d4:	aa11      	add	r2, sp, #68	; 0x44
   102d6:	3302      	adds	r3, #2
   102d8:	f8c9 2000 	str.w	r2, [r9]
   102dc:	2907      	cmp	r1, #7
   102de:	f04f 0202 	mov.w	r2, #2
   102e2:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   102e6:	f8c9 2004 	str.w	r2, [r9, #4]
   102ea:	f340 8250 	ble.w	1078e <_vfiprintf_r+0x90e>
   102ee:	2b00      	cmp	r3, #0
   102f0:	f000 8343 	beq.w	1097a <_vfiprintf_r+0xafa>
   102f4:	ee18 1a10 	vmov	r1, s16
   102f8:	aa18      	add	r2, sp, #96	; 0x60
   102fa:	4658      	mov	r0, fp
   102fc:	f7ff fd84 	bl	fe08 <__sprint_r.part.0>
   10300:	2800      	cmp	r0, #0
   10302:	d194      	bne.n	1022e <_vfiprintf_r+0x3ae>
   10304:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10308:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1030c:	1c41      	adds	r1, r0, #1
   1030e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10310:	2a80      	cmp	r2, #128	; 0x80
   10312:	f000 8184 	beq.w	1061e <_vfiprintf_r+0x79e>
   10316:	9a04      	ldr	r2, [sp, #16]
   10318:	1abd      	subs	r5, r7, r2
   1031a:	2d00      	cmp	r5, #0
   1031c:	f300 81d7 	bgt.w	106ce <_vfiprintf_r+0x84e>
   10320:	9a04      	ldr	r2, [sp, #16]
   10322:	f8c9 4000 	str.w	r4, [r9]
   10326:	4413      	add	r3, r2
   10328:	2907      	cmp	r1, #7
   1032a:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1032e:	f8c9 2004 	str.w	r2, [r9, #4]
   10332:	f340 816e 	ble.w	10612 <_vfiprintf_r+0x792>
   10336:	2b00      	cmp	r3, #0
   10338:	f000 8275 	beq.w	10826 <_vfiprintf_r+0x9a6>
   1033c:	ee18 1a10 	vmov	r1, s16
   10340:	aa18      	add	r2, sp, #96	; 0x60
   10342:	4658      	mov	r0, fp
   10344:	f7ff fd60 	bl	fe08 <__sprint_r.part.0>
   10348:	2800      	cmp	r0, #0
   1034a:	f47f af70 	bne.w	1022e <_vfiprintf_r+0x3ae>
   1034e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10350:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10354:	0775      	lsls	r5, r6, #29
   10356:	d505      	bpl.n	10364 <_vfiprintf_r+0x4e4>
   10358:	9a06      	ldr	r2, [sp, #24]
   1035a:	9903      	ldr	r1, [sp, #12]
   1035c:	1a54      	subs	r4, r2, r1
   1035e:	2c00      	cmp	r4, #0
   10360:	f300 826b 	bgt.w	1083a <_vfiprintf_r+0x9ba>
   10364:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   10368:	9803      	ldr	r0, [sp, #12]
   1036a:	4281      	cmp	r1, r0
   1036c:	bfac      	ite	ge
   1036e:	1852      	addge	r2, r2, r1
   10370:	1812      	addlt	r2, r2, r0
   10372:	9205      	str	r2, [sp, #20]
   10374:	2b00      	cmp	r3, #0
   10376:	f47f af51 	bne.w	1021c <_vfiprintf_r+0x39c>
   1037a:	9908      	ldr	r1, [sp, #32]
   1037c:	2300      	movs	r3, #0
   1037e:	9319      	str	r3, [sp, #100]	; 0x64
   10380:	2900      	cmp	r1, #0
   10382:	f000 8149 	beq.w	10618 <_vfiprintf_r+0x798>
   10386:	4658      	mov	r0, fp
   10388:	f7fb ff4c 	bl	c224 <_free_r>
   1038c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10390:	e5c1      	b.n	ff16 <_vfiprintf_r+0x96>
   10392:	059c      	lsls	r4, r3, #22
   10394:	f53f af5d 	bmi.w	10252 <_vfiprintf_r+0x3d2>
   10398:	ee18 4a10 	vmov	r4, s16
   1039c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1039e:	f7fb fdbb 	bl	bf18 <__retarget_lock_release_recursive>
   103a2:	89a2      	ldrh	r2, [r4, #12]
   103a4:	e755      	b.n	10252 <_vfiprintf_r+0x3d2>
   103a6:	06f0      	lsls	r0, r6, #27
   103a8:	9a07      	ldr	r2, [sp, #28]
   103aa:	f100 831f 	bmi.w	109ec <_vfiprintf_r+0xb6c>
   103ae:	0671      	lsls	r1, r6, #25
   103b0:	f140 8319 	bpl.w	109e6 <_vfiprintf_r+0xb66>
   103b4:	f932 3b04 	ldrsh.w	r3, [r2], #4
   103b8:	9207      	str	r2, [sp, #28]
   103ba:	17da      	asrs	r2, r3, #31
   103bc:	4611      	mov	r1, r2
   103be:	e66e      	b.n	1009e <_vfiprintf_r+0x21e>
   103c0:	f016 0310 	ands.w	r3, r6, #16
   103c4:	9907      	ldr	r1, [sp, #28]
   103c6:	f040 8309 	bne.w	109dc <_vfiprintf_r+0xb5c>
   103ca:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   103ce:	f000 8301 	beq.w	109d4 <_vfiprintf_r+0xb54>
   103d2:	461a      	mov	r2, r3
   103d4:	f851 3b04 	ldr.w	r3, [r1], #4
   103d8:	9107      	str	r1, [sp, #28]
   103da:	b29b      	uxth	r3, r3
   103dc:	e6c3      	b.n	10166 <_vfiprintf_r+0x2e6>
   103de:	9b07      	ldr	r3, [sp, #28]
   103e0:	461a      	mov	r2, r3
   103e2:	2300      	movs	r3, #0
   103e4:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   103e8:	4613      	mov	r3, r2
   103ea:	f853 4b04 	ldr.w	r4, [r3], #4
   103ee:	9303      	str	r3, [sp, #12]
   103f0:	2c00      	cmp	r4, #0
   103f2:	f000 8412 	beq.w	10c1a <_vfiprintf_r+0xd9a>
   103f6:	2953      	cmp	r1, #83	; 0x53
   103f8:	f000 8365 	beq.w	10ac6 <_vfiprintf_r+0xc46>
   103fc:	f016 0510 	ands.w	r5, r6, #16
   10400:	f040 8361 	bne.w	10ac6 <_vfiprintf_r+0xc46>
   10404:	1c7b      	adds	r3, r7, #1
   10406:	f000 84b3 	beq.w	10d70 <_vfiprintf_r+0xef0>
   1040a:	463a      	mov	r2, r7
   1040c:	4629      	mov	r1, r5
   1040e:	4620      	mov	r0, r4
   10410:	f7fe fb1e 	bl	ea50 <memchr>
   10414:	9008      	str	r0, [sp, #32]
   10416:	2800      	cmp	r0, #0
   10418:	f000 849f 	beq.w	10d5a <_vfiprintf_r+0xeda>
   1041c:	1b03      	subs	r3, r0, r4
   1041e:	9a03      	ldr	r2, [sp, #12]
   10420:	9304      	str	r3, [sp, #16]
   10422:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10426:	462f      	mov	r7, r5
   10428:	9207      	str	r2, [sp, #28]
   1042a:	9303      	str	r3, [sp, #12]
   1042c:	9508      	str	r5, [sp, #32]
   1042e:	e657      	b.n	100e0 <_vfiprintf_r+0x260>
   10430:	2943      	cmp	r1, #67	; 0x43
   10432:	d002      	beq.n	1043a <_vfiprintf_r+0x5ba>
   10434:	06f5      	lsls	r5, r6, #27
   10436:	f140 832d 	bpl.w	10a94 <_vfiprintf_r+0xc14>
   1043a:	9d07      	ldr	r5, [sp, #28]
   1043c:	2208      	movs	r2, #8
   1043e:	2100      	movs	r1, #0
   10440:	a816      	add	r0, sp, #88	; 0x58
   10442:	ac2b      	add	r4, sp, #172	; 0xac
   10444:	f7fb fc48 	bl	bcd8 <memset>
   10448:	ab16      	add	r3, sp, #88	; 0x58
   1044a:	f855 2b04 	ldr.w	r2, [r5], #4
   1044e:	4621      	mov	r1, r4
   10450:	4658      	mov	r0, fp
   10452:	f7ff fc13 	bl	fc7c <_wcrtomb_r>
   10456:	4603      	mov	r3, r0
   10458:	3301      	adds	r3, #1
   1045a:	9004      	str	r0, [sp, #16]
   1045c:	f000 84b3 	beq.w	10dc6 <_vfiprintf_r+0xf46>
   10460:	9b04      	ldr	r3, [sp, #16]
   10462:	9507      	str	r5, [sp, #28]
   10464:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   10468:	9303      	str	r3, [sp, #12]
   1046a:	2300      	movs	r3, #0
   1046c:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10470:	e703      	b.n	1027a <_vfiprintf_r+0x3fa>
   10472:	9b07      	ldr	r3, [sp, #28]
   10474:	f853 2b04 	ldr.w	r2, [r3], #4
   10478:	9206      	str	r2, [sp, #24]
   1047a:	2a00      	cmp	r2, #0
   1047c:	f280 829c 	bge.w	109b8 <_vfiprintf_r+0xb38>
   10480:	9a06      	ldr	r2, [sp, #24]
   10482:	4252      	negs	r2, r2
   10484:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10488:	f898 1000 	ldrb.w	r1, [r8]
   1048c:	f046 0604 	orr.w	r6, r6, #4
   10490:	e569      	b.n	ff66 <_vfiprintf_r+0xe6>
   10492:	f898 1000 	ldrb.w	r1, [r8]
   10496:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   1049a:	e564      	b.n	ff66 <_vfiprintf_r+0xe6>
   1049c:	f898 1000 	ldrb.w	r1, [r8]
   104a0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   104a4:	e55f      	b.n	ff66 <_vfiprintf_r+0xe6>
   104a6:	4642      	mov	r2, r8
   104a8:	f812 1b01 	ldrb.w	r1, [r2], #1
   104ac:	292a      	cmp	r1, #42	; 0x2a
   104ae:	f000 8496 	beq.w	10dde <_vfiprintf_r+0xf5e>
   104b2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   104b6:	2b09      	cmp	r3, #9
   104b8:	4690      	mov	r8, r2
   104ba:	f04f 0700 	mov.w	r7, #0
   104be:	f63f ad54 	bhi.w	ff6a <_vfiprintf_r+0xea>
   104c2:	f818 1b01 	ldrb.w	r1, [r8], #1
   104c6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   104ca:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   104ce:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   104d2:	2b09      	cmp	r3, #9
   104d4:	d9f5      	bls.n	104c2 <_vfiprintf_r+0x642>
   104d6:	e548      	b.n	ff6a <_vfiprintf_r+0xea>
   104d8:	f898 1000 	ldrb.w	r1, [r8]
   104dc:	f046 0601 	orr.w	r6, r6, #1
   104e0:	e541      	b.n	ff66 <_vfiprintf_r+0xe6>
   104e2:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   104e6:	2b00      	cmp	r3, #0
   104e8:	f47f adc2 	bne.w	10070 <_vfiprintf_r+0x1f0>
   104ec:	2320      	movs	r3, #32
   104ee:	f898 1000 	ldrb.w	r1, [r8]
   104f2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   104f6:	e536      	b.n	ff66 <_vfiprintf_r+0xe6>
   104f8:	f898 1000 	ldrb.w	r1, [r8]
   104fc:	296c      	cmp	r1, #108	; 0x6c
   104fe:	bf03      	ittte	eq
   10500:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   10504:	f046 0620 	orreq.w	r6, r6, #32
   10508:	f108 0801 	addeq.w	r8, r8, #1
   1050c:	f046 0610 	orrne.w	r6, r6, #16
   10510:	e529      	b.n	ff66 <_vfiprintf_r+0xe6>
   10512:	f898 1000 	ldrb.w	r1, [r8]
   10516:	2968      	cmp	r1, #104	; 0x68
   10518:	bf03      	ittte	eq
   1051a:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   1051e:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   10522:	f108 0801 	addeq.w	r8, r8, #1
   10526:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   1052a:	e51c      	b.n	ff66 <_vfiprintf_r+0xe6>
   1052c:	f046 0310 	orr.w	r3, r6, #16
   10530:	9303      	str	r3, [sp, #12]
   10532:	9b03      	ldr	r3, [sp, #12]
   10534:	f013 0220 	ands.w	r2, r3, #32
   10538:	f000 8206 	beq.w	10948 <_vfiprintf_r+0xac8>
   1053c:	9b07      	ldr	r3, [sp, #28]
   1053e:	3307      	adds	r3, #7
   10540:	f023 0307 	bic.w	r3, r3, #7
   10544:	4619      	mov	r1, r3
   10546:	685a      	ldr	r2, [r3, #4]
   10548:	f851 3b08 	ldr.w	r3, [r1], #8
   1054c:	9107      	str	r1, [sp, #28]
   1054e:	2101      	movs	r1, #1
   10550:	e60d      	b.n	1016e <_vfiprintf_r+0x2ee>
   10552:	9a07      	ldr	r2, [sp, #28]
   10554:	f046 0302 	orr.w	r3, r6, #2
   10558:	9303      	str	r3, [sp, #12]
   1055a:	f852 3b04 	ldr.w	r3, [r2], #4
   1055e:	9207      	str	r2, [sp, #28]
   10560:	f647 0230 	movw	r2, #30768	; 0x7830
   10564:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   10568:	4ab8      	ldr	r2, [pc, #736]	; (1084c <_vfiprintf_r+0x9cc>)
   1056a:	920c      	str	r2, [sp, #48]	; 0x30
   1056c:	2102      	movs	r1, #2
   1056e:	2200      	movs	r2, #0
   10570:	e5fd      	b.n	1016e <_vfiprintf_r+0x2ee>
   10572:	06b7      	lsls	r7, r6, #26
   10574:	f100 8248 	bmi.w	10a08 <_vfiprintf_r+0xb88>
   10578:	06f5      	lsls	r5, r6, #27
   1057a:	f100 8346 	bmi.w	10c0a <_vfiprintf_r+0xd8a>
   1057e:	0674      	lsls	r4, r6, #25
   10580:	f100 83d5 	bmi.w	10d2e <_vfiprintf_r+0xeae>
   10584:	05b0      	lsls	r0, r6, #22
   10586:	f140 8340 	bpl.w	10c0a <_vfiprintf_r+0xd8a>
   1058a:	9b07      	ldr	r3, [sp, #28]
   1058c:	9905      	ldr	r1, [sp, #20]
   1058e:	f853 2b04 	ldr.w	r2, [r3], #4
   10592:	9307      	str	r3, [sp, #28]
   10594:	7011      	strb	r1, [r2, #0]
   10596:	e4be      	b.n	ff16 <_vfiprintf_r+0x96>
   10598:	9603      	str	r6, [sp, #12]
   1059a:	2901      	cmp	r1, #1
   1059c:	f43f ad8c 	beq.w	100b8 <_vfiprintf_r+0x238>
   105a0:	2902      	cmp	r1, #2
   105a2:	ac44      	add	r4, sp, #272	; 0x110
   105a4:	d111      	bne.n	105ca <_vfiprintf_r+0x74a>
   105a6:	980c      	ldr	r0, [sp, #48]	; 0x30
   105a8:	f003 010f 	and.w	r1, r3, #15
   105ac:	091b      	lsrs	r3, r3, #4
   105ae:	5c41      	ldrb	r1, [r0, r1]
   105b0:	f804 1d01 	strb.w	r1, [r4, #-1]!
   105b4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   105b8:	0912      	lsrs	r2, r2, #4
   105ba:	ea53 0102 	orrs.w	r1, r3, r2
   105be:	d1f3      	bne.n	105a8 <_vfiprintf_r+0x728>
   105c0:	9e03      	ldr	r6, [sp, #12]
   105c2:	ab44      	add	r3, sp, #272	; 0x110
   105c4:	1b1b      	subs	r3, r3, r4
   105c6:	9304      	str	r3, [sp, #16]
   105c8:	e583      	b.n	100d2 <_vfiprintf_r+0x252>
   105ca:	f003 0107 	and.w	r1, r3, #7
   105ce:	08db      	lsrs	r3, r3, #3
   105d0:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   105d4:	08d2      	lsrs	r2, r2, #3
   105d6:	3130      	adds	r1, #48	; 0x30
   105d8:	ea53 0502 	orrs.w	r5, r3, r2
   105dc:	4620      	mov	r0, r4
   105de:	f804 1d01 	strb.w	r1, [r4, #-1]!
   105e2:	d1f2      	bne.n	105ca <_vfiprintf_r+0x74a>
   105e4:	9e03      	ldr	r6, [sp, #12]
   105e6:	07f3      	lsls	r3, r6, #31
   105e8:	d5eb      	bpl.n	105c2 <_vfiprintf_r+0x742>
   105ea:	2930      	cmp	r1, #48	; 0x30
   105ec:	d0e8      	beq.n	105c0 <_vfiprintf_r+0x740>
   105ee:	2330      	movs	r3, #48	; 0x30
   105f0:	3802      	subs	r0, #2
   105f2:	f804 3c01 	strb.w	r3, [r4, #-1]
   105f6:	ab44      	add	r3, sp, #272	; 0x110
   105f8:	1a1b      	subs	r3, r3, r0
   105fa:	9e03      	ldr	r6, [sp, #12]
   105fc:	9304      	str	r3, [sp, #16]
   105fe:	4604      	mov	r4, r0
   10600:	e567      	b.n	100d2 <_vfiprintf_r+0x252>
   10602:	9b04      	ldr	r3, [sp, #16]
   10604:	941b      	str	r4, [sp, #108]	; 0x6c
   10606:	2201      	movs	r2, #1
   10608:	931c      	str	r3, [sp, #112]	; 0x70
   1060a:	931a      	str	r3, [sp, #104]	; 0x68
   1060c:	9219      	str	r2, [sp, #100]	; 0x64
   1060e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10612:	f109 0908 	add.w	r9, r9, #8
   10616:	e69d      	b.n	10354 <_vfiprintf_r+0x4d4>
   10618:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1061c:	e47b      	b.n	ff16 <_vfiprintf_r+0x96>
   1061e:	9a06      	ldr	r2, [sp, #24]
   10620:	9d03      	ldr	r5, [sp, #12]
   10622:	1b55      	subs	r5, r2, r5
   10624:	2d00      	cmp	r5, #0
   10626:	f77f ae76 	ble.w	10316 <_vfiprintf_r+0x496>
   1062a:	2d10      	cmp	r5, #16
   1062c:	f340 83bb 	ble.w	10da6 <_vfiprintf_r+0xf26>
   10630:	9409      	str	r4, [sp, #36]	; 0x24
   10632:	ee18 4a10 	vmov	r4, s16
   10636:	e007      	b.n	10648 <_vfiprintf_r+0x7c8>
   10638:	f100 0c02 	add.w	ip, r0, #2
   1063c:	f109 0908 	add.w	r9, r9, #8
   10640:	4610      	mov	r0, r2
   10642:	3d10      	subs	r5, #16
   10644:	2d10      	cmp	r5, #16
   10646:	dd1e      	ble.n	10686 <_vfiprintf_r+0x806>
   10648:	4981      	ldr	r1, [pc, #516]	; (10850 <_vfiprintf_r+0x9d0>)
   1064a:	f8c9 1000 	str.w	r1, [r9]
   1064e:	1c42      	adds	r2, r0, #1
   10650:	3310      	adds	r3, #16
   10652:	2110      	movs	r1, #16
   10654:	2a07      	cmp	r2, #7
   10656:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1065a:	f8c9 1004 	str.w	r1, [r9, #4]
   1065e:	ddeb      	ble.n	10638 <_vfiprintf_r+0x7b8>
   10660:	aa18      	add	r2, sp, #96	; 0x60
   10662:	2b00      	cmp	r3, #0
   10664:	d074      	beq.n	10750 <_vfiprintf_r+0x8d0>
   10666:	4621      	mov	r1, r4
   10668:	4658      	mov	r0, fp
   1066a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1066e:	f7ff fbcb 	bl	fe08 <__sprint_r.part.0>
   10672:	2800      	cmp	r0, #0
   10674:	f47f addb 	bne.w	1022e <_vfiprintf_r+0x3ae>
   10678:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1067c:	3d10      	subs	r5, #16
   1067e:	2d10      	cmp	r5, #16
   10680:	f100 0c01 	add.w	ip, r0, #1
   10684:	dce0      	bgt.n	10648 <_vfiprintf_r+0x7c8>
   10686:	9c09      	ldr	r4, [sp, #36]	; 0x24
   10688:	4a71      	ldr	r2, [pc, #452]	; (10850 <_vfiprintf_r+0x9d0>)
   1068a:	f8c9 5004 	str.w	r5, [r9, #4]
   1068e:	442b      	add	r3, r5
   10690:	f1bc 0f07 	cmp.w	ip, #7
   10694:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   10698:	f8c9 2000 	str.w	r2, [r9]
   1069c:	f340 8194 	ble.w	109c8 <_vfiprintf_r+0xb48>
   106a0:	2b00      	cmp	r3, #0
   106a2:	f000 831f 	beq.w	10ce4 <_vfiprintf_r+0xe64>
   106a6:	ee18 1a10 	vmov	r1, s16
   106aa:	aa18      	add	r2, sp, #96	; 0x60
   106ac:	4658      	mov	r0, fp
   106ae:	f7ff fbab 	bl	fe08 <__sprint_r.part.0>
   106b2:	2800      	cmp	r0, #0
   106b4:	f47f adbb 	bne.w	1022e <_vfiprintf_r+0x3ae>
   106b8:	9a04      	ldr	r2, [sp, #16]
   106ba:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   106be:	1abd      	subs	r5, r7, r2
   106c0:	2d00      	cmp	r5, #0
   106c2:	f100 0101 	add.w	r1, r0, #1
   106c6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   106ca:	f77f ae29 	ble.w	10320 <_vfiprintf_r+0x4a0>
   106ce:	2d10      	cmp	r5, #16
   106d0:	dd29      	ble.n	10726 <_vfiprintf_r+0x8a6>
   106d2:	9409      	str	r4, [sp, #36]	; 0x24
   106d4:	2710      	movs	r7, #16
   106d6:	ee18 4a10 	vmov	r4, s16
   106da:	e007      	b.n	106ec <_vfiprintf_r+0x86c>
   106dc:	f100 0c02 	add.w	ip, r0, #2
   106e0:	f109 0908 	add.w	r9, r9, #8
   106e4:	4610      	mov	r0, r2
   106e6:	3d10      	subs	r5, #16
   106e8:	2d10      	cmp	r5, #16
   106ea:	dd1a      	ble.n	10722 <_vfiprintf_r+0x8a2>
   106ec:	1c42      	adds	r2, r0, #1
   106ee:	4958      	ldr	r1, [pc, #352]	; (10850 <_vfiprintf_r+0x9d0>)
   106f0:	3310      	adds	r3, #16
   106f2:	2a07      	cmp	r2, #7
   106f4:	e9c9 1700 	strd	r1, r7, [r9]
   106f8:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   106fc:	ddee      	ble.n	106dc <_vfiprintf_r+0x85c>
   106fe:	aa18      	add	r2, sp, #96	; 0x60
   10700:	b303      	cbz	r3, 10744 <_vfiprintf_r+0x8c4>
   10702:	4621      	mov	r1, r4
   10704:	4658      	mov	r0, fp
   10706:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1070a:	f7ff fb7d 	bl	fe08 <__sprint_r.part.0>
   1070e:	2800      	cmp	r0, #0
   10710:	f47f ad8d 	bne.w	1022e <_vfiprintf_r+0x3ae>
   10714:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10718:	3d10      	subs	r5, #16
   1071a:	2d10      	cmp	r5, #16
   1071c:	f100 0c01 	add.w	ip, r0, #1
   10720:	dce4      	bgt.n	106ec <_vfiprintf_r+0x86c>
   10722:	9c09      	ldr	r4, [sp, #36]	; 0x24
   10724:	4661      	mov	r1, ip
   10726:	4a4a      	ldr	r2, [pc, #296]	; (10850 <_vfiprintf_r+0x9d0>)
   10728:	f8c9 5004 	str.w	r5, [r9, #4]
   1072c:	442b      	add	r3, r5
   1072e:	2907      	cmp	r1, #7
   10730:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   10734:	f8c9 2000 	str.w	r2, [r9]
   10738:	f300 80e7 	bgt.w	1090a <_vfiprintf_r+0xa8a>
   1073c:	f109 0908 	add.w	r9, r9, #8
   10740:	3101      	adds	r1, #1
   10742:	e5ed      	b.n	10320 <_vfiprintf_r+0x4a0>
   10744:	f04f 0c01 	mov.w	ip, #1
   10748:	4618      	mov	r0, r3
   1074a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1074e:	e7ca      	b.n	106e6 <_vfiprintf_r+0x866>
   10750:	f04f 0c01 	mov.w	ip, #1
   10754:	4618      	mov	r0, r3
   10756:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1075a:	e772      	b.n	10642 <_vfiprintf_r+0x7c2>
   1075c:	2b00      	cmp	r3, #0
   1075e:	f000 8104 	beq.w	1096a <_vfiprintf_r+0xaea>
   10762:	ee18 1a10 	vmov	r1, s16
   10766:	aa18      	add	r2, sp, #96	; 0x60
   10768:	4658      	mov	r0, fp
   1076a:	f7ff fb4d 	bl	fe08 <__sprint_r.part.0>
   1076e:	2800      	cmp	r0, #0
   10770:	f47f ad5d 	bne.w	1022e <_vfiprintf_r+0x3ae>
   10774:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   10778:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1077c:	1c41      	adds	r1, r0, #1
   1077e:	e5a7      	b.n	102d0 <_vfiprintf_r+0x450>
   10780:	2302      	movs	r3, #2
   10782:	aa11      	add	r2, sp, #68	; 0x44
   10784:	931c      	str	r3, [sp, #112]	; 0x70
   10786:	921b      	str	r2, [sp, #108]	; 0x6c
   10788:	2101      	movs	r1, #1
   1078a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1078e:	4608      	mov	r0, r1
   10790:	f109 0908 	add.w	r9, r9, #8
   10794:	1c41      	adds	r1, r0, #1
   10796:	e5ba      	b.n	1030e <_vfiprintf_r+0x48e>
   10798:	2d10      	cmp	r5, #16
   1079a:	f340 82e5 	ble.w	10d68 <_vfiprintf_r+0xee8>
   1079e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   107a2:	940f      	str	r4, [sp, #60]	; 0x3c
   107a4:	4608      	mov	r0, r1
   107a6:	ee18 4a10 	vmov	r4, s16
   107aa:	e007      	b.n	107bc <_vfiprintf_r+0x93c>
   107ac:	f100 0c02 	add.w	ip, r0, #2
   107b0:	f109 0908 	add.w	r9, r9, #8
   107b4:	4610      	mov	r0, r2
   107b6:	3d10      	subs	r5, #16
   107b8:	2d10      	cmp	r5, #16
   107ba:	dd1d      	ble.n	107f8 <_vfiprintf_r+0x978>
   107bc:	4925      	ldr	r1, [pc, #148]	; (10854 <_vfiprintf_r+0x9d4>)
   107be:	f8c9 1000 	str.w	r1, [r9]
   107c2:	1c42      	adds	r2, r0, #1
   107c4:	3310      	adds	r3, #16
   107c6:	2110      	movs	r1, #16
   107c8:	2a07      	cmp	r2, #7
   107ca:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   107ce:	f8c9 1004 	str.w	r1, [r9, #4]
   107d2:	ddeb      	ble.n	107ac <_vfiprintf_r+0x92c>
   107d4:	aa18      	add	r2, sp, #96	; 0x60
   107d6:	b303      	cbz	r3, 1081a <_vfiprintf_r+0x99a>
   107d8:	4621      	mov	r1, r4
   107da:	4658      	mov	r0, fp
   107dc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   107e0:	f7ff fb12 	bl	fe08 <__sprint_r.part.0>
   107e4:	2800      	cmp	r0, #0
   107e6:	f47f ad22 	bne.w	1022e <_vfiprintf_r+0x3ae>
   107ea:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   107ee:	3d10      	subs	r5, #16
   107f0:	2d10      	cmp	r5, #16
   107f2:	f100 0c01 	add.w	ip, r0, #1
   107f6:	dce1      	bgt.n	107bc <_vfiprintf_r+0x93c>
   107f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   107fa:	4660      	mov	r0, ip
   107fc:	4a15      	ldr	r2, [pc, #84]	; (10854 <_vfiprintf_r+0x9d4>)
   107fe:	f8c9 5004 	str.w	r5, [r9, #4]
   10802:	442b      	add	r3, r5
   10804:	2807      	cmp	r0, #7
   10806:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1080a:	f8c9 2000 	str.w	r2, [r9]
   1080e:	f300 80c1 	bgt.w	10994 <_vfiprintf_r+0xb14>
   10812:	f109 0908 	add.w	r9, r9, #8
   10816:	1c41      	adds	r1, r0, #1
   10818:	e546      	b.n	102a8 <_vfiprintf_r+0x428>
   1081a:	4618      	mov	r0, r3
   1081c:	f04f 0c01 	mov.w	ip, #1
   10820:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10824:	e7c7      	b.n	107b6 <_vfiprintf_r+0x936>
   10826:	0776      	lsls	r6, r6, #29
   10828:	9319      	str	r3, [sp, #100]	; 0x64
   1082a:	d553      	bpl.n	108d4 <_vfiprintf_r+0xa54>
   1082c:	9a06      	ldr	r2, [sp, #24]
   1082e:	9903      	ldr	r1, [sp, #12]
   10830:	1a54      	subs	r4, r2, r1
   10832:	2c00      	cmp	r4, #0
   10834:	dd4e      	ble.n	108d4 <_vfiprintf_r+0xa54>
   10836:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1083a:	2c10      	cmp	r4, #16
   1083c:	f340 82b0 	ble.w	10da0 <_vfiprintf_r+0xf20>
   10840:	9919      	ldr	r1, [sp, #100]	; 0x64
   10842:	ee18 6a10 	vmov	r6, s16
   10846:	2510      	movs	r5, #16
   10848:	e00d      	b.n	10866 <_vfiprintf_r+0x9e6>
   1084a:	bf00      	nop
   1084c:	0001254c 	.word	0x0001254c
   10850:	0001265c 	.word	0x0001265c
   10854:	0001264c 	.word	0x0001264c
   10858:	1c88      	adds	r0, r1, #2
   1085a:	f109 0908 	add.w	r9, r9, #8
   1085e:	4611      	mov	r1, r2
   10860:	3c10      	subs	r4, #16
   10862:	2c10      	cmp	r4, #16
   10864:	dd1a      	ble.n	1089c <_vfiprintf_r+0xa1c>
   10866:	1c4a      	adds	r2, r1, #1
   10868:	48b3      	ldr	r0, [pc, #716]	; (10b38 <_vfiprintf_r+0xcb8>)
   1086a:	3310      	adds	r3, #16
   1086c:	2a07      	cmp	r2, #7
   1086e:	e9c9 0500 	strd	r0, r5, [r9]
   10872:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   10876:	ddef      	ble.n	10858 <_vfiprintf_r+0x9d8>
   10878:	aa18      	add	r2, sp, #96	; 0x60
   1087a:	b333      	cbz	r3, 108ca <_vfiprintf_r+0xa4a>
   1087c:	4631      	mov	r1, r6
   1087e:	4658      	mov	r0, fp
   10880:	f7ff fac2 	bl	fe08 <__sprint_r.part.0>
   10884:	2800      	cmp	r0, #0
   10886:	f47f acd2 	bne.w	1022e <_vfiprintf_r+0x3ae>
   1088a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   1088e:	3c10      	subs	r4, #16
   10890:	2c10      	cmp	r4, #16
   10892:	f101 0001 	add.w	r0, r1, #1
   10896:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1089a:	dce4      	bgt.n	10866 <_vfiprintf_r+0x9e6>
   1089c:	4aa6      	ldr	r2, [pc, #664]	; (10b38 <_vfiprintf_r+0xcb8>)
   1089e:	f8c9 4004 	str.w	r4, [r9, #4]
   108a2:	4423      	add	r3, r4
   108a4:	2807      	cmp	r0, #7
   108a6:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   108aa:	f8c9 2000 	str.w	r2, [r9]
   108ae:	f77f ad59 	ble.w	10364 <_vfiprintf_r+0x4e4>
   108b2:	b17b      	cbz	r3, 108d4 <_vfiprintf_r+0xa54>
   108b4:	ee18 1a10 	vmov	r1, s16
   108b8:	aa18      	add	r2, sp, #96	; 0x60
   108ba:	4658      	mov	r0, fp
   108bc:	f7ff faa4 	bl	fe08 <__sprint_r.part.0>
   108c0:	2800      	cmp	r0, #0
   108c2:	f47f acb4 	bne.w	1022e <_vfiprintf_r+0x3ae>
   108c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   108c8:	e54c      	b.n	10364 <_vfiprintf_r+0x4e4>
   108ca:	2001      	movs	r0, #1
   108cc:	4619      	mov	r1, r3
   108ce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   108d2:	e7c5      	b.n	10860 <_vfiprintf_r+0x9e0>
   108d4:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   108d8:	9903      	ldr	r1, [sp, #12]
   108da:	428a      	cmp	r2, r1
   108dc:	bfac      	ite	ge
   108de:	189b      	addge	r3, r3, r2
   108e0:	185b      	addlt	r3, r3, r1
   108e2:	9305      	str	r3, [sp, #20]
   108e4:	e549      	b.n	1037a <_vfiprintf_r+0x4fa>
   108e6:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   108ea:	058f      	lsls	r7, r1, #22
   108ec:	ee18 3a10 	vmov	r3, s16
   108f0:	b28a      	uxth	r2, r1
   108f2:	f53f aae8 	bmi.w	fec6 <_vfiprintf_r+0x46>
   108f6:	ee18 5a10 	vmov	r5, s16
   108fa:	6d98      	ldr	r0, [r3, #88]	; 0x58
   108fc:	f7fb fb0a 	bl	bf14 <__retarget_lock_acquire_recursive>
   10900:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   10904:	b28a      	uxth	r2, r1
   10906:	f7ff bade 	b.w	fec6 <_vfiprintf_r+0x46>
   1090a:	2b00      	cmp	r3, #0
   1090c:	f43f ae79 	beq.w	10602 <_vfiprintf_r+0x782>
   10910:	ee18 1a10 	vmov	r1, s16
   10914:	aa18      	add	r2, sp, #96	; 0x60
   10916:	4658      	mov	r0, fp
   10918:	f7ff fa76 	bl	fe08 <__sprint_r.part.0>
   1091c:	2800      	cmp	r0, #0
   1091e:	f47f ac86 	bne.w	1022e <_vfiprintf_r+0x3ae>
   10922:	9919      	ldr	r1, [sp, #100]	; 0x64
   10924:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10926:	3101      	adds	r1, #1
   10928:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1092c:	e4f8      	b.n	10320 <_vfiprintf_r+0x4a0>
   1092e:	9219      	str	r2, [sp, #100]	; 0x64
   10930:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10934:	e45e      	b.n	101f4 <_vfiprintf_r+0x374>
   10936:	2f00      	cmp	r7, #0
   10938:	f47f abc3 	bne.w	100c2 <_vfiprintf_r+0x242>
   1093c:	9e03      	ldr	r6, [sp, #12]
   1093e:	2700      	movs	r7, #0
   10940:	9704      	str	r7, [sp, #16]
   10942:	ac44      	add	r4, sp, #272	; 0x110
   10944:	f7ff bbc5 	b.w	100d2 <_vfiprintf_r+0x252>
   10948:	9b03      	ldr	r3, [sp, #12]
   1094a:	f013 0310 	ands.w	r3, r3, #16
   1094e:	d154      	bne.n	109fa <_vfiprintf_r+0xb7a>
   10950:	9a03      	ldr	r2, [sp, #12]
   10952:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   10956:	f000 816b 	beq.w	10c30 <_vfiprintf_r+0xdb0>
   1095a:	9907      	ldr	r1, [sp, #28]
   1095c:	461a      	mov	r2, r3
   1095e:	f851 3b04 	ldr.w	r3, [r1], #4
   10962:	9107      	str	r1, [sp, #28]
   10964:	b29b      	uxth	r3, r3
   10966:	2101      	movs	r1, #1
   10968:	e401      	b.n	1016e <_vfiprintf_r+0x2ee>
   1096a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1096c:	2a00      	cmp	r2, #0
   1096e:	d164      	bne.n	10a3a <_vfiprintf_r+0xbba>
   10970:	4618      	mov	r0, r3
   10972:	2101      	movs	r1, #1
   10974:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10978:	e4c9      	b.n	1030e <_vfiprintf_r+0x48e>
   1097a:	2101      	movs	r1, #1
   1097c:	4618      	mov	r0, r3
   1097e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10982:	e4c4      	b.n	1030e <_vfiprintf_r+0x48e>
   10984:	425b      	negs	r3, r3
   10986:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   1098a:	9603      	str	r6, [sp, #12]
   1098c:	202d      	movs	r0, #45	; 0x2d
   1098e:	2101      	movs	r1, #1
   10990:	f7ff bbee 	b.w	10170 <_vfiprintf_r+0x2f0>
   10994:	2b00      	cmp	r3, #0
   10996:	f000 8088 	beq.w	10aaa <_vfiprintf_r+0xc2a>
   1099a:	ee18 1a10 	vmov	r1, s16
   1099e:	aa18      	add	r2, sp, #96	; 0x60
   109a0:	4658      	mov	r0, fp
   109a2:	f7ff fa31 	bl	fe08 <__sprint_r.part.0>
   109a6:	2800      	cmp	r0, #0
   109a8:	f47f ac41 	bne.w	1022e <_vfiprintf_r+0x3ae>
   109ac:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   109b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   109b4:	1c41      	adds	r1, r0, #1
   109b6:	e477      	b.n	102a8 <_vfiprintf_r+0x428>
   109b8:	f898 1000 	ldrb.w	r1, [r8]
   109bc:	9307      	str	r3, [sp, #28]
   109be:	f7ff bad2 	b.w	ff66 <_vfiprintf_r+0xe6>
   109c2:	ac44      	add	r4, sp, #272	; 0x110
   109c4:	f7ff bb85 	b.w	100d2 <_vfiprintf_r+0x252>
   109c8:	f109 0908 	add.w	r9, r9, #8
   109cc:	f10c 0101 	add.w	r1, ip, #1
   109d0:	4660      	mov	r0, ip
   109d2:	e4a0      	b.n	10316 <_vfiprintf_r+0x496>
   109d4:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   109d8:	f040 8197 	bne.w	10d0a <_vfiprintf_r+0xe8a>
   109dc:	f851 3b04 	ldr.w	r3, [r1], #4
   109e0:	9107      	str	r1, [sp, #28]
   109e2:	f7ff bbc0 	b.w	10166 <_vfiprintf_r+0x2e6>
   109e6:	05b3      	lsls	r3, r6, #22
   109e8:	f100 8188 	bmi.w	10cfc <_vfiprintf_r+0xe7c>
   109ec:	f852 3b04 	ldr.w	r3, [r2], #4
   109f0:	9207      	str	r2, [sp, #28]
   109f2:	17da      	asrs	r2, r3, #31
   109f4:	4611      	mov	r1, r2
   109f6:	f7ff bb52 	b.w	1009e <_vfiprintf_r+0x21e>
   109fa:	9907      	ldr	r1, [sp, #28]
   109fc:	f851 3b04 	ldr.w	r3, [r1], #4
   10a00:	9107      	str	r1, [sp, #28]
   10a02:	2101      	movs	r1, #1
   10a04:	f7ff bbb3 	b.w	1016e <_vfiprintf_r+0x2ee>
   10a08:	9b07      	ldr	r3, [sp, #28]
   10a0a:	9805      	ldr	r0, [sp, #20]
   10a0c:	f853 1b04 	ldr.w	r1, [r3], #4
   10a10:	9307      	str	r3, [sp, #28]
   10a12:	17c2      	asrs	r2, r0, #31
   10a14:	e9c1 0200 	strd	r0, r2, [r1]
   10a18:	f7ff ba7d 	b.w	ff16 <_vfiprintf_r+0x96>
   10a1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10a1e:	2b00      	cmp	r3, #0
   10a20:	f43f ab26 	beq.w	10070 <_vfiprintf_r+0x1f0>
   10a24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10a26:	781b      	ldrb	r3, [r3, #0]
   10a28:	2b00      	cmp	r3, #0
   10a2a:	f43f ab21 	beq.w	10070 <_vfiprintf_r+0x1f0>
   10a2e:	f898 1000 	ldrb.w	r1, [r8]
   10a32:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   10a36:	f7ff ba96 	b.w	ff66 <_vfiprintf_r+0xe6>
   10a3a:	2302      	movs	r3, #2
   10a3c:	aa11      	add	r2, sp, #68	; 0x44
   10a3e:	931c      	str	r3, [sp, #112]	; 0x70
   10a40:	921b      	str	r2, [sp, #108]	; 0x6c
   10a42:	2001      	movs	r0, #1
   10a44:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10a48:	e6a2      	b.n	10790 <_vfiprintf_r+0x910>
   10a4a:	9603      	str	r6, [sp, #12]
   10a4c:	e571      	b.n	10532 <_vfiprintf_r+0x6b2>
   10a4e:	4b3b      	ldr	r3, [pc, #236]	; (10b3c <_vfiprintf_r+0xcbc>)
   10a50:	930c      	str	r3, [sp, #48]	; 0x30
   10a52:	f016 0220 	ands.w	r2, r6, #32
   10a56:	d059      	beq.n	10b0c <_vfiprintf_r+0xc8c>
   10a58:	9b07      	ldr	r3, [sp, #28]
   10a5a:	3307      	adds	r3, #7
   10a5c:	f023 0307 	bic.w	r3, r3, #7
   10a60:	4618      	mov	r0, r3
   10a62:	685a      	ldr	r2, [r3, #4]
   10a64:	f850 3b08 	ldr.w	r3, [r0], #8
   10a68:	9007      	str	r0, [sp, #28]
   10a6a:	07f4      	lsls	r4, r6, #31
   10a6c:	d509      	bpl.n	10a82 <_vfiprintf_r+0xc02>
   10a6e:	ea53 0002 	orrs.w	r0, r3, r2
   10a72:	d006      	beq.n	10a82 <_vfiprintf_r+0xc02>
   10a74:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   10a78:	2130      	movs	r1, #48	; 0x30
   10a7a:	f046 0602 	orr.w	r6, r6, #2
   10a7e:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   10a82:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   10a86:	9103      	str	r1, [sp, #12]
   10a88:	2102      	movs	r1, #2
   10a8a:	f7ff bb70 	b.w	1016e <_vfiprintf_r+0x2ee>
   10a8e:	4b2c      	ldr	r3, [pc, #176]	; (10b40 <_vfiprintf_r+0xcc0>)
   10a90:	930c      	str	r3, [sp, #48]	; 0x30
   10a92:	e7de      	b.n	10a52 <_vfiprintf_r+0xbd2>
   10a94:	9b07      	ldr	r3, [sp, #28]
   10a96:	2101      	movs	r1, #1
   10a98:	f853 2b04 	ldr.w	r2, [r3], #4
   10a9c:	9103      	str	r1, [sp, #12]
   10a9e:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   10aa2:	9307      	str	r3, [sp, #28]
   10aa4:	9104      	str	r1, [sp, #16]
   10aa6:	ac2b      	add	r4, sp, #172	; 0xac
   10aa8:	e4df      	b.n	1046a <_vfiprintf_r+0x5ea>
   10aaa:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   10aae:	2a00      	cmp	r2, #0
   10ab0:	f040 8132 	bne.w	10d18 <_vfiprintf_r+0xe98>
   10ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10ab6:	2a00      	cmp	r2, #0
   10ab8:	f47f ae62 	bne.w	10780 <_vfiprintf_r+0x900>
   10abc:	4618      	mov	r0, r3
   10abe:	2101      	movs	r1, #1
   10ac0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10ac4:	e427      	b.n	10316 <_vfiprintf_r+0x496>
   10ac6:	2100      	movs	r1, #0
   10ac8:	2208      	movs	r2, #8
   10aca:	a816      	add	r0, sp, #88	; 0x58
   10acc:	9413      	str	r4, [sp, #76]	; 0x4c
   10ace:	f7fb f903 	bl	bcd8 <memset>
   10ad2:	1c79      	adds	r1, r7, #1
   10ad4:	f000 80bc 	beq.w	10c50 <_vfiprintf_r+0xdd0>
   10ad8:	2500      	movs	r5, #0
   10ada:	9407      	str	r4, [sp, #28]
   10adc:	462c      	mov	r4, r5
   10ade:	e00c      	b.n	10afa <_vfiprintf_r+0xc7a>
   10ae0:	a92b      	add	r1, sp, #172	; 0xac
   10ae2:	4658      	mov	r0, fp
   10ae4:	f7ff f8ca 	bl	fc7c <_wcrtomb_r>
   10ae8:	1c42      	adds	r2, r0, #1
   10aea:	4420      	add	r0, r4
   10aec:	f000 816b 	beq.w	10dc6 <_vfiprintf_r+0xf46>
   10af0:	42b8      	cmp	r0, r7
   10af2:	dc08      	bgt.n	10b06 <_vfiprintf_r+0xc86>
   10af4:	f000 8170 	beq.w	10dd8 <_vfiprintf_r+0xf58>
   10af8:	4604      	mov	r4, r0
   10afa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10afc:	5952      	ldr	r2, [r2, r5]
   10afe:	ab16      	add	r3, sp, #88	; 0x58
   10b00:	3504      	adds	r5, #4
   10b02:	2a00      	cmp	r2, #0
   10b04:	d1ec      	bne.n	10ae0 <_vfiprintf_r+0xc60>
   10b06:	9404      	str	r4, [sp, #16]
   10b08:	9c07      	ldr	r4, [sp, #28]
   10b0a:	e0af      	b.n	10c6c <_vfiprintf_r+0xdec>
   10b0c:	f016 0310 	ands.w	r3, r6, #16
   10b10:	9807      	ldr	r0, [sp, #28]
   10b12:	d10c      	bne.n	10b2e <_vfiprintf_r+0xcae>
   10b14:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   10b18:	d005      	beq.n	10b26 <_vfiprintf_r+0xca6>
   10b1a:	461a      	mov	r2, r3
   10b1c:	f850 3b04 	ldr.w	r3, [r0], #4
   10b20:	9007      	str	r0, [sp, #28]
   10b22:	b29b      	uxth	r3, r3
   10b24:	e7a1      	b.n	10a6a <_vfiprintf_r+0xbea>
   10b26:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   10b2a:	f040 80e1 	bne.w	10cf0 <_vfiprintf_r+0xe70>
   10b2e:	f850 3b04 	ldr.w	r3, [r0], #4
   10b32:	9007      	str	r0, [sp, #28]
   10b34:	e799      	b.n	10a6a <_vfiprintf_r+0xbea>
   10b36:	bf00      	nop
   10b38:	0001264c 	.word	0x0001264c
   10b3c:	0001254c 	.word	0x0001254c
   10b40:	00012560 	.word	0x00012560
   10b44:	9903      	ldr	r1, [sp, #12]
   10b46:	9704      	str	r7, [sp, #16]
   10b48:	ac44      	add	r4, sp, #272	; 0x110
   10b4a:	469e      	mov	lr, r3
   10b4c:	ee08 ba90 	vmov	s17, fp
   10b50:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   10b54:	f04f 0c00 	mov.w	ip, #0
   10b58:	4623      	mov	r3, r4
   10b5a:	e006      	b.n	10b6a <_vfiprintf_r+0xcea>
   10b5c:	f1be 0f0a 	cmp.w	lr, #10
   10b60:	f172 0200 	sbcs.w	r2, r2, #0
   10b64:	d339      	bcc.n	10bda <_vfiprintf_r+0xd5a>
   10b66:	46a6      	mov	lr, r4
   10b68:	462a      	mov	r2, r5
   10b6a:	49a6      	ldr	r1, [pc, #664]	; (10e04 <_vfiprintf_r+0xf84>)
   10b6c:	eb1e 0002 	adds.w	r0, lr, r2
   10b70:	f140 0000 	adc.w	r0, r0, #0
   10b74:	460f      	mov	r7, r1
   10b76:	fba1 1400 	umull	r1, r4, r1, r0
   10b7a:	f024 0103 	bic.w	r1, r4, #3
   10b7e:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   10b82:	1a40      	subs	r0, r0, r1
   10b84:	ebbe 0100 	subs.w	r1, lr, r0
   10b88:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   10b8c:	f162 0400 	sbc.w	r4, r2, #0
   10b90:	fb05 f501 	mul.w	r5, r5, r1
   10b94:	fb07 5504 	mla	r5, r7, r4, r5
   10b98:	fba1 4107 	umull	r4, r1, r1, r7
   10b9c:	440d      	add	r5, r1
   10b9e:	2705      	movs	r7, #5
   10ba0:	f004 0101 	and.w	r1, r4, #1
   10ba4:	fba1 1b07 	umull	r1, fp, r1, r7
   10ba8:	1809      	adds	r1, r1, r0
   10baa:	0864      	lsrs	r4, r4, #1
   10bac:	3130      	adds	r1, #48	; 0x30
   10bae:	f803 1c01 	strb.w	r1, [r3, #-1]
   10bb2:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   10bb6:	f10c 0c01 	add.w	ip, ip, #1
   10bba:	3b01      	subs	r3, #1
   10bbc:	086d      	lsrs	r5, r5, #1
   10bbe:	2e00      	cmp	r6, #0
   10bc0:	d0cc      	beq.n	10b5c <_vfiprintf_r+0xcdc>
   10bc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10bc4:	7809      	ldrb	r1, [r1, #0]
   10bc6:	4561      	cmp	r1, ip
   10bc8:	d1c8      	bne.n	10b5c <_vfiprintf_r+0xcdc>
   10bca:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   10bce:	d0c5      	beq.n	10b5c <_vfiprintf_r+0xcdc>
   10bd0:	f1be 0f0a 	cmp.w	lr, #10
   10bd4:	f172 0200 	sbcs.w	r2, r2, #0
   10bd8:	d26c      	bcs.n	10cb4 <_vfiprintf_r+0xe34>
   10bda:	461c      	mov	r4, r3
   10bdc:	ab44      	add	r3, sp, #272	; 0x110
   10bde:	1b1b      	subs	r3, r3, r4
   10be0:	9f04      	ldr	r7, [sp, #16]
   10be2:	9e03      	ldr	r6, [sp, #12]
   10be4:	9304      	str	r3, [sp, #16]
   10be6:	ee18 ba90 	vmov	fp, s17
   10bea:	f7ff ba72 	b.w	100d2 <_vfiprintf_r+0x252>
   10bee:	9603      	str	r6, [sp, #12]
   10bf0:	f7ff ba62 	b.w	100b8 <_vfiprintf_r+0x238>
   10bf4:	4658      	mov	r0, fp
   10bf6:	f7fa fea9 	bl	b94c <__sinit>
   10bfa:	f7ff b95b 	b.w	feb4 <_vfiprintf_r+0x34>
   10bfe:	2901      	cmp	r1, #1
   10c00:	9603      	str	r6, [sp, #12]
   10c02:	f47f accd 	bne.w	105a0 <_vfiprintf_r+0x720>
   10c06:	f7ff ba5c 	b.w	100c2 <_vfiprintf_r+0x242>
   10c0a:	9b07      	ldr	r3, [sp, #28]
   10c0c:	9905      	ldr	r1, [sp, #20]
   10c0e:	f853 2b04 	ldr.w	r2, [r3], #4
   10c12:	6011      	str	r1, [r2, #0]
   10c14:	9307      	str	r3, [sp, #28]
   10c16:	f7ff b97e 	b.w	ff16 <_vfiprintf_r+0x96>
   10c1a:	2f06      	cmp	r7, #6
   10c1c:	463b      	mov	r3, r7
   10c1e:	9a03      	ldr	r2, [sp, #12]
   10c20:	4c79      	ldr	r4, [pc, #484]	; (10e08 <_vfiprintf_r+0xf88>)
   10c22:	9207      	str	r2, [sp, #28]
   10c24:	bf28      	it	cs
   10c26:	2306      	movcs	r3, #6
   10c28:	9304      	str	r3, [sp, #16]
   10c2a:	9303      	str	r3, [sp, #12]
   10c2c:	f7ff bb25 	b.w	1027a <_vfiprintf_r+0x3fa>
   10c30:	9b03      	ldr	r3, [sp, #12]
   10c32:	9907      	ldr	r1, [sp, #28]
   10c34:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   10c38:	bf14      	ite	ne
   10c3a:	f851 3b04 	ldrne.w	r3, [r1], #4
   10c3e:	f851 3b04 	ldreq.w	r3, [r1], #4
   10c42:	9107      	str	r1, [sp, #28]
   10c44:	bf1c      	itt	ne
   10c46:	4602      	movne	r2, r0
   10c48:	b2db      	uxtbne	r3, r3
   10c4a:	2101      	movs	r1, #1
   10c4c:	f7ff ba8f 	b.w	1016e <_vfiprintf_r+0x2ee>
   10c50:	ab16      	add	r3, sp, #88	; 0x58
   10c52:	9300      	str	r3, [sp, #0]
   10c54:	2300      	movs	r3, #0
   10c56:	4619      	mov	r1, r3
   10c58:	aa13      	add	r2, sp, #76	; 0x4c
   10c5a:	4658      	mov	r0, fp
   10c5c:	f7ff f834 	bl	fcc8 <_wcsrtombs_r>
   10c60:	4603      	mov	r3, r0
   10c62:	3301      	adds	r3, #1
   10c64:	9004      	str	r0, [sp, #16]
   10c66:	f000 80ae 	beq.w	10dc6 <_vfiprintf_r+0xf46>
   10c6a:	9413      	str	r4, [sp, #76]	; 0x4c
   10c6c:	9b04      	ldr	r3, [sp, #16]
   10c6e:	2b00      	cmp	r3, #0
   10c70:	d030      	beq.n	10cd4 <_vfiprintf_r+0xe54>
   10c72:	2b63      	cmp	r3, #99	; 0x63
   10c74:	dc63      	bgt.n	10d3e <_vfiprintf_r+0xebe>
   10c76:	2300      	movs	r3, #0
   10c78:	9308      	str	r3, [sp, #32]
   10c7a:	ac2b      	add	r4, sp, #172	; 0xac
   10c7c:	2208      	movs	r2, #8
   10c7e:	2100      	movs	r1, #0
   10c80:	a816      	add	r0, sp, #88	; 0x58
   10c82:	f7fb f829 	bl	bcd8 <memset>
   10c86:	9d04      	ldr	r5, [sp, #16]
   10c88:	ab16      	add	r3, sp, #88	; 0x58
   10c8a:	9300      	str	r3, [sp, #0]
   10c8c:	aa13      	add	r2, sp, #76	; 0x4c
   10c8e:	462b      	mov	r3, r5
   10c90:	4621      	mov	r1, r4
   10c92:	4658      	mov	r0, fp
   10c94:	f7ff f818 	bl	fcc8 <_wcsrtombs_r>
   10c98:	4285      	cmp	r5, r0
   10c9a:	f040 80ab 	bne.w	10df4 <_vfiprintf_r+0xf74>
   10c9e:	9b03      	ldr	r3, [sp, #12]
   10ca0:	9a04      	ldr	r2, [sp, #16]
   10ca2:	9307      	str	r3, [sp, #28]
   10ca4:	2300      	movs	r3, #0
   10ca6:	54a3      	strb	r3, [r4, r2]
   10ca8:	461f      	mov	r7, r3
   10caa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10cae:	9303      	str	r3, [sp, #12]
   10cb0:	f7ff ba16 	b.w	100e0 <_vfiprintf_r+0x260>
   10cb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10cb6:	990d      	ldr	r1, [sp, #52]	; 0x34
   10cb8:	1a9b      	subs	r3, r3, r2
   10cba:	4618      	mov	r0, r3
   10cbc:	9308      	str	r3, [sp, #32]
   10cbe:	f7fb f85d 	bl	bd7c <strncpy>
   10cc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10cc4:	9b08      	ldr	r3, [sp, #32]
   10cc6:	784a      	ldrb	r2, [r1, #1]
   10cc8:	b10a      	cbz	r2, 10cce <_vfiprintf_r+0xe4e>
   10cca:	3101      	adds	r1, #1
   10ccc:	910b      	str	r1, [sp, #44]	; 0x2c
   10cce:	f04f 0c00 	mov.w	ip, #0
   10cd2:	e748      	b.n	10b66 <_vfiprintf_r+0xce6>
   10cd4:	9b03      	ldr	r3, [sp, #12]
   10cd6:	9307      	str	r3, [sp, #28]
   10cd8:	9b04      	ldr	r3, [sp, #16]
   10cda:	9303      	str	r3, [sp, #12]
   10cdc:	461f      	mov	r7, r3
   10cde:	9308      	str	r3, [sp, #32]
   10ce0:	f7ff b9fe 	b.w	100e0 <_vfiprintf_r+0x260>
   10ce4:	2101      	movs	r1, #1
   10ce6:	4618      	mov	r0, r3
   10ce8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10cec:	f7ff bb13 	b.w	10316 <_vfiprintf_r+0x496>
   10cf0:	f850 3b04 	ldr.w	r3, [r0], #4
   10cf4:	9007      	str	r0, [sp, #28]
   10cf6:	4622      	mov	r2, r4
   10cf8:	b2db      	uxtb	r3, r3
   10cfa:	e6b6      	b.n	10a6a <_vfiprintf_r+0xbea>
   10cfc:	f912 3b04 	ldrsb.w	r3, [r2], #4
   10d00:	9207      	str	r2, [sp, #28]
   10d02:	17da      	asrs	r2, r3, #31
   10d04:	4611      	mov	r1, r2
   10d06:	f7ff b9ca 	b.w	1009e <_vfiprintf_r+0x21e>
   10d0a:	f851 3b04 	ldr.w	r3, [r1], #4
   10d0e:	9107      	str	r1, [sp, #28]
   10d10:	4602      	mov	r2, r0
   10d12:	b2db      	uxtb	r3, r3
   10d14:	f7ff ba27 	b.w	10166 <_vfiprintf_r+0x2e6>
   10d18:	2301      	movs	r3, #1
   10d1a:	931c      	str	r3, [sp, #112]	; 0x70
   10d1c:	2101      	movs	r1, #1
   10d1e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   10d22:	931b      	str	r3, [sp, #108]	; 0x6c
   10d24:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   10d28:	460b      	mov	r3, r1
   10d2a:	f7ff bacd 	b.w	102c8 <_vfiprintf_r+0x448>
   10d2e:	9b07      	ldr	r3, [sp, #28]
   10d30:	9905      	ldr	r1, [sp, #20]
   10d32:	f853 2b04 	ldr.w	r2, [r3], #4
   10d36:	9307      	str	r3, [sp, #28]
   10d38:	8011      	strh	r1, [r2, #0]
   10d3a:	f7ff b8ec 	b.w	ff16 <_vfiprintf_r+0x96>
   10d3e:	1c59      	adds	r1, r3, #1
   10d40:	4658      	mov	r0, fp
   10d42:	f7fa f8b3 	bl	aeac <_malloc_r>
   10d46:	4604      	mov	r4, r0
   10d48:	2800      	cmp	r0, #0
   10d4a:	d03c      	beq.n	10dc6 <_vfiprintf_r+0xf46>
   10d4c:	9008      	str	r0, [sp, #32]
   10d4e:	e795      	b.n	10c7c <_vfiprintf_r+0xdfc>
   10d50:	6d88      	ldr	r0, [r1, #88]	; 0x58
   10d52:	f7fb f8e1 	bl	bf18 <__retarget_lock_release_recursive>
   10d56:	f7ff b9e9 	b.w	1012c <_vfiprintf_r+0x2ac>
   10d5a:	9b03      	ldr	r3, [sp, #12]
   10d5c:	9307      	str	r3, [sp, #28]
   10d5e:	e9cd 7703 	strd	r7, r7, [sp, #12]
   10d62:	9f08      	ldr	r7, [sp, #32]
   10d64:	f7ff b9bc 	b.w	100e0 <_vfiprintf_r+0x260>
   10d68:	9819      	ldr	r0, [sp, #100]	; 0x64
   10d6a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   10d6c:	3001      	adds	r0, #1
   10d6e:	e545      	b.n	107fc <_vfiprintf_r+0x97c>
   10d70:	9b03      	ldr	r3, [sp, #12]
   10d72:	9307      	str	r3, [sp, #28]
   10d74:	4620      	mov	r0, r4
   10d76:	f7fb f943 	bl	c000 <strlen>
   10d7a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   10d7e:	462f      	mov	r7, r5
   10d80:	9004      	str	r0, [sp, #16]
   10d82:	9303      	str	r3, [sp, #12]
   10d84:	9508      	str	r5, [sp, #32]
   10d86:	f7ff b9ab 	b.w	100e0 <_vfiprintf_r+0x260>
   10d8a:	ee18 1a10 	vmov	r1, s16
   10d8e:	aa18      	add	r2, sp, #96	; 0x60
   10d90:	4658      	mov	r0, fp
   10d92:	f7ff f839 	bl	fe08 <__sprint_r.part.0>
   10d96:	2800      	cmp	r0, #0
   10d98:	f43f aa36 	beq.w	10208 <_vfiprintf_r+0x388>
   10d9c:	f7ff ba4d 	b.w	1023a <_vfiprintf_r+0x3ba>
   10da0:	9819      	ldr	r0, [sp, #100]	; 0x64
   10da2:	3001      	adds	r0, #1
   10da4:	e57a      	b.n	1089c <_vfiprintf_r+0xa1c>
   10da6:	468c      	mov	ip, r1
   10da8:	e46e      	b.n	10688 <_vfiprintf_r+0x808>
   10daa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   10dac:	07d9      	lsls	r1, r3, #31
   10dae:	d405      	bmi.n	10dbc <_vfiprintf_r+0xf3c>
   10db0:	89ab      	ldrh	r3, [r5, #12]
   10db2:	059a      	lsls	r2, r3, #22
   10db4:	d402      	bmi.n	10dbc <_vfiprintf_r+0xf3c>
   10db6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   10db8:	f7fb f8ae 	bl	bf18 <__retarget_lock_release_recursive>
   10dbc:	f04f 33ff 	mov.w	r3, #4294967295
   10dc0:	9305      	str	r3, [sp, #20]
   10dc2:	f7ff ba49 	b.w	10258 <_vfiprintf_r+0x3d8>
   10dc6:	ee18 2a10 	vmov	r2, s16
   10dca:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   10dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10dd2:	8193      	strh	r3, [r2, #12]
   10dd4:	f7ff ba35 	b.w	10242 <_vfiprintf_r+0x3c2>
   10dd8:	9c07      	ldr	r4, [sp, #28]
   10dda:	9704      	str	r7, [sp, #16]
   10ddc:	e746      	b.n	10c6c <_vfiprintf_r+0xdec>
   10dde:	9b07      	ldr	r3, [sp, #28]
   10de0:	f898 1001 	ldrb.w	r1, [r8, #1]
   10de4:	f853 7b04 	ldr.w	r7, [r3], #4
   10de8:	9307      	str	r3, [sp, #28]
   10dea:	4690      	mov	r8, r2
   10dec:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   10df0:	f7ff b8b9 	b.w	ff66 <_vfiprintf_r+0xe6>
   10df4:	ee18 2a10 	vmov	r2, s16
   10df8:	8993      	ldrh	r3, [r2, #12]
   10dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10dfe:	8193      	strh	r3, [r2, #12]
   10e00:	f7ff ba15 	b.w	1022e <_vfiprintf_r+0x3ae>
   10e04:	cccccccd 	.word	0xcccccccd
   10e08:	00012574 	.word	0x00012574

00010e0c <__sbprintf>:
   10e0c:	b570      	push	{r4, r5, r6, lr}
   10e0e:	460c      	mov	r4, r1
   10e10:	8989      	ldrh	r1, [r1, #12]
   10e12:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   10e16:	f021 0102 	bic.w	r1, r1, #2
   10e1a:	f8ad 1014 	strh.w	r1, [sp, #20]
   10e1e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   10e20:	911b      	str	r1, [sp, #108]	; 0x6c
   10e22:	89e1      	ldrh	r1, [r4, #14]
   10e24:	f8ad 1016 	strh.w	r1, [sp, #22]
   10e28:	69e1      	ldr	r1, [r4, #28]
   10e2a:	9109      	str	r1, [sp, #36]	; 0x24
   10e2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   10e2e:	910b      	str	r1, [sp, #44]	; 0x2c
   10e30:	a91c      	add	r1, sp, #112	; 0x70
   10e32:	9102      	str	r1, [sp, #8]
   10e34:	9106      	str	r1, [sp, #24]
   10e36:	f44f 6180 	mov.w	r1, #1024	; 0x400
   10e3a:	4606      	mov	r6, r0
   10e3c:	9104      	str	r1, [sp, #16]
   10e3e:	9107      	str	r1, [sp, #28]
   10e40:	a818      	add	r0, sp, #96	; 0x60
   10e42:	2100      	movs	r1, #0
   10e44:	e9cd 3200 	strd	r3, r2, [sp]
   10e48:	9108      	str	r1, [sp, #32]
   10e4a:	f7fb f85f 	bl	bf0c <__retarget_lock_init_recursive>
   10e4e:	e9dd 3200 	ldrd	r3, r2, [sp]
   10e52:	a902      	add	r1, sp, #8
   10e54:	4630      	mov	r0, r6
   10e56:	f7ff f813 	bl	fe80 <_vfiprintf_r>
   10e5a:	1e05      	subs	r5, r0, #0
   10e5c:	db07      	blt.n	10e6e <__sbprintf+0x62>
   10e5e:	a902      	add	r1, sp, #8
   10e60:	4630      	mov	r0, r6
   10e62:	f7fd fdb1 	bl	e9c8 <_fflush_r>
   10e66:	2800      	cmp	r0, #0
   10e68:	bf18      	it	ne
   10e6a:	f04f 35ff 	movne.w	r5, #4294967295
   10e6e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   10e72:	065b      	lsls	r3, r3, #25
   10e74:	d503      	bpl.n	10e7e <__sbprintf+0x72>
   10e76:	89a3      	ldrh	r3, [r4, #12]
   10e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10e7c:	81a3      	strh	r3, [r4, #12]
   10e7e:	9818      	ldr	r0, [sp, #96]	; 0x60
   10e80:	f7fb f846 	bl	bf10 <__retarget_lock_close_recursive>
   10e84:	4628      	mov	r0, r5
   10e86:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   10e8a:	bd70      	pop	{r4, r5, r6, pc}

00010e8c <__sfvwrite_r>:
   10e8c:	6893      	ldr	r3, [r2, #8]
   10e8e:	2b00      	cmp	r3, #0
   10e90:	f000 8085 	beq.w	10f9e <__sfvwrite_r+0x112>
   10e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e98:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   10e9c:	460c      	mov	r4, r1
   10e9e:	0719      	lsls	r1, r3, #28
   10ea0:	4680      	mov	r8, r0
   10ea2:	b083      	sub	sp, #12
   10ea4:	4617      	mov	r7, r2
   10ea6:	b298      	uxth	r0, r3
   10ea8:	d525      	bpl.n	10ef6 <__sfvwrite_r+0x6a>
   10eaa:	6923      	ldr	r3, [r4, #16]
   10eac:	b31b      	cbz	r3, 10ef6 <__sfvwrite_r+0x6a>
   10eae:	f010 0302 	ands.w	r3, r0, #2
   10eb2:	683d      	ldr	r5, [r7, #0]
   10eb4:	d02d      	beq.n	10f12 <__sfvwrite_r+0x86>
   10eb6:	f04f 0a00 	mov.w	sl, #0
   10eba:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 1117c <__sfvwrite_r+0x2f0>
   10ebe:	4656      	mov	r6, sl
   10ec0:	46b9      	mov	r9, r7
   10ec2:	455e      	cmp	r6, fp
   10ec4:	4633      	mov	r3, r6
   10ec6:	4652      	mov	r2, sl
   10ec8:	bf28      	it	cs
   10eca:	465b      	movcs	r3, fp
   10ecc:	4640      	mov	r0, r8
   10ece:	2e00      	cmp	r6, #0
   10ed0:	d052      	beq.n	10f78 <__sfvwrite_r+0xec>
   10ed2:	69e1      	ldr	r1, [r4, #28]
   10ed4:	6a67      	ldr	r7, [r4, #36]	; 0x24
   10ed6:	47b8      	blx	r7
   10ed8:	2800      	cmp	r0, #0
   10eda:	dd56      	ble.n	10f8a <__sfvwrite_r+0xfe>
   10edc:	f8d9 3008 	ldr.w	r3, [r9, #8]
   10ee0:	1a1b      	subs	r3, r3, r0
   10ee2:	4482      	add	sl, r0
   10ee4:	1a36      	subs	r6, r6, r0
   10ee6:	f8c9 3008 	str.w	r3, [r9, #8]
   10eea:	2b00      	cmp	r3, #0
   10eec:	d1e9      	bne.n	10ec2 <__sfvwrite_r+0x36>
   10eee:	2000      	movs	r0, #0
   10ef0:	b003      	add	sp, #12
   10ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ef6:	4621      	mov	r1, r4
   10ef8:	4640      	mov	r0, r8
   10efa:	f000 f941 	bl	11180 <__swsetup_r>
   10efe:	2800      	cmp	r0, #0
   10f00:	f040 8138 	bne.w	11174 <__sfvwrite_r+0x2e8>
   10f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10f08:	683d      	ldr	r5, [r7, #0]
   10f0a:	b298      	uxth	r0, r3
   10f0c:	f010 0302 	ands.w	r3, r0, #2
   10f10:	d1d1      	bne.n	10eb6 <__sfvwrite_r+0x2a>
   10f12:	f010 0901 	ands.w	r9, r0, #1
   10f16:	d144      	bne.n	10fa2 <__sfvwrite_r+0x116>
   10f18:	464e      	mov	r6, r9
   10f1a:	9700      	str	r7, [sp, #0]
   10f1c:	b346      	cbz	r6, 10f70 <__sfvwrite_r+0xe4>
   10f1e:	0582      	lsls	r2, r0, #22
   10f20:	f8d4 b008 	ldr.w	fp, [r4, #8]
   10f24:	f140 8085 	bpl.w	11032 <__sfvwrite_r+0x1a6>
   10f28:	45b3      	cmp	fp, r6
   10f2a:	465a      	mov	r2, fp
   10f2c:	f200 80b4 	bhi.w	11098 <__sfvwrite_r+0x20c>
   10f30:	f410 6f90 	tst.w	r0, #1152	; 0x480
   10f34:	f040 80c1 	bne.w	110ba <__sfvwrite_r+0x22e>
   10f38:	6820      	ldr	r0, [r4, #0]
   10f3a:	9201      	str	r2, [sp, #4]
   10f3c:	4649      	mov	r1, r9
   10f3e:	f7fa fe4f 	bl	bbe0 <memmove>
   10f42:	68a3      	ldr	r3, [r4, #8]
   10f44:	9a01      	ldr	r2, [sp, #4]
   10f46:	eba3 010b 	sub.w	r1, r3, fp
   10f4a:	6823      	ldr	r3, [r4, #0]
   10f4c:	60a1      	str	r1, [r4, #8]
   10f4e:	4413      	add	r3, r2
   10f50:	46b2      	mov	sl, r6
   10f52:	6023      	str	r3, [r4, #0]
   10f54:	2600      	movs	r6, #0
   10f56:	9a00      	ldr	r2, [sp, #0]
   10f58:	6893      	ldr	r3, [r2, #8]
   10f5a:	eba3 030a 	sub.w	r3, r3, sl
   10f5e:	44d1      	add	r9, sl
   10f60:	6093      	str	r3, [r2, #8]
   10f62:	2b00      	cmp	r3, #0
   10f64:	d0c3      	beq.n	10eee <__sfvwrite_r+0x62>
   10f66:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   10f6a:	b280      	uxth	r0, r0
   10f6c:	2e00      	cmp	r6, #0
   10f6e:	d1d6      	bne.n	10f1e <__sfvwrite_r+0x92>
   10f70:	e9d5 9600 	ldrd	r9, r6, [r5]
   10f74:	3508      	adds	r5, #8
   10f76:	e7d1      	b.n	10f1c <__sfvwrite_r+0x90>
   10f78:	e9d5 a600 	ldrd	sl, r6, [r5]
   10f7c:	3508      	adds	r5, #8
   10f7e:	e7a0      	b.n	10ec2 <__sfvwrite_r+0x36>
   10f80:	4621      	mov	r1, r4
   10f82:	4640      	mov	r0, r8
   10f84:	f7fd fd20 	bl	e9c8 <_fflush_r>
   10f88:	b388      	cbz	r0, 10fee <__sfvwrite_r+0x162>
   10f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10f92:	f04f 30ff 	mov.w	r0, #4294967295
   10f96:	81a3      	strh	r3, [r4, #12]
   10f98:	b003      	add	sp, #12
   10f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f9e:	2000      	movs	r0, #0
   10fa0:	4770      	bx	lr
   10fa2:	461e      	mov	r6, r3
   10fa4:	46ba      	mov	sl, r7
   10fa6:	4699      	mov	r9, r3
   10fa8:	4618      	mov	r0, r3
   10faa:	9500      	str	r5, [sp, #0]
   10fac:	461f      	mov	r7, r3
   10fae:	b366      	cbz	r6, 1100a <__sfvwrite_r+0x17e>
   10fb0:	2800      	cmp	r0, #0
   10fb2:	d032      	beq.n	1101a <__sfvwrite_r+0x18e>
   10fb4:	464a      	mov	r2, r9
   10fb6:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   10fba:	6820      	ldr	r0, [r4, #0]
   10fbc:	68a5      	ldr	r5, [r4, #8]
   10fbe:	42b2      	cmp	r2, r6
   10fc0:	bf28      	it	cs
   10fc2:	4632      	movcs	r2, r6
   10fc4:	4288      	cmp	r0, r1
   10fc6:	d904      	bls.n	10fd2 <__sfvwrite_r+0x146>
   10fc8:	eb05 0b03 	add.w	fp, r5, r3
   10fcc:	455a      	cmp	r2, fp
   10fce:	f300 80a7 	bgt.w	11120 <__sfvwrite_r+0x294>
   10fd2:	4293      	cmp	r3, r2
   10fd4:	dc64      	bgt.n	110a0 <__sfvwrite_r+0x214>
   10fd6:	69e1      	ldr	r1, [r4, #28]
   10fd8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   10fda:	463a      	mov	r2, r7
   10fdc:	4640      	mov	r0, r8
   10fde:	47a8      	blx	r5
   10fe0:	f1b0 0b00 	subs.w	fp, r0, #0
   10fe4:	ddd1      	ble.n	10f8a <__sfvwrite_r+0xfe>
   10fe6:	ebb9 090b 	subs.w	r9, r9, fp
   10fea:	d0c9      	beq.n	10f80 <__sfvwrite_r+0xf4>
   10fec:	2001      	movs	r0, #1
   10fee:	f8da 3008 	ldr.w	r3, [sl, #8]
   10ff2:	eba3 030b 	sub.w	r3, r3, fp
   10ff6:	445f      	add	r7, fp
   10ff8:	eba6 060b 	sub.w	r6, r6, fp
   10ffc:	f8ca 3008 	str.w	r3, [sl, #8]
   11000:	2b00      	cmp	r3, #0
   11002:	f43f af74 	beq.w	10eee <__sfvwrite_r+0x62>
   11006:	2e00      	cmp	r6, #0
   11008:	d1d2      	bne.n	10fb0 <__sfvwrite_r+0x124>
   1100a:	9a00      	ldr	r2, [sp, #0]
   1100c:	6856      	ldr	r6, [r2, #4]
   1100e:	4613      	mov	r3, r2
   11010:	3208      	adds	r2, #8
   11012:	9200      	str	r2, [sp, #0]
   11014:	2e00      	cmp	r6, #0
   11016:	d0f8      	beq.n	1100a <__sfvwrite_r+0x17e>
   11018:	681f      	ldr	r7, [r3, #0]
   1101a:	4632      	mov	r2, r6
   1101c:	210a      	movs	r1, #10
   1101e:	4638      	mov	r0, r7
   11020:	f7fd fd16 	bl	ea50 <memchr>
   11024:	2800      	cmp	r0, #0
   11026:	f000 809c 	beq.w	11162 <__sfvwrite_r+0x2d6>
   1102a:	3001      	adds	r0, #1
   1102c:	eba0 0907 	sub.w	r9, r0, r7
   11030:	e7c0      	b.n	10fb4 <__sfvwrite_r+0x128>
   11032:	6820      	ldr	r0, [r4, #0]
   11034:	6923      	ldr	r3, [r4, #16]
   11036:	4298      	cmp	r0, r3
   11038:	d816      	bhi.n	11068 <__sfvwrite_r+0x1dc>
   1103a:	6962      	ldr	r2, [r4, #20]
   1103c:	42b2      	cmp	r2, r6
   1103e:	d813      	bhi.n	11068 <__sfvwrite_r+0x1dc>
   11040:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   11044:	42b3      	cmp	r3, r6
   11046:	bf28      	it	cs
   11048:	4633      	movcs	r3, r6
   1104a:	69e1      	ldr	r1, [r4, #28]
   1104c:	fb93 f3f2 	sdiv	r3, r3, r2
   11050:	6a67      	ldr	r7, [r4, #36]	; 0x24
   11052:	fb02 f303 	mul.w	r3, r2, r3
   11056:	4640      	mov	r0, r8
   11058:	464a      	mov	r2, r9
   1105a:	47b8      	blx	r7
   1105c:	f1b0 0a00 	subs.w	sl, r0, #0
   11060:	dd93      	ble.n	10f8a <__sfvwrite_r+0xfe>
   11062:	eba6 060a 	sub.w	r6, r6, sl
   11066:	e776      	b.n	10f56 <__sfvwrite_r+0xca>
   11068:	45b3      	cmp	fp, r6
   1106a:	46da      	mov	sl, fp
   1106c:	bf28      	it	cs
   1106e:	46b2      	movcs	sl, r6
   11070:	4652      	mov	r2, sl
   11072:	4649      	mov	r1, r9
   11074:	f7fa fdb4 	bl	bbe0 <memmove>
   11078:	68a3      	ldr	r3, [r4, #8]
   1107a:	6822      	ldr	r2, [r4, #0]
   1107c:	eba3 030a 	sub.w	r3, r3, sl
   11080:	4452      	add	r2, sl
   11082:	60a3      	str	r3, [r4, #8]
   11084:	6022      	str	r2, [r4, #0]
   11086:	2b00      	cmp	r3, #0
   11088:	d1eb      	bne.n	11062 <__sfvwrite_r+0x1d6>
   1108a:	4621      	mov	r1, r4
   1108c:	4640      	mov	r0, r8
   1108e:	f7fd fc9b 	bl	e9c8 <_fflush_r>
   11092:	2800      	cmp	r0, #0
   11094:	d0e5      	beq.n	11062 <__sfvwrite_r+0x1d6>
   11096:	e778      	b.n	10f8a <__sfvwrite_r+0xfe>
   11098:	6820      	ldr	r0, [r4, #0]
   1109a:	46b3      	mov	fp, r6
   1109c:	4632      	mov	r2, r6
   1109e:	e74c      	b.n	10f3a <__sfvwrite_r+0xae>
   110a0:	4639      	mov	r1, r7
   110a2:	9201      	str	r2, [sp, #4]
   110a4:	f7fa fd9c 	bl	bbe0 <memmove>
   110a8:	9a01      	ldr	r2, [sp, #4]
   110aa:	68a3      	ldr	r3, [r4, #8]
   110ac:	1a9b      	subs	r3, r3, r2
   110ae:	60a3      	str	r3, [r4, #8]
   110b0:	6823      	ldr	r3, [r4, #0]
   110b2:	4413      	add	r3, r2
   110b4:	6023      	str	r3, [r4, #0]
   110b6:	4693      	mov	fp, r2
   110b8:	e795      	b.n	10fe6 <__sfvwrite_r+0x15a>
   110ba:	6823      	ldr	r3, [r4, #0]
   110bc:	6921      	ldr	r1, [r4, #16]
   110be:	eba3 0b01 	sub.w	fp, r3, r1
   110c2:	6963      	ldr	r3, [r4, #20]
   110c4:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   110c8:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   110cc:	f10b 0301 	add.w	r3, fp, #1
   110d0:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   110d4:	4433      	add	r3, r6
   110d6:	4553      	cmp	r3, sl
   110d8:	4652      	mov	r2, sl
   110da:	bf84      	itt	hi
   110dc:	469a      	movhi	sl, r3
   110de:	4652      	movhi	r2, sl
   110e0:	0543      	lsls	r3, r0, #21
   110e2:	d52c      	bpl.n	1113e <__sfvwrite_r+0x2b2>
   110e4:	4611      	mov	r1, r2
   110e6:	4640      	mov	r0, r8
   110e8:	f7f9 fee0 	bl	aeac <_malloc_r>
   110ec:	2800      	cmp	r0, #0
   110ee:	d03b      	beq.n	11168 <__sfvwrite_r+0x2dc>
   110f0:	465a      	mov	r2, fp
   110f2:	6921      	ldr	r1, [r4, #16]
   110f4:	9001      	str	r0, [sp, #4]
   110f6:	f7f7 fef9 	bl	8eec <memcpy>
   110fa:	89a2      	ldrh	r2, [r4, #12]
   110fc:	9b01      	ldr	r3, [sp, #4]
   110fe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   11102:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   11106:	81a2      	strh	r2, [r4, #12]
   11108:	eb03 000b 	add.w	r0, r3, fp
   1110c:	6123      	str	r3, [r4, #16]
   1110e:	ebaa 030b 	sub.w	r3, sl, fp
   11112:	f8c4 a014 	str.w	sl, [r4, #20]
   11116:	60a3      	str	r3, [r4, #8]
   11118:	6020      	str	r0, [r4, #0]
   1111a:	46b3      	mov	fp, r6
   1111c:	4632      	mov	r2, r6
   1111e:	e70c      	b.n	10f3a <__sfvwrite_r+0xae>
   11120:	4639      	mov	r1, r7
   11122:	465a      	mov	r2, fp
   11124:	f7fa fd5c 	bl	bbe0 <memmove>
   11128:	6823      	ldr	r3, [r4, #0]
   1112a:	445b      	add	r3, fp
   1112c:	6023      	str	r3, [r4, #0]
   1112e:	4621      	mov	r1, r4
   11130:	4640      	mov	r0, r8
   11132:	f7fd fc49 	bl	e9c8 <_fflush_r>
   11136:	2800      	cmp	r0, #0
   11138:	f43f af55 	beq.w	10fe6 <__sfvwrite_r+0x15a>
   1113c:	e725      	b.n	10f8a <__sfvwrite_r+0xfe>
   1113e:	4640      	mov	r0, r8
   11140:	f7fa f97c 	bl	b43c <_realloc_r>
   11144:	4603      	mov	r3, r0
   11146:	2800      	cmp	r0, #0
   11148:	d1de      	bne.n	11108 <__sfvwrite_r+0x27c>
   1114a:	6921      	ldr	r1, [r4, #16]
   1114c:	4640      	mov	r0, r8
   1114e:	f7fb f869 	bl	c224 <_free_r>
   11152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11156:	220c      	movs	r2, #12
   11158:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1115c:	f8c8 2000 	str.w	r2, [r8]
   11160:	e715      	b.n	10f8e <__sfvwrite_r+0x102>
   11162:	1c72      	adds	r2, r6, #1
   11164:	4691      	mov	r9, r2
   11166:	e726      	b.n	10fb6 <__sfvwrite_r+0x12a>
   11168:	220c      	movs	r2, #12
   1116a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1116e:	f8c8 2000 	str.w	r2, [r8]
   11172:	e70c      	b.n	10f8e <__sfvwrite_r+0x102>
   11174:	f04f 30ff 	mov.w	r0, #4294967295
   11178:	e6ba      	b.n	10ef0 <__sfvwrite_r+0x64>
   1117a:	bf00      	nop
   1117c:	7ffffc00 	.word	0x7ffffc00

00011180 <__swsetup_r>:
   11180:	b538      	push	{r3, r4, r5, lr}
   11182:	4b31      	ldr	r3, [pc, #196]	; (11248 <__swsetup_r+0xc8>)
   11184:	681b      	ldr	r3, [r3, #0]
   11186:	4605      	mov	r5, r0
   11188:	460c      	mov	r4, r1
   1118a:	b113      	cbz	r3, 11192 <__swsetup_r+0x12>
   1118c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1118e:	2a00      	cmp	r2, #0
   11190:	d04e      	beq.n	11230 <__swsetup_r+0xb0>
   11192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11196:	0718      	lsls	r0, r3, #28
   11198:	b29a      	uxth	r2, r3
   1119a:	d51c      	bpl.n	111d6 <__swsetup_r+0x56>
   1119c:	6921      	ldr	r1, [r4, #16]
   1119e:	b329      	cbz	r1, 111ec <__swsetup_r+0x6c>
   111a0:	f012 0001 	ands.w	r0, r2, #1
   111a4:	d007      	beq.n	111b6 <__swsetup_r+0x36>
   111a6:	2000      	movs	r0, #0
   111a8:	60a0      	str	r0, [r4, #8]
   111aa:	6960      	ldr	r0, [r4, #20]
   111ac:	4240      	negs	r0, r0
   111ae:	61a0      	str	r0, [r4, #24]
   111b0:	b139      	cbz	r1, 111c2 <__swsetup_r+0x42>
   111b2:	2000      	movs	r0, #0
   111b4:	bd38      	pop	{r3, r4, r5, pc}
   111b6:	0795      	lsls	r5, r2, #30
   111b8:	bf58      	it	pl
   111ba:	6960      	ldrpl	r0, [r4, #20]
   111bc:	60a0      	str	r0, [r4, #8]
   111be:	2900      	cmp	r1, #0
   111c0:	d1f7      	bne.n	111b2 <__swsetup_r+0x32>
   111c2:	0612      	lsls	r2, r2, #24
   111c4:	bf58      	it	pl
   111c6:	4608      	movpl	r0, r1
   111c8:	d5f4      	bpl.n	111b4 <__swsetup_r+0x34>
   111ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   111ce:	81a3      	strh	r3, [r4, #12]
   111d0:	f04f 30ff 	mov.w	r0, #4294967295
   111d4:	bd38      	pop	{r3, r4, r5, pc}
   111d6:	06d1      	lsls	r1, r2, #27
   111d8:	d52e      	bpl.n	11238 <__swsetup_r+0xb8>
   111da:	0752      	lsls	r2, r2, #29
   111dc:	d414      	bmi.n	11208 <__swsetup_r+0x88>
   111de:	6921      	ldr	r1, [r4, #16]
   111e0:	f043 0308 	orr.w	r3, r3, #8
   111e4:	81a3      	strh	r3, [r4, #12]
   111e6:	b29a      	uxth	r2, r3
   111e8:	2900      	cmp	r1, #0
   111ea:	d1d9      	bne.n	111a0 <__swsetup_r+0x20>
   111ec:	f402 7020 	and.w	r0, r2, #640	; 0x280
   111f0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   111f4:	d0d4      	beq.n	111a0 <__swsetup_r+0x20>
   111f6:	4621      	mov	r1, r4
   111f8:	4628      	mov	r0, r5
   111fa:	f000 f947 	bl	1148c <__smakebuf_r>
   111fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11202:	6921      	ldr	r1, [r4, #16]
   11204:	b29a      	uxth	r2, r3
   11206:	e7cb      	b.n	111a0 <__swsetup_r+0x20>
   11208:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1120a:	b151      	cbz	r1, 11222 <__swsetup_r+0xa2>
   1120c:	f104 0240 	add.w	r2, r4, #64	; 0x40
   11210:	4291      	cmp	r1, r2
   11212:	d004      	beq.n	1121e <__swsetup_r+0x9e>
   11214:	4628      	mov	r0, r5
   11216:	f7fb f805 	bl	c224 <_free_r>
   1121a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1121e:	2200      	movs	r2, #0
   11220:	6322      	str	r2, [r4, #48]	; 0x30
   11222:	6921      	ldr	r1, [r4, #16]
   11224:	2200      	movs	r2, #0
   11226:	e9c4 1200 	strd	r1, r2, [r4]
   1122a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   1122e:	e7d7      	b.n	111e0 <__swsetup_r+0x60>
   11230:	4618      	mov	r0, r3
   11232:	f7fa fb8b 	bl	b94c <__sinit>
   11236:	e7ac      	b.n	11192 <__swsetup_r+0x12>
   11238:	2209      	movs	r2, #9
   1123a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1123e:	602a      	str	r2, [r5, #0]
   11240:	f04f 30ff 	mov.w	r0, #4294967295
   11244:	81a3      	strh	r3, [r4, #12]
   11246:	bd38      	pop	{r3, r4, r5, pc}
   11248:	1fff15c8 	.word	0x1fff15c8

0001124c <__fputwc>:
   1124c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11250:	b082      	sub	sp, #8
   11252:	4682      	mov	sl, r0
   11254:	4688      	mov	r8, r1
   11256:	4614      	mov	r4, r2
   11258:	f7fa fdc2 	bl	bde0 <__locale_mb_cur_max>
   1125c:	2801      	cmp	r0, #1
   1125e:	d103      	bne.n	11268 <__fputwc+0x1c>
   11260:	f108 33ff 	add.w	r3, r8, #4294967295
   11264:	2bfe      	cmp	r3, #254	; 0xfe
   11266:	d936      	bls.n	112d6 <__fputwc+0x8a>
   11268:	f10d 0904 	add.w	r9, sp, #4
   1126c:	4642      	mov	r2, r8
   1126e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   11272:	4649      	mov	r1, r9
   11274:	4650      	mov	r0, sl
   11276:	f7fe fd01 	bl	fc7c <_wcrtomb_r>
   1127a:	1c42      	adds	r2, r0, #1
   1127c:	4606      	mov	r6, r0
   1127e:	d032      	beq.n	112e6 <__fputwc+0x9a>
   11280:	b320      	cbz	r0, 112cc <__fputwc+0x80>
   11282:	f89d c004 	ldrb.w	ip, [sp, #4]
   11286:	2500      	movs	r5, #0
   11288:	e009      	b.n	1129e <__fputwc+0x52>
   1128a:	6823      	ldr	r3, [r4, #0]
   1128c:	1c5a      	adds	r2, r3, #1
   1128e:	6022      	str	r2, [r4, #0]
   11290:	f883 c000 	strb.w	ip, [r3]
   11294:	3501      	adds	r5, #1
   11296:	42b5      	cmp	r5, r6
   11298:	d218      	bcs.n	112cc <__fputwc+0x80>
   1129a:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   1129e:	68a3      	ldr	r3, [r4, #8]
   112a0:	3b01      	subs	r3, #1
   112a2:	2b00      	cmp	r3, #0
   112a4:	60a3      	str	r3, [r4, #8]
   112a6:	daf0      	bge.n	1128a <__fputwc+0x3e>
   112a8:	69a7      	ldr	r7, [r4, #24]
   112aa:	42bb      	cmp	r3, r7
   112ac:	4661      	mov	r1, ip
   112ae:	4622      	mov	r2, r4
   112b0:	4650      	mov	r0, sl
   112b2:	db02      	blt.n	112ba <__fputwc+0x6e>
   112b4:	f1bc 0f0a 	cmp.w	ip, #10
   112b8:	d1e7      	bne.n	1128a <__fputwc+0x3e>
   112ba:	f000 f953 	bl	11564 <__swbuf_r>
   112be:	1c43      	adds	r3, r0, #1
   112c0:	d1e8      	bne.n	11294 <__fputwc+0x48>
   112c2:	4606      	mov	r6, r0
   112c4:	4630      	mov	r0, r6
   112c6:	b002      	add	sp, #8
   112c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   112cc:	4646      	mov	r6, r8
   112ce:	4630      	mov	r0, r6
   112d0:	b002      	add	sp, #8
   112d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   112d6:	fa5f fc88 	uxtb.w	ip, r8
   112da:	f88d c004 	strb.w	ip, [sp, #4]
   112de:	4606      	mov	r6, r0
   112e0:	f10d 0904 	add.w	r9, sp, #4
   112e4:	e7cf      	b.n	11286 <__fputwc+0x3a>
   112e6:	89a3      	ldrh	r3, [r4, #12]
   112e8:	4630      	mov	r0, r6
   112ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   112ee:	81a3      	strh	r3, [r4, #12]
   112f0:	b002      	add	sp, #8
   112f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   112f6:	bf00      	nop

000112f8 <_fputwc_r>:
   112f8:	b530      	push	{r4, r5, lr}
   112fa:	6e53      	ldr	r3, [r2, #100]	; 0x64
   112fc:	f013 0f01 	tst.w	r3, #1
   11300:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   11304:	4614      	mov	r4, r2
   11306:	b083      	sub	sp, #12
   11308:	4605      	mov	r5, r0
   1130a:	b29a      	uxth	r2, r3
   1130c:	d101      	bne.n	11312 <_fputwc_r+0x1a>
   1130e:	0598      	lsls	r0, r3, #22
   11310:	d51c      	bpl.n	1134c <_fputwc_r+0x54>
   11312:	0490      	lsls	r0, r2, #18
   11314:	d406      	bmi.n	11324 <_fputwc_r+0x2c>
   11316:	6e62      	ldr	r2, [r4, #100]	; 0x64
   11318:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1131c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   11320:	81a3      	strh	r3, [r4, #12]
   11322:	6662      	str	r2, [r4, #100]	; 0x64
   11324:	4622      	mov	r2, r4
   11326:	4628      	mov	r0, r5
   11328:	f7ff ff90 	bl	1124c <__fputwc>
   1132c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1132e:	07da      	lsls	r2, r3, #31
   11330:	4605      	mov	r5, r0
   11332:	d402      	bmi.n	1133a <_fputwc_r+0x42>
   11334:	89a3      	ldrh	r3, [r4, #12]
   11336:	059b      	lsls	r3, r3, #22
   11338:	d502      	bpl.n	11340 <_fputwc_r+0x48>
   1133a:	4628      	mov	r0, r5
   1133c:	b003      	add	sp, #12
   1133e:	bd30      	pop	{r4, r5, pc}
   11340:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11342:	f7fa fde9 	bl	bf18 <__retarget_lock_release_recursive>
   11346:	4628      	mov	r0, r5
   11348:	b003      	add	sp, #12
   1134a:	bd30      	pop	{r4, r5, pc}
   1134c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1134e:	9101      	str	r1, [sp, #4]
   11350:	f7fa fde0 	bl	bf14 <__retarget_lock_acquire_recursive>
   11354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11358:	9901      	ldr	r1, [sp, #4]
   1135a:	b29a      	uxth	r2, r3
   1135c:	e7d9      	b.n	11312 <_fputwc_r+0x1a>
   1135e:	bf00      	nop

00011360 <_wcsnrtombs_l>:
   11360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11364:	b08b      	sub	sp, #44	; 0x2c
   11366:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   1136a:	9f14      	ldr	r7, [sp, #80]	; 0x50
   1136c:	9103      	str	r1, [sp, #12]
   1136e:	4681      	mov	r9, r0
   11370:	9205      	str	r2, [sp, #20]
   11372:	461e      	mov	r6, r3
   11374:	f1b8 0f00 	cmp.w	r8, #0
   11378:	d05c      	beq.n	11434 <_wcsnrtombs_l+0xd4>
   1137a:	9b03      	ldr	r3, [sp, #12]
   1137c:	2b00      	cmp	r3, #0
   1137e:	d05e      	beq.n	1143e <_wcsnrtombs_l+0xde>
   11380:	9b05      	ldr	r3, [sp, #20]
   11382:	681d      	ldr	r5, [r3, #0]
   11384:	2f00      	cmp	r7, #0
   11386:	d06a      	beq.n	1145e <_wcsnrtombs_l+0xfe>
   11388:	1e74      	subs	r4, r6, #1
   1138a:	b34e      	cbz	r6, 113e0 <_wcsnrtombs_l+0x80>
   1138c:	9b03      	ldr	r3, [sp, #12]
   1138e:	9304      	str	r3, [sp, #16]
   11390:	3d04      	subs	r5, #4
   11392:	2600      	movs	r6, #0
   11394:	9501      	str	r5, [sp, #4]
   11396:	e00b      	b.n	113b0 <_wcsnrtombs_l+0x50>
   11398:	9b03      	ldr	r3, [sp, #12]
   1139a:	bb2b      	cbnz	r3, 113e8 <_wcsnrtombs_l+0x88>
   1139c:	9b01      	ldr	r3, [sp, #4]
   1139e:	681a      	ldr	r2, [r3, #0]
   113a0:	2a00      	cmp	r2, #0
   113a2:	d03a      	beq.n	1141a <_wcsnrtombs_l+0xba>
   113a4:	45bc      	cmp	ip, r7
   113a6:	d25c      	bcs.n	11462 <_wcsnrtombs_l+0x102>
   113a8:	3c01      	subs	r4, #1
   113aa:	1c63      	adds	r3, r4, #1
   113ac:	4666      	mov	r6, ip
   113ae:	d017      	beq.n	113e0 <_wcsnrtombs_l+0x80>
   113b0:	f8d8 3000 	ldr.w	r3, [r8]
   113b4:	9302      	str	r3, [sp, #8]
   113b6:	9b01      	ldr	r3, [sp, #4]
   113b8:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   113bc:	f853 2f04 	ldr.w	r2, [r3, #4]!
   113c0:	9301      	str	r3, [sp, #4]
   113c2:	a907      	add	r1, sp, #28
   113c4:	4643      	mov	r3, r8
   113c6:	4648      	mov	r0, r9
   113c8:	f8d8 b004 	ldr.w	fp, [r8, #4]
   113cc:	47a8      	blx	r5
   113ce:	1c42      	adds	r2, r0, #1
   113d0:	d03a      	beq.n	11448 <_wcsnrtombs_l+0xe8>
   113d2:	eb00 0c06 	add.w	ip, r0, r6
   113d6:	45bc      	cmp	ip, r7
   113d8:	d9de      	bls.n	11398 <_wcsnrtombs_l+0x38>
   113da:	9b02      	ldr	r3, [sp, #8]
   113dc:	e9c8 3b00 	strd	r3, fp, [r8]
   113e0:	4630      	mov	r0, r6
   113e2:	b00b      	add	sp, #44	; 0x2c
   113e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113e8:	2800      	cmp	r0, #0
   113ea:	dd0e      	ble.n	1140a <_wcsnrtombs_l+0xaa>
   113ec:	9b04      	ldr	r3, [sp, #16]
   113ee:	9d01      	ldr	r5, [sp, #4]
   113f0:	4418      	add	r0, r3
   113f2:	1e5a      	subs	r2, r3, #1
   113f4:	a907      	add	r1, sp, #28
   113f6:	f100 3eff 	add.w	lr, r0, #4294967295
   113fa:	f811 3b01 	ldrb.w	r3, [r1], #1
   113fe:	f802 3f01 	strb.w	r3, [r2, #1]!
   11402:	4572      	cmp	r2, lr
   11404:	d1f9      	bne.n	113fa <_wcsnrtombs_l+0x9a>
   11406:	9501      	str	r5, [sp, #4]
   11408:	9004      	str	r0, [sp, #16]
   1140a:	9b05      	ldr	r3, [sp, #20]
   1140c:	681a      	ldr	r2, [r3, #0]
   1140e:	3204      	adds	r2, #4
   11410:	601a      	str	r2, [r3, #0]
   11412:	9b01      	ldr	r3, [sp, #4]
   11414:	681a      	ldr	r2, [r3, #0]
   11416:	2a00      	cmp	r2, #0
   11418:	d1c4      	bne.n	113a4 <_wcsnrtombs_l+0x44>
   1141a:	9b03      	ldr	r3, [sp, #12]
   1141c:	b10b      	cbz	r3, 11422 <_wcsnrtombs_l+0xc2>
   1141e:	9b05      	ldr	r3, [sp, #20]
   11420:	601a      	str	r2, [r3, #0]
   11422:	f10c 36ff 	add.w	r6, ip, #4294967295
   11426:	2200      	movs	r2, #0
   11428:	4630      	mov	r0, r6
   1142a:	f8c8 2000 	str.w	r2, [r8]
   1142e:	b00b      	add	sp, #44	; 0x2c
   11430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11434:	9b03      	ldr	r3, [sp, #12]
   11436:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   1143a:	2b00      	cmp	r3, #0
   1143c:	d1a0      	bne.n	11380 <_wcsnrtombs_l+0x20>
   1143e:	9b05      	ldr	r3, [sp, #20]
   11440:	f04f 37ff 	mov.w	r7, #4294967295
   11444:	681d      	ldr	r5, [r3, #0]
   11446:	e79f      	b.n	11388 <_wcsnrtombs_l+0x28>
   11448:	4606      	mov	r6, r0
   1144a:	218a      	movs	r1, #138	; 0x8a
   1144c:	2200      	movs	r2, #0
   1144e:	4630      	mov	r0, r6
   11450:	f8c9 1000 	str.w	r1, [r9]
   11454:	f8c8 2000 	str.w	r2, [r8]
   11458:	b00b      	add	sp, #44	; 0x2c
   1145a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1145e:	463e      	mov	r6, r7
   11460:	e7be      	b.n	113e0 <_wcsnrtombs_l+0x80>
   11462:	4666      	mov	r6, ip
   11464:	e7bc      	b.n	113e0 <_wcsnrtombs_l+0x80>
   11466:	bf00      	nop

00011468 <_wcsnrtombs_r>:
   11468:	b510      	push	{r4, lr}
   1146a:	b084      	sub	sp, #16
   1146c:	4c05      	ldr	r4, [pc, #20]	; (11484 <_wcsnrtombs_r+0x1c>)
   1146e:	9806      	ldr	r0, [sp, #24]
   11470:	9000      	str	r0, [sp, #0]
   11472:	9807      	ldr	r0, [sp, #28]
   11474:	9001      	str	r0, [sp, #4]
   11476:	4804      	ldr	r0, [pc, #16]	; (11488 <_wcsnrtombs_r+0x20>)
   11478:	6800      	ldr	r0, [r0, #0]
   1147a:	9402      	str	r4, [sp, #8]
   1147c:	f7ff ff70 	bl	11360 <_wcsnrtombs_l>
   11480:	b004      	add	sp, #16
   11482:	bd10      	pop	{r4, pc}
   11484:	1fff133c 	.word	0x1fff133c
   11488:	1fff15c8 	.word	0x1fff15c8

0001148c <__smakebuf_r>:
   1148c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11490:	898b      	ldrh	r3, [r1, #12]
   11492:	460c      	mov	r4, r1
   11494:	0799      	lsls	r1, r3, #30
   11496:	b096      	sub	sp, #88	; 0x58
   11498:	d508      	bpl.n	114ac <__smakebuf_r+0x20>
   1149a:	f104 0343 	add.w	r3, r4, #67	; 0x43
   1149e:	2201      	movs	r2, #1
   114a0:	e9c4 3204 	strd	r3, r2, [r4, #16]
   114a4:	6023      	str	r3, [r4, #0]
   114a6:	b016      	add	sp, #88	; 0x58
   114a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   114ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   114b0:	2900      	cmp	r1, #0
   114b2:	4606      	mov	r6, r0
   114b4:	db25      	blt.n	11502 <__smakebuf_r+0x76>
   114b6:	466a      	mov	r2, sp
   114b8:	f000 f8ac 	bl	11614 <_fstat_r>
   114bc:	2800      	cmp	r0, #0
   114be:	db1f      	blt.n	11500 <__smakebuf_r+0x74>
   114c0:	9d01      	ldr	r5, [sp, #4]
   114c2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   114c6:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   114ca:	fab5 f585 	clz	r5, r5
   114ce:	f44f 6880 	mov.w	r8, #1024	; 0x400
   114d2:	096d      	lsrs	r5, r5, #5
   114d4:	f44f 6700 	mov.w	r7, #2048	; 0x800
   114d8:	4641      	mov	r1, r8
   114da:	4630      	mov	r0, r6
   114dc:	f7f9 fce6 	bl	aeac <_malloc_r>
   114e0:	b1e0      	cbz	r0, 1151c <__smakebuf_r+0x90>
   114e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   114e6:	f8c4 8014 	str.w	r8, [r4, #20]
   114ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   114ee:	6020      	str	r0, [r4, #0]
   114f0:	6120      	str	r0, [r4, #16]
   114f2:	81a3      	strh	r3, [r4, #12]
   114f4:	bb35      	cbnz	r5, 11544 <__smakebuf_r+0xb8>
   114f6:	433b      	orrs	r3, r7
   114f8:	81a3      	strh	r3, [r4, #12]
   114fa:	b016      	add	sp, #88	; 0x58
   114fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11500:	89a3      	ldrh	r3, [r4, #12]
   11502:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   11506:	d019      	beq.n	1153c <__smakebuf_r+0xb0>
   11508:	f04f 0840 	mov.w	r8, #64	; 0x40
   1150c:	2500      	movs	r5, #0
   1150e:	4641      	mov	r1, r8
   11510:	4630      	mov	r0, r6
   11512:	462f      	mov	r7, r5
   11514:	f7f9 fcca 	bl	aeac <_malloc_r>
   11518:	2800      	cmp	r0, #0
   1151a:	d1e2      	bne.n	114e2 <__smakebuf_r+0x56>
   1151c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11520:	059a      	lsls	r2, r3, #22
   11522:	d4c0      	bmi.n	114a6 <__smakebuf_r+0x1a>
   11524:	f023 0303 	bic.w	r3, r3, #3
   11528:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1152c:	f043 0302 	orr.w	r3, r3, #2
   11530:	2101      	movs	r1, #1
   11532:	e9c4 2104 	strd	r2, r1, [r4, #16]
   11536:	81a3      	strh	r3, [r4, #12]
   11538:	6022      	str	r2, [r4, #0]
   1153a:	e7b4      	b.n	114a6 <__smakebuf_r+0x1a>
   1153c:	f44f 6880 	mov.w	r8, #1024	; 0x400
   11540:	462f      	mov	r7, r5
   11542:	e7c9      	b.n	114d8 <__smakebuf_r+0x4c>
   11544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   11548:	4630      	mov	r0, r6
   1154a:	f000 f879 	bl	11640 <_isatty_r>
   1154e:	b910      	cbnz	r0, 11556 <__smakebuf_r+0xca>
   11550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11554:	e7cf      	b.n	114f6 <__smakebuf_r+0x6a>
   11556:	89a3      	ldrh	r3, [r4, #12]
   11558:	f023 0303 	bic.w	r3, r3, #3
   1155c:	f043 0301 	orr.w	r3, r3, #1
   11560:	b21b      	sxth	r3, r3
   11562:	e7c8      	b.n	114f6 <__smakebuf_r+0x6a>

00011564 <__swbuf_r>:
   11564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11566:	460d      	mov	r5, r1
   11568:	4614      	mov	r4, r2
   1156a:	4606      	mov	r6, r0
   1156c:	b110      	cbz	r0, 11574 <__swbuf_r+0x10>
   1156e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11570:	2b00      	cmp	r3, #0
   11572:	d04c      	beq.n	1160e <__swbuf_r+0xaa>
   11574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   11578:	69a3      	ldr	r3, [r4, #24]
   1157a:	60a3      	str	r3, [r4, #8]
   1157c:	0717      	lsls	r7, r2, #28
   1157e:	b290      	uxth	r0, r2
   11580:	d51b      	bpl.n	115ba <__swbuf_r+0x56>
   11582:	6923      	ldr	r3, [r4, #16]
   11584:	b1cb      	cbz	r3, 115ba <__swbuf_r+0x56>
   11586:	b2ed      	uxtb	r5, r5
   11588:	0481      	lsls	r1, r0, #18
   1158a:	462f      	mov	r7, r5
   1158c:	d522      	bpl.n	115d4 <__swbuf_r+0x70>
   1158e:	6822      	ldr	r2, [r4, #0]
   11590:	6961      	ldr	r1, [r4, #20]
   11592:	1ad3      	subs	r3, r2, r3
   11594:	4299      	cmp	r1, r3
   11596:	dd29      	ble.n	115ec <__swbuf_r+0x88>
   11598:	3301      	adds	r3, #1
   1159a:	68a1      	ldr	r1, [r4, #8]
   1159c:	3901      	subs	r1, #1
   1159e:	60a1      	str	r1, [r4, #8]
   115a0:	1c51      	adds	r1, r2, #1
   115a2:	6021      	str	r1, [r4, #0]
   115a4:	7015      	strb	r5, [r2, #0]
   115a6:	6962      	ldr	r2, [r4, #20]
   115a8:	429a      	cmp	r2, r3
   115aa:	d027      	beq.n	115fc <__swbuf_r+0x98>
   115ac:	89a3      	ldrh	r3, [r4, #12]
   115ae:	07db      	lsls	r3, r3, #31
   115b0:	d501      	bpl.n	115b6 <__swbuf_r+0x52>
   115b2:	2d0a      	cmp	r5, #10
   115b4:	d022      	beq.n	115fc <__swbuf_r+0x98>
   115b6:	4638      	mov	r0, r7
   115b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   115ba:	4621      	mov	r1, r4
   115bc:	4630      	mov	r0, r6
   115be:	f7ff fddf 	bl	11180 <__swsetup_r>
   115c2:	bb08      	cbnz	r0, 11608 <__swbuf_r+0xa4>
   115c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   115c8:	6923      	ldr	r3, [r4, #16]
   115ca:	b290      	uxth	r0, r2
   115cc:	b2ed      	uxtb	r5, r5
   115ce:	0481      	lsls	r1, r0, #18
   115d0:	462f      	mov	r7, r5
   115d2:	d4dc      	bmi.n	1158e <__swbuf_r+0x2a>
   115d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   115d8:	81a2      	strh	r2, [r4, #12]
   115da:	6e62      	ldr	r2, [r4, #100]	; 0x64
   115dc:	6961      	ldr	r1, [r4, #20]
   115de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   115e2:	6662      	str	r2, [r4, #100]	; 0x64
   115e4:	6822      	ldr	r2, [r4, #0]
   115e6:	1ad3      	subs	r3, r2, r3
   115e8:	4299      	cmp	r1, r3
   115ea:	dcd5      	bgt.n	11598 <__swbuf_r+0x34>
   115ec:	4621      	mov	r1, r4
   115ee:	4630      	mov	r0, r6
   115f0:	f7fd f9ea 	bl	e9c8 <_fflush_r>
   115f4:	b940      	cbnz	r0, 11608 <__swbuf_r+0xa4>
   115f6:	6822      	ldr	r2, [r4, #0]
   115f8:	2301      	movs	r3, #1
   115fa:	e7ce      	b.n	1159a <__swbuf_r+0x36>
   115fc:	4621      	mov	r1, r4
   115fe:	4630      	mov	r0, r6
   11600:	f7fd f9e2 	bl	e9c8 <_fflush_r>
   11604:	2800      	cmp	r0, #0
   11606:	d0d6      	beq.n	115b6 <__swbuf_r+0x52>
   11608:	f04f 37ff 	mov.w	r7, #4294967295
   1160c:	e7d3      	b.n	115b6 <__swbuf_r+0x52>
   1160e:	f7fa f99d 	bl	b94c <__sinit>
   11612:	e7af      	b.n	11574 <__swbuf_r+0x10>

00011614 <_fstat_r>:
   11614:	b570      	push	{r4, r5, r6, lr}
   11616:	460c      	mov	r4, r1
   11618:	4d08      	ldr	r5, [pc, #32]	; (1163c <_fstat_r+0x28>)
   1161a:	4603      	mov	r3, r0
   1161c:	2600      	movs	r6, #0
   1161e:	4620      	mov	r0, r4
   11620:	4611      	mov	r1, r2
   11622:	461c      	mov	r4, r3
   11624:	602e      	str	r6, [r5, #0]
   11626:	f7f7 fd83 	bl	9130 <_fstat>
   1162a:	1c43      	adds	r3, r0, #1
   1162c:	d000      	beq.n	11630 <_fstat_r+0x1c>
   1162e:	bd70      	pop	{r4, r5, r6, pc}
   11630:	682b      	ldr	r3, [r5, #0]
   11632:	2b00      	cmp	r3, #0
   11634:	d0fb      	beq.n	1162e <_fstat_r+0x1a>
   11636:	6023      	str	r3, [r4, #0]
   11638:	bd70      	pop	{r4, r5, r6, pc}
   1163a:	bf00      	nop
   1163c:	1fff7d80 	.word	0x1fff7d80

00011640 <_isatty_r>:
   11640:	b538      	push	{r3, r4, r5, lr}
   11642:	4d07      	ldr	r5, [pc, #28]	; (11660 <_isatty_r+0x20>)
   11644:	2200      	movs	r2, #0
   11646:	4604      	mov	r4, r0
   11648:	4608      	mov	r0, r1
   1164a:	602a      	str	r2, [r5, #0]
   1164c:	f7f7 fd76 	bl	913c <_isatty>
   11650:	1c43      	adds	r3, r0, #1
   11652:	d000      	beq.n	11656 <_isatty_r+0x16>
   11654:	bd38      	pop	{r3, r4, r5, pc}
   11656:	682b      	ldr	r3, [r5, #0]
   11658:	2b00      	cmp	r3, #0
   1165a:	d0fb      	beq.n	11654 <_isatty_r+0x14>
   1165c:	6023      	str	r3, [r4, #0]
   1165e:	bd38      	pop	{r3, r4, r5, pc}
   11660:	1fff7d80 	.word	0x1fff7d80

00011664 <__aeabi_d2iz>:
   11664:	ea4f 0241 	mov.w	r2, r1, lsl #1
   11668:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1166c:	d215      	bcs.n	1169a <__aeabi_d2iz+0x36>
   1166e:	d511      	bpl.n	11694 <__aeabi_d2iz+0x30>
   11670:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   11674:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   11678:	d912      	bls.n	116a0 <__aeabi_d2iz+0x3c>
   1167a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1167e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11682:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   11686:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1168a:	fa23 f002 	lsr.w	r0, r3, r2
   1168e:	bf18      	it	ne
   11690:	4240      	negne	r0, r0
   11692:	4770      	bx	lr
   11694:	f04f 0000 	mov.w	r0, #0
   11698:	4770      	bx	lr
   1169a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1169e:	d105      	bne.n	116ac <__aeabi_d2iz+0x48>
   116a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   116a4:	bf08      	it	eq
   116a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   116aa:	4770      	bx	lr
   116ac:	f04f 0000 	mov.w	r0, #0
   116b0:	4770      	bx	lr
   116b2:	bf00      	nop
   116b4:	44495353 	.word	0x44495353
   116b8:	0000203a 	.word	0x0000203a
   116bc:	41205049 	.word	0x41205049
   116c0:	65726464 	.word	0x65726464
   116c4:	203a7373 	.word	0x203a7373
   116c8:	00000000 	.word	0x00000000
   116cc:	6e676973 	.word	0x6e676973
   116d0:	73206c61 	.word	0x73206c61
   116d4:	6e657274 	.word	0x6e657274
   116d8:	20687467 	.word	0x20687467
   116dc:	53535228 	.word	0x53535228
   116e0:	003a2949 	.word	0x003a2949
   116e4:	6d426420 	.word	0x6d426420
   116e8:	00000000 	.word	0x00000000
   116ec:	73206f54 	.word	0x73206f54
   116f0:	74206565 	.word	0x74206565
   116f4:	20736968 	.word	0x20736968
   116f8:	65676170 	.word	0x65676170
   116fc:	206e6920 	.word	0x206e6920
   11700:	69746361 	.word	0x69746361
   11704:	202c6e6f 	.word	0x202c6e6f
   11708:	6e65706f 	.word	0x6e65706f
   1170c:	62206120 	.word	0x62206120
   11710:	73776f72 	.word	0x73776f72
   11714:	74207265 	.word	0x74207265
   11718:	7468206f 	.word	0x7468206f
   1171c:	2f3a7074 	.word	0x2f3a7074
   11720:	ffff002f 	.word	0xffff002f
   11724:	656c6449 	.word	0x656c6449
   11728:	00000000 	.word	0x00000000
   1172c:	20746f4e 	.word	0x20746f4e
   11730:	636e7973 	.word	0x636e7973
   11734:	6e6f7268 	.word	0x6e6f7268
   11738:	64657a69 	.word	0x64657a69
   1173c:	206f7420 	.word	0x206f7420
   11740:	204e4143 	.word	0x204e4143
   11744:	00737562 	.word	0x00737562
   11748:	6e617254 	.word	0x6e617254
   1174c:	74696d73 	.word	0x74696d73
   11750:	676e6974 	.word	0x676e6974
   11754:	00000000 	.word	0x00000000
   11758:	65636552 	.word	0x65636552
   1175c:	6e697669 	.word	0x6e697669
   11760:	00000067 	.word	0x00000067
   11764:	6f727245 	.word	0x6f727245
   11768:	63412072 	.word	0x63412072
   1176c:	65766974 	.word	0x65766974
   11770:	00000000 	.word	0x00000000
   11774:	20737542 	.word	0x20737542
   11778:	0066666f 	.word	0x0066666f
   1177c:	4942202c 	.word	0x4942202c
   11780:	455f3154 	.word	0x455f3154
   11784:	00005252 	.word	0x00005252
   11788:	4942202c 	.word	0x4942202c
   1178c:	455f3054 	.word	0x455f3054
   11790:	00005252 	.word	0x00005252
   11794:	4341202c 	.word	0x4341202c
   11798:	52455f4b 	.word	0x52455f4b
   1179c:	00000052 	.word	0x00000052
   117a0:	5243202c 	.word	0x5243202c
   117a4:	52455f43 	.word	0x52455f43
   117a8:	00000052 	.word	0x00000052
   117ac:	5246202c 	.word	0x5246202c
   117b0:	52455f4d 	.word	0x52455f4d
   117b4:	00000052 	.word	0x00000052
   117b8:	5453202c 	.word	0x5453202c
   117bc:	52455f46 	.word	0x52455f46
   117c0:	00000052 	.word	0x00000052
   117c4:	5852202c 	.word	0x5852202c
   117c8:	4e52575f 	.word	0x4e52575f
   117cc:	6425203a 	.word	0x6425203a
   117d0:	00000000 	.word	0x00000000
   117d4:	5854202c 	.word	0x5854202c
   117d8:	4e52575f 	.word	0x4e52575f
   117dc:	6425203a 	.word	0x6425203a
   117e0:	00000000 	.word	0x00000000
   117e4:	4c46202c 	.word	0x4c46202c
   117e8:	4f435f54 	.word	0x4f435f54
   117ec:	203a464e 	.word	0x203a464e
   117f0:	000a7325 	.word	0x000a7325
   117f4:	78656c46 	.word	0x78656c46
   117f8:	204e4143 	.word	0x204e4143
   117fc:	74617453 	.word	0x74617453
   11800:	00203a65 	.word	0x00203a65
   11804:	6b6f6f4c 	.word	0x6b6f6f4c
   11808:	20676e69 	.word	0x20676e69
   1180c:	20726f66 	.word	0x20726f66
   11810:	7373654d 	.word	0x7373654d
   11814:	73656761 	.word	0x73656761
   11818:	206e6f20 	.word	0x206e6f20
   1181c:	306e6143 	.word	0x306e6143
   11820:	20746120 	.word	0x20746120
   11824:	00000000 	.word	0x00000000
   11828:	73706220 	.word	0x73706220
   1182c:	0000002e 	.word	0x0000002e
   11830:	63637553 	.word	0x63637553
   11834:	21737365 	.word	0x21737365
   11838:	756f4620 	.word	0x756f4620
   1183c:	6d20646e 	.word	0x6d20646e
   11840:	61737365 	.word	0x61737365
   11844:	6f206567 	.word	0x6f206567
   11848:	4143206e 	.word	0x4143206e
   1184c:	202e304e 	.word	0x202e304e
   11850:	6e697355 	.word	0x6e697355
   11854:	00002067 	.word	0x00002067
   11858:	4d206f4e 	.word	0x4d206f4e
   1185c:	61737365 	.word	0x61737365
   11860:	20736567 	.word	0x20736567
   11864:	6e756f46 	.word	0x6e756f46
   11868:	6e6f2064 	.word	0x6e6f2064
   1186c:	4e414320 	.word	0x4e414320
   11870:	55202e30 	.word	0x55202e30
   11874:	676e6973 	.word	0x676e6973
   11878:	ffff0020 	.word	0xffff0020
   1187c:	6b6f6f4c 	.word	0x6b6f6f4c
   11880:	20676e69 	.word	0x20676e69
   11884:	20726f66 	.word	0x20726f66
   11888:	7373654d 	.word	0x7373654d
   1188c:	73656761 	.word	0x73656761
   11890:	206e6f20 	.word	0x206e6f20
   11894:	316e6143 	.word	0x316e6143
   11898:	20746120 	.word	0x20746120
   1189c:	00000000 	.word	0x00000000
   118a0:	63637553 	.word	0x63637553
   118a4:	21737365 	.word	0x21737365
   118a8:	756f4620 	.word	0x756f4620
   118ac:	6d20646e 	.word	0x6d20646e
   118b0:	61737365 	.word	0x61737365
   118b4:	6f206567 	.word	0x6f206567
   118b8:	4143206e 	.word	0x4143206e
   118bc:	202e314e 	.word	0x202e314e
   118c0:	6e697355 	.word	0x6e697355
   118c4:	00002067 	.word	0x00002067
   118c8:	4d206f4e 	.word	0x4d206f4e
   118cc:	61737365 	.word	0x61737365
   118d0:	20736567 	.word	0x20736567
   118d4:	6e756f46 	.word	0x6e756f46
   118d8:	6e6f2064 	.word	0x6e6f2064
   118dc:	4e414320 	.word	0x4e414320
   118e0:	55202e31 	.word	0x55202e31
   118e4:	676e6973 	.word	0x676e6973
   118e8:	ffff0020 	.word	0xffff0020
   118ec:	65636341 	.word	0x65636341
   118f0:	50207373 	.word	0x50207373
   118f4:	746e696f 	.word	0x746e696f
   118f8:	62655720 	.word	0x62655720
   118fc:	72655320 	.word	0x72655320
   11900:	00726576 	.word	0x00726576
   11904:	69466957 	.word	0x69466957
   11908:	69687320 	.word	0x69687320
   1190c:	20646c65 	.word	0x20646c65
   11910:	20746f6e 	.word	0x20746f6e
   11914:	73657270 	.word	0x73657270
   11918:	00746e65 	.word	0x00746e65
   1191c:	6d726946 	.word	0x6d726946
   11920:	65726177 	.word	0x65726177
   11924:	72655620 	.word	0x72655620
   11928:	6e6f6973 	.word	0x6e6f6973
   1192c:	0000203a 	.word	0x0000203a
   11930:	61657243 	.word	0x61657243
   11934:	676e6974 	.word	0x676e6974
   11938:	63636120 	.word	0x63636120
   1193c:	20737365 	.word	0x20737365
   11940:	6e696f70 	.word	0x6e696f70
   11944:	616e2074 	.word	0x616e2074
   11948:	3a64656d 	.word	0x3a64656d
   1194c:	00000020 	.word	0x00000020
   11950:	61657243 	.word	0x61657243
   11954:	676e6974 	.word	0x676e6974
   11958:	63636120 	.word	0x63636120
   1195c:	20737365 	.word	0x20737365
   11960:	6e696f70 	.word	0x6e696f70
   11964:	61662074 	.word	0x61662074
   11968:	64656c69 	.word	0x64656c69
   1196c:	00000000 	.word	0x00000000
   11970:	4f464946 	.word	0x4f464946
   11974:	616e4520 	.word	0x616e4520
   11978:	64656c62 	.word	0x64656c62
   1197c:	3e2d2d20 	.word	0x3e2d2d20
   11980:	00000020 	.word	0x00000020
   11984:	65746e49 	.word	0x65746e49
   11988:	70757272 	.word	0x70757272
   1198c:	6e452074 	.word	0x6e452074
   11990:	656c6261 	.word	0x656c6261
   11994:	00000064 	.word	0x00000064
   11998:	65746e49 	.word	0x65746e49
   1199c:	70757272 	.word	0x70757272
   119a0:	69442074 	.word	0x69442074
   119a4:	6c626173 	.word	0x6c626173
   119a8:	00006465 	.word	0x00006465
   119ac:	46494609 	.word	0x46494609
   119b0:	6946204f 	.word	0x6946204f
   119b4:	7265746c 	.word	0x7265746c
   119b8:	6e692073 	.word	0x6e692073
   119bc:	65737520 	.word	0x65737520
   119c0:	0000203a 	.word	0x0000203a
   119c4:	6d655209 	.word	0x6d655209
   119c8:	696e6961 	.word	0x696e6961
   119cc:	4d20676e 	.word	0x4d20676e
   119d0:	626c6961 	.word	0x626c6961
   119d4:	7365786f 	.word	0x7365786f
   119d8:	0000203a 	.word	0x0000203a
   119dc:	424d0909 	.word	0x424d0909
   119e0:	00000000 	.word	0x00000000
   119e4:	646f6320 	.word	0x646f6320
   119e8:	52203a65 	.word	0x52203a65
   119ec:	4e495f58 	.word	0x4e495f58
   119f0:	49544341 	.word	0x49544341
   119f4:	00004556 	.word	0x00004556
   119f8:	646f6320 	.word	0x646f6320
   119fc:	52203a65 	.word	0x52203a65
   11a00:	4d455f58 	.word	0x4d455f58
   11a04:	00595450 	.word	0x00595450
   11a08:	78452809 	.word	0x78452809
   11a0c:	646e6574 	.word	0x646e6574
   11a10:	46206465 	.word	0x46206465
   11a14:	656d6172 	.word	0x656d6172
   11a18:	00000029 	.word	0x00000029
   11a1c:	74532809 	.word	0x74532809
   11a20:	61646e61 	.word	0x61646e61
   11a24:	46206472 	.word	0x46206472
   11a28:	656d6172 	.word	0x656d6172
   11a2c:	00000029 	.word	0x00000029
   11a30:	646f6320 	.word	0x646f6320
   11a34:	52203a65 	.word	0x52203a65
   11a38:	55465f58 	.word	0x55465f58
   11a3c:	00004c4c 	.word	0x00004c4c
   11a40:	646f6320 	.word	0x646f6320
   11a44:	52203a65 	.word	0x52203a65
   11a48:	564f5f58 	.word	0x564f5f58
   11a4c:	55525245 	.word	0x55525245
   11a50:	0000004e 	.word	0x0000004e
   11a54:	646f6320 	.word	0x646f6320
   11a58:	52203a65 	.word	0x52203a65
   11a5c:	41525f58 	.word	0x41525f58
   11a60:	4557534e 	.word	0x4557534e
   11a64:	00000052 	.word	0x00000052
   11a68:	646f6320 	.word	0x646f6320
   11a6c:	52203a65 	.word	0x52203a65
   11a70:	55425f58 	.word	0x55425f58
   11a74:	00005953 	.word	0x00005953
   11a78:	646f6320 	.word	0x646f6320
   11a7c:	54203a65 	.word	0x54203a65
   11a80:	4e495f58 	.word	0x4e495f58
   11a84:	49544341 	.word	0x49544341
   11a88:	00004556 	.word	0x00004556
   11a8c:	646f6320 	.word	0x646f6320
   11a90:	54203a65 	.word	0x54203a65
   11a94:	42415f58 	.word	0x42415f58
   11a98:	0054524f 	.word	0x0054524f
   11a9c:	646f6320 	.word	0x646f6320
   11aa0:	54203a65 	.word	0x54203a65
   11aa4:	41445f58 	.word	0x41445f58
   11aa8:	28204154 	.word	0x28204154
   11aac:	6e617254 	.word	0x6e617254
   11ab0:	74696d73 	.word	0x74696d73
   11ab4:	676e6974 	.word	0x676e6974
   11ab8:	00000029 	.word	0x00000029
   11abc:	74784528 	.word	0x74784528
   11ac0:	65646e65 	.word	0x65646e65
   11ac4:	72462064 	.word	0x72462064
   11ac8:	29656d61 	.word	0x29656d61
   11acc:	00000000 	.word	0x00000000
   11ad0:	61745328 	.word	0x61745328
   11ad4:	7261646e 	.word	0x7261646e
   11ad8:	72462064 	.word	0x72462064
   11adc:	29656d61 	.word	0x29656d61
   11ae0:	00000000 	.word	0x00000000
   11ae4:	3a444928 	.word	0x3a444928
   11ae8:	00783020 	.word	0x00783020
   11aec:	79615028 	.word	0x79615028
   11af0:	64616f6c 	.word	0x64616f6c
   11af4:	0000203a 	.word	0x0000203a
   11af8:	646f6320 	.word	0x646f6320
   11afc:	54203a65 	.word	0x54203a65
   11b00:	41545f58 	.word	0x41545f58
   11b04:	4557534e 	.word	0x4557534e
   11b08:	00000052 	.word	0x00000052
   11b0c:	4f464946 	.word	0x4f464946
   11b10:	73694420 	.word	0x73694420
   11b14:	656c6261 	.word	0x656c6261
   11b18:	4d090a64 	.word	0x4d090a64
   11b1c:	626c6961 	.word	0x626c6961
   11b20:	7365786f 	.word	0x7365786f
   11b24:	ff000a3a 	.word	0xff000a3a
   11b28:	53202d20 	.word	0x53202d20
   11b2c:	20746e65 	.word	0x20746e65
   11b30:	00206f74 	.word	0x00206f74
   11b34:	45202d20 	.word	0x45202d20
   11b38:	726f7272 	.word	0x726f7272
   11b3c:	00000000 	.word	0x00000000
   11b40:	324e4143 	.word	0x324e4143
   11b44:	ffffff00 	.word	0xffffff00
   11b48:	2e302528 	.word	0x2e302528
   11b4c:	20296636 	.word	0x20296636
   11b50:	25207325 	.word	0x25207325
   11b54:	20583830 	.word	0x20583830
   11b58:	5d64255b 	.word	0x5d64255b
   11b5c:	00000000 	.word	0x00000000
   11b60:	32302520 	.word	0x32302520
   11b64:	00000058 	.word	0x00000058
   11b68:	206e6163 	.word	0x206e6163
   11b6c:	ffffff00 	.word	0xffffff00
   11b70:	65636552 	.word	0x65636552
   11b74:	64657669 	.word	0x64657669
   11b78:	63617020 	.word	0x63617020
   11b7c:	2074656b 	.word	0x2074656b
   11b80:	7320666f 	.word	0x7320666f
   11b84:	20657a69 	.word	0x20657a69
   11b88:	00000000 	.word	0x00000000
   11b8c:	6d6f7246 	.word	0x6d6f7246
   11b90:	00000020 	.word	0x00000020
   11b94:	6f70202c 	.word	0x6f70202c
   11b98:	00207472 	.word	0x00207472
   11b9c:	746e6f43 	.word	0x746e6f43
   11ba0:	73746e65 	.word	0x73746e65
   11ba4:	ffff003a 	.word	0xffff003a

00011ba8 <vtable for FlexCAN_T4<(CAN_DEV_TABLE)1074413568, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>>:
	...
   11bb0:	00002b89 00000485 00001995 00000711     .+..............
   11bc0:	00003269 00000715 00000719              i2..........

00011bcc <vtable for FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>>:
	...
   11bd4:	0000231d 000005c5 000016f5 00000705     .#..............
   11be4:	00003121 00000709 0000070d 01010000     !1..............
   11bf4:	01010100 01010201 02010202 03020103     ................
   11c04:	02040202 02020502 06020305 03070203     ................
   11c14:	03040702 07030407 05070405 05060704     ................
   11c24:	07060607 07070606 00070707 656c6449     ............Idle
	...
   11c78:	08000000 00000000 00000000 00000000     ................

00011c88 <SPIClass::spi0_hardware>:
   11c88:	4004803c 00001000 00001a04 00007fff     <..@............
   11c98:	00000e0f 000050d1 ff27080c 00000200     .....P....'.....
   11ca8:	00000200 00000200 00000000 ff1c070b     ................
   11cb8:	00000200 00000200 00000200 00000000     ................
   11cc8:	001b0e0d 00000200 00000200 00000200     ................
   11cd8:	0609020a 16151714 002d1a0f 00000200     ..........-.....
   11ce8:	00000200 00000200 00000200 00000200     ................
   11cf8:	00000200 00000200 00000200 00000200     ................
   11d08:	00000200 00000300 02020101 08080404     ................
   11d18:	00200110                                .. .

00011d1c <SPIClass::spi1_hardware>:
   11d1c:	4004803c 00002000 00001b01 00007fff     <..@. ..........
   11d2c:	00001011 000050e1 3b3d0501 00000200     .....P....=;....
   11d3c:	00000700 00000200 00000700 3b3d1500     ..............=;
   11d4c:	00000200 00000700 00000700 00000200     ................
   11d5c:	003c1420 00000200 00000700 00000200      .<.............
   11d6c:	3e3a1f06 ffffff3f 00ffffff 00000700     ..:>?...........
   11d7c:	00000200 00000200 00000200 00000200     ................
	...
   11da4:	01020101 00000004 00000000              ............

00011db0 <SPIClass::spi2_hardware>:
   11db0:	40048030 00001000 00004101 00007fff     0..@.....A......
   11dc0:	00002627 000050f1 ffff332d 00000200     '&...P..-3......
   11dd0:	00000200 00000000 00000000 ffff342c     ............,4..
   11de0:	00000200 00000200 00000000 00000000     ................
   11df0:	00ff352e 00000200 00000200 00000000     .5..............
   11e00:	ff37362b ffffffff 00ffffff 00000200     +67.............
   11e10:	00000200 00000200 00000000 00000000     ................
	...
   11e38:	00010201 00000000 00000000 7272452d     ............-Err
   11e48:	0000002d 252e6425 64252e64 ffffff00     -...%d.%d.%d....
   11e58:	69666977 2d313031 58322e25 58322e25     wifi101-%.2X%.2X
   11e68:	00000000 69666977 00313031              ....wifi101.

00011e74 <vtable for WiFiUDP>:
	...
   11e7c:	00005be5 00005b05 00005969 000059ad     .[...[..iY...Y..
   11e8c:	00005a9d 00005989 00005cd5 000059d1     .Z...Y...\...Y..
   11e9c:	00005a71 000059b1 00005975 00005b91     qZ...Y..uY...[..
   11eac:	00005ab9 00005c45 00005d19 0000596d     .Z..E\...]..mY..
   11ebc:	00005b35 00005b61 00005d71              5[..a[..q]..

00011ec8 <CSWTCH.4>:
   11ec8:	06050403 ff12100f                       ........

00011ed0 <crc7_syndrome_table>:
   11ed0:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   11ee0:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   11ef0:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   11f00:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   11f10:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   11f20:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   11f30:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   11f40:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   11f50:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   11f60:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   11f70:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   11f80:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   11f90:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   11fa0:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   11fb0:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   11fc0:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy

00011fd0 <vtable for WiFiSocketClass>:
	...
   11fd8:	00008495 00008499                       ........

00011fe0 <_serialEvent_default>:
   11fe0:	ffffff00                                ....

00011fe4 <vtable for IPAddress>:
	...
   11fec:	00008c31                                1...

00011ff0 <CSWTCH.43>:
   11ff0:	00000008 0000000c 0000000a 00000009     ................
   12000:	0000000b                                ....

00012004 <digital_pin_to_info_PGM>:
   12004:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
   12014:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
   12024:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
   12034:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
   12044:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
   12054:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
   12064:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
   12074:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
   12084:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
   12094:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
   120a4:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
   120b4:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
   120c4:	43fe2068 4004d068 43fe0014 40049014     h .Ch..@...C...@
   120d4:	43fe0038 40049038 43fe003c 4004903c     8..C8..@<..C<..@
   120e4:	43fe0040 40049040 43fe0848 4004a048     @..C@..@H..CH..@
   120f4:	43fe084c 4004a04c 43fe0828 4004a028     L..CL..@(..C(..@
   12104:	43fe082c 4004a02c 43fe2060 4004d060     ,..C,..@` .C`..@
   12114:	43fe2064 4004d064 43fe1020 4004b020     d .Cd..@ ..C ..@
   12124:	43fe1024 4004b024 43fe1028 4004b028     $..C$..@(..C(..@
   12134:	43fe102c 4004b02c 43fe0044 40049044     ,..C,..@D..CD..@
   12144:	43fe0070 40049070 43fe0074 40049074     p..Cp..@t..Ct..@
   12154:	43fe0068 40049068 43fe0850 4004a050     h..Ch..@P..CP..@
   12164:	43fe0858 4004a058 43fe085c 4004a05c     X..CX..@\..C\..@
   12174:	43fe0854 4004a054 43fe1820 4004c020     T..CT..@ ..C ..@
   12184:	43fe1824 4004c024 43fe0810 4004a010     $..C$..@...C...@
   12194:	43fe0814 4004a014 43fe1838 4004c038     ...C...@8..C8..@
   121a4:	43fe1834 4004c034 43fe1830 4004c030     4..C4..@0..C0..@
   121b4:	43fe183c 4004c03c 43fe182c 4004c02c     <..C<..@,..C,..@
   121c4:	43fe2028 4004d028 43fe202c 4004d02c     ( .C(..@, .C,..@
   121d4:	43fe2000 4004d000 43fe2004 4004d004     . .C...@. .C...@
   121e4:	43fe2008 4004d008 43fe200c 4004d00c     . .C...@. .C...@
   121f4:	43fe2010 4004d010 43fe2014 4004d014     . .C...@. .C...@

00012204 <vtable for usb_serial_class>:
	...
   1220c:	00009ff1 00009fe9 00009fe5 00009fe1     ................
   1221c:	00009fdd 00009fd9 00009fd5 00009fd1     ................

0001222c <usb_descriptor_list>:
   1222c:	00000100 1fff0ec0 00000012 00000200     ................
   1223c:	1fff0e7c 00000043 00000300 1fff0ed4     |...C...........
   1224c:	00000000 04090301 1fff0ed8 00000000     ................
   1225c:	04090302 1fff0ef0 00000000 04090303     ................
   1226c:	1fff0f08 00000000 00000000 00000000     ................
   1227c:	00000000                                ....

00012280 <usb_endpoint_config_table>:
   12280:	15191500                                ....

00012284 <_ctype_>:
   12284:	20202000 20202020 28282020 20282828     .         ((((( 
   12294:	20202020 20202020 20202020 20202020                     
   122a4:	10108820 10101010 10101010 10101010      ...............
   122b4:	04040410 04040404 10040404 10101010     ................
   122c4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   122d4:	01010101 01010101 01010101 10101010     ................
   122e4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   122f4:	02020202 02020202 02020202 10101010     ................
   12304:	00000020 00000000 00000000 00000000      ...............
	...
   12384:	ffffff00 435f434c 414c4c4f 00004554     ....LC_COLLATE..
   12394:	435f434c 45505954 00000000 4d5f434c     LC_CTYPE....LC_M
   123a4:	54454e4f 00595241 4e5f434c 52454d55     ONETARY.LC_NUMER
   123b4:	00004349 545f434c 00454d49 4d5f434c     IC..LC_TIME.LC_M
   123c4:	41535345 00534547 6c6c6142 7320636f     ESSAGES.Balloc s
   123d4:	65636375 64656465 00000000 7461642f     ucceeded..../dat
   123e4:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   123f4:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   12404:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
   12414:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   12424:	696c2f62 732f6362 696c6474 706d2f62     b/libc/stdlib/mp
   12434:	2e636572 ffff0063 ffffffff              rec.c.......

00012440 <__mprec_bigtens>:
   12440:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   12450:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   12460:	7f73bf3c 75154fdd                       <.s..O.u

00012468 <__mprec_tens>:
   12468:	00000000 3ff00000 00000000 40240000     .......?......$@
   12478:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   12488:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   12498:	00000000 412e8480 00000000 416312d0     .......A......cA
   124a8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   124b8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   124c8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   124d8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   124e8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   124f8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   12508:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   12518:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   12528:	79d99db4 44ea7843 00000005 00000019     ...yCx.D........
   12538:	0000007d 00464e49 00666e69 004e414e     }...INF.inf.NAN.
   12548:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   12558:	66656463 00000000 33323130 37363534     cdef....01234567
   12568:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   12578:	0000296c ffff0030 20202020 20202020     l)..0...        
   12588:	20202020 20202020 30303030 30303030             00000000
   12598:	30303030 30303030 7566202c 6974636e     00000000, functi
   125a8:	203a6e6f 00000000 65737361 6f697472     on: ....assertio
   125b8:	2522206e 66202273 656c6961 66203a64     n "%s" failed: f
   125c8:	20656c69 22732522 696c202c 2520656e     ile "%s", line %
   125d8:	25732564 ff000a73 69666e49 7974696e     d%s%s...Infinity
   125e8:	00000000 004e614e 7461642f 656a2f61     ....NaN./data/je
   125f8:	6e696b6e 6f772f73 70736b72 2f656361     nkins/workspace/
   12608:	2d554e47 6c6f6f74 69616863 72612f6e     GNU-toolchain/ar
   12618:	31312d6d 6372732f 77656e2f 2d62696c     m-11/src/newlib-
   12628:	77677963 6e2f6e69 696c7765 696c2f62     cygwin/newlib/li
   12638:	732f6362 696c6474 74642f62 632e616f     bc/stdlib/dtoa.c
   12648:	ffffff00 20202020 20202020 20202020     ....            
   12658:	20202020 30303030 30303030 30303030         000000000000
   12668:	30303030                                0000

0001266c <_init>:
   1266c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1266e:	bf00      	nop
   12670:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12672:	bc08      	pop	{r3}
   12674:	469e      	mov	lr, r3
   12676:	4770      	bx	lr

00012678 <__init_array_start>:
   12678:	0000c165 	.word	0x0000c165

0001267c <__frame_dummy_init_array_entry>:
   1267c:	00000435 000033b1 00005101 00005951     5....3...Q..QY..
   1268c:	000060ad 00008a4d                       .`..M...

Disassembly of section .fini:

00012694 <_fini>:
   12694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12696:	bf00      	nop

Disassembly of section .data:

1fff0730 <port_E_isr>:
PORT_ISR_FUNCTION_CLZ(E)
1fff0730:	b538      	push	{r3, r4, r5, lr}
1fff0732:	4b0a      	ldr	r3, [pc, #40]	; (1fff075c <port_E_isr+0x2c>)
1fff0734:	4d0a      	ldr	r5, [pc, #40]	; (1fff0760 <port_E_isr+0x30>)
1fff0736:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff073a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff073e:	e005      	b.n	1fff074c <port_E_isr+0x1c>
1fff0740:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff0744:	4798      	blx	r3
1fff0746:	1e63      	subs	r3, r4, #1
1fff0748:	401c      	ands	r4, r3
1fff074a:	d005      	beq.n	1fff0758 <port_E_isr+0x28>
1fff074c:	fa94 f3a4 	rbit	r3, r4
1fff0750:	fab3 f383 	clz	r3, r3
1fff0754:	2c00      	cmp	r4, #0
1fff0756:	d1f3      	bne.n	1fff0740 <port_E_isr+0x10>
1fff0758:	bd38      	pop	{r3, r4, r5, pc}
1fff075a:	bf00      	nop
1fff075c:	4004d000 	.word	0x4004d000
1fff0760:	1fff0df8 	.word	0x1fff0df8

1fff0764 <port_D_isr>:
PORT_ISR_FUNCTION_CLZ(D)
1fff0764:	b538      	push	{r3, r4, r5, lr}
1fff0766:	4b0a      	ldr	r3, [pc, #40]	; (1fff0790 <port_D_isr+0x2c>)
1fff0768:	4d0a      	ldr	r5, [pc, #40]	; (1fff0794 <port_D_isr+0x30>)
1fff076a:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff076e:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff0772:	e005      	b.n	1fff0780 <port_D_isr+0x1c>
1fff0774:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff0778:	4798      	blx	r3
1fff077a:	1e63      	subs	r3, r4, #1
1fff077c:	401c      	ands	r4, r3
1fff077e:	d005      	beq.n	1fff078c <port_D_isr+0x28>
1fff0780:	fa94 f3a4 	rbit	r3, r4
1fff0784:	fab3 f383 	clz	r3, r3
1fff0788:	2c00      	cmp	r4, #0
1fff078a:	d1f3      	bne.n	1fff0774 <port_D_isr+0x10>
1fff078c:	bd38      	pop	{r3, r4, r5, pc}
1fff078e:	bf00      	nop
1fff0790:	4004c000 	.word	0x4004c000
1fff0794:	1fff0db8 	.word	0x1fff0db8

1fff0798 <port_C_isr>:
PORT_ISR_FUNCTION_CLZ(C)
1fff0798:	b538      	push	{r3, r4, r5, lr}
1fff079a:	4b0a      	ldr	r3, [pc, #40]	; (1fff07c4 <port_C_isr+0x2c>)
1fff079c:	4d0a      	ldr	r5, [pc, #40]	; (1fff07c8 <port_C_isr+0x30>)
1fff079e:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff07a2:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff07a6:	e005      	b.n	1fff07b4 <port_C_isr+0x1c>
1fff07a8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff07ac:	4798      	blx	r3
1fff07ae:	1e63      	subs	r3, r4, #1
1fff07b0:	401c      	ands	r4, r3
1fff07b2:	d005      	beq.n	1fff07c0 <port_C_isr+0x28>
1fff07b4:	fa94 f3a4 	rbit	r3, r4
1fff07b8:	fab3 f383 	clz	r3, r3
1fff07bc:	2c00      	cmp	r4, #0
1fff07be:	d1f3      	bne.n	1fff07a8 <port_C_isr+0x10>
1fff07c0:	bd38      	pop	{r3, r4, r5, pc}
1fff07c2:	bf00      	nop
1fff07c4:	4004b000 	.word	0x4004b000
1fff07c8:	1fff0d88 	.word	0x1fff0d88

1fff07cc <port_B_isr>:
PORT_ISR_FUNCTION_CLZ(B)
1fff07cc:	b538      	push	{r3, r4, r5, lr}
1fff07ce:	4b0a      	ldr	r3, [pc, #40]	; (1fff07f8 <port_B_isr+0x2c>)
1fff07d0:	4d0a      	ldr	r5, [pc, #40]	; (1fff07fc <port_B_isr+0x30>)
1fff07d2:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff07d6:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff07da:	e005      	b.n	1fff07e8 <port_B_isr+0x1c>
1fff07dc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff07e0:	4798      	blx	r3
1fff07e2:	1e63      	subs	r3, r4, #1
1fff07e4:	401c      	ands	r4, r3
1fff07e6:	d005      	beq.n	1fff07f4 <port_B_isr+0x28>
1fff07e8:	fa94 f3a4 	rbit	r3, r4
1fff07ec:	fab3 f383 	clz	r3, r3
1fff07f0:	2c00      	cmp	r4, #0
1fff07f2:	d1f3      	bne.n	1fff07dc <port_B_isr+0x10>
1fff07f4:	bd38      	pop	{r3, r4, r5, pc}
1fff07f6:	bf00      	nop
1fff07f8:	4004a000 	.word	0x4004a000
1fff07fc:	1fff0d28 	.word	0x1fff0d28

1fff0800 <port_A_isr>:
PORT_ISR_FUNCTION_CLZ(A)
1fff0800:	b538      	push	{r3, r4, r5, lr}
1fff0802:	4b0a      	ldr	r3, [pc, #40]	; (1fff082c <port_A_isr+0x2c>)
1fff0804:	4d0a      	ldr	r5, [pc, #40]	; (1fff0830 <port_A_isr+0x30>)
1fff0806:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff080a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff080e:	e005      	b.n	1fff081c <port_A_isr+0x1c>
1fff0810:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff0814:	4798      	blx	r3
1fff0816:	1e63      	subs	r3, r4, #1
1fff0818:	401c      	ands	r4, r3
1fff081a:	d005      	beq.n	1fff0828 <port_A_isr+0x28>
1fff081c:	fa94 f3a4 	rbit	r3, r4
1fff0820:	fab3 f383 	clz	r3, r3
1fff0824:	2c00      	cmp	r4, #0
1fff0826:	d1f3      	bne.n	1fff0810 <port_A_isr+0x10>
1fff0828:	bd38      	pop	{r3, r4, r5, pc}
1fff082a:	bf00      	nop
1fff082c:	40049000 	.word	0x40049000
1fff0830:	1fff0cb0 	.word	0x1fff0cb0

1fff0834 <__dso_handle>:
1fff0834:	00000000                                ....

1fff0838 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setRX(FLEXCAN_PINS)::init_pins>:
1fff0838:	                                         .

1fff0839 <FlexCAN_T4<(CAN_DEV_TABLE)1073889280, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setTX(FLEXCAN_PINS)::init_pins>:
1fff0839:	                                         ...

1fff083c <ReplyBuffer>:
1fff083c:	6e6b6341 656c776f 64656764 00000000     Acknowledged....
	...

1fff0c3c <baud_rates>:
1fff0c3c:	0007a120 0003d090 0001e848 000a2c2a      .......H...*,..
1fff0c4c:	000f4240 0003d090                       @B......

1fff0c54 <destPort>:
1fff0c54:	00000956                                V...

1fff0c58 <localPort>:
1fff0c58:	00000956                                V...

1fff0c5c <rxmsg>:
	...
1fff0c64:	08000000 00000000 00000000 00000000     ................

1fff0c74 <ssid>:
1fff0c74:	52555343 61657365 54686372 6b637572     CSUResearchTruck
1fff0c84:	00000000                                ....

1fff0c88 <txmsg>:
	...
1fff0c90:	08000000 00000000 00000000 00000000     ................

1fff0ca0 <gi8Winc1501ChipEnPin>:
1fff0ca0:	                                         .

1fff0ca1 <gi8Winc1501CsPin>:
1fff0ca1:	                                         .

1fff0ca2 <gi8Winc1501IntnPin>:
1fff0ca2:	                                         .

1fff0ca3 <gi8Winc1501ResetPin>:
1fff0ca3:	                                         .

1fff0ca4 <egstrNmBusCapabilities>:
1fff0ca4:	00000100                                ....

1fff0ca8 <syncInterval>:
1fff0ca8:	0000012c                                ,...

1fff0cac <__brkval>:
1fff0cac:	1fff7f24                                $...

1fff0cb0 <isr_table_portA>:
1fff0cb0:	00009205 00009205 00009205 00009205     ................
1fff0cc0:	00009205 00009205 00009205 00009205     ................
1fff0cd0:	00009205 00009205 00009205 00009205     ................
1fff0ce0:	00009205 00009205 00009205 00009205     ................
1fff0cf0:	00009205 00009205 00009205 00009205     ................
1fff0d00:	00009205 00009205 00009205 00009205     ................
1fff0d10:	00009205 00009205 00009205 00009205     ................
1fff0d20:	00009205 00009205                       ........

1fff0d28 <isr_table_portB>:
1fff0d28:	00009205 00009205 00009205 00009205     ................
1fff0d38:	00009205 00009205 00009205 00009205     ................
1fff0d48:	00009205 00009205 00009205 00009205     ................
1fff0d58:	00009205 00009205 00009205 00009205     ................
1fff0d68:	00009205 00009205 00009205 00009205     ................
1fff0d78:	00009205 00009205 00009205 00009205     ................

1fff0d88 <isr_table_portC>:
1fff0d88:	00009205 00009205 00009205 00009205     ................
1fff0d98:	00009205 00009205 00009205 00009205     ................
1fff0da8:	00009205 00009205 00009205 00009205     ................

1fff0db8 <isr_table_portD>:
1fff0db8:	00009205 00009205 00009205 00009205     ................
1fff0dc8:	00009205 00009205 00009205 00009205     ................
1fff0dd8:	00009205 00009205 00009205 00009205     ................
1fff0de8:	00009205 00009205 00009205 00009205     ................

1fff0df8 <isr_table_portE>:
1fff0df8:	00009205 00009205 00009205 00009205     ................
1fff0e08:	00009205 00009205 00009205 00009205     ................
1fff0e18:	00009205 00009205 00009205 00009205     ................
1fff0e28:	00009205 00009205 00009205 00009205     ................
1fff0e38:	00009205 00009205 00009205 00009205     ................
1fff0e48:	00009205 00009205 00009205 00009205     ................
1fff0e58:	00009205 00009205 00009205              ............

1fff0e64 <Serial>:
1fff0e64:	0001220c 00000000 000003e8 00000000     ."..............

1fff0e74 <usb_buffer_available>:
1fff0e74:	ffffffff                                ....

1fff0e78 <yield_active_check_flags>:
1fff0e78:	                                         .

1fff0e79 <analog_config_bits>:
1fff0e79:	                                         .

1fff0e7a <analog_num_average>:
1fff0e7a:	                                         ..

1fff0e7c <config_descriptor>:
1fff0e7c:	00430209 c0000102 00040932 02020100     ..C.....2.......
1fff0e8c:	24050001 05011000 01010124 06022404     ...$....$....$..
1fff0e9c:	00062405 82050701 40001003 00010409     .$.........@....
1fff0eac:	00000a02 03050700 00004002 02840507     .........@......
1fff0ebc:	00000040                                @...

1fff0ec0 <device_descriptor>:
1fff0ec0:	01100112 40000002 048316c0 02010277     .......@....w...
1fff0ed0:	00000103                                ....

1fff0ed4 <string0>:
1fff0ed4:	04090304                                ....

1fff0ed8 <usb_string_manufacturer_name_default>:
1fff0ed8:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
1fff0ee8:	00690075 006f006e                       u.i.n.o.

1fff0ef0 <usb_string_product_name_default>:
1fff0ef0:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
1fff0f00:	00610069 0000006c                       i.a.l...

1fff0f08 <usb_string_serial_number_default>:
1fff0f08:	0000030c 00000000 00000000 00000000     ................
	...

1fff0f20 <__malloc_av_>:
	...
1fff0f28:	1fff0f20 1fff0f20 1fff0f28 1fff0f28      ... ...(...(...
1fff0f38:	1fff0f30 1fff0f30 1fff0f38 1fff0f38     0...0...8...8...
1fff0f48:	1fff0f40 1fff0f40 1fff0f48 1fff0f48     @...@...H...H...
1fff0f58:	1fff0f50 1fff0f50 1fff0f58 1fff0f58     P...P...X...X...
1fff0f68:	1fff0f60 1fff0f60 1fff0f68 1fff0f68     `...`...h...h...
1fff0f78:	1fff0f70 1fff0f70 1fff0f78 1fff0f78     p...p...x...x...
1fff0f88:	1fff0f80 1fff0f80 1fff0f88 1fff0f88     ................
1fff0f98:	1fff0f90 1fff0f90 1fff0f98 1fff0f98     ................
1fff0fa8:	1fff0fa0 1fff0fa0 1fff0fa8 1fff0fa8     ................
1fff0fb8:	1fff0fb0 1fff0fb0 1fff0fb8 1fff0fb8     ................
1fff0fc8:	1fff0fc0 1fff0fc0 1fff0fc8 1fff0fc8     ................
1fff0fd8:	1fff0fd0 1fff0fd0 1fff0fd8 1fff0fd8     ................
1fff0fe8:	1fff0fe0 1fff0fe0 1fff0fe8 1fff0fe8     ................
1fff0ff8:	1fff0ff0 1fff0ff0 1fff0ff8 1fff0ff8     ................
1fff1008:	1fff1000 1fff1000 1fff1008 1fff1008     ................
1fff1018:	1fff1010 1fff1010 1fff1018 1fff1018     ................
1fff1028:	1fff1020 1fff1020 1fff1028 1fff1028      ... ...(...(...
1fff1038:	1fff1030 1fff1030 1fff1038 1fff1038     0...0...8...8...
1fff1048:	1fff1040 1fff1040 1fff1048 1fff1048     @...@...H...H...
1fff1058:	1fff1050 1fff1050 1fff1058 1fff1058     P...P...X...X...
1fff1068:	1fff1060 1fff1060 1fff1068 1fff1068     `...`...h...h...
1fff1078:	1fff1070 1fff1070 1fff1078 1fff1078     p...p...x...x...
1fff1088:	1fff1080 1fff1080 1fff1088 1fff1088     ................
1fff1098:	1fff1090 1fff1090 1fff1098 1fff1098     ................
1fff10a8:	1fff10a0 1fff10a0 1fff10a8 1fff10a8     ................
1fff10b8:	1fff10b0 1fff10b0 1fff10b8 1fff10b8     ................
1fff10c8:	1fff10c0 1fff10c0 1fff10c8 1fff10c8     ................
1fff10d8:	1fff10d0 1fff10d0 1fff10d8 1fff10d8     ................
1fff10e8:	1fff10e0 1fff10e0 1fff10e8 1fff10e8     ................
1fff10f8:	1fff10f0 1fff10f0 1fff10f8 1fff10f8     ................
1fff1108:	1fff1100 1fff1100 1fff1108 1fff1108     ................
1fff1118:	1fff1110 1fff1110 1fff1118 1fff1118     ................
1fff1128:	1fff1120 1fff1120 1fff1128 1fff1128      ... ...(...(...
1fff1138:	1fff1130 1fff1130 1fff1138 1fff1138     0...0...8...8...
1fff1148:	1fff1140 1fff1140 1fff1148 1fff1148     @...@...H...H...
1fff1158:	1fff1150 1fff1150 1fff1158 1fff1158     P...P...X...X...
1fff1168:	1fff1160 1fff1160 1fff1168 1fff1168     `...`...h...h...
1fff1178:	1fff1170 1fff1170 1fff1178 1fff1178     p...p...x...x...
1fff1188:	1fff1180 1fff1180 1fff1188 1fff1188     ................
1fff1198:	1fff1190 1fff1190 1fff1198 1fff1198     ................
1fff11a8:	1fff11a0 1fff11a0 1fff11a8 1fff11a8     ................
1fff11b8:	1fff11b0 1fff11b0 1fff11b8 1fff11b8     ................
1fff11c8:	1fff11c0 1fff11c0 1fff11c8 1fff11c8     ................
1fff11d8:	1fff11d0 1fff11d0 1fff11d8 1fff11d8     ................
1fff11e8:	1fff11e0 1fff11e0 1fff11e8 1fff11e8     ................
1fff11f8:	1fff11f0 1fff11f0 1fff11f8 1fff11f8     ................
1fff1208:	1fff1200 1fff1200 1fff1208 1fff1208     ................
1fff1218:	1fff1210 1fff1210 1fff1218 1fff1218     ................
1fff1228:	1fff1220 1fff1220 1fff1228 1fff1228      ... ...(...(...
1fff1238:	1fff1230 1fff1230 1fff1238 1fff1238     0...0...8...8...
1fff1248:	1fff1240 1fff1240 1fff1248 1fff1248     @...@...H...H...
1fff1258:	1fff1250 1fff1250 1fff1258 1fff1258     P...P...X...X...
1fff1268:	1fff1260 1fff1260 1fff1268 1fff1268     `...`...h...h...
1fff1278:	1fff1270 1fff1270 1fff1278 1fff1278     p...p...x...x...
1fff1288:	1fff1280 1fff1280 1fff1288 1fff1288     ................
1fff1298:	1fff1290 1fff1290 1fff1298 1fff1298     ................
1fff12a8:	1fff12a0 1fff12a0 1fff12a8 1fff12a8     ................
1fff12b8:	1fff12b0 1fff12b0 1fff12b8 1fff12b8     ................
1fff12c8:	1fff12c0 1fff12c0 1fff12c8 1fff12c8     ................
1fff12d8:	1fff12d0 1fff12d0 1fff12d8 1fff12d8     ................
1fff12e8:	1fff12e0 1fff12e0 1fff12e8 1fff12e8     ................
1fff12f8:	1fff12f0 1fff12f0 1fff12f8 1fff12f8     ................
1fff1308:	1fff1300 1fff1300 1fff1308 1fff1308     ................
1fff1318:	1fff1310 1fff1310 1fff1318 1fff1318     ................

1fff1328 <__malloc_sbrk_base>:
1fff1328:	ffffffff                                ....

1fff132c <__malloc_trim_threshold>:
1fff132c:	00020000                                ....

1fff1330 <__sglue>:
1fff1330:	00000000 00000003 1fff7c44              ........D|..

1fff133c <__global_locale>:
1fff133c:	00000043 00000000 00000000 00000000     C...............
	...
1fff135c:	00000043 00000000 00000000 00000000     C...............
	...
1fff137c:	00000043 00000000 00000000 00000000     C...............
	...
1fff139c:	00000043 00000000 00000000 00000000     C...............
	...
1fff13bc:	00000043 00000000 00000000 00000000     C...............
	...
1fff13dc:	00000043 00000000 00000000 00000000     C...............
	...
1fff13fc:	00000043 00000000 00000000 00000000     C...............
	...
1fff141c:	0000cbd5 0000c431 00000000 00012284     ....1........"..
1fff142c:	0001182c 000125ac 000125ac 000125ac     ,....%...%...%..
1fff143c:	000125ac 000125ac 000125ac 000125ac     .%...%...%...%..
1fff144c:	000125ac 000125ac ffffffff ffffffff     .%...%..........
1fff145c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
1fff1484:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

1fff14a8 <_impure_data>:
1fff14a8:	00000000 1fff7c44 1fff7cac 1fff7d14     ....D|...|...}..
	...
1fff1540:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
1fff1550:	0005deec 0000000b 00000000 00000000     ................
	...

1fff15c8 <_impure_ptr>:
1fff15c8:	1fff14a8                                ....

1fff15cc <__atexit_recursive_mutex>:
1fff15cc:	1fff7d84                                .}..
